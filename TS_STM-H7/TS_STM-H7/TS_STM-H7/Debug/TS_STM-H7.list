
TS_STM-H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016740  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  08016a10  08016a10  00017a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017290  08017290  00018290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017298  08017298  00018298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801729c  0801729c  0001829c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000270  24000000  080172a0  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004c04  24000270  08017510  00019270  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004e74  08017510  00019e74  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00019270  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029088  00000000  00000000  0001929e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056a9  00000000  00000000  00042326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f20  00000000  00000000  000479d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017f9  00000000  00000000  000498f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a558  00000000  00000000  0004b0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f843  00000000  00000000  00085641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001589dc  00000000  00000000  000b4e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020d860  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008ebc  00000000  00000000  0020d8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  00216760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000270 	.word	0x24000270
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080169f8 	.word	0x080169f8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000274 	.word	0x24000274
 800030c:	080169f8 	.word	0x080169f8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006ba:	4804      	ldr	r0, [pc, #16]	@ (80006cc <SELECT+0x1c>)
 80006bc:	f004 ff36 	bl	800552c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f002 fa1d 	bl	8002b00 <HAL_Delay>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	58020400 	.word	0x58020400

080006d0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006da:	4804      	ldr	r0, [pc, #16]	@ (80006ec <DESELECT+0x1c>)
 80006dc:	f004 ff26 	bl	800552c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80006e0:	2001      	movs	r0, #1
 80006e2:	f002 fa0d 	bl	8002b00 <HAL_Delay>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	58020400 	.word	0x58020400

080006f0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006fa:	bf00      	nop
 80006fc:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <SPI_TxByte+0x30>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	2b02      	cmp	r3, #2
 8000708:	d1f8      	bne.n	80006fc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800070a:	1df9      	adds	r1, r7, #7
 800070c:	2364      	movs	r3, #100	@ 0x64
 800070e:	2201      	movs	r2, #1
 8000710:	4803      	ldr	r0, [pc, #12]	@ (8000720 <SPI_TxByte+0x30>)
 8000712:	f009 f873 	bl	80097fc <HAL_SPI_Transmit>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	24000294 	.word	0x24000294

08000724 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000730:	bf00      	nop
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <SPI_TxBuffer+0x30>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	f003 0302 	and.w	r3, r3, #2
 800073c:	2b02      	cmp	r3, #2
 800073e:	d1f8      	bne.n	8000732 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000740:	887a      	ldrh	r2, [r7, #2]
 8000742:	2364      	movs	r3, #100	@ 0x64
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	4803      	ldr	r0, [pc, #12]	@ (8000754 <SPI_TxBuffer+0x30>)
 8000748:	f009 f858 	bl	80097fc <HAL_SPI_Transmit>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	24000294 	.word	0x24000294

08000758 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800075e:	23ff      	movs	r3, #255	@ 0xff
 8000760:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000762:	bf00      	nop
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <SPI_RxByte+0x34>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	2b02      	cmp	r3, #2
 8000770:	d1f8      	bne.n	8000764 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000772:	1dba      	adds	r2, r7, #6
 8000774:	1df9      	adds	r1, r7, #7
 8000776:	2364      	movs	r3, #100	@ 0x64
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2301      	movs	r3, #1
 800077c:	4803      	ldr	r0, [pc, #12]	@ (800078c <SPI_RxByte+0x34>)
 800077e:	f009 fa2b 	bl	8009bd8 <HAL_SPI_TransmitReceive>

  return data;
 8000782:	79bb      	ldrb	r3, [r7, #6]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	24000294 	.word	0x24000294

08000790 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000798:	f7ff ffde 	bl	8000758 <SPI_RxByte>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	701a      	strb	r2, [r3, #0]
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 80007b2:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <SD_ReadyWait+0x30>)
 80007b4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80007b8:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80007ba:	f7ff ffcd 	bl	8000758 <SPI_RxByte>
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2bff      	cmp	r3, #255	@ 0xff
 80007c6:	d003      	beq.n	80007d0 <SD_ReadyWait+0x24>
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <SD_ReadyWait+0x30>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1f4      	bne.n	80007ba <SD_ReadyWait+0xe>

  return res;
 80007d0:	79fb      	ldrb	r3, [r7, #7]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2400028e 	.word	0x2400028e

080007e0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80007e6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80007ea:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80007ec:	f7ff ff70 	bl	80006d0 <DESELECT>
  for(int i = 0; i < 10; i++)
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	e005      	b.n	8000802 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80007f6:	20ff      	movs	r0, #255	@ 0xff
 80007f8:	f7ff ff7a 	bl	80006f0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	3301      	adds	r3, #1
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	2b09      	cmp	r3, #9
 8000806:	ddf6      	ble.n	80007f6 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8000808:	f7ff ff52 	bl	80006b0 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800080c:	2340      	movs	r3, #64	@ 0x40
 800080e:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000820:	2395      	movs	r3, #149	@ 0x95
 8000822:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8000824:	463b      	mov	r3, r7
 8000826:	2106      	movs	r1, #6
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff7b 	bl	8000724 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800082e:	e002      	b.n	8000836 <SD_PowerOn+0x56>
  {
    cnt--;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3b01      	subs	r3, #1
 8000834:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000836:	f7ff ff8f 	bl	8000758 <SPI_RxByte>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d002      	beq.n	8000846 <SD_PowerOn+0x66>
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1f4      	bne.n	8000830 <SD_PowerOn+0x50>
  }

  DESELECT();
 8000846:	f7ff ff43 	bl	80006d0 <DESELECT>
  SPI_TxByte(0XFF);
 800084a:	20ff      	movs	r0, #255	@ 0xff
 800084c:	f7ff ff50 	bl	80006f0 <SPI_TxByte>

  PowerFlag = 1;
 8000850:	4b03      	ldr	r3, [pc, #12]	@ (8000860 <SD_PowerOn+0x80>)
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	24000291 	.word	0x24000291

08000864 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000868:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <SD_PowerOff+0x14>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	24000291 	.word	0x24000291

0800087c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000880:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <SD_CheckPower+0x14>)
 8000882:	781b      	ldrb	r3, [r3, #0]
}
 8000884:	4618      	mov	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	24000291 	.word	0x24000291

08000894 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <SD_RxDataBlock+0x58>)
 80008a0:	22c8      	movs	r2, #200	@ 0xc8
 80008a2:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80008a4:	f7ff ff58 	bl	8000758 <SPI_RxByte>
 80008a8:	4603      	mov	r3, r0
 80008aa:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	2bff      	cmp	r3, #255	@ 0xff
 80008b0:	d103      	bne.n	80008ba <SD_RxDataBlock+0x26>
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <SD_RxDataBlock+0x58>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f4      	bne.n	80008a4 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80008be:	d001      	beq.n	80008c4 <SD_RxDataBlock+0x30>
 80008c0:	2300      	movs	r3, #0
 80008c2:	e00f      	b.n	80008e4 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ff60 	bl	8000790 <SPI_RxBytePtr>
  } while(len--);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	1e5a      	subs	r2, r3, #1
 80008d4:	603a      	str	r2, [r7, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1f4      	bne.n	80008c4 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80008da:	f7ff ff3d 	bl	8000758 <SPI_RxByte>
  SPI_RxByte();
 80008de:	f7ff ff3b 	bl	8000758 <SPI_RxByte>

  return TRUE;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2400028c 	.word	0x2400028c

080008f0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000900:	f7ff ff54 	bl	80007ac <SD_ReadyWait>
 8000904:	4603      	mov	r3, r0
 8000906:	2bff      	cmp	r3, #255	@ 0xff
 8000908:	d001      	beq.n	800090e <SD_TxDataBlock+0x1e>
 800090a:	2300      	movs	r3, #0
 800090c:	e02f      	b.n	800096e <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 800090e:	78fb      	ldrb	r3, [r7, #3]
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff feed 	bl	80006f0 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000916:	78fb      	ldrb	r3, [r7, #3]
 8000918:	2bfd      	cmp	r3, #253	@ 0xfd
 800091a:	d020      	beq.n	800095e <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800091c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff feff 	bl	8000724 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8000926:	f7ff ff17 	bl	8000758 <SPI_RxByte>
    SPI_RxByte();
 800092a:	f7ff ff15 	bl	8000758 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 800092e:	e00b      	b.n	8000948 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000930:	f7ff ff12 	bl	8000758 <SPI_RxByte>
 8000934:	4603      	mov	r3, r0
 8000936:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	f003 031f 	and.w	r3, r3, #31
 800093e:	2b05      	cmp	r3, #5
 8000940:	d006      	beq.n	8000950 <SD_TxDataBlock+0x60>
      i++;
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	3301      	adds	r3, #1
 8000946:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000948:	7bbb      	ldrb	r3, [r7, #14]
 800094a:	2b40      	cmp	r3, #64	@ 0x40
 800094c:	d9f0      	bls.n	8000930 <SD_TxDataBlock+0x40>
 800094e:	e000      	b.n	8000952 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000950:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8000952:	bf00      	nop
 8000954:	f7ff ff00 	bl	8000758 <SPI_RxByte>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d0fa      	beq.n	8000954 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	f003 031f 	and.w	r3, r3, #31
 8000964:	2b05      	cmp	r3, #5
 8000966:	d101      	bne.n	800096c <SD_TxDataBlock+0x7c>
 8000968:	2301      	movs	r3, #1
 800096a:	e000      	b.n	800096e <SD_TxDataBlock+0x7e>

  return FALSE;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b084      	sub	sp, #16
 800097a:	af00      	add	r7, sp, #0
 800097c:	4603      	mov	r3, r0
 800097e:	6039      	str	r1, [r7, #0]
 8000980:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000982:	f7ff ff13 	bl	80007ac <SD_ReadyWait>
 8000986:	4603      	mov	r3, r0
 8000988:	2bff      	cmp	r3, #255	@ 0xff
 800098a:	d001      	beq.n	8000990 <SD_SendCmd+0x1a>
 800098c:	23ff      	movs	r3, #255	@ 0xff
 800098e:	e042      	b.n	8000a16 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff feac 	bl	80006f0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	0e1b      	lsrs	r3, r3, #24
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fea6 	bl	80006f0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	0c1b      	lsrs	r3, r3, #16
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fea0 	bl	80006f0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	0a1b      	lsrs	r3, r3, #8
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fe9a 	bl	80006f0 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fe95 	bl	80006f0 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b40      	cmp	r3, #64	@ 0x40
 80009ca:	d102      	bne.n	80009d2 <SD_SendCmd+0x5c>
 80009cc:	2395      	movs	r3, #149	@ 0x95
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	e007      	b.n	80009e2 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b48      	cmp	r3, #72	@ 0x48
 80009d6:	d102      	bne.n	80009de <SD_SendCmd+0x68>
 80009d8:	2387      	movs	r3, #135	@ 0x87
 80009da:	73fb      	strb	r3, [r7, #15]
 80009dc:	e001      	b.n	80009e2 <SD_SendCmd+0x6c>
  else crc = 1;
 80009de:	2301      	movs	r3, #1
 80009e0:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fe83 	bl	80006f0 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2b4c      	cmp	r3, #76	@ 0x4c
 80009ee:	d101      	bne.n	80009f4 <SD_SendCmd+0x7e>
 80009f0:	f7ff feb2 	bl	8000758 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80009f4:	230a      	movs	r3, #10
 80009f6:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80009f8:	f7ff feae 	bl	8000758 <SPI_RxByte>
 80009fc:	4603      	mov	r3, r0
 80009fe:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000a00:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	da05      	bge.n	8000a14 <SD_SendCmd+0x9e>
 8000a08:	7bbb      	ldrb	r3, [r7, #14]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	73bb      	strb	r3, [r7, #14]
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1f1      	bne.n	80009f8 <SD_SendCmd+0x82>

  return res;
 8000a14:	7b7b      	ldrb	r3, [r7, #13]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SD_disk_initialize+0x14>
 8000a30:	2301      	movs	r3, #1
 8000a32:	e0d1      	b.n	8000bd8 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000a34:	4b6a      	ldr	r3, [pc, #424]	@ (8000be0 <SD_disk_initialize+0x1c0>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <SD_disk_initialize+0x2a>
 8000a42:	4b67      	ldr	r3, [pc, #412]	@ (8000be0 <SD_disk_initialize+0x1c0>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	e0c6      	b.n	8000bd8 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000a4a:	f7ff fec9 	bl	80007e0 <SD_PowerOn>

  /* slave select */
  SELECT();
 8000a4e:	f7ff fe2f 	bl	80006b0 <SELECT>

  /* check disk type */
  type = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000a56:	2100      	movs	r1, #0
 8000a58:	2040      	movs	r0, #64	@ 0x40
 8000a5a:	f7ff ff8c 	bl	8000976 <SD_SendCmd>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	f040 80a1 	bne.w	8000ba8 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000a66:	4b5f      	ldr	r3, [pc, #380]	@ (8000be4 <SD_disk_initialize+0x1c4>)
 8000a68:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a6c:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000a6e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000a72:	2048      	movs	r0, #72	@ 0x48
 8000a74:	f7ff ff7f 	bl	8000976 <SD_SendCmd>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d155      	bne.n	8000b2a <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000a7e:	2300      	movs	r3, #0
 8000a80:	73fb      	strb	r3, [r7, #15]
 8000a82:	e00c      	b.n	8000a9e <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000a84:	7bfc      	ldrb	r4, [r7, #15]
 8000a86:	f7ff fe67 	bl	8000758 <SPI_RxByte>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	f104 0310 	add.w	r3, r4, #16
 8000a92:	443b      	add	r3, r7
 8000a94:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	d9ef      	bls.n	8000a84 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000aa4:	7abb      	ldrb	r3, [r7, #10]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d17e      	bne.n	8000ba8 <SD_disk_initialize+0x188>
 8000aaa:	7afb      	ldrb	r3, [r7, #11]
 8000aac:	2baa      	cmp	r3, #170	@ 0xaa
 8000aae:	d17b      	bne.n	8000ba8 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2077      	movs	r0, #119	@ 0x77
 8000ab4:	f7ff ff5f 	bl	8000976 <SD_SendCmd>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d807      	bhi.n	8000ace <SD_disk_initialize+0xae>
 8000abe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000ac2:	2069      	movs	r0, #105	@ 0x69
 8000ac4:	f7ff ff57 	bl	8000976 <SD_SendCmd>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d004      	beq.n	8000ad8 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000ace:	4b45      	ldr	r3, [pc, #276]	@ (8000be4 <SD_disk_initialize+0x1c4>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1ec      	bne.n	8000ab0 <SD_disk_initialize+0x90>
 8000ad6:	e000      	b.n	8000ada <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000ad8:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000ada:	4b42      	ldr	r3, [pc, #264]	@ (8000be4 <SD_disk_initialize+0x1c4>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d062      	beq.n	8000ba8 <SD_disk_initialize+0x188>
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	207a      	movs	r0, #122	@ 0x7a
 8000ae6:	f7ff ff46 	bl	8000976 <SD_SendCmd>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d15b      	bne.n	8000ba8 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	e00c      	b.n	8000b10 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8000af6:	7bfc      	ldrb	r4, [r7, #15]
 8000af8:	f7ff fe2e 	bl	8000758 <SPI_RxByte>
 8000afc:	4603      	mov	r3, r0
 8000afe:	461a      	mov	r2, r3
 8000b00:	f104 0310 	add.w	r3, r4, #16
 8000b04:	443b      	add	r3, r7
 8000b06:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	d9ef      	bls.n	8000af6 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000b16:	7a3b      	ldrb	r3, [r7, #8]
 8000b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SD_disk_initialize+0x104>
 8000b20:	230c      	movs	r3, #12
 8000b22:	e000      	b.n	8000b26 <SD_disk_initialize+0x106>
 8000b24:	2304      	movs	r3, #4
 8000b26:	73bb      	strb	r3, [r7, #14]
 8000b28:	e03e      	b.n	8000ba8 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2077      	movs	r0, #119	@ 0x77
 8000b2e:	f7ff ff22 	bl	8000976 <SD_SendCmd>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d808      	bhi.n	8000b4a <SD_disk_initialize+0x12a>
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2069      	movs	r0, #105	@ 0x69
 8000b3c:	f7ff ff1b 	bl	8000976 <SD_SendCmd>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d801      	bhi.n	8000b4a <SD_disk_initialize+0x12a>
 8000b46:	2302      	movs	r3, #2
 8000b48:	e000      	b.n	8000b4c <SD_disk_initialize+0x12c>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8000b4e:	7bbb      	ldrb	r3, [r7, #14]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d10e      	bne.n	8000b72 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000b54:	2100      	movs	r1, #0
 8000b56:	2077      	movs	r0, #119	@ 0x77
 8000b58:	f7ff ff0d 	bl	8000976 <SD_SendCmd>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d80e      	bhi.n	8000b80 <SD_disk_initialize+0x160>
 8000b62:	2100      	movs	r1, #0
 8000b64:	2069      	movs	r0, #105	@ 0x69
 8000b66:	f7ff ff06 	bl	8000976 <SD_SendCmd>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d107      	bne.n	8000b80 <SD_disk_initialize+0x160>
 8000b70:	e00c      	b.n	8000b8c <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000b72:	2100      	movs	r1, #0
 8000b74:	2041      	movs	r0, #65	@ 0x41
 8000b76:	f7ff fefe 	bl	8000976 <SD_SendCmd>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d004      	beq.n	8000b8a <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8000b80:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <SD_disk_initialize+0x1c4>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1e2      	bne.n	8000b4e <SD_disk_initialize+0x12e>
 8000b88:	e000      	b.n	8000b8c <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000b8a:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000b8c:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <SD_disk_initialize+0x1c4>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d007      	beq.n	8000ba4 <SD_disk_initialize+0x184>
 8000b94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b98:	2050      	movs	r0, #80	@ 0x50
 8000b9a:	f7ff feec 	bl	8000976 <SD_SendCmd>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SD_disk_initialize+0x188>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8000ba8:	4a0f      	ldr	r2, [pc, #60]	@ (8000be8 <SD_disk_initialize+0x1c8>)
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8000bae:	f7ff fd8f 	bl	80006d0 <DESELECT>
  SPI_RxByte();
 8000bb2:	f7ff fdd1 	bl	8000758 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 8000bb6:	7bbb      	ldrb	r3, [r7, #14]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d008      	beq.n	8000bce <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <SD_disk_initialize+0x1c0>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	f023 0301 	bic.w	r3, r3, #1
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <SD_disk_initialize+0x1c0>)
 8000bca:	701a      	strb	r2, [r3, #0]
 8000bcc:	e001      	b.n	8000bd2 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000bce:	f7ff fe49 	bl	8000864 <SD_PowerOff>
  }

  return Stat;
 8000bd2:	4b03      	ldr	r3, [pc, #12]	@ (8000be0 <SD_disk_initialize+0x1c0>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b2db      	uxtb	r3, r3
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd90      	pop	{r4, r7, pc}
 8000be0:	24000000 	.word	0x24000000
 8000be4:	2400028c 	.word	0x2400028c
 8000be8:	24000290 	.word	0x24000290

08000bec <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SD_disk_status+0x14>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e002      	b.n	8000c06 <SD_disk_status+0x1a>
  return Stat;
 8000c00:	4b04      	ldr	r3, [pc, #16]	@ (8000c14 <SD_disk_status+0x28>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b2db      	uxtb	r3, r3
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	24000000 	.word	0x24000000

08000c18 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	4603      	mov	r3, r0
 8000c26:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <SD_disk_read+0x1c>
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <SD_disk_read+0x20>
 8000c34:	2304      	movs	r3, #4
 8000c36:	e051      	b.n	8000cdc <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce4 <SD_disk_read+0xcc>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SD_disk_read+0x32>
 8000c46:	2303      	movs	r3, #3
 8000c48:	e048      	b.n	8000cdc <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000c4a:	4b27      	ldr	r3, [pc, #156]	@ (8000ce8 <SD_disk_read+0xd0>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d102      	bne.n	8000c5c <SD_disk_read+0x44>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	025b      	lsls	r3, r3, #9
 8000c5a:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c5c:	f7ff fd28 	bl	80006b0 <SELECT>

  if (count == 1)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d111      	bne.n	8000c8a <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	2051      	movs	r0, #81	@ 0x51
 8000c6a:	f7ff fe84 	bl	8000976 <SD_SendCmd>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d129      	bne.n	8000cc8 <SD_disk_read+0xb0>
 8000c74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c78:	68b8      	ldr	r0, [r7, #8]
 8000c7a:	f7ff fe0b 	bl	8000894 <SD_RxDataBlock>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d021      	beq.n	8000cc8 <SD_disk_read+0xb0>
 8000c84:	2300      	movs	r3, #0
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	e01e      	b.n	8000cc8 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	2052      	movs	r0, #82	@ 0x52
 8000c8e:	f7ff fe72 	bl	8000976 <SD_SendCmd>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d117      	bne.n	8000cc8 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000c98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c9c:	68b8      	ldr	r0, [r7, #8]
 8000c9e:	f7ff fdf9 	bl	8000894 <SD_RxDataBlock>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00a      	beq.n	8000cbe <SD_disk_read+0xa6>
        buff += 512;
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000cae:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1ed      	bne.n	8000c98 <SD_disk_read+0x80>
 8000cbc:	e000      	b.n	8000cc0 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000cbe:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	204c      	movs	r0, #76	@ 0x4c
 8000cc4:	f7ff fe57 	bl	8000976 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8000cc8:	f7ff fd02 	bl	80006d0 <DESELECT>
  SPI_RxByte();
 8000ccc:	f7ff fd44 	bl	8000758 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bf14      	ite	ne
 8000cd6:	2301      	movne	r3, #1
 8000cd8:	2300      	moveq	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	24000000 	.word	0x24000000
 8000ce8:	24000290 	.word	0x24000290

08000cec <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <SD_disk_write+0x1c>
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <SD_disk_write+0x20>
 8000d08:	2304      	movs	r3, #4
 8000d0a:	e06b      	b.n	8000de4 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d0c:	4b37      	ldr	r3, [pc, #220]	@ (8000dec <SD_disk_write+0x100>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SD_disk_write+0x32>
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e062      	b.n	8000de4 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8000d1e:	4b33      	ldr	r3, [pc, #204]	@ (8000dec <SD_disk_write+0x100>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <SD_disk_write+0x44>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e059      	b.n	8000de4 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000d30:	4b2f      	ldr	r3, [pc, #188]	@ (8000df0 <SD_disk_write+0x104>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <SD_disk_write+0x56>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	025b      	lsls	r3, r3, #9
 8000d40:	607b      	str	r3, [r7, #4]

  SELECT();
 8000d42:	f7ff fcb5 	bl	80006b0 <SELECT>

  if (count == 1)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d110      	bne.n	8000d6e <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	2058      	movs	r0, #88	@ 0x58
 8000d50:	f7ff fe11 	bl	8000976 <SD_SendCmd>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d13a      	bne.n	8000dd0 <SD_disk_write+0xe4>
 8000d5a:	21fe      	movs	r1, #254	@ 0xfe
 8000d5c:	68b8      	ldr	r0, [r7, #8]
 8000d5e:	f7ff fdc7 	bl	80008f0 <SD_TxDataBlock>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d033      	beq.n	8000dd0 <SD_disk_write+0xe4>
      count = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	e030      	b.n	8000dd0 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8000d6e:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <SD_disk_write+0x104>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d007      	beq.n	8000d8a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2077      	movs	r0, #119	@ 0x77
 8000d7e:	f7ff fdfa 	bl	8000976 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000d82:	6839      	ldr	r1, [r7, #0]
 8000d84:	2057      	movs	r0, #87	@ 0x57
 8000d86:	f7ff fdf6 	bl	8000976 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	2059      	movs	r0, #89	@ 0x59
 8000d8e:	f7ff fdf2 	bl	8000976 <SD_SendCmd>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d11b      	bne.n	8000dd0 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d98:	21fc      	movs	r1, #252	@ 0xfc
 8000d9a:	68b8      	ldr	r0, [r7, #8]
 8000d9c:	f7ff fda8 	bl	80008f0 <SD_TxDataBlock>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00a      	beq.n	8000dbc <SD_disk_write+0xd0>
        buff += 512;
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000dac:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1ee      	bne.n	8000d98 <SD_disk_write+0xac>
 8000dba:	e000      	b.n	8000dbe <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000dbc:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8000dbe:	21fd      	movs	r1, #253	@ 0xfd
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff fd95 	bl	80008f0 <SD_TxDataBlock>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <SD_disk_write+0xe4>
      {
        count = 1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8000dd0:	f7ff fc7e 	bl	80006d0 <DESELECT>
  SPI_RxByte();
 8000dd4:	f7ff fcc0 	bl	8000758 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	bf14      	ite	ne
 8000dde:	2301      	movne	r3, #1
 8000de0:	2300      	moveq	r3, #0
 8000de2:	b2db      	uxtb	r3, r3
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	24000000 	.word	0x24000000
 8000df0:	24000290 	.word	0x24000290

08000df4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b08b      	sub	sp, #44	@ 0x2c
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	603a      	str	r2, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	460b      	mov	r3, r1
 8000e02:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SD_disk_ioctl+0x1e>
 8000e0e:	2304      	movs	r3, #4
 8000e10:	e113      	b.n	800103a <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8000e18:	79bb      	ldrb	r3, [r7, #6]
 8000e1a:	2b05      	cmp	r3, #5
 8000e1c:	d124      	bne.n	8000e68 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8000e1e:	6a3b      	ldr	r3, [r7, #32]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d012      	beq.n	8000e4c <SD_disk_ioctl+0x58>
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	dc1a      	bgt.n	8000e60 <SD_disk_ioctl+0x6c>
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <SD_disk_ioctl+0x40>
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d006      	beq.n	8000e40 <SD_disk_ioctl+0x4c>
 8000e32:	e015      	b.n	8000e60 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8000e34:	f7ff fd16 	bl	8000864 <SD_PowerOff>
      res = RES_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000e3e:	e0fa      	b.n	8001036 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8000e40:	f7ff fcce 	bl	80007e0 <SD_PowerOn>
      res = RES_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000e4a:	e0f4      	b.n	8001036 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8000e4c:	6a3b      	ldr	r3, [r7, #32]
 8000e4e:	1c5c      	adds	r4, r3, #1
 8000e50:	f7ff fd14 	bl	800087c <SD_CheckPower>
 8000e54:	4603      	mov	r3, r0
 8000e56:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000e5e:	e0ea      	b.n	8001036 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8000e60:	2304      	movs	r3, #4
 8000e62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e66:	e0e6      	b.n	8001036 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e68:	4b76      	ldr	r3, [pc, #472]	@ (8001044 <SD_disk_ioctl+0x250>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SD_disk_ioctl+0x86>
 8000e76:	2303      	movs	r3, #3
 8000e78:	e0df      	b.n	800103a <SD_disk_ioctl+0x246>

    SELECT();
 8000e7a:	f7ff fc19 	bl	80006b0 <SELECT>

    switch (ctrl)
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
 8000e80:	2b0d      	cmp	r3, #13
 8000e82:	f200 80c9 	bhi.w	8001018 <SD_disk_ioctl+0x224>
 8000e86:	a201      	add	r2, pc, #4	@ (adr r2, 8000e8c <SD_disk_ioctl+0x98>)
 8000e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8c:	08000f83 	.word	0x08000f83
 8000e90:	08000ec5 	.word	0x08000ec5
 8000e94:	08000f73 	.word	0x08000f73
 8000e98:	08001019 	.word	0x08001019
 8000e9c:	08001019 	.word	0x08001019
 8000ea0:	08001019 	.word	0x08001019
 8000ea4:	08001019 	.word	0x08001019
 8000ea8:	08001019 	.word	0x08001019
 8000eac:	08001019 	.word	0x08001019
 8000eb0:	08001019 	.word	0x08001019
 8000eb4:	08001019 	.word	0x08001019
 8000eb8:	08000f95 	.word	0x08000f95
 8000ebc:	08000fb9 	.word	0x08000fb9
 8000ec0:	08000fdd 	.word	0x08000fdd
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2049      	movs	r0, #73	@ 0x49
 8000ec8:	f7ff fd55 	bl	8000976 <SD_SendCmd>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f040 80a6 	bne.w	8001020 <SD_disk_ioctl+0x22c>
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2110      	movs	r1, #16
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fcda 	bl	8000894 <SD_RxDataBlock>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 809c 	beq.w	8001020 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8000ee8:	7b3b      	ldrb	r3, [r7, #12]
 8000eea:	099b      	lsrs	r3, r3, #6
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d10d      	bne.n	8000f0e <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000ef2:	7d7b      	ldrb	r3, [r7, #21]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	7d3b      	ldrb	r3, [r7, #20]
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	4413      	add	r3, r2
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	3301      	adds	r3, #1
 8000f02:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000f04:	8bfb      	ldrh	r3, [r7, #30]
 8000f06:	029a      	lsls	r2, r3, #10
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e02d      	b.n	8000f6a <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000f0e:	7c7b      	ldrb	r3, [r7, #17]
 8000f10:	f003 030f 	and.w	r3, r3, #15
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	7dbb      	ldrb	r3, [r7, #22]
 8000f18:	09db      	lsrs	r3, r3, #7
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	7d7b      	ldrb	r3, [r7, #21]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f003 0306 	and.w	r3, r3, #6
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	3302      	adds	r3, #2
 8000f32:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000f36:	7d3b      	ldrb	r3, [r7, #20]
 8000f38:	099b      	lsrs	r3, r3, #6
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	7cfb      	ldrb	r3, [r7, #19]
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	4413      	add	r3, r2
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	7cbb      	ldrb	r3, [r7, #18]
 8000f4a:	029b      	lsls	r3, r3, #10
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	4413      	add	r3, r2
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	3301      	adds	r3, #1
 8000f5a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000f5c:	8bfa      	ldrh	r2, [r7, #30]
 8000f5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f62:	3b09      	subs	r3, #9
 8000f64:	409a      	lsls	r2, r3
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000f70:	e056      	b.n	8001020 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f78:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000f80:	e055      	b.n	800102e <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000f82:	f7ff fc13 	bl	80007ac <SD_ReadyWait>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2bff      	cmp	r3, #255	@ 0xff
 8000f8a:	d14b      	bne.n	8001024 <SD_disk_ioctl+0x230>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000f92:	e047      	b.n	8001024 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f94:	2100      	movs	r1, #0
 8000f96:	2049      	movs	r0, #73	@ 0x49
 8000f98:	f7ff fced 	bl	8000976 <SD_SendCmd>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d142      	bne.n	8001028 <SD_disk_ioctl+0x234>
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	6a38      	ldr	r0, [r7, #32]
 8000fa6:	f7ff fc75 	bl	8000894 <SD_RxDataBlock>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d03b      	beq.n	8001028 <SD_disk_ioctl+0x234>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000fb6:	e037      	b.n	8001028 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000fb8:	2100      	movs	r1, #0
 8000fba:	204a      	movs	r0, #74	@ 0x4a
 8000fbc:	f7ff fcdb 	bl	8000976 <SD_SendCmd>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d132      	bne.n	800102c <SD_disk_ioctl+0x238>
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	6a38      	ldr	r0, [r7, #32]
 8000fca:	f7ff fc63 	bl	8000894 <SD_RxDataBlock>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d02b      	beq.n	800102c <SD_disk_ioctl+0x238>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000fda:	e027      	b.n	800102c <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	207a      	movs	r0, #122	@ 0x7a
 8000fe0:	f7ff fcc9 	bl	8000976 <SD_SendCmd>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d116      	bne.n	8001018 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000ff0:	e00b      	b.n	800100a <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8000ff2:	6a3c      	ldr	r4, [r7, #32]
 8000ff4:	1c63      	adds	r3, r4, #1
 8000ff6:	623b      	str	r3, [r7, #32]
 8000ff8:	f7ff fbae 	bl	8000758 <SPI_RxByte>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001000:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001004:	3301      	adds	r3, #1
 8001006:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800100a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800100e:	2b03      	cmp	r3, #3
 8001010:	d9ef      	bls.n	8000ff2 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8001018:	2304      	movs	r3, #4
 800101a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800101e:	e006      	b.n	800102e <SD_disk_ioctl+0x23a>
      break;
 8001020:	bf00      	nop
 8001022:	e004      	b.n	800102e <SD_disk_ioctl+0x23a>
      break;
 8001024:	bf00      	nop
 8001026:	e002      	b.n	800102e <SD_disk_ioctl+0x23a>
      break;
 8001028:	bf00      	nop
 800102a:	e000      	b.n	800102e <SD_disk_ioctl+0x23a>
      break;
 800102c:	bf00      	nop
    }

    DESELECT();
 800102e:	f7ff fb4f 	bl	80006d0 <DESELECT>
    SPI_RxByte();
 8001032:	f7ff fb91 	bl	8000758 <SPI_RxByte>
  }

  return res;
 8001036:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800103a:	4618      	mov	r0, r3
 800103c:	372c      	adds	r7, #44	@ 0x2c
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}
 8001042:	bf00      	nop
 8001044:	24000000 	.word	0x24000000

08001048 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800104c:	f3bf 8f4f 	dsb	sy
}
 8001050:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <__NVIC_SystemReset+0x24>)
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800105a:	4904      	ldr	r1, [pc, #16]	@ (800106c <__NVIC_SystemReset+0x24>)
 800105c:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <__NVIC_SystemReset+0x28>)
 800105e:	4313      	orrs	r3, r2
 8001060:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001062:	f3bf 8f4f 	dsb	sy
}
 8001066:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <__NVIC_SystemReset+0x20>
 800106c:	e000ed00 	.word	0xe000ed00
 8001070:	05fa0004 	.word	0x05fa0004

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001076:	b08d      	sub	sp, #52	@ 0x34
 8001078:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  ptr_uart_buffer = (uint8_t *)&uartBuffer;
 800107a:	4ba6      	ldr	r3, [pc, #664]	@ (8001314 <main+0x2a0>)
 800107c:	4aa6      	ldr	r2, [pc, #664]	@ (8001318 <main+0x2a4>)
 800107e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001080:	f001 fcac 	bl	80029dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001084:	f000 fa1a 	bl	80014bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001088:	f000 fbd2 	bl	8001830 <MX_GPIO_Init>
  MX_DMA_Init();
 800108c:	f000 fba0 	bl	80017d0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001090:	f000 fb52 	bl	8001738 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001094:	f00e f80c 	bl	800f0b0 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001098:	f000 fa82 	bl	80015a0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800109c:	f000 fafe 	bl	800169c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80010a0:	f013 f906 	bl	80142b0 <MX_USB_DEVICE_Init>
  MX_TIM16_Init();
 80010a4:	f000 fad2 	bl	800164c <MX_TIM16_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim16); //START TIMER
 80010a8:	489c      	ldr	r0, [pc, #624]	@ (800131c <main+0x2a8>)
 80010aa:	f009 fc29 	bl	800a900 <HAL_TIM_Base_Start>
  int num_file=0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
  int open_new_file=1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	623b      	str	r3, [r7, #32]
  int nuc_connection=1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	61fb      	str	r3, [r7, #28]
  int change_file=0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  int point_measured_per_file=0;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  int max_point_per_file=20000;
 80010c2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80010c6:	613b      	str	r3, [r7, #16]
  //int max_point_per_file=20000; // 107 byte a stream -- 20000x107= 2Mbyte per 66min (20000x0,2 sec = 66 min)
  memset((uint8_t *)&uartBuffer,1,UART_BUFFER_SIZE);
 80010c8:	2240      	movs	r2, #64	@ 0x40
 80010ca:	2101      	movs	r1, #1
 80010cc:	4892      	ldr	r0, [pc, #584]	@ (8001318 <main+0x2a4>)
 80010ce:	f014 f8cf 	bl	8015270 <memset>
  //int timer_time_1;
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80010d2:	2102      	movs	r1, #2
 80010d4:	4892      	ldr	r0, [pc, #584]	@ (8001320 <main+0x2ac>)
 80010d6:	f004 fa42 	bl	800555e <HAL_GPIO_TogglePin>
  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET); //Panel Green LED
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET); //GND
 80010da:	2200      	movs	r2, #0
 80010dc:	2140      	movs	r1, #64	@ 0x40
 80010de:	4891      	ldr	r0, [pc, #580]	@ (8001324 <main+0x2b0>)
 80010e0:	f004 fa24 	bl	800552c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET); //Panel Yellow LED
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET); //GND
 80010e4:	2200      	movs	r2, #0
 80010e6:	2110      	movs	r1, #16
 80010e8:	488e      	ldr	r0, [pc, #568]	@ (8001324 <main+0x2b0>)
 80010ea:	f004 fa1f 	bl	800552c <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (nuc_connection==1){
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d10c      	bne.n	800110e <main+0x9a>
		  HAL_Delay(1000);
 80010f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010f8:	f001 fd02 	bl	8002b00 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET); //Panel Green LED
 80010fc:	2201      	movs	r2, #1
 80010fe:	2180      	movs	r1, #128	@ 0x80
 8001100:	4888      	ldr	r0, [pc, #544]	@ (8001324 <main+0x2b0>)
 8001102:	f004 fa13 	bl	800552c <HAL_GPIO_WritePin>
		  get_file_name();
 8001106:	f000 fdc9 	bl	8001c9c <get_file_name>

		  //get_file_name( rx_usb);
		  nuc_connection=0;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
	  }
	  if (open_new_file==1){
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d147      	bne.n	80011a4 <main+0x130>
		  memset(nome_file_txt,0,size_rx_usb);
 8001114:	4b84      	ldr	r3, [pc, #528]	@ (8001328 <main+0x2b4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	2100      	movs	r1, #0
 800111c:	4883      	ldr	r0, [pc, #524]	@ (800132c <main+0x2b8>)
 800111e:	f014 f8a7 	bl	8015270 <memset>
		  //k=string(num_file);
		  //sprintf(nome_file, "var%d", numero_progressivo);
		  //printf(k,"%i",num_file);
		  sprintf(progressive_number, "_%d", num_file);
 8001122:	4b83      	ldr	r3, [pc, #524]	@ (8001330 <main+0x2bc>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001128:	4982      	ldr	r1, [pc, #520]	@ (8001334 <main+0x2c0>)
 800112a:	4618      	mov	r0, r3
 800112c:	f013 ff7c 	bl	8015028 <siprintf>
		  strcat(progressive_number,".txt");
 8001130:	4b7f      	ldr	r3, [pc, #508]	@ (8001330 <main+0x2bc>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461c      	mov	r4, r3
 8001136:	4620      	mov	r0, r4
 8001138:	f7ff f8ea 	bl	8000310 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	4423      	add	r3, r4
 8001140:	4a7d      	ldr	r2, [pc, #500]	@ (8001338 <main+0x2c4>)
 8001142:	6810      	ldr	r0, [r2, #0]
 8001144:	6018      	str	r0, [r3, #0]
 8001146:	7912      	ldrb	r2, [r2, #4]
 8001148:	711a      	strb	r2, [r3, #4]
		  memcpy(nome_file_txt,nome_file, sizeof(nome_file));
 800114a:	4b78      	ldr	r3, [pc, #480]	@ (800132c <main+0x2b8>)
 800114c:	4a7b      	ldr	r2, [pc, #492]	@ (800133c <main+0x2c8>)
 800114e:	4614      	mov	r4, r2
 8001150:	461e      	mov	r6, r3
 8001152:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8001156:	4635      	mov	r5, r6
 8001158:	4623      	mov	r3, r4
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	6859      	ldr	r1, [r3, #4]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001164:	3410      	adds	r4, #16
 8001166:	3610      	adds	r6, #16
 8001168:	4564      	cmp	r4, ip
 800116a:	d1f4      	bne.n	8001156 <main+0xe2>
 800116c:	4632      	mov	r2, r6
 800116e:	4623      	mov	r3, r4
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	8013      	strh	r3, [r2, #0]
		  strcat(nome_file_txt,progressive_number);
 8001174:	4b6e      	ldr	r3, [pc, #440]	@ (8001330 <main+0x2bc>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	486c      	ldr	r0, [pc, #432]	@ (800132c <main+0x2b8>)
 800117c:	f014 f880 	bl	8015280 <strcat>
		  printf("\n nome file %s \r\n",nome_file_txt);
 8001180:	496a      	ldr	r1, [pc, #424]	@ (800132c <main+0x2b8>)
 8001182:	486f      	ldr	r0, [pc, #444]	@ (8001340 <main+0x2cc>)
 8001184:	f013 fee0 	bl	8014f48 <iprintf>
		  //strcat(nome_file,".txt");
		  process_init_SD_card();
 8001188:	f000 fd0c 	bl	8001ba4 <process_init_SD_card>
		  memset((uint8_t *)&rx_usb,0,size_rx_usb);
 800118c:	4b66      	ldr	r3, [pc, #408]	@ (8001328 <main+0x2b4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	2100      	movs	r1, #0
 8001194:	486b      	ldr	r0, [pc, #428]	@ (8001344 <main+0x2d0>)
 8001196:	f014 f86b 	bl	8015270 <memset>
		  num_file++;
 800119a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119c:	3301      	adds	r3, #1
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
		  open_new_file=0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
	  }


	  // Prova macchina a stati
	  switch (machine_state)
 80011a4:	4b68      	ldr	r3, [pc, #416]	@ (8001348 <main+0x2d4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d845      	bhi.n	800123a <main+0x1c6>
 80011ae:	a201      	add	r2, pc, #4	@ (adr r2, 80011b4 <main+0x140>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011d1 	.word	0x080011d1
 80011b8:	080011e3 	.word	0x080011e3
 80011bc:	080011eb 	.word	0x080011eb
 80011c0:	080011f3 	.word	0x080011f3
 80011c4:	0800120f 	.word	0x0800120f
 80011c8:	08001217 	.word	0x08001217
 80011cc:	08001233 	.word	0x08001233
	  	  {
	  	  case 1: // Search-Prism
	  	    {
	  	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2180      	movs	r1, #128	@ 0x80
 80011d4:	4853      	ldr	r0, [pc, #332]	@ (8001324 <main+0x2b0>)
 80011d6:	f004 f9a9 	bl	800552c <HAL_GPIO_WritePin>
				search_prism_flag=1;
 80011da:	4b5c      	ldr	r3, [pc, #368]	@ (800134c <main+0x2d8>)
 80011dc:	2201      	movs	r2, #1
 80011de:	601a      	str	r2, [r3, #0]
				break;
 80011e0:	e02b      	b.n	800123a <main+0x1c6>
	  		}
	  	  case 2: // Start distance (Non viene fatto)
			{
				start_distance_flag=1;
 80011e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001350 <main+0x2dc>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]
				break;
 80011e8:	e027      	b.n	800123a <main+0x1c6>
			}
	  	  case 3: // Get-Time-Stamp
			{
				get_time_stamp_flag=1;
 80011ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001354 <main+0x2e0>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
				break;
 80011f0:	e023      	b.n	800123a <main+0x1c6>
							}
	  	  case 4: //Start-Measure and Save Data
	  	  {
	  		    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2180      	movs	r1, #128	@ 0x80
 80011f6:	484b      	ldr	r0, [pc, #300]	@ (8001324 <main+0x2b0>)
 80011f8:	f004 f998 	bl	800552c <HAL_GPIO_WritePin>
	  		  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2120      	movs	r1, #32
 8001200:	4848      	ldr	r0, [pc, #288]	@ (8001324 <main+0x2b0>)
 8001202:	f004 f993 	bl	800552c <HAL_GPIO_WritePin>
				start_stream_flag=1;
 8001206:	4b54      	ldr	r3, [pc, #336]	@ (8001358 <main+0x2e4>)
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]
				break;
 800120c:	e015      	b.n	800123a <main+0x1c6>
	  	  }
	  	  case 5: //Change file
		  {
			  	change_file_flag=1;
 800120e:	4b53      	ldr	r3, [pc, #332]	@ (800135c <main+0x2e8>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]
				break;
 8001214:	e011      	b.n	800123a <main+0x1c6>
		  }
	  	  case 6: //Stop-Measure
		  {
			    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2120      	movs	r1, #32
 800121a:	4842      	ldr	r0, [pc, #264]	@ (8001324 <main+0x2b0>)
 800121c:	f004 f986 	bl	800552c <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, SET);
 8001220:	2201      	movs	r2, #1
 8001222:	2108      	movs	r1, #8
 8001224:	483f      	ldr	r0, [pc, #252]	@ (8001324 <main+0x2b0>)
 8001226:	f004 f981 	bl	800552c <HAL_GPIO_WritePin>
			    stop_measure_flag=1;
 800122a:	4b4d      	ldr	r3, [pc, #308]	@ (8001360 <main+0x2ec>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]
				break;
 8001230:	e003      	b.n	800123a <main+0x1c6>
		  }
	  	  case 7: //Stop-Measure
		  {
				measure_finished_flag=1;
 8001232:	4b4c      	ldr	r3, [pc, #304]	@ (8001364 <main+0x2f0>)
 8001234:	2201      	movs	r2, #1
 8001236:	601a      	str	r2, [r3, #0]
				break;
 8001238:	bf00      	nop
		  }
	  	  }


	  if (search_prism_flag==1){
 800123a:	4b44      	ldr	r3, [pc, #272]	@ (800134c <main+0x2d8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d10a      	bne.n	8001258 <main+0x1e4>
		  search_prism(search_prism_flag);
 8001242:	4b42      	ldr	r3, [pc, #264]	@ (800134c <main+0x2d8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f001 f9ca 	bl	80025e0 <search_prism>
		  search_prism_flag=0;
 800124c:	4b3f      	ldr	r3, [pc, #252]	@ (800134c <main+0x2d8>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
		  machine_state=3;
 8001252:	4b3d      	ldr	r3, [pc, #244]	@ (8001348 <main+0x2d4>)
 8001254:	2203      	movs	r2, #3
 8001256:	601a      	str	r2, [r3, #0]
	  }
	  if (start_distance_flag==1){
 8001258:	4b3d      	ldr	r3, [pc, #244]	@ (8001350 <main+0x2dc>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d107      	bne.n	8001270 <main+0x1fc>
		  start_distance();
 8001260:	f001 fa30 	bl	80026c4 <start_distance>
		  start_distance_flag=0;
 8001264:	4b3a      	ldr	r3, [pc, #232]	@ (8001350 <main+0x2dc>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
		  machine_state=3;
 800126a:	4b37      	ldr	r3, [pc, #220]	@ (8001348 <main+0x2d4>)
 800126c:	2203      	movs	r2, #3
 800126e:	601a      	str	r2, [r3, #0]
	  	  }
	  if (get_time_stamp_flag==1){
 8001270:	4b38      	ldr	r3, [pc, #224]	@ (8001354 <main+0x2e0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d138      	bne.n	80012ea <main+0x276>
		  ForTime value= get_TS_time_stamp();
 8001278:	463b      	mov	r3, r7
 800127a:	4618      	mov	r0, r3
 800127c:	f001 fa62 	bl	8002744 <get_TS_time_stamp>
		  printf("Tempo di andata=%i  Tempo di ritorno= %i  delta_time=%i  tempo_rit_comp=%i \n" , value.a,value.b,value.c, value.d);
 8001280:	6839      	ldr	r1, [r7, #0]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b8      	ldr	r0, [r7, #8]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	4603      	mov	r3, r0
 800128c:	4836      	ldr	r0, [pc, #216]	@ (8001368 <main+0x2f4>)
 800128e:	f013 fe5b 	bl	8014f48 <iprintf>
		  //fputs("Tempo di andata= \n",&fil);
		  //fputs(value.a,&fil);
		  //fputs("\n Tempo di ritorno= \n",&fil);
		  //fputs(value.b,&fil);
		  stream_sd_card=(char *)time_stamp_TS_buffer;
 8001292:	4b36      	ldr	r3, [pc, #216]	@ (800136c <main+0x2f8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a36      	ldr	r2, [pc, #216]	@ (8001370 <main+0x2fc>)
 8001298:	6013      	str	r3, [r2, #0]
		  f_puts(stream_sd_card, &fil);
 800129a:	4b35      	ldr	r3, [pc, #212]	@ (8001370 <main+0x2fc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4935      	ldr	r1, [pc, #212]	@ (8001374 <main+0x300>)
 80012a0:	4618      	mov	r0, r3
 80012a2:	f012 febf 	bl	8014024 <f_puts>
		  strcat(complete_time_stamp,"\r\n");
 80012a6:	4b34      	ldr	r3, [pc, #208]	@ (8001378 <main+0x304>)
 80012a8:	681c      	ldr	r4, [r3, #0]
 80012aa:	4620      	mov	r0, r4
 80012ac:	f7ff f830 	bl	8000310 <strlen>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4423      	add	r3, r4
 80012b4:	4a31      	ldr	r2, [pc, #196]	@ (800137c <main+0x308>)
 80012b6:	8811      	ldrh	r1, [r2, #0]
 80012b8:	7892      	ldrb	r2, [r2, #2]
 80012ba:	8019      	strh	r1, [r3, #0]
 80012bc:	709a      	strb	r2, [r3, #2]
		  stream_sd_card=(char *)complete_time_stamp;
 80012be:	4b2e      	ldr	r3, [pc, #184]	@ (8001378 <main+0x304>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001370 <main+0x2fc>)
 80012c4:	6013      	str	r3, [r2, #0]
		  f_puts(stream_sd_card, &fil);
 80012c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001370 <main+0x2fc>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	492a      	ldr	r1, [pc, #168]	@ (8001374 <main+0x300>)
 80012cc:	4618      	mov	r0, r3
 80012ce:	f012 fea9 	bl	8014024 <f_puts>
		  get_time_stamp_flag=0;
 80012d2:	4b20      	ldr	r3, [pc, #128]	@ (8001354 <main+0x2e0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
		  stream_started_flag=0;
 80012d8:	4b29      	ldr	r3, [pc, #164]	@ (8001380 <main+0x30c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
		  f_close(&fil);
 80012de:	4825      	ldr	r0, [pc, #148]	@ (8001374 <main+0x300>)
 80012e0:	f012 fd4a 	bl	8013d78 <f_close>
		  machine_state=4;
 80012e4:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <main+0x2d4>)
 80012e6:	2204      	movs	r2, #4
 80012e8:	601a      	str	r2, [r3, #0]
		  //HAL_Delay(5000);
		  //f_close(&fil);
	  	  }
	  if (start_stream_flag==1){
 80012ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <main+0x2e4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	f040 8091 	bne.w	8001416 <main+0x3a2>
		   if (stream_started_flag==0){
 80012f4:	4b22      	ldr	r3, [pc, #136]	@ (8001380 <main+0x30c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d104      	bne.n	8001306 <main+0x292>
			   //HAL_Delay(5000);
			   start_measure();
 80012fc:	f001 fa96 	bl	800282c <start_measure>
			   stream_started_flag=1;
 8001300:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <main+0x30c>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]
		   }
		   //HAL_UART_Receive_IT(&huart1, (uint8_t *)&stream_buffer, 104);
		   //HAL_UART_Receive_DMA(&huart1, (uint8_t *)&stream_buffer, STREAM_SIZE);
		   //HAL_UART_Receive_DMA(&huart1, dma_buffer, STREAM_SIZE);
		   contatore_stream=0;
 8001306:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <main+0x310>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
		   point_measured_per_file=0;
 800130c:	2300      	movs	r3, #0
 800130e:	61bb      	str	r3, [r7, #24]
		   //HAL_UARTEx_ReceiveToIdle_DMA(&huart1, dma_buffer, STREAM_SIZE);
		   //HAL_UART_Receive_DMA(&huart1, (uint8_t *)&stream_buffer, STREAM_SIZE);
		   //HAL_UARTEx_GetRxEventType(&huart1);
		   //__HAL_DMA_DISABLE_IT();
		   while (start_stream_flag==1 && change_file==0){
 8001310:	e07a      	b.n	8001408 <main+0x394>
 8001312:	bf00      	nop
 8001314:	24002750 	.word	0x24002750
 8001318:	240026ac 	.word	0x240026ac
 800131c:	24000394 	.word	0x24000394
 8001320:	58021000 	.word	0x58021000
 8001324:	58020c00 	.word	0x58020c00
 8001328:	24000004 	.word	0x24000004
 800132c:	240026ec 	.word	0x240026ec
 8001330:	2400274c 	.word	0x2400274c
 8001334:	08016a14 	.word	0x08016a14
 8001338:	08016a18 	.word	0x08016a18
 800133c:	24002888 	.word	0x24002888
 8001340:	08016a20 	.word	0x08016a20
 8001344:	2400266c 	.word	0x2400266c
 8001348:	24000008 	.word	0x24000008
 800134c:	2400272c 	.word	0x2400272c
 8001350:	24002730 	.word	0x24002730
 8001354:	24002734 	.word	0x24002734
 8001358:	24002724 	.word	0x24002724
 800135c:	24002738 	.word	0x24002738
 8001360:	2400273c 	.word	0x2400273c
 8001364:	24002728 	.word	0x24002728
 8001368:	08016a34 	.word	0x08016a34
 800136c:	240028cc 	.word	0x240028cc
 8001370:	24002668 	.word	0x24002668
 8001374:	24001630 	.word	0x24001630
 8001378:	240028c4 	.word	0x240028c4
 800137c:	08016a84 	.word	0x08016a84
 8001380:	24002720 	.word	0x24002720
 8001384:	24002744 	.word	0x24002744
			   HAL_UARTEx_ReceiveToIdle_IT(&huart1, dma_buffer, STREAM_SIZE);
 8001388:	2296      	movs	r2, #150	@ 0x96
 800138a:	493f      	ldr	r1, [pc, #252]	@ (8001488 <main+0x414>)
 800138c:	483f      	ldr	r0, [pc, #252]	@ (800148c <main+0x418>)
 800138e:	f00c fa9c 	bl	800d8ca <HAL_UARTEx_ReceiveToIdle_IT>
			   if (__HAL_TIM_GET_COUNTER(&htim16) - timer_time_1 >= (uint16_t) 100){ // con 100  non funziona, con 101 ricevo troppi byte
					timer_time_1=__HAL_TIM_GET_COUNTER(&htim16);
					HAL_UART_AbortReceive_IT(&huart1);
			   	}
			    */
			   if (receive_dma_complete==1){
 8001392:	4b3f      	ldr	r3, [pc, #252]	@ (8001490 <main+0x41c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d104      	bne.n	80013a4 <main+0x330>
				   handle_complete_packet();
 800139a:	f000 fbbb 	bl	8001b14 <handle_complete_packet>
				   point_measured_per_file++;
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	3301      	adds	r3, #1
 80013a2:	61bb      	str	r3, [r7, #24]
			   }
			   HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80013a4:	2102      	movs	r1, #2
 80013a6:	483b      	ldr	r0, [pc, #236]	@ (8001494 <main+0x420>)
 80013a8:	f004 f8d9 	bl	800555e <HAL_GPIO_TogglePin>

			   	   	//if (__HAL_TIM_GET_COUNTER(&htim16) - timer_time_1 >= (uint16_t) 300  && HAL_UART_Receive_DMA(&huart1, (uint8_t *)&stream_buffer, STREAM_SIZE) != HAL_BUSY){

						//timer_time_1=__HAL_TIM_GET_COUNTER(&htim16);
			   	   //	}
					if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8)==0){
 80013ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013b0:	4839      	ldr	r0, [pc, #228]	@ (8001498 <main+0x424>)
 80013b2:	f004 f8a3 	bl	80054fc <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d10f      	bne.n	80013dc <main+0x368>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET); //G
 80013bc:	2200      	movs	r2, #0
 80013be:	2101      	movs	r1, #1
 80013c0:	4836      	ldr	r0, [pc, #216]	@ (800149c <main+0x428>)
 80013c2:	f004 f8b3 	bl	800552c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, RESET); //Y
 80013c6:	2200      	movs	r2, #0
 80013c8:	2102      	movs	r1, #2
 80013ca:	4832      	ldr	r0, [pc, #200]	@ (8001494 <main+0x420>)
 80013cc:	f004 f8ae 	bl	800552c <HAL_GPIO_WritePin>

						start_stream_flag=0;
 80013d0:	4b33      	ldr	r3, [pc, #204]	@ (80014a0 <main+0x42c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
						machine_state=6;
 80013d6:	4b33      	ldr	r3, [pc, #204]	@ (80014a4 <main+0x430>)
 80013d8:	2206      	movs	r2, #6
 80013da:	601a      	str	r2, [r3, #0]
					}
					// al momento non è implementata la logica cambio file ( non durerà tanto da superare 1GB di file)
					if (point_measured_per_file==max_point_per_file){
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d111      	bne.n	8001408 <main+0x394>
						point_measured_per_file=0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET); //G
 80013e8:	2200      	movs	r2, #0
 80013ea:	2101      	movs	r1, #1
 80013ec:	482b      	ldr	r0, [pc, #172]	@ (800149c <main+0x428>)
 80013ee:	f004 f89d 	bl	800552c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, RESET); //Y
 80013f2:	2200      	movs	r2, #0
 80013f4:	2102      	movs	r1, #2
 80013f6:	4827      	ldr	r0, [pc, #156]	@ (8001494 <main+0x420>)
 80013f8:	f004 f898 	bl	800552c <HAL_GPIO_WritePin>
						//change_file=1;
						//machine_state=5;
						start_stream_flag=0;
 80013fc:	4b28      	ldr	r3, [pc, #160]	@ (80014a0 <main+0x42c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
						machine_state=6;
 8001402:	4b28      	ldr	r3, [pc, #160]	@ (80014a4 <main+0x430>)
 8001404:	2206      	movs	r2, #6
 8001406:	601a      	str	r2, [r3, #0]
		   while (start_stream_flag==1 && change_file==0){
 8001408:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <main+0x42c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d102      	bne.n	8001416 <main+0x3a2>
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0b8      	beq.n	8001388 <main+0x314>
						//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
					}
				}
	  }
	  if (stop_measure_flag==1){
 8001416:	4b24      	ldr	r3, [pc, #144]	@ (80014a8 <main+0x434>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d116      	bne.n	800144c <main+0x3d8>
		  stop_measure();
 800141e:	f001 fa6d 	bl	80028fc <stop_measure>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET); //R
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001428:	481c      	ldr	r0, [pc, #112]	@ (800149c <main+0x428>)
 800142a:	f004 f87f 	bl	800552c <HAL_GPIO_WritePin>
		  printf("\nClosing file\r\n");
 800142e:	481f      	ldr	r0, [pc, #124]	@ (80014ac <main+0x438>)
 8001430:	f013 fdf2 	bl	8015018 <puts>
		  f_close(&fil); // close file.txt
 8001434:	481e      	ldr	r0, [pc, #120]	@ (80014b0 <main+0x43c>)
 8001436:	f012 fc9f 	bl	8013d78 <f_close>
		  start_stream_flag=0;
 800143a:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <main+0x42c>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
		  machine_state=7;
 8001440:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <main+0x430>)
 8001442:	2207      	movs	r2, #7
 8001444:	601a      	str	r2, [r3, #0]
		  stop_measure_flag=0;
 8001446:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <main+0x434>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
	  }
	 if  (change_file_flag==1){
 800144c:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <main+0x440>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d10e      	bne.n	8001472 <main+0x3fe>
		  printf("\nClosing file\r\n");
 8001454:	4815      	ldr	r0, [pc, #84]	@ (80014ac <main+0x438>)
 8001456:	f013 fddf 	bl	8015018 <puts>
		  f_close(&fil); // close file.txt
 800145a:	4815      	ldr	r0, [pc, #84]	@ (80014b0 <main+0x43c>)
 800145c:	f012 fc8c 	bl	8013d78 <f_close>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // LED_GREEN
 8001460:	2101      	movs	r1, #1
 8001462:	480e      	ldr	r0, [pc, #56]	@ (800149c <main+0x428>)
 8001464:	f004 f87b 	bl	800555e <HAL_GPIO_TogglePin>
		  //start_stream_flag=1;
		  open_new_file=1;
 8001468:	2301      	movs	r3, #1
 800146a:	623b      	str	r3, [r7, #32]
		  machine_state=4;
 800146c:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <main+0x430>)
 800146e:	2204      	movs	r2, #4
 8001470:	601a      	str	r2, [r3, #0]
	  }
	 if  (measure_finished_flag==1){
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <main+0x444>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b01      	cmp	r3, #1
 8001478:	f47f ae39 	bne.w	80010ee <main+0x7a>
		  HAL_Delay(1000);
 800147c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001480:	f001 fb3e 	bl	8002b00 <HAL_Delay>
		  NVIC_SystemReset();
 8001484:	f7ff fde0 	bl	8001048 <__NVIC_SystemReset>
 8001488:	240027ec 	.word	0x240027ec
 800148c:	240003e0 	.word	0x240003e0
 8001490:	24002748 	.word	0x24002748
 8001494:	58021000 	.word	0x58021000
 8001498:	58021400 	.word	0x58021400
 800149c:	58020400 	.word	0x58020400
 80014a0:	24002724 	.word	0x24002724
 80014a4:	24000008 	.word	0x24000008
 80014a8:	2400273c 	.word	0x2400273c
 80014ac:	08016a88 	.word	0x08016a88
 80014b0:	24001630 	.word	0x24001630
 80014b4:	24002738 	.word	0x24002738
 80014b8:	24002728 	.word	0x24002728

080014bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b09c      	sub	sp, #112	@ 0x70
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c6:	224c      	movs	r2, #76	@ 0x4c
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f013 fed0 	bl	8015270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2220      	movs	r2, #32
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f013 feca 	bl	8015270 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014dc:	2002      	movs	r0, #2
 80014de:	f005 faf7 	bl	8006ad0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014e2:	2300      	movs	r3, #0
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	4b2d      	ldr	r3, [pc, #180]	@ (800159c <SystemClock_Config+0xe0>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014ee:	4a2b      	ldr	r2, [pc, #172]	@ (800159c <SystemClock_Config+0xe0>)
 80014f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014f4:	6193      	str	r3, [r2, #24]
 80014f6:	4b29      	ldr	r3, [pc, #164]	@ (800159c <SystemClock_Config+0xe0>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001502:	bf00      	nop
 8001504:	4b25      	ldr	r3, [pc, #148]	@ (800159c <SystemClock_Config+0xe0>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800150c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001510:	d1f8      	bne.n	8001504 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001512:	2322      	movs	r3, #34	@ 0x22
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001516:	2301      	movs	r3, #1
 8001518:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800151a:	2340      	movs	r3, #64	@ 0x40
 800151c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800151e:	2301      	movs	r3, #1
 8001520:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001522:	2302      	movs	r3, #2
 8001524:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001526:	2300      	movs	r3, #0
 8001528:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800152a:	2304      	movs	r3, #4
 800152c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800152e:	230c      	movs	r3, #12
 8001530:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001532:	2301      	movs	r3, #1
 8001534:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001536:	2304      	movs	r3, #4
 8001538:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800153a:	2302      	movs	r3, #2
 800153c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800153e:	230c      	movs	r3, #12
 8001540:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001542:	2300      	movs	r3, #0
 8001544:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154e:	4618      	mov	r0, r3
 8001550:	f005 fb08 	bl	8006b64 <HAL_RCC_OscConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800155a:	f000 fb99 	bl	8001c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155e:	233f      	movs	r3, #63	@ 0x3f
 8001560:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001562:	2303      	movs	r3, #3
 8001564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800156a:	2308      	movs	r3, #8
 800156c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800156e:	2340      	movs	r3, #64	@ 0x40
 8001570:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8001572:	2350      	movs	r3, #80	@ 0x50
 8001574:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800157a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800157c:	2340      	movs	r3, #64	@ 0x40
 800157e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2101      	movs	r1, #1
 8001584:	4618      	mov	r0, r3
 8001586:	f005 fec7 	bl	8007318 <HAL_RCC_ClockConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001590:	f000 fb7e 	bl	8001c90 <Error_Handler>
  }
}
 8001594:	bf00      	nop
 8001596:	3770      	adds	r7, #112	@ 0x70
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	58024800 	.word	0x58024800

080015a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015a4:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <MX_SPI2_Init+0xa4>)
 80015a6:	4a28      	ldr	r2, [pc, #160]	@ (8001648 <MX_SPI2_Init+0xa8>)
 80015a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015aa:	4b26      	ldr	r3, [pc, #152]	@ (8001644 <MX_SPI2_Init+0xa4>)
 80015ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015b2:	4b24      	ldr	r3, [pc, #144]	@ (8001644 <MX_SPI2_Init+0xa4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b8:	4b22      	ldr	r3, [pc, #136]	@ (8001644 <MX_SPI2_Init+0xa4>)
 80015ba:	2207      	movs	r2, #7
 80015bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015be:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <MX_SPI2_Init+0xa4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <MX_SPI2_Init+0xa4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <MX_SPI2_Init+0xa4>)
 80015cc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <MX_SPI2_Init+0xa4>)
 80015d4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80015d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015da:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <MX_SPI2_Init+0xa4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e0:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <MX_SPI2_Init+0xa4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015e6:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <MX_SPI2_Init+0xa4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80015ec:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <MX_SPI2_Init+0xa4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015f2:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <MX_SPI2_Init+0xa4>)
 80015f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015fa:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <MX_SPI2_Init+0xa4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001600:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <MX_SPI2_Init+0xa4>)
 8001602:	2200      	movs	r2, #0
 8001604:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001606:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <MX_SPI2_Init+0xa4>)
 8001608:	2200      	movs	r2, #0
 800160a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800160c:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <MX_SPI2_Init+0xa4>)
 800160e:	2200      	movs	r2, #0
 8001610:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001612:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <MX_SPI2_Init+0xa4>)
 8001614:	2200      	movs	r2, #0
 8001616:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001618:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <MX_SPI2_Init+0xa4>)
 800161a:	2200      	movs	r2, #0
 800161c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <MX_SPI2_Init+0xa4>)
 8001620:	2200      	movs	r2, #0
 8001622:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001624:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <MX_SPI2_Init+0xa4>)
 8001626:	2200      	movs	r2, #0
 8001628:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <MX_SPI2_Init+0xa4>)
 800162c:	2200      	movs	r2, #0
 800162e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	@ (8001644 <MX_SPI2_Init+0xa4>)
 8001632:	f007 ffbf 	bl	80095b4 <HAL_SPI_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800163c:	f000 fb28 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	24000294 	.word	0x24000294
 8001648:	40003800 	.word	0x40003800

0800164c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001650:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <MX_TIM16_Init+0x48>)
 8001652:	4a11      	ldr	r2, [pc, #68]	@ (8001698 <MX_TIM16_Init+0x4c>)
 8001654:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000-1;
 8001656:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <MX_TIM16_Init+0x48>)
 8001658:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 800165c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <MX_TIM16_Init+0x48>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001664:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <MX_TIM16_Init+0x48>)
 8001666:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800166a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166c:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <MX_TIM16_Init+0x48>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001672:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <MX_TIM16_Init+0x48>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <MX_TIM16_Init+0x48>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800167e:	4805      	ldr	r0, [pc, #20]	@ (8001694 <MX_TIM16_Init+0x48>)
 8001680:	f009 f8e7 	bl	800a852 <HAL_TIM_Base_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800168a:	f000 fb01 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	24000394 	.word	0x24000394
 8001698:	40014400 	.word	0x40014400

0800169c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016a0:	4b23      	ldr	r3, [pc, #140]	@ (8001730 <MX_USART1_UART_Init+0x94>)
 80016a2:	4a24      	ldr	r2, [pc, #144]	@ (8001734 <MX_USART1_UART_Init+0x98>)
 80016a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016a6:	4b22      	ldr	r3, [pc, #136]	@ (8001730 <MX_USART1_UART_Init+0x94>)
 80016a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ae:	4b20      	ldr	r3, [pc, #128]	@ (8001730 <MX_USART1_UART_Init+0x94>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <MX_USART1_UART_Init+0x94>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001730 <MX_USART1_UART_Init+0x94>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <MX_USART1_UART_Init+0x94>)
 80016c2:	220c      	movs	r2, #12
 80016c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <MX_USART1_UART_Init+0x94>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016cc:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <MX_USART1_UART_Init+0x94>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 80016d2:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <MX_USART1_UART_Init+0x94>)
 80016d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016d8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <MX_USART1_UART_Init+0x94>)
 80016dc:	2200      	movs	r2, #0
 80016de:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e0:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <MX_USART1_UART_Init+0x94>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016e6:	4812      	ldr	r0, [pc, #72]	@ (8001730 <MX_USART1_UART_Init+0x94>)
 80016e8:	f009 fb92 	bl	800ae10 <HAL_UART_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80016f2:	f000 facd 	bl	8001c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f6:	2100      	movs	r1, #0
 80016f8:	480d      	ldr	r0, [pc, #52]	@ (8001730 <MX_USART1_UART_Init+0x94>)
 80016fa:	f00c f86a 	bl	800d7d2 <HAL_UARTEx_SetTxFifoThreshold>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001704:	f000 fac4 	bl	8001c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001708:	2100      	movs	r1, #0
 800170a:	4809      	ldr	r0, [pc, #36]	@ (8001730 <MX_USART1_UART_Init+0x94>)
 800170c:	f00c f89f 	bl	800d84e <HAL_UARTEx_SetRxFifoThreshold>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001716:	f000 fabb 	bl	8001c90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	@ (8001730 <MX_USART1_UART_Init+0x94>)
 800171c:	f00c f820 	bl	800d760 <HAL_UARTEx_DisableFifoMode>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001726:	f000 fab3 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	240003e0 	.word	0x240003e0
 8001734:	40011000 	.word	0x40011000

08001738 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800173c:	4b22      	ldr	r3, [pc, #136]	@ (80017c8 <MX_USART3_UART_Init+0x90>)
 800173e:	4a23      	ldr	r2, [pc, #140]	@ (80017cc <MX_USART3_UART_Init+0x94>)
 8001740:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001742:	4b21      	ldr	r3, [pc, #132]	@ (80017c8 <MX_USART3_UART_Init+0x90>)
 8001744:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001748:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b1f      	ldr	r3, [pc, #124]	@ (80017c8 <MX_USART3_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <MX_USART3_UART_Init+0x90>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001756:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <MX_USART3_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <MX_USART3_UART_Init+0x90>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <MX_USART3_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <MX_USART3_UART_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176e:	4b16      	ldr	r3, [pc, #88]	@ (80017c8 <MX_USART3_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001774:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <MX_USART3_UART_Init+0x90>)
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177a:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <MX_USART3_UART_Init+0x90>)
 800177c:	2200      	movs	r2, #0
 800177e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001780:	4811      	ldr	r0, [pc, #68]	@ (80017c8 <MX_USART3_UART_Init+0x90>)
 8001782:	f009 fb45 	bl	800ae10 <HAL_UART_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800178c:	f000 fa80 	bl	8001c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001790:	2100      	movs	r1, #0
 8001792:	480d      	ldr	r0, [pc, #52]	@ (80017c8 <MX_USART3_UART_Init+0x90>)
 8001794:	f00c f81d 	bl	800d7d2 <HAL_UARTEx_SetTxFifoThreshold>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800179e:	f000 fa77 	bl	8001c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a2:	2100      	movs	r1, #0
 80017a4:	4808      	ldr	r0, [pc, #32]	@ (80017c8 <MX_USART3_UART_Init+0x90>)
 80017a6:	f00c f852 	bl	800d84e <HAL_UARTEx_SetRxFifoThreshold>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017b0:	f000 fa6e 	bl	8001c90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	@ (80017c8 <MX_USART3_UART_Init+0x90>)
 80017b6:	f00b ffd3 	bl	800d760 <HAL_UARTEx_DisableFifoMode>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017c0:	f000 fa66 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	24000474 	.word	0x24000474
 80017cc:	40004800 	.word	0x40004800

080017d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <MX_DMA_Init+0x5c>)
 80017d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80017dc:	4a13      	ldr	r2, [pc, #76]	@ (800182c <MX_DMA_Init+0x5c>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80017e6:	4b11      	ldr	r3, [pc, #68]	@ (800182c <MX_DMA_Init+0x5c>)
 80017e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2100      	movs	r1, #0
 80017f8:	200b      	movs	r0, #11
 80017fa:	f001 fa80 	bl	8002cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80017fe:	200b      	movs	r0, #11
 8001800:	f001 fa97 	bl	8002d32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	200c      	movs	r0, #12
 800180a:	f001 fa78 	bl	8002cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800180e:	200c      	movs	r0, #12
 8001810:	f001 fa8f 	bl	8002d32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	200d      	movs	r0, #13
 800181a:	f001 fa70 	bl	8002cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800181e:	200d      	movs	r0, #13
 8001820:	f001 fa87 	bl	8002d32 <HAL_NVIC_EnableIRQ>

}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	58024400 	.word	0x58024400

08001830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08e      	sub	sp, #56	@ 0x38
 8001834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	4b91      	ldr	r3, [pc, #580]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 8001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800184c:	4a8f      	ldr	r2, [pc, #572]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001856:	4b8d      	ldr	r3, [pc, #564]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	623b      	str	r3, [r7, #32]
 8001862:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001864:	4b89      	ldr	r3, [pc, #548]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800186a:	4a88      	ldr	r2, [pc, #544]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 800186c:	f043 0320 	orr.w	r3, r3, #32
 8001870:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001874:	4b85      	ldr	r3, [pc, #532]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800187a:	f003 0320 	and.w	r3, r3, #32
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001882:	4b82      	ldr	r3, [pc, #520]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001888:	4a80      	ldr	r2, [pc, #512]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 800188a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800188e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001892:	4b7e      	ldr	r3, [pc, #504]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	4b7a      	ldr	r3, [pc, #488]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a6:	4a79      	ldr	r2, [pc, #484]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018b0:	4b76      	ldr	r3, [pc, #472]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	4b73      	ldr	r3, [pc, #460]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 80018c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c4:	4a71      	ldr	r2, [pc, #452]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ce:	4b6f      	ldr	r3, [pc, #444]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018dc:	4b6b      	ldr	r3, [pc, #428]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 80018de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e2:	4a6a      	ldr	r2, [pc, #424]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 80018e4:	f043 0308 	orr.w	r3, r3, #8
 80018e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ec:	4b67      	ldr	r3, [pc, #412]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 80018ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018fa:	4b64      	ldr	r3, [pc, #400]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 80018fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001900:	4a62      	ldr	r2, [pc, #392]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 8001902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001906:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800190a:	4b60      	ldr	r3, [pc, #384]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001918:	4b5c      	ldr	r3, [pc, #368]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 800191a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800191e:	4a5b      	ldr	r2, [pc, #364]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 8001920:	f043 0310 	orr.w	r3, r3, #16
 8001924:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001928:	4b58      	ldr	r3, [pc, #352]	@ (8001a8c <MX_GPIO_Init+0x25c>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|GPIO_PIN_12|LED_RED_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	f245 0101 	movw	r1, #20481	@ 0x5001
 800193c:	4854      	ldr	r0, [pc, #336]	@ (8001a90 <MX_GPIO_Init+0x260>)
 800193e:	f003 fdf5 	bl	800552c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 619f 	mov.w	r1, #1272	@ 0x4f8
 8001948:	4852      	ldr	r0, [pc, #328]	@ (8001a94 <MX_GPIO_Init+0x264>)
 800194a:	f003 fdef 	bl	800552c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	2102      	movs	r1, #2
 8001952:	4851      	ldr	r0, [pc, #324]	@ (8001a98 <MX_GPIO_Init+0x268>)
 8001954:	f003 fdea 	bl	800552c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195e:	2300      	movs	r3, #0
 8001960:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196a:	4619      	mov	r1, r3
 800196c:	484b      	ldr	r0, [pc, #300]	@ (8001a9c <MX_GPIO_Init+0x26c>)
 800196e:	f003 fc1d 	bl	80051ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001972:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001978:	2300      	movs	r3, #0
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800197c:	2301      	movs	r3, #1
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	4846      	ldr	r0, [pc, #280]	@ (8001aa0 <MX_GPIO_Init+0x270>)
 8001988:	f003 fc10 	bl	80051ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800198c:	2332      	movs	r3, #50	@ 0x32
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800199c:	230b      	movs	r3, #11
 800199e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a4:	4619      	mov	r1, r3
 80019a6:	483d      	ldr	r0, [pc, #244]	@ (8001a9c <MX_GPIO_Init+0x26c>)
 80019a8:	f003 fc00 	bl	80051ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80019ac:	2386      	movs	r3, #134	@ 0x86
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019bc:	230b      	movs	r3, #11
 80019be:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019c4:	4619      	mov	r1, r3
 80019c6:	4837      	ldr	r0, [pc, #220]	@ (8001aa4 <MX_GPIO_Init+0x274>)
 80019c8:	f003 fbf0 	bl	80051ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PB12 LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_12|LED_RED_Pin;
 80019cc:	f245 0301 	movw	r3, #20481	@ 0x5001
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e2:	4619      	mov	r1, r3
 80019e4:	482a      	ldr	r0, [pc, #168]	@ (8001a90 <MX_GPIO_Init+0x260>)
 80019e6:	f003 fbe1 	bl	80051ac <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019fc:	230b      	movs	r3, #11
 80019fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a04:	4619      	mov	r1, r3
 8001a06:	4822      	ldr	r0, [pc, #136]	@ (8001a90 <MX_GPIO_Init+0x260>)
 8001a08:	f003 fbd0 	bl	80051ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001a0c:	f44f 639f 	mov.w	r3, #1272	@ 0x4f8
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a22:	4619      	mov	r1, r3
 8001a24:	481b      	ldr	r0, [pc, #108]	@ (8001a94 <MX_GPIO_Init+0x264>)
 8001a26:	f003 fbc1 	bl	80051ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001a2a:	2380      	movs	r3, #128	@ 0x80
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	481a      	ldr	r0, [pc, #104]	@ (8001aa8 <MX_GPIO_Init+0x278>)
 8001a40:	f003 fbb4 	bl	80051ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a44:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a56:	230b      	movs	r3, #11
 8001a58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4811      	ldr	r0, [pc, #68]	@ (8001aa8 <MX_GPIO_Init+0x278>)
 8001a62:	f003 fba3 	bl	80051ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001a66:	2302      	movs	r3, #2
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4806      	ldr	r0, [pc, #24]	@ (8001a98 <MX_GPIO_Init+0x268>)
 8001a7e:	f003 fb95 	bl	80051ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a82:	bf00      	nop
 8001a84:	3738      	adds	r7, #56	@ 0x38
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	58024400 	.word	0x58024400
 8001a90:	58020400 	.word	0x58020400
 8001a94:	58020c00 	.word	0x58020c00
 8001a98:	58021000 	.word	0x58021000
 8001a9c:	58020800 	.word	0x58020800
 8001aa0:	58021400 	.word	0x58021400
 8001aa4:	58020000 	.word	0x58020000
 8001aa8:	58021800 	.word	0x58021800

08001aac <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {  // Controlla che sia la tua UART
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0e      	ldr	r2, [pc, #56]	@ (8001af8 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d116      	bne.n	8001af0 <HAL_UARTEx_RxEventCallback+0x44>
			stream_sd_card=(char *)dma_buffer;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <HAL_UARTEx_RxEventCallback+0x50>)
 8001ac4:	4a0e      	ldr	r2, [pc, #56]	@ (8001b00 <HAL_UARTEx_RxEventCallback+0x54>)
 8001ac6:	601a      	str	r2, [r3, #0]
			contatore_stream++;
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <HAL_UARTEx_RxEventCallback+0x58>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3301      	adds	r3, #1
 8001ace:	4a0d      	ldr	r2, [pc, #52]	@ (8001b04 <HAL_UARTEx_RxEventCallback+0x58>)
 8001ad0:	6013      	str	r3, [r2, #0]
			printf("\n %i Stream DMA Buffer  %s \r\n",contatore_stream,dma_buffer);
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <HAL_UARTEx_RxEventCallback+0x58>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <HAL_UARTEx_RxEventCallback+0x54>)
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480b      	ldr	r0, [pc, #44]	@ (8001b08 <HAL_UARTEx_RxEventCallback+0x5c>)
 8001adc:	f013 fa34 	bl	8014f48 <iprintf>
	        // Riavvia la ricezione DMA per un altro byte
	        HAL_UARTEx_ReceiveToIdle_IT(&huart1, dma_buffer, STREAM_SIZE);
 8001ae0:	2296      	movs	r2, #150	@ 0x96
 8001ae2:	4907      	ldr	r1, [pc, #28]	@ (8001b00 <HAL_UARTEx_RxEventCallback+0x54>)
 8001ae4:	4809      	ldr	r0, [pc, #36]	@ (8001b0c <HAL_UARTEx_RxEventCallback+0x60>)
 8001ae6:	f00b fef0 	bl	800d8ca <HAL_UARTEx_ReceiveToIdle_IT>
	        receive_dma_complete=1;
 8001aea:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <HAL_UARTEx_RxEventCallback+0x64>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
	}
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40011000 	.word	0x40011000
 8001afc:	24002668 	.word	0x24002668
 8001b00:	240027ec 	.word	0x240027ec
 8001b04:	24002744 	.word	0x24002744
 8001b08:	08016a98 	.word	0x08016a98
 8001b0c:	240003e0 	.word	0x240003e0
 8001b10:	24002748 	.word	0x24002748

08001b14 <handle_complete_packet>:

// Implementa la logica per processare il pacchetto completo
void handle_complete_packet(void) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	fres = f_open(&fil,nome_file_txt, FA_WRITE | FA_OPEN_APPEND);
 8001b18:	2232      	movs	r2, #50	@ 0x32
 8001b1a:	4911      	ldr	r1, [pc, #68]	@ (8001b60 <handle_complete_packet+0x4c>)
 8001b1c:	4811      	ldr	r0, [pc, #68]	@ (8001b64 <handle_complete_packet+0x50>)
 8001b1e:	f011 fd51 	bl	80135c4 <f_open>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <handle_complete_packet+0x54>)
 8001b28:	701a      	strb	r2, [r3, #0]
	f_puts(stream_sd_card, &fil);
 8001b2a:	4b10      	ldr	r3, [pc, #64]	@ (8001b6c <handle_complete_packet+0x58>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	490d      	ldr	r1, [pc, #52]	@ (8001b64 <handle_complete_packet+0x50>)
 8001b30:	4618      	mov	r0, r3
 8001b32:	f012 fa77 	bl	8014024 <f_puts>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001b36:	2101      	movs	r1, #1
 8001b38:	480d      	ldr	r0, [pc, #52]	@ (8001b70 <handle_complete_packet+0x5c>)
 8001b3a:	f003 fd10 	bl	800555e <HAL_GPIO_TogglePin>
	printf("\n %i Stream SD Card  %s \r\n",contatore_stream,stream_sd_card);
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b74 <handle_complete_packet+0x60>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <handle_complete_packet+0x58>)
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	4619      	mov	r1, r3
 8001b48:	480b      	ldr	r0, [pc, #44]	@ (8001b78 <handle_complete_packet+0x64>)
 8001b4a:	f013 f9fd 	bl	8014f48 <iprintf>
	receive_dma_complete=0;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <handle_complete_packet+0x68>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
	f_close(&fil);
 8001b54:	4803      	ldr	r0, [pc, #12]	@ (8001b64 <handle_complete_packet+0x50>)
 8001b56:	f012 f90f 	bl	8013d78 <f_close>
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	240026ec 	.word	0x240026ec
 8001b64:	24001630 	.word	0x24001630
 8001b68:	24002660 	.word	0x24002660
 8001b6c:	24002668 	.word	0x24002668
 8001b70:	58020400 	.word	0x58020400
 8001b74:	24002744 	.word	0x24002744
 8001b78:	08016ab8 	.word	0x08016ab8
 8001b7c:	24002748 	.word	0x24002748

08001b80 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001b88:	1d39      	adds	r1, r7, #4
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4803      	ldr	r0, [pc, #12]	@ (8001ba0 <__io_putchar+0x20>)
 8001b92:	f009 f98d 	bl	800aeb0 <HAL_UART_Transmit>
  return ch;
 8001b96:	687b      	ldr	r3, [r7, #4]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	24000474 	.word	0x24000474

08001ba4 <process_init_SD_card>:
/**/
void process_init_SD_card( void )
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
  char        buf[100];
	 */
  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "1", 0);    //1=mount now
 8001baa:	2200      	movs	r2, #0
 8001bac:	492f      	ldr	r1, [pc, #188]	@ (8001c6c <process_init_SD_card+0xc8>)
 8001bae:	4830      	ldr	r0, [pc, #192]	@ (8001c70 <process_init_SD_card+0xcc>)
 8001bb0:	f011 fcc2 	bl	8013538 <f_mount>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <process_init_SD_card+0xd0>)
 8001bba:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK)
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c74 <process_init_SD_card+0xd0>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d006      	beq.n	8001bd2 <process_init_SD_card+0x2e>
    {
      printf("No SD Card found : (%i)\r\n", fres);
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c74 <process_init_SD_card+0xd0>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	482b      	ldr	r0, [pc, #172]	@ (8001c78 <process_init_SD_card+0xd4>)
 8001bcc:	f013 f9bc 	bl	8014f48 <iprintf>
      break;
 8001bd0:	e048      	b.n	8001c64 <process_init_SD_card+0xc0>
    }
    printf("SD Card Mounted Successfully!!!\r\n");
 8001bd2:	482a      	ldr	r0, [pc, #168]	@ (8001c7c <process_init_SD_card+0xd8>)
 8001bd4:	f013 fa20 	bl	8015018 <puts>
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;

    f_getfree("1", &fre_clust, &pfs);
 8001bd8:	1d3a      	adds	r2, r7, #4
 8001bda:	463b      	mov	r3, r7
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4823      	ldr	r0, [pc, #140]	@ (8001c6c <process_init_SD_card+0xc8>)
 8001be0:	f012 f8f4 	bl	8013dcc <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	3b02      	subs	r3, #2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	8952      	ldrh	r2, [r2, #10]
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001bfa:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001bfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c02:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c06:	ee17 3a90 	vmov	r3, s15
 8001c0a:	60fb      	str	r3, [r7, #12]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	895b      	ldrh	r3, [r3, #10]
 8001c10:	461a      	mov	r2, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	fb02 f303 	mul.w	r3, r2, r3
 8001c18:	ee07 3a90 	vmov	s15, r3
 8001c1c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c20:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001c24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c28:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c2c:	ee17 3a90 	vmov	r3, s15
 8001c30:	60bb      	str	r3, [r7, #8]

    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\r\n", totalSpace, freeSpace);
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	68f9      	ldr	r1, [r7, #12]
 8001c36:	4812      	ldr	r0, [pc, #72]	@ (8001c80 <process_init_SD_card+0xdc>)
 8001c38:	f013 f986 	bl	8014f48 <iprintf>
    //Open the file
    fres = f_open(&fil, nome_file_txt, FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8001c3c:	220b      	movs	r2, #11
 8001c3e:	4911      	ldr	r1, [pc, #68]	@ (8001c84 <process_init_SD_card+0xe0>)
 8001c40:	4811      	ldr	r0, [pc, #68]	@ (8001c88 <process_init_SD_card+0xe4>)
 8001c42:	f011 fcbf 	bl	80135c4 <f_open>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <process_init_SD_card+0xd0>)
 8001c4c:	701a      	strb	r2, [r3, #0]
    if(fres != FR_OK){
 8001c4e:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <process_init_SD_card+0xd0>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d006      	beq.n	8001c64 <process_init_SD_card+0xc0>
		  printf("File creation/open Error : (%i)\r\n", fres);
 8001c56:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <process_init_SD_card+0xd0>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	480b      	ldr	r0, [pc, #44]	@ (8001c8c <process_init_SD_card+0xe8>)
 8001c5e:	f013 f973 	bl	8014f48 <iprintf>
		  break;
 8001c62:	bf00      	nop
  /*
  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
  printf("SD Card Unmounted Successfully!!!\r\n");
  */
}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	08016ad4 	.word	0x08016ad4
 8001c70:	240005f8 	.word	0x240005f8
 8001c74:	24002660 	.word	0x24002660
 8001c78:	08016ad8 	.word	0x08016ad8
 8001c7c:	08016af4 	.word	0x08016af4
 8001c80:	08016b18 	.word	0x08016b18
 8001c84:	240026ec 	.word	0x240026ec
 8001c88:	24001630 	.word	0x24001630
 8001c8c:	08016b48 	.word	0x08016b48

08001c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
}
 8001c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <Error_Handler+0x8>

08001c9c <get_file_name>:
char 	time_stamp_request[64]="%time_stamp_request";//"send nuc time stamp\r";
extern 	uint8_t rx_usb[];
extern 	int size_rx_usb;


void get_file_name (){ //(uint8_t rx_usb[])
 8001c9c:	b598      	push	{r3, r4, r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
	tx_usb_to_nuc=file_name_request;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <get_file_name+0x68>)
 8001ca2:	4a19      	ldr	r2, [pc, #100]	@ (8001d08 <get_file_name+0x6c>)
 8001ca4:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4818      	ldr	r0, [pc, #96]	@ (8001d0c <get_file_name+0x70>)
 8001caa:	f003 fc58 	bl	800555e <HAL_GPIO_TogglePin>
	memset((uint8_t *)&rx_usb,0,size_rx_usb);
 8001cae:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <get_file_name+0x74>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4817      	ldr	r0, [pc, #92]	@ (8001d14 <get_file_name+0x78>)
 8001cb8:	f013 fada 	bl	8015270 <memset>
	CDC_Transmit_HS((uint8_t*)tx_usb_to_nuc,strlen(tx_usb_to_nuc));
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <get_file_name+0x68>)
 8001cbe:	681c      	ldr	r4, [r3, #0]
 8001cc0:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <get_file_name+0x68>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fb23 	bl	8000310 <strlen>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f012 fbb7 	bl	8014444 <CDC_Transmit_HS>
	while (rx_usb[0]==0){
 8001cd6:	e003      	b.n	8001ce0 <get_file_name+0x44>
		HAL_Delay(1000);
 8001cd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cdc:	f000 ff10 	bl	8002b00 <HAL_Delay>
	while (rx_usb[0]==0){
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <get_file_name+0x78>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f7      	beq.n	8001cd8 <get_file_name+0x3c>
	 }
	rx_usb_pointer=(char *) rx_usb;
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <get_file_name+0x7c>)
 8001cea:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <get_file_name+0x78>)
 8001cec:	601a      	str	r2, [r3, #0]
	memcpy(nome_file,rx_usb_pointer,size_rx_usb);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <get_file_name+0x7c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a07      	ldr	r2, [pc, #28]	@ (8001d10 <get_file_name+0x74>)
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4808      	ldr	r0, [pc, #32]	@ (8001d1c <get_file_name+0x80>)
 8001cfa:	f013 fb44 	bl	8015386 <memcpy>
}
 8001cfe:	bf00      	nop
 8001d00:	bd98      	pop	{r3, r4, r7, pc}
 8001d02:	bf00      	nop
 8001d04:	24002884 	.word	0x24002884
 8001d08:	24000010 	.word	0x24000010
 8001d0c:	58021000 	.word	0x58021000
 8001d10:	24000004 	.word	0x24000004
 8001d14:	2400266c 	.word	0x2400266c
 8001d18:	240028c0 	.word	0x240028c0
 8001d1c:	24002888 	.word	0x24002888

08001d20 <get_nuc_time_stamp>:

void get_nuc_time_stamp(){
 8001d20:	b598      	push	{r3, r4, r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	  tx_usb_to_nuc=time_stamp_request;
 8001d24:	4b10      	ldr	r3, [pc, #64]	@ (8001d68 <get_nuc_time_stamp+0x48>)
 8001d26:	4a11      	ldr	r2, [pc, #68]	@ (8001d6c <get_nuc_time_stamp+0x4c>)
 8001d28:	601a      	str	r2, [r3, #0]
	  //memset((uint8_t *)&rx_usb,1,size_rx_usb);
	  CDC_Transmit_HS((uint8_t*)tx_usb_to_nuc,strlen(tx_usb_to_nuc));
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <get_nuc_time_stamp+0x48>)
 8001d2c:	681c      	ldr	r4, [r3, #0]
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <get_nuc_time_stamp+0x48>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe faec 	bl	8000310 <strlen>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f012 fb80 	bl	8014444 <CDC_Transmit_HS>
	  while (rx_usb[0]==0){
 8001d44:	e002      	b.n	8001d4c <get_nuc_time_stamp+0x2c>
	  		HAL_Delay(100);
 8001d46:	2064      	movs	r0, #100	@ 0x64
 8001d48:	f000 feda 	bl	8002b00 <HAL_Delay>
	  while (rx_usb[0]==0){
 8001d4c:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <get_nuc_time_stamp+0x50>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f8      	beq.n	8001d46 <get_nuc_time_stamp+0x26>
	  	 }
	  rx_usb_pointer=(char *) rx_usb;
 8001d54:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <get_nuc_time_stamp+0x54>)
 8001d56:	4a06      	ldr	r2, [pc, #24]	@ (8001d70 <get_nuc_time_stamp+0x50>)
 8001d58:	601a      	str	r2, [r3, #0]
	  nuc_time_stamp=rx_usb_pointer;
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <get_nuc_time_stamp+0x54>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a06      	ldr	r2, [pc, #24]	@ (8001d78 <get_nuc_time_stamp+0x58>)
 8001d60:	6013      	str	r3, [r2, #0]
	  //rx_usb_pointer=NULL;
	  //memset((uint8_t *)&rx_usb,0,size_rx_usb);
}
 8001d62:	bf00      	nop
 8001d64:	bd98      	pop	{r3, r4, r7, pc}
 8001d66:	bf00      	nop
 8001d68:	24002884 	.word	0x24002884
 8001d6c:	24000050 	.word	0x24000050
 8001d70:	2400266c 	.word	0x2400266c
 8001d74:	240028c0 	.word	0x240028c0
 8001d78:	240028bc 	.word	0x240028bc

08001d7c <send_complete_time_stamp>:

void send_complete_time_stamp(char* time_stamp_TS_buffer){
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	tx_usb_to_nuc=time_stamp_TS_buffer;
 8001d84:	4a14      	ldr	r2, [pc, #80]	@ (8001dd8 <send_complete_time_stamp+0x5c>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6013      	str	r3, [r2, #0]
	memset((uint8_t *)&rx_usb,0,size_rx_usb);
 8001d8a:	4b14      	ldr	r3, [pc, #80]	@ (8001ddc <send_complete_time_stamp+0x60>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2100      	movs	r1, #0
 8001d92:	4813      	ldr	r0, [pc, #76]	@ (8001de0 <send_complete_time_stamp+0x64>)
 8001d94:	f013 fa6c 	bl	8015270 <memset>
	CDC_Transmit_HS((uint8_t*)tx_usb_to_nuc,strlen(tx_usb_to_nuc));
 8001d98:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <send_complete_time_stamp+0x5c>)
 8001d9a:	681c      	ldr	r4, [r3, #0]
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <send_complete_time_stamp+0x5c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fab5 	bl	8000310 <strlen>
 8001da6:	4603      	mov	r3, r0
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4619      	mov	r1, r3
 8001dac:	4620      	mov	r0, r4
 8001dae:	f012 fb49 	bl	8014444 <CDC_Transmit_HS>
	while (rx_usb[0]==0){
 8001db2:	e002      	b.n	8001dba <send_complete_time_stamp+0x3e>
		  	HAL_Delay(100);
 8001db4:	2064      	movs	r0, #100	@ 0x64
 8001db6:	f000 fea3 	bl	8002b00 <HAL_Delay>
	while (rx_usb[0]==0){
 8001dba:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <send_complete_time_stamp+0x64>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f8      	beq.n	8001db4 <send_complete_time_stamp+0x38>
		  }
	rx_usb_pointer=(char *) rx_usb;
 8001dc2:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <send_complete_time_stamp+0x68>)
 8001dc4:	4a06      	ldr	r2, [pc, #24]	@ (8001de0 <send_complete_time_stamp+0x64>)
 8001dc6:	601a      	str	r2, [r3, #0]
	complete_time_stamp=rx_usb_pointer;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <send_complete_time_stamp+0x68>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a06      	ldr	r2, [pc, #24]	@ (8001de8 <send_complete_time_stamp+0x6c>)
 8001dce:	6013      	str	r3, [r2, #0]
	//rx_usb_pointer=NULL;
	//memset((uint8_t *)&rx_usb,0,size_rx_usb);

}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd90      	pop	{r4, r7, pc}
 8001dd8:	24002884 	.word	0x24002884
 8001ddc:	24000004 	.word	0x24000004
 8001de0:	2400266c 	.word	0x2400266c
 8001de4:	240028c0 	.word	0x240028c0
 8001de8:	240028c4 	.word	0x240028c4

08001dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <HAL_MspInit+0x30>)
 8001df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001df8:	4a08      	ldr	r2, [pc, #32]	@ (8001e1c <HAL_MspInit+0x30>)
 8001dfa:	f043 0302 	orr.w	r3, r3, #2
 8001dfe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_MspInit+0x30>)
 8001e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	58024400 	.word	0x58024400

08001e20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b0ba      	sub	sp, #232	@ 0xe8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e38:	f107 0318 	add.w	r3, r7, #24
 8001e3c:	22b8      	movs	r2, #184	@ 0xb8
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f013 fa15 	bl	8015270 <memset>
  if(hspi->Instance==SPI2)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a58      	ldr	r2, [pc, #352]	@ (8001fac <HAL_SPI_MspInit+0x18c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	f040 80a9 	bne.w	8001fa4 <HAL_SPI_MspInit+0x184>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001e52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e62:	f107 0318 	add.w	r3, r7, #24
 8001e66:	4618      	mov	r0, r3
 8001e68:	f005 fde2 	bl	8007a30 <HAL_RCCEx_PeriphCLKConfig>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001e72:	f7ff ff0d 	bl	8001c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e76:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb0 <HAL_SPI_MspInit+0x190>)
 8001e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e7c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fb0 <HAL_SPI_MspInit+0x190>)
 8001e7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e86:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb0 <HAL_SPI_MspInit+0x190>)
 8001e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e94:	4b46      	ldr	r3, [pc, #280]	@ (8001fb0 <HAL_SPI_MspInit+0x190>)
 8001e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9a:	4a45      	ldr	r2, [pc, #276]	@ (8001fb0 <HAL_SPI_MspInit+0x190>)
 8001e9c:	f043 0304 	orr.w	r3, r3, #4
 8001ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ea4:	4b42      	ldr	r3, [pc, #264]	@ (8001fb0 <HAL_SPI_MspInit+0x190>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb0 <HAL_SPI_MspInit+0x190>)
 8001eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb8:	4a3d      	ldr	r2, [pc, #244]	@ (8001fb0 <HAL_SPI_MspInit+0x190>)
 8001eba:	f043 0302 	orr.w	r3, r3, #2
 8001ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb0 <HAL_SPI_MspInit+0x190>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ed0:	230c      	movs	r3, #12
 8001ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ee8:	2305      	movs	r3, #5
 8001eea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	482f      	ldr	r0, [pc, #188]	@ (8001fb4 <HAL_SPI_MspInit+0x194>)
 8001ef6:	f003 f959 	bl	80051ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001efa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001efe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f14:	2305      	movs	r3, #5
 8001f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4825      	ldr	r0, [pc, #148]	@ (8001fb8 <HAL_SPI_MspInit+0x198>)
 8001f22:	f003 f943 	bl	80051ac <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream2;
 8001f26:	4b25      	ldr	r3, [pc, #148]	@ (8001fbc <HAL_SPI_MspInit+0x19c>)
 8001f28:	4a25      	ldr	r2, [pc, #148]	@ (8001fc0 <HAL_SPI_MspInit+0x1a0>)
 8001f2a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001f2c:	4b23      	ldr	r3, [pc, #140]	@ (8001fbc <HAL_SPI_MspInit+0x19c>)
 8001f2e:	2227      	movs	r2, #39	@ 0x27
 8001f30:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f32:	4b22      	ldr	r3, [pc, #136]	@ (8001fbc <HAL_SPI_MspInit+0x19c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f38:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <HAL_SPI_MspInit+0x19c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fbc <HAL_SPI_MspInit+0x19c>)
 8001f40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f44:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f46:	4b1d      	ldr	r3, [pc, #116]	@ (8001fbc <HAL_SPI_MspInit+0x19c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <HAL_SPI_MspInit+0x19c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <HAL_SPI_MspInit+0x19c>)
 8001f54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f58:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f5a:	4b18      	ldr	r3, [pc, #96]	@ (8001fbc <HAL_SPI_MspInit+0x19c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f60:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <HAL_SPI_MspInit+0x19c>)
 8001f62:	2204      	movs	r2, #4
 8001f64:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f66:	4b15      	ldr	r3, [pc, #84]	@ (8001fbc <HAL_SPI_MspInit+0x19c>)
 8001f68:	2203      	movs	r2, #3
 8001f6a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001f6c:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <HAL_SPI_MspInit+0x19c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001f72:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <HAL_SPI_MspInit+0x19c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001f78:	4810      	ldr	r0, [pc, #64]	@ (8001fbc <HAL_SPI_MspInit+0x19c>)
 8001f7a:	f000 fef5 	bl	8002d68 <HAL_DMA_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 8001f84:	f7ff fe84 	bl	8001c90 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001fbc <HAL_SPI_MspInit+0x19c>)
 8001f8c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001fbc <HAL_SPI_MspInit+0x19c>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2100      	movs	r1, #0
 8001f98:	2024      	movs	r0, #36	@ 0x24
 8001f9a:	f000 feb0 	bl	8002cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001f9e:	2024      	movs	r0, #36	@ 0x24
 8001fa0:	f000 fec7 	bl	8002d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001fa4:	bf00      	nop
 8001fa6:	37e8      	adds	r7, #232	@ 0xe8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40003800 	.word	0x40003800
 8001fb0:	58024400 	.word	0x58024400
 8001fb4:	58020800 	.word	0x58020800
 8001fb8:	58020400 	.word	0x58020400
 8001fbc:	2400031c 	.word	0x2400031c
 8001fc0:	40020040 	.word	0x40020040

08001fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800200c <HAL_TIM_Base_MspInit+0x48>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d116      	bne.n	8002004 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <HAL_TIM_Base_MspInit+0x4c>)
 8001fd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8002010 <HAL_TIM_Base_MspInit+0x4c>)
 8001fde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <HAL_TIM_Base_MspInit+0x4c>)
 8001fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2075      	movs	r0, #117	@ 0x75
 8001ffa:	f000 fe80 	bl	8002cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001ffe:	2075      	movs	r0, #117	@ 0x75
 8002000:	f000 fe97 	bl	8002d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40014400 	.word	0x40014400
 8002010:	58024400 	.word	0x58024400

08002014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b0ba      	sub	sp, #232	@ 0xe8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800202c:	f107 0318 	add.w	r3, r7, #24
 8002030:	22b8      	movs	r2, #184	@ 0xb8
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f013 f91b 	bl	8015270 <memset>
  if(huart->Instance==USART1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a8a      	ldr	r2, [pc, #552]	@ (8002268 <HAL_UART_MspInit+0x254>)
 8002040:	4293      	cmp	r3, r2
 8002042:	f040 80c1 	bne.w	80021c8 <HAL_UART_MspInit+0x1b4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002046:	f04f 0201 	mov.w	r2, #1
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002058:	f107 0318 	add.w	r3, r7, #24
 800205c:	4618      	mov	r0, r3
 800205e:	f005 fce7 	bl	8007a30 <HAL_RCCEx_PeriphCLKConfig>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8002068:	f7ff fe12 	bl	8001c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800206c:	4b7f      	ldr	r3, [pc, #508]	@ (800226c <HAL_UART_MspInit+0x258>)
 800206e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002072:	4a7e      	ldr	r2, [pc, #504]	@ (800226c <HAL_UART_MspInit+0x258>)
 8002074:	f043 0310 	orr.w	r3, r3, #16
 8002078:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800207c:	4b7b      	ldr	r3, [pc, #492]	@ (800226c <HAL_UART_MspInit+0x258>)
 800207e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208a:	4b78      	ldr	r3, [pc, #480]	@ (800226c <HAL_UART_MspInit+0x258>)
 800208c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002090:	4a76      	ldr	r2, [pc, #472]	@ (800226c <HAL_UART_MspInit+0x258>)
 8002092:	f043 0302 	orr.w	r3, r3, #2
 8002096:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800209a:	4b74      	ldr	r3, [pc, #464]	@ (800226c <HAL_UART_MspInit+0x258>)
 800209c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80020c2:	2304      	movs	r3, #4
 80020c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4868      	ldr	r0, [pc, #416]	@ (8002270 <HAL_UART_MspInit+0x25c>)
 80020d0:	f003 f86c 	bl	80051ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020d4:	2340      	movs	r3, #64	@ 0x40
 80020d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020ec:	2307      	movs	r3, #7
 80020ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020f6:	4619      	mov	r1, r3
 80020f8:	485d      	ldr	r0, [pc, #372]	@ (8002270 <HAL_UART_MspInit+0x25c>)
 80020fa:	f003 f857 	bl	80051ac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80020fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002274 <HAL_UART_MspInit+0x260>)
 8002100:	4a5d      	ldr	r2, [pc, #372]	@ (8002278 <HAL_UART_MspInit+0x264>)
 8002102:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002104:	4b5b      	ldr	r3, [pc, #364]	@ (8002274 <HAL_UART_MspInit+0x260>)
 8002106:	2229      	movs	r2, #41	@ 0x29
 8002108:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800210a:	4b5a      	ldr	r3, [pc, #360]	@ (8002274 <HAL_UART_MspInit+0x260>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002110:	4b58      	ldr	r3, [pc, #352]	@ (8002274 <HAL_UART_MspInit+0x260>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002116:	4b57      	ldr	r3, [pc, #348]	@ (8002274 <HAL_UART_MspInit+0x260>)
 8002118:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800211c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800211e:	4b55      	ldr	r3, [pc, #340]	@ (8002274 <HAL_UART_MspInit+0x260>)
 8002120:	2200      	movs	r2, #0
 8002122:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002124:	4b53      	ldr	r3, [pc, #332]	@ (8002274 <HAL_UART_MspInit+0x260>)
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800212a:	4b52      	ldr	r3, [pc, #328]	@ (8002274 <HAL_UART_MspInit+0x260>)
 800212c:	2200      	movs	r2, #0
 800212e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002130:	4b50      	ldr	r3, [pc, #320]	@ (8002274 <HAL_UART_MspInit+0x260>)
 8002132:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002136:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002138:	4b4e      	ldr	r3, [pc, #312]	@ (8002274 <HAL_UART_MspInit+0x260>)
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800213e:	484d      	ldr	r0, [pc, #308]	@ (8002274 <HAL_UART_MspInit+0x260>)
 8002140:	f000 fe12 	bl	8002d68 <HAL_DMA_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800214a:	f7ff fda1 	bl	8001c90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a48      	ldr	r2, [pc, #288]	@ (8002274 <HAL_UART_MspInit+0x260>)
 8002152:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002156:	4a47      	ldr	r2, [pc, #284]	@ (8002274 <HAL_UART_MspInit+0x260>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 800215c:	4b47      	ldr	r3, [pc, #284]	@ (800227c <HAL_UART_MspInit+0x268>)
 800215e:	4a48      	ldr	r2, [pc, #288]	@ (8002280 <HAL_UART_MspInit+0x26c>)
 8002160:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002162:	4b46      	ldr	r3, [pc, #280]	@ (800227c <HAL_UART_MspInit+0x268>)
 8002164:	222a      	movs	r2, #42	@ 0x2a
 8002166:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002168:	4b44      	ldr	r3, [pc, #272]	@ (800227c <HAL_UART_MspInit+0x268>)
 800216a:	2240      	movs	r2, #64	@ 0x40
 800216c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800216e:	4b43      	ldr	r3, [pc, #268]	@ (800227c <HAL_UART_MspInit+0x268>)
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002174:	4b41      	ldr	r3, [pc, #260]	@ (800227c <HAL_UART_MspInit+0x268>)
 8002176:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800217a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800217c:	4b3f      	ldr	r3, [pc, #252]	@ (800227c <HAL_UART_MspInit+0x268>)
 800217e:	2200      	movs	r2, #0
 8002180:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002182:	4b3e      	ldr	r3, [pc, #248]	@ (800227c <HAL_UART_MspInit+0x268>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002188:	4b3c      	ldr	r3, [pc, #240]	@ (800227c <HAL_UART_MspInit+0x268>)
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800218e:	4b3b      	ldr	r3, [pc, #236]	@ (800227c <HAL_UART_MspInit+0x268>)
 8002190:	2200      	movs	r2, #0
 8002192:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002194:	4b39      	ldr	r3, [pc, #228]	@ (800227c <HAL_UART_MspInit+0x268>)
 8002196:	2200      	movs	r2, #0
 8002198:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800219a:	4838      	ldr	r0, [pc, #224]	@ (800227c <HAL_UART_MspInit+0x268>)
 800219c:	f000 fde4 	bl	8002d68 <HAL_DMA_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_UART_MspInit+0x196>
    {
      Error_Handler();
 80021a6:	f7ff fd73 	bl	8001c90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a33      	ldr	r2, [pc, #204]	@ (800227c <HAL_UART_MspInit+0x268>)
 80021ae:	67da      	str	r2, [r3, #124]	@ 0x7c
 80021b0:	4a32      	ldr	r2, [pc, #200]	@ (800227c <HAL_UART_MspInit+0x268>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	2025      	movs	r0, #37	@ 0x25
 80021bc:	f000 fd9f 	bl	8002cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021c0:	2025      	movs	r0, #37	@ 0x25
 80021c2:	f000 fdb6 	bl	8002d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021c6:	e04b      	b.n	8002260 <HAL_UART_MspInit+0x24c>
  else if(huart->Instance==USART3)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002284 <HAL_UART_MspInit+0x270>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d146      	bne.n	8002260 <HAL_UART_MspInit+0x24c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021d2:	f04f 0202 	mov.w	r2, #2
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80021de:	2300      	movs	r3, #0
 80021e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e4:	f107 0318 	add.w	r3, r7, #24
 80021e8:	4618      	mov	r0, r3
 80021ea:	f005 fc21 	bl	8007a30 <HAL_RCCEx_PeriphCLKConfig>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 80021f4:	f7ff fd4c 	bl	8001c90 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021f8:	4b1c      	ldr	r3, [pc, #112]	@ (800226c <HAL_UART_MspInit+0x258>)
 80021fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021fe:	4a1b      	ldr	r2, [pc, #108]	@ (800226c <HAL_UART_MspInit+0x258>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002204:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002208:	4b18      	ldr	r3, [pc, #96]	@ (800226c <HAL_UART_MspInit+0x258>)
 800220a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800220e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002216:	4b15      	ldr	r3, [pc, #84]	@ (800226c <HAL_UART_MspInit+0x258>)
 8002218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800221c:	4a13      	ldr	r2, [pc, #76]	@ (800226c <HAL_UART_MspInit+0x258>)
 800221e:	f043 0308 	orr.w	r3, r3, #8
 8002222:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002226:	4b11      	ldr	r3, [pc, #68]	@ (800226c <HAL_UART_MspInit+0x258>)
 8002228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8002234:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002238:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800224e:	2307      	movs	r3, #7
 8002250:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002254:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002258:	4619      	mov	r1, r3
 800225a:	480b      	ldr	r0, [pc, #44]	@ (8002288 <HAL_UART_MspInit+0x274>)
 800225c:	f002 ffa6 	bl	80051ac <HAL_GPIO_Init>
}
 8002260:	bf00      	nop
 8002262:	37e8      	adds	r7, #232	@ 0xe8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40011000 	.word	0x40011000
 800226c:	58024400 	.word	0x58024400
 8002270:	58020400 	.word	0x58020400
 8002274:	24000508 	.word	0x24000508
 8002278:	40020010 	.word	0x40020010
 800227c:	24000580 	.word	0x24000580
 8002280:	40020028 	.word	0x40020028
 8002284:	40004800 	.word	0x40004800
 8002288:	58020c00 	.word	0x58020c00

0800228c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <NMI_Handler+0x4>

08002294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <HardFault_Handler+0x4>

0800229c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <MemManage_Handler+0x4>

080022a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <BusFault_Handler+0x4>

080022ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <UsageFault_Handler+0x4>

080022b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80022e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <SysTick_Handler+0x34>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <SysTick_Handler+0x18>
	  Timer1--;
 80022ec:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <SysTick_Handler+0x34>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	4b07      	ldr	r3, [pc, #28]	@ (8002314 <SysTick_Handler+0x34>)
 80022f6:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80022f8:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <SysTick_Handler+0x38>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <SysTick_Handler+0x2c>
	  Timer2--;
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <SysTick_Handler+0x38>)
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <SysTick_Handler+0x38>)
 800230a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800230c:	f000 fbd8 	bl	8002ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	2400028c 	.word	0x2400028c
 8002318:	2400028e 	.word	0x2400028e

0800231c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002320:	4802      	ldr	r0, [pc, #8]	@ (800232c <DMA1_Stream0_IRQHandler+0x10>)
 8002322:	f001 fddd 	bl	8003ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	24000508 	.word	0x24000508

08002330 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002334:	4802      	ldr	r0, [pc, #8]	@ (8002340 <DMA1_Stream1_IRQHandler+0x10>)
 8002336:	f001 fdd3 	bl	8003ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	24000580 	.word	0x24000580

08002344 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002348:	4802      	ldr	r0, [pc, #8]	@ (8002354 <DMA1_Stream2_IRQHandler+0x10>)
 800234a:	f001 fdc9 	bl	8003ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	2400031c 	.word	0x2400031c

08002358 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800235c:	4802      	ldr	r0, [pc, #8]	@ (8002368 <SPI2_IRQHandler+0x10>)
 800235e:	f007 ff75 	bl	800a24c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	24000294 	.word	0x24000294

0800236c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002370:	4802      	ldr	r0, [pc, #8]	@ (800237c <USART1_IRQHandler+0x10>)
 8002372:	f008 fef3 	bl	800b15c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	240003e0 	.word	0x240003e0

08002380 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002384:	4802      	ldr	r0, [pc, #8]	@ (8002390 <OTG_HS_IRQHandler+0x10>)
 8002386:	f003 fa45 	bl	8005814 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	24004624 	.word	0x24004624

08002394 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002398:	4802      	ldr	r0, [pc, #8]	@ (80023a4 <TIM16_IRQHandler+0x10>)
 800239a:	f008 fb2f 	bl	800a9fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	24000394 	.word	0x24000394

080023a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	e00a      	b.n	80023d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023ba:	f3af 8000 	nop.w
 80023be:	4601      	mov	r1, r0
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	60ba      	str	r2, [r7, #8]
 80023c6:	b2ca      	uxtb	r2, r1
 80023c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3301      	adds	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	dbf0      	blt.n	80023ba <_read+0x12>
  }

  return len;
 80023d8:	687b      	ldr	r3, [r7, #4]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	e009      	b.n	8002408 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	60ba      	str	r2, [r7, #8]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fbbf 	bl	8001b80 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3301      	adds	r3, #1
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	429a      	cmp	r2, r3
 800240e:	dbf1      	blt.n	80023f4 <_write+0x12>
  }
  return len;
 8002410:	687b      	ldr	r3, [r7, #4]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <_close>:

int _close(int file)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002442:	605a      	str	r2, [r3, #4]
  return 0;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <_isatty>:

int _isatty(int file)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800245a:	2301      	movs	r3, #1
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800248c:	4a14      	ldr	r2, [pc, #80]	@ (80024e0 <_sbrk+0x5c>)
 800248e:	4b15      	ldr	r3, [pc, #84]	@ (80024e4 <_sbrk+0x60>)
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002498:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a0:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <_sbrk+0x64>)
 80024a2:	4a12      	ldr	r2, [pc, #72]	@ (80024ec <_sbrk+0x68>)
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024a6:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <_sbrk+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d207      	bcs.n	80024c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b4:	f012 ff3a 	bl	801532c <__errno>
 80024b8:	4603      	mov	r3, r0
 80024ba:	220c      	movs	r2, #12
 80024bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
 80024c2:	e009      	b.n	80024d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c4:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <_sbrk+0x64>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ca:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	4a05      	ldr	r2, [pc, #20]	@ (80024e8 <_sbrk+0x64>)
 80024d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024d6:	68fb      	ldr	r3, [r7, #12]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	24050000 	.word	0x24050000
 80024e4:	00000400 	.word	0x00000400
 80024e8:	240028c8 	.word	0x240028c8
 80024ec:	24004e78 	.word	0x24004e78

080024f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024f4:	4b32      	ldr	r3, [pc, #200]	@ (80025c0 <SystemInit+0xd0>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fa:	4a31      	ldr	r2, [pc, #196]	@ (80025c0 <SystemInit+0xd0>)
 80024fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002504:	4b2f      	ldr	r3, [pc, #188]	@ (80025c4 <SystemInit+0xd4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	2b06      	cmp	r3, #6
 800250e:	d807      	bhi.n	8002520 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002510:	4b2c      	ldr	r3, [pc, #176]	@ (80025c4 <SystemInit+0xd4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 030f 	bic.w	r3, r3, #15
 8002518:	4a2a      	ldr	r2, [pc, #168]	@ (80025c4 <SystemInit+0xd4>)
 800251a:	f043 0307 	orr.w	r3, r3, #7
 800251e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002520:	4b29      	ldr	r3, [pc, #164]	@ (80025c8 <SystemInit+0xd8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a28      	ldr	r2, [pc, #160]	@ (80025c8 <SystemInit+0xd8>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800252c:	4b26      	ldr	r3, [pc, #152]	@ (80025c8 <SystemInit+0xd8>)
 800252e:	2200      	movs	r2, #0
 8002530:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002532:	4b25      	ldr	r3, [pc, #148]	@ (80025c8 <SystemInit+0xd8>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4924      	ldr	r1, [pc, #144]	@ (80025c8 <SystemInit+0xd8>)
 8002538:	4b24      	ldr	r3, [pc, #144]	@ (80025cc <SystemInit+0xdc>)
 800253a:	4013      	ands	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800253e:	4b21      	ldr	r3, [pc, #132]	@ (80025c4 <SystemInit+0xd4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800254a:	4b1e      	ldr	r3, [pc, #120]	@ (80025c4 <SystemInit+0xd4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 030f 	bic.w	r3, r3, #15
 8002552:	4a1c      	ldr	r2, [pc, #112]	@ (80025c4 <SystemInit+0xd4>)
 8002554:	f043 0307 	orr.w	r3, r3, #7
 8002558:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800255a:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <SystemInit+0xd8>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002560:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <SystemInit+0xd8>)
 8002562:	2200      	movs	r2, #0
 8002564:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002566:	4b18      	ldr	r3, [pc, #96]	@ (80025c8 <SystemInit+0xd8>)
 8002568:	2200      	movs	r2, #0
 800256a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800256c:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <SystemInit+0xd8>)
 800256e:	4a18      	ldr	r2, [pc, #96]	@ (80025d0 <SystemInit+0xe0>)
 8002570:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <SystemInit+0xd8>)
 8002574:	4a17      	ldr	r2, [pc, #92]	@ (80025d4 <SystemInit+0xe4>)
 8002576:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002578:	4b13      	ldr	r3, [pc, #76]	@ (80025c8 <SystemInit+0xd8>)
 800257a:	4a17      	ldr	r2, [pc, #92]	@ (80025d8 <SystemInit+0xe8>)
 800257c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800257e:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <SystemInit+0xd8>)
 8002580:	2200      	movs	r2, #0
 8002582:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002584:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <SystemInit+0xd8>)
 8002586:	4a14      	ldr	r2, [pc, #80]	@ (80025d8 <SystemInit+0xe8>)
 8002588:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800258a:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <SystemInit+0xd8>)
 800258c:	2200      	movs	r2, #0
 800258e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002590:	4b0d      	ldr	r3, [pc, #52]	@ (80025c8 <SystemInit+0xd8>)
 8002592:	4a11      	ldr	r2, [pc, #68]	@ (80025d8 <SystemInit+0xe8>)
 8002594:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002596:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <SystemInit+0xd8>)
 8002598:	2200      	movs	r2, #0
 800259a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800259c:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <SystemInit+0xd8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a09      	ldr	r2, [pc, #36]	@ (80025c8 <SystemInit+0xd8>)
 80025a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80025a8:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <SystemInit+0xd8>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025ae:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <SystemInit+0xec>)
 80025b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80025b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00
 80025c4:	52002000 	.word	0x52002000
 80025c8:	58024400 	.word	0x58024400
 80025cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80025d0:	02020200 	.word	0x02020200
 80025d4:	01ff0000 	.word	0x01ff0000
 80025d8:	01010280 	.word	0x01010280
 80025dc:	52004000 	.word	0x52004000

080025e0 <search_prism>:
	  uint32_t c;
	  uint32_t d;

} ForTime;

int search_prism(int search_prism_flag){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	while (search_prism_flag==1){
 80025e8:	e04b      	b.n	8002682 <search_prism+0xa2>
		if (first_search==1)
 80025ea:	4b29      	ldr	r3, [pc, #164]	@ (8002690 <search_prism+0xb0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d103      	bne.n	80025fa <search_prism+0x1a>
			{
			  buffer_tx= prism_search_command;
 80025f2:	4b28      	ldr	r3, [pc, #160]	@ (8002694 <search_prism+0xb4>)
 80025f4:	4a28      	ldr	r2, [pc, #160]	@ (8002698 <search_prism+0xb8>)
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e002      	b.n	8002600 <search_prism+0x20>
			 }
		else
			 {
			  buffer_tx= complete_prism_search_command;
 80025fa:	4b26      	ldr	r3, [pc, #152]	@ (8002694 <search_prism+0xb4>)
 80025fc:	4a27      	ldr	r2, [pc, #156]	@ (800269c <search_prism+0xbc>)
 80025fe:	601a      	str	r2, [r3, #0]
			 }
		//*ptr_uart_buffer= &uartBuffer[0];

		HAL_UART_Transmit(&huart1, (uint8_t *)buffer_tx, UART_BUFFER_SIZE,UART_BUFFER_SIZE);
 8002600:	4b24      	ldr	r3, [pc, #144]	@ (8002694 <search_prism+0xb4>)
 8002602:	6819      	ldr	r1, [r3, #0]
 8002604:	4b26      	ldr	r3, [pc, #152]	@ (80026a0 <search_prism+0xc0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	b29a      	uxth	r2, r3
 800260a:	4b25      	ldr	r3, [pc, #148]	@ (80026a0 <search_prism+0xc0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4825      	ldr	r0, [pc, #148]	@ (80026a4 <search_prism+0xc4>)
 8002610:	f008 fc4e 	bl	800aeb0 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, (uint8_t *)&uartBuffer, UART_BUFFER_SIZE,10000);
 8002614:	4b22      	ldr	r3, [pc, #136]	@ (80026a0 <search_prism+0xc0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	b29a      	uxth	r2, r3
 800261a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800261e:	4922      	ldr	r1, [pc, #136]	@ (80026a8 <search_prism+0xc8>)
 8002620:	4820      	ldr	r0, [pc, #128]	@ (80026a4 <search_prism+0xc4>)
 8002622:	f008 fcd3 	bl	800afcc <HAL_UART_Receive>
		//HAL_Delay(10000);
		//strcpy(&uartBuffer,zero_buffer);
		//control[0]=uartBuffer[9];
		//control[1]=uartBuffer[10];
		sscanf(&uartBuffer[9],"%d",& ctrl);
 8002626:	4a21      	ldr	r2, [pc, #132]	@ (80026ac <search_prism+0xcc>)
 8002628:	4921      	ldr	r1, [pc, #132]	@ (80026b0 <search_prism+0xd0>)
 800262a:	4822      	ldr	r0, [pc, #136]	@ (80026b4 <search_prism+0xd4>)
 800262c:	f012 fd1c 	bl	8015068 <siscanf>
		//memset((uint8_t *)&uartBuffer,0,sizeof(uartBuffer)); //Clear buffer
		memset((uint8_t *)&uartBuffer,1,UART_BUFFER_SIZE); //Clear buffer
 8002630:	4b1b      	ldr	r3, [pc, #108]	@ (80026a0 <search_prism+0xc0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	2101      	movs	r1, #1
 8002638:	481b      	ldr	r0, [pc, #108]	@ (80026a8 <search_prism+0xc8>)
 800263a:	f012 fe19 	bl	8015270 <memset>
		//memset((uint8_t *)&uartBuffer,0,sizeof(uartBuffer));
		if (ctrl==0){ //(control[0]=='0' && control[1]=='0')
 800263e:	4b1b      	ldr	r3, [pc, #108]	@ (80026ac <search_prism+0xcc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <search_prism+0x74>
						//printf(uartBuffer);
			printf("\nPrism locked \r\n"); //
 8002646:	481c      	ldr	r0, [pc, #112]	@ (80026b8 <search_prism+0xd8>)
 8002648:	f012 fce6 	bl	8015018 <puts>
			search_prism_flag=0;
 800264c:	2300      	movs	r3, #0
 800264e:	607b      	str	r3, [r7, #4]
			return search_prism_flag;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	e019      	b.n	8002688 <search_prism+0xa8>
		}
		else if (ctrl==31){
 8002654:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <search_prism+0xcc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b1f      	cmp	r3, #31
 800265a:	d109      	bne.n	8002670 <search_prism+0x90>
			printf(uartBuffer);
 800265c:	4812      	ldr	r0, [pc, #72]	@ (80026a8 <search_prism+0xc8>)
 800265e:	f012 fc73 	bl	8014f48 <iprintf>
			printf("\n Prism not found \r\n"); //
 8002662:	4816      	ldr	r0, [pc, #88]	@ (80026bc <search_prism+0xdc>)
 8002664:	f012 fcd8 	bl	8015018 <puts>
			first_search=0;
 8002668:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <search_prism+0xb0>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	e008      	b.n	8002682 <search_prism+0xa2>
		}
		else
		{
			printf(uartBuffer);
 8002670:	480d      	ldr	r0, [pc, #52]	@ (80026a8 <search_prism+0xc8>)
 8002672:	f012 fc69 	bl	8014f48 <iprintf>
			printf("\n errore \r\n"); //
 8002676:	4812      	ldr	r0, [pc, #72]	@ (80026c0 <search_prism+0xe0>)
 8002678:	f012 fcce 	bl	8015018 <puts>
			first_search=0;
 800267c:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <search_prism+0xb0>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
	while (search_prism_flag==1){
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d0b0      	beq.n	80025ea <search_prism+0xa>
		}
	}

}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	24000098 	.word	0x24000098
 8002694:	24002664 	.word	0x24002664
 8002698:	2400009c 	.word	0x2400009c
 800269c:	240000ac 	.word	0x240000ac
 80026a0:	24000100 	.word	0x24000100
 80026a4:	240003e0 	.word	0x240003e0
 80026a8:	240026ac 	.word	0x240026ac
 80026ac:	2400000c 	.word	0x2400000c
 80026b0:	08016b6c 	.word	0x08016b6c
 80026b4:	240026b5 	.word	0x240026b5
 80026b8:	08016b70 	.word	0x08016b70
 80026bc:	08016b80 	.word	0x08016b80
 80026c0:	08016b94 	.word	0x08016b94

080026c4 <start_distance>:
void start_distance(){
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	buffer_tx=start_distance_command;
 80026c8:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <start_distance+0x5c>)
 80026ca:	4a16      	ldr	r2, [pc, #88]	@ (8002724 <start_distance+0x60>)
 80026cc:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer_tx, UART_BUFFER_SIZE,UART_BUFFER_SIZE);
 80026ce:	4b14      	ldr	r3, [pc, #80]	@ (8002720 <start_distance+0x5c>)
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <start_distance+0x64>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	4b13      	ldr	r3, [pc, #76]	@ (8002728 <start_distance+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4813      	ldr	r0, [pc, #76]	@ (800272c <start_distance+0x68>)
 80026de:	f008 fbe7 	bl	800aeb0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t *)&uartBuffer, UART_BUFFER_SIZE,1000);
 80026e2:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <start_distance+0x64>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ec:	4910      	ldr	r1, [pc, #64]	@ (8002730 <start_distance+0x6c>)
 80026ee:	480f      	ldr	r0, [pc, #60]	@ (800272c <start_distance+0x68>)
 80026f0:	f008 fc6c 	bl	800afcc <HAL_UART_Receive>
	sscanf(&uartBuffer[9],"%d",& ctrl);
 80026f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002734 <start_distance+0x70>)
 80026f6:	4910      	ldr	r1, [pc, #64]	@ (8002738 <start_distance+0x74>)
 80026f8:	4810      	ldr	r0, [pc, #64]	@ (800273c <start_distance+0x78>)
 80026fa:	f012 fcb5 	bl	8015068 <siscanf>
	memset((uint8_t *)&uartBuffer,1,UART_BUFFER_SIZE); //Clear buffer
 80026fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002728 <start_distance+0x64>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	2101      	movs	r1, #1
 8002706:	480a      	ldr	r0, [pc, #40]	@ (8002730 <start_distance+0x6c>)
 8002708:	f012 fdb2 	bl	8015270 <memset>
	//memset((uint8_t *)&uartBuffer,0,sizeof(uartBuffer));
	if (ctrl==0){ //(control[0]=='0' && control[1]=='0')
 800270c:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <start_distance+0x70>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <start_distance+0x56>
					//printf(uartBuffer);
		printf("\n Distance measured \r\n"); //
 8002714:	480a      	ldr	r0, [pc, #40]	@ (8002740 <start_distance+0x7c>)
 8002716:	f012 fc7f 	bl	8015018 <puts>
	}
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	24002664 	.word	0x24002664
 8002724:	240000f0 	.word	0x240000f0
 8002728:	24000100 	.word	0x24000100
 800272c:	240003e0 	.word	0x240003e0
 8002730:	240026ac 	.word	0x240026ac
 8002734:	2400000c 	.word	0x2400000c
 8002738:	08016b6c 	.word	0x08016b6c
 800273c:	240026b5 	.word	0x240026b5
 8002740:	08016ba0 	.word	0x08016ba0

08002744 <get_TS_time_stamp>:

ForTime get_TS_time_stamp(){
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b08f      	sub	sp, #60	@ 0x3c
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	ForTime time_ts;
	// Salva il valore iniziale del contatore
	uint32_t start_andata = __HAL_TIM_GET_COUNTER(&htim16);
 800274c:	4b30      	ldr	r3, [pc, #192]	@ (8002810 <get_TS_time_stamp+0xcc>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	637b      	str	r3, [r7, #52]	@ 0x34
	get_nuc_time_stamp();
 8002754:	f7ff fae4 	bl	8001d20 <get_nuc_time_stamp>
	strcat(nuc_time_stamp, "\r");
 8002758:	4b2e      	ldr	r3, [pc, #184]	@ (8002814 <get_TS_time_stamp+0xd0>)
 800275a:	681c      	ldr	r4, [r3, #0]
 800275c:	4620      	mov	r0, r4
 800275e:	f7fd fdd7 	bl	8000310 <strlen>
 8002762:	4603      	mov	r3, r0
 8002764:	4423      	add	r3, r4
 8002766:	492c      	ldr	r1, [pc, #176]	@ (8002818 <get_TS_time_stamp+0xd4>)
 8002768:	461a      	mov	r2, r3
 800276a:	460b      	mov	r3, r1
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	8013      	strh	r3, [r2, #0]
	strcat(get_time_stamp_command, nuc_time_stamp);
 8002770:	4b28      	ldr	r3, [pc, #160]	@ (8002814 <get_TS_time_stamp+0xd0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4619      	mov	r1, r3
 8002776:	4829      	ldr	r0, [pc, #164]	@ (800281c <get_TS_time_stamp+0xd8>)
 8002778:	f012 fd82 	bl	8015280 <strcat>
	//buffer_tx=get_time_stamp_command;
	//sprintf(buffer_tx, "%c", nuc_time_stamp);
	//printf((char *)get_time_stamp_command);
	// Salva il valore finale del contatore
	uint32_t end_andata = __HAL_TIM_GET_COUNTER(&htim16);
 800277c:	4b24      	ldr	r3, [pc, #144]	@ (8002810 <get_TS_time_stamp+0xcc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	633b      	str	r3, [r7, #48]	@ 0x30
	// Calcola il tempo di esecuzione in 0.5 microsecondi
	uint32_t time_andata = end_andata - start_andata;
 8002784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_UART_Transmit(&huart1, (uint8_t *)get_time_stamp_command, 19,19);
 800278c:	2313      	movs	r3, #19
 800278e:	2213      	movs	r2, #19
 8002790:	4922      	ldr	r1, [pc, #136]	@ (800281c <get_TS_time_stamp+0xd8>)
 8002792:	4823      	ldr	r0, [pc, #140]	@ (8002820 <get_TS_time_stamp+0xdc>)
 8002794:	f008 fb8c 	bl	800aeb0 <HAL_UART_Transmit>
	uint32_t start_ritorno = __HAL_TIM_GET_COUNTER(&htim16);
 8002798:	4b1d      	ldr	r3, [pc, #116]	@ (8002810 <get_TS_time_stamp+0xcc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279e:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_UART_Receive(&huart1, (uint8_t *)&ts_time_stamp_buffer, 50,500);
 80027a0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80027a4:	2232      	movs	r2, #50	@ 0x32
 80027a6:	491f      	ldr	r1, [pc, #124]	@ (8002824 <get_TS_time_stamp+0xe0>)
 80027a8:	481d      	ldr	r0, [pc, #116]	@ (8002820 <get_TS_time_stamp+0xdc>)
 80027aa:	f008 fc0f 	bl	800afcc <HAL_UART_Receive>
	time_stamp_TS_buffer=ts_time_stamp_buffer;
 80027ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002828 <get_TS_time_stamp+0xe4>)
 80027b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002824 <get_TS_time_stamp+0xe0>)
 80027b2:	601a      	str	r2, [r3, #0]
	uint32_t end_ritorno = __HAL_TIM_GET_COUNTER(&htim16);
 80027b4:	4b16      	ldr	r3, [pc, #88]	@ (8002810 <get_TS_time_stamp+0xcc>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t time_ritorno = end_ritorno - start_ritorno;
 80027bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	623b      	str	r3, [r7, #32]
	int32_t delta_time=time_andata-time_ritorno;
 80027c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	61fb      	str	r3, [r7, #28]
	HAL_Delay(2*delta_time); // HAL_TIM_16 conta 0.5ms
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 f995 	bl	8002b00 <HAL_Delay>
	send_complete_time_stamp(time_stamp_TS_buffer);
 80027d6:	4b14      	ldr	r3, [pc, #80]	@ (8002828 <get_TS_time_stamp+0xe4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff face 	bl	8001d7c <send_complete_time_stamp>
	int32_t time_ritorno_compensato=time_ritorno+delta_time;
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	4413      	add	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
	//printf("Tempo di andata=%i  Tempo di ritorno= %i  delta_time=%i  tempo_rit_comp=%i" , time_andata,time_ritorno,delta_time, time_ritorno_compensato);
	time_ts.a=time_andata;
 80027e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ea:	60bb      	str	r3, [r7, #8]
	time_ts.b=time_ritorno;
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	60fb      	str	r3, [r7, #12]
	time_ts.c=delta_time;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	613b      	str	r3, [r7, #16]
	time_ts.d=time_ritorno_compensato;
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	617b      	str	r3, [r7, #20]
	return time_ts;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	461c      	mov	r4, r3
 80027fc:	f107 0308 	add.w	r3, r7, #8
 8002800:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002802:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	373c      	adds	r7, #60	@ 0x3c
 800280a:	46bd      	mov	sp, r7
 800280c:	bd90      	pop	{r4, r7, pc}
 800280e:	bf00      	nop
 8002810:	24000394 	.word	0x24000394
 8002814:	240028bc 	.word	0x240028bc
 8002818:	08016bb8 	.word	0x08016bb8
 800281c:	240000bc 	.word	0x240000bc
 8002820:	240003e0 	.word	0x240003e0
 8002824:	240028d0 	.word	0x240028d0
 8002828:	240028cc 	.word	0x240028cc

0800282c <start_measure>:

void start_measure( ){
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0

		int flag_stream_started=0;
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
		while (flag_stream_started==0){
 8002836:	e041      	b.n	80028bc <start_measure+0x90>
		buffer_tx=start_stream_command;
 8002838:	4b24      	ldr	r3, [pc, #144]	@ (80028cc <start_measure+0xa0>)
 800283a:	4a25      	ldr	r2, [pc, #148]	@ (80028d0 <start_measure+0xa4>)
 800283c:	601a      	str	r2, [r3, #0]
		HAL_Delay(5000);
 800283e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002842:	f000 f95d 	bl	8002b00 <HAL_Delay>
		//HAL_UART_Receive_DMA(&huart1, (uint8_t *)&stream_buffer, 103);
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer_tx, UART_BUFFER_SIZE,UART_BUFFER_SIZE);
 8002846:	4b21      	ldr	r3, [pc, #132]	@ (80028cc <start_measure+0xa0>)
 8002848:	6819      	ldr	r1, [r3, #0]
 800284a:	4b22      	ldr	r3, [pc, #136]	@ (80028d4 <start_measure+0xa8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	b29a      	uxth	r2, r3
 8002850:	4b20      	ldr	r3, [pc, #128]	@ (80028d4 <start_measure+0xa8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4820      	ldr	r0, [pc, #128]	@ (80028d8 <start_measure+0xac>)
 8002856:	f008 fb2b 	bl	800aeb0 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, (uint8_t *)&stream_buffer, 10,500);
 800285a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800285e:	220a      	movs	r2, #10
 8002860:	491e      	ldr	r1, [pc, #120]	@ (80028dc <start_measure+0xb0>)
 8002862:	481d      	ldr	r0, [pc, #116]	@ (80028d8 <start_measure+0xac>)
 8002864:	f008 fbb2 	bl	800afcc <HAL_UART_Receive>
		sscanf(&stream_buffer[9],"%d",& ctrl);
 8002868:	4a1d      	ldr	r2, [pc, #116]	@ (80028e0 <start_measure+0xb4>)
 800286a:	491e      	ldr	r1, [pc, #120]	@ (80028e4 <start_measure+0xb8>)
 800286c:	481e      	ldr	r0, [pc, #120]	@ (80028e8 <start_measure+0xbc>)
 800286e:	f012 fbfb 	bl	8015068 <siscanf>
		//memset((uint8_t *)&uartBuffer,1,UART_BUFFER_SIZE); //Clear buffer
			//memset((uint8_t *)&uartBuffer,0,sizeof(uartBuffer));
			if (ctrl==0){ //(control[0]=='0' && control[1]=='0')							//printf(uartBuffer);
 8002872:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <start_measure+0xb4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d105      	bne.n	8002886 <start_measure+0x5a>
				flag_stream_started=1;
 800287a:	2301      	movs	r3, #1
 800287c:	607b      	str	r3, [r7, #4]
				printf("\nStream started \r\n"); //
 800287e:	481b      	ldr	r0, [pc, #108]	@ (80028ec <start_measure+0xc0>)
 8002880:	f012 fbca 	bl	8015018 <puts>
 8002884:	e01a      	b.n	80028bc <start_measure+0x90>
			}
			else if (ctrl==51){
 8002886:	4b16      	ldr	r3, [pc, #88]	@ (80028e0 <start_measure+0xb4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b33      	cmp	r3, #51	@ 0x33
 800288c:	d110      	bne.n	80028b0 <start_measure+0x84>
				printf("\nStream already started --> stop stream and retry to start stream\r\n");
 800288e:	4818      	ldr	r0, [pc, #96]	@ (80028f0 <start_measure+0xc4>)
 8002890:	f012 fbc2 	bl	8015018 <puts>
				buffer_tx=stop_stream_command;
 8002894:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <start_measure+0xa0>)
 8002896:	4a17      	ldr	r2, [pc, #92]	@ (80028f4 <start_measure+0xc8>)
 8002898:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, (uint8_t *)buffer_tx, UART_BUFFER_SIZE,UART_BUFFER_SIZE);
 800289a:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <start_measure+0xa0>)
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	4b0d      	ldr	r3, [pc, #52]	@ (80028d4 <start_measure+0xa8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <start_measure+0xa8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	480b      	ldr	r0, [pc, #44]	@ (80028d8 <start_measure+0xac>)
 80028aa:	f008 fb01 	bl	800aeb0 <HAL_UART_Transmit>
 80028ae:	e005      	b.n	80028bc <start_measure+0x90>
			}
			else {
				printf("\n  ctrl = %d \r\n",ctrl);
 80028b0:	4b0b      	ldr	r3, [pc, #44]	@ (80028e0 <start_measure+0xb4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	4810      	ldr	r0, [pc, #64]	@ (80028f8 <start_measure+0xcc>)
 80028b8:	f012 fb46 	bl	8014f48 <iprintf>
		while (flag_stream_started==0){
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0ba      	beq.n	8002838 <start_measure+0xc>
			}
		}
		//return stop_measure_flag; // if 1 stop measure, if 0 change file
}
 80028c2:	bf00      	nop
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	24002664 	.word	0x24002664
 80028d0:	240000d0 	.word	0x240000d0
 80028d4:	24000100 	.word	0x24000100
 80028d8:	240003e0 	.word	0x240003e0
 80028dc:	24002754 	.word	0x24002754
 80028e0:	2400000c 	.word	0x2400000c
 80028e4:	08016b6c 	.word	0x08016b6c
 80028e8:	2400275d 	.word	0x2400275d
 80028ec:	08016bbc 	.word	0x08016bbc
 80028f0:	08016bd0 	.word	0x08016bd0
 80028f4:	240000e0 	.word	0x240000e0
 80028f8:	08016c14 	.word	0x08016c14

080028fc <stop_measure>:
		  time_stream=0;
	}
	*/
}

void stop_measure(){
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	buffer_tx=stop_stream_command;
 8002900:	4b18      	ldr	r3, [pc, #96]	@ (8002964 <stop_measure+0x68>)
 8002902:	4a19      	ldr	r2, [pc, #100]	@ (8002968 <stop_measure+0x6c>)
 8002904:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer_tx, UART_BUFFER_SIZE,UART_BUFFER_SIZE);
 8002906:	4b17      	ldr	r3, [pc, #92]	@ (8002964 <stop_measure+0x68>)
 8002908:	6819      	ldr	r1, [r3, #0]
 800290a:	4b18      	ldr	r3, [pc, #96]	@ (800296c <stop_measure+0x70>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	b29a      	uxth	r2, r3
 8002910:	4b16      	ldr	r3, [pc, #88]	@ (800296c <stop_measure+0x70>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4816      	ldr	r0, [pc, #88]	@ (8002970 <stop_measure+0x74>)
 8002916:	f008 facb 	bl	800aeb0 <HAL_UART_Transmit>
	memset((uint8_t *)&uartBuffer,0,UART_BUFFER_SIZE);
 800291a:	4b14      	ldr	r3, [pc, #80]	@ (800296c <stop_measure+0x70>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	2100      	movs	r1, #0
 8002922:	4814      	ldr	r0, [pc, #80]	@ (8002974 <stop_measure+0x78>)
 8002924:	f012 fca4 	bl	8015270 <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)&uartBuffer, UART_BUFFER_SIZE,100);
 8002928:	4b10      	ldr	r3, [pc, #64]	@ (800296c <stop_measure+0x70>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	b29a      	uxth	r2, r3
 800292e:	2364      	movs	r3, #100	@ 0x64
 8002930:	4910      	ldr	r1, [pc, #64]	@ (8002974 <stop_measure+0x78>)
 8002932:	480f      	ldr	r0, [pc, #60]	@ (8002970 <stop_measure+0x74>)
 8002934:	f008 fb4a 	bl	800afcc <HAL_UART_Receive>
	sscanf(&uartBuffer[9],"%d",& ctrl);
 8002938:	4a0f      	ldr	r2, [pc, #60]	@ (8002978 <stop_measure+0x7c>)
 800293a:	4910      	ldr	r1, [pc, #64]	@ (800297c <stop_measure+0x80>)
 800293c:	4810      	ldr	r0, [pc, #64]	@ (8002980 <stop_measure+0x84>)
 800293e:	f012 fb93 	bl	8015068 <siscanf>
	memset((uint8_t *)&uartBuffer,0,UART_BUFFER_SIZE); //Clear buffer
 8002942:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <stop_measure+0x70>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	2100      	movs	r1, #0
 800294a:	480a      	ldr	r0, [pc, #40]	@ (8002974 <stop_measure+0x78>)
 800294c:	f012 fc90 	bl	8015270 <memset>
	if (ctrl==0) {
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <stop_measure+0x7c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <stop_measure+0x62>
		stop_stream_complete=1;
 8002958:	4b0a      	ldr	r3, [pc, #40]	@ (8002984 <stop_measure+0x88>)
 800295a:	2201      	movs	r2, #1
 800295c:	601a      	str	r2, [r3, #0]
	}
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	24002664 	.word	0x24002664
 8002968:	240000e0 	.word	0x240000e0
 800296c:	24000100 	.word	0x24000100
 8002970:	240003e0 	.word	0x240003e0
 8002974:	240026ac 	.word	0x240026ac
 8002978:	2400000c 	.word	0x2400000c
 800297c:	08016b6c 	.word	0x08016b6c
 8002980:	240026b5 	.word	0x240026b5
 8002984:	24002740 	.word	0x24002740

08002988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
 ldr   sp, =_estack      /* set stack pointer */
 8002988:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800298c:	f7ff fdb0 	bl	80024f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002990:	480c      	ldr	r0, [pc, #48]	@ (80029c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002992:	490d      	ldr	r1, [pc, #52]	@ (80029c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002994:	4a0d      	ldr	r2, [pc, #52]	@ (80029cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002998:	e002      	b.n	80029a0 <LoopCopyDataInit>

0800299a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800299a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800299c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800299e:	3304      	adds	r3, #4

080029a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a4:	d3f9      	bcc.n	800299a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029a6:	4a0a      	ldr	r2, [pc, #40]	@ (80029d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029a8:	4c0a      	ldr	r4, [pc, #40]	@ (80029d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029ac:	e001      	b.n	80029b2 <LoopFillZerobss>

080029ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b0:	3204      	adds	r2, #4

080029b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b4:	d3fb      	bcc.n	80029ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029b6:	f012 fcbf 	bl	8015338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ba:	f7fe fb5b 	bl	8001074 <main>
  bx  lr
 80029be:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 80029c0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80029c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80029c8:	24000270 	.word	0x24000270
  ldr r2, =_sidata
 80029cc:	080172a0 	.word	0x080172a0
  ldr r2, =_sbss
 80029d0:	24000270 	.word	0x24000270
  ldr r4, =_ebss
 80029d4:	24004e74 	.word	0x24004e74

080029d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029d8:	e7fe      	b.n	80029d8 <ADC3_IRQHandler>
	...

080029dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e2:	2003      	movs	r0, #3
 80029e4:	f000 f980 	bl	8002ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029e8:	f004 fe4c 	bl	8007684 <HAL_RCC_GetSysClockFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b15      	ldr	r3, [pc, #84]	@ (8002a44 <HAL_Init+0x68>)
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	4913      	ldr	r1, [pc, #76]	@ (8002a48 <HAL_Init+0x6c>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
 8002a04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a06:	4b0f      	ldr	r3, [pc, #60]	@ (8002a44 <HAL_Init+0x68>)
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002a48 <HAL_Init+0x6c>)
 8002a10:	5cd3      	ldrb	r3, [r2, r3]
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a4c <HAL_Init+0x70>)
 8002a1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a20:	4a0b      	ldr	r2, [pc, #44]	@ (8002a50 <HAL_Init+0x74>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a26:	2000      	movs	r0, #0
 8002a28:	f000 f814 	bl	8002a54 <HAL_InitTick>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e002      	b.n	8002a3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a36:	f7ff f9d9 	bl	8001dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	58024400 	.word	0x58024400
 8002a48:	08016cc0 	.word	0x08016cc0
 8002a4c:	24000094 	.word	0x24000094
 8002a50:	24000090 	.word	0x24000090

08002a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a5c:	4b15      	ldr	r3, [pc, #84]	@ (8002ab4 <HAL_InitTick+0x60>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e021      	b.n	8002aac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a68:	4b13      	ldr	r3, [pc, #76]	@ (8002ab8 <HAL_InitTick+0x64>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <HAL_InitTick+0x60>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	4619      	mov	r1, r3
 8002a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 f965 	bl	8002d4e <HAL_SYSTICK_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00e      	b.n	8002aac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b0f      	cmp	r3, #15
 8002a92:	d80a      	bhi.n	8002aaa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a94:	2200      	movs	r2, #0
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	f000 f92f 	bl	8002cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aa0:	4a06      	ldr	r2, [pc, #24]	@ (8002abc <HAL_InitTick+0x68>)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e000      	b.n	8002aac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	24000108 	.word	0x24000108
 8002ab8:	24000090 	.word	0x24000090
 8002abc:	24000104 	.word	0x24000104

08002ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ac4:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <HAL_IncTick+0x20>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <HAL_IncTick+0x24>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4413      	add	r3, r2
 8002ad0:	4a04      	ldr	r2, [pc, #16]	@ (8002ae4 <HAL_IncTick+0x24>)
 8002ad2:	6013      	str	r3, [r2, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	24000108 	.word	0x24000108
 8002ae4:	24002904 	.word	0x24002904

08002ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return uwTick;
 8002aec:	4b03      	ldr	r3, [pc, #12]	@ (8002afc <HAL_GetTick+0x14>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	24002904 	.word	0x24002904

08002b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b08:	f7ff ffee 	bl	8002ae8 <HAL_GetTick>
 8002b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d005      	beq.n	8002b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b44 <HAL_Delay+0x44>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b26:	bf00      	nop
 8002b28:	f7ff ffde 	bl	8002ae8 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d8f7      	bhi.n	8002b28 <HAL_Delay+0x28>
  {
  }
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	24000108 	.word	0x24000108

08002b48 <__NVIC_SetPriorityGrouping>:
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b58:	4b0b      	ldr	r3, [pc, #44]	@ (8002b88 <__NVIC_SetPriorityGrouping+0x40>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b64:	4013      	ands	r3, r2
 8002b66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b70:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <__NVIC_SetPriorityGrouping+0x44>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b76:	4a04      	ldr	r2, [pc, #16]	@ (8002b88 <__NVIC_SetPriorityGrouping+0x40>)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	60d3      	str	r3, [r2, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000ed00 	.word	0xe000ed00
 8002b8c:	05fa0000 	.word	0x05fa0000

08002b90 <__NVIC_GetPriorityGrouping>:
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b94:	4b04      	ldr	r3, [pc, #16]	@ (8002ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	0a1b      	lsrs	r3, r3, #8
 8002b9a:	f003 0307 	and.w	r3, r3, #7
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <__NVIC_EnableIRQ>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	db0b      	blt.n	8002bd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	f003 021f 	and.w	r2, r3, #31
 8002bc4:	4907      	ldr	r1, [pc, #28]	@ (8002be4 <__NVIC_EnableIRQ+0x38>)
 8002bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	2001      	movs	r0, #1
 8002bce:	fa00 f202 	lsl.w	r2, r0, r2
 8002bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000e100 	.word	0xe000e100

08002be8 <__NVIC_SetPriority>:
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	6039      	str	r1, [r7, #0]
 8002bf2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	db0a      	blt.n	8002c12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	490c      	ldr	r1, [pc, #48]	@ (8002c34 <__NVIC_SetPriority+0x4c>)
 8002c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c06:	0112      	lsls	r2, r2, #4
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002c10:	e00a      	b.n	8002c28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	4908      	ldr	r1, [pc, #32]	@ (8002c38 <__NVIC_SetPriority+0x50>)
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	3b04      	subs	r3, #4
 8002c20:	0112      	lsls	r2, r2, #4
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	440b      	add	r3, r1
 8002c26:	761a      	strb	r2, [r3, #24]
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000e100 	.word	0xe000e100
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <NVIC_EncodePriority>:
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b089      	sub	sp, #36	@ 0x24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f1c3 0307 	rsb	r3, r3, #7
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	bf28      	it	cs
 8002c5a:	2304      	movcs	r3, #4
 8002c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3304      	adds	r3, #4
 8002c62:	2b06      	cmp	r3, #6
 8002c64:	d902      	bls.n	8002c6c <NVIC_EncodePriority+0x30>
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3b03      	subs	r3, #3
 8002c6a:	e000      	b.n	8002c6e <NVIC_EncodePriority+0x32>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c70:	f04f 32ff 	mov.w	r2, #4294967295
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43da      	mvns	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	401a      	ands	r2, r3
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c84:	f04f 31ff 	mov.w	r1, #4294967295
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8e:	43d9      	mvns	r1, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c94:	4313      	orrs	r3, r2
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3724      	adds	r7, #36	@ 0x24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cb4:	d301      	bcc.n	8002cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e00f      	b.n	8002cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce4 <SysTick_Config+0x40>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cc2:	210f      	movs	r1, #15
 8002cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc8:	f7ff ff8e 	bl	8002be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ccc:	4b05      	ldr	r3, [pc, #20]	@ (8002ce4 <SysTick_Config+0x40>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cd2:	4b04      	ldr	r3, [pc, #16]	@ (8002ce4 <SysTick_Config+0x40>)
 8002cd4:	2207      	movs	r2, #7
 8002cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	e000e010 	.word	0xe000e010

08002ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff ff29 	bl	8002b48 <__NVIC_SetPriorityGrouping>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	4603      	mov	r3, r0
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d0c:	f7ff ff40 	bl	8002b90 <__NVIC_GetPriorityGrouping>
 8002d10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	6978      	ldr	r0, [r7, #20]
 8002d18:	f7ff ff90 	bl	8002c3c <NVIC_EncodePriority>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff5f 	bl	8002be8 <__NVIC_SetPriority>
}
 8002d2a:	bf00      	nop
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff33 	bl	8002bac <__NVIC_EnableIRQ>
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ffa4 	bl	8002ca4 <SysTick_Config>
 8002d5c:	4603      	mov	r3, r0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d70:	f7ff feba 	bl	8002ae8 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e312      	b.n	80033a6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a66      	ldr	r2, [pc, #408]	@ (8002f20 <HAL_DMA_Init+0x1b8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d04a      	beq.n	8002e20 <HAL_DMA_Init+0xb8>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a65      	ldr	r2, [pc, #404]	@ (8002f24 <HAL_DMA_Init+0x1bc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d045      	beq.n	8002e20 <HAL_DMA_Init+0xb8>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a63      	ldr	r2, [pc, #396]	@ (8002f28 <HAL_DMA_Init+0x1c0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d040      	beq.n	8002e20 <HAL_DMA_Init+0xb8>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a62      	ldr	r2, [pc, #392]	@ (8002f2c <HAL_DMA_Init+0x1c4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d03b      	beq.n	8002e20 <HAL_DMA_Init+0xb8>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a60      	ldr	r2, [pc, #384]	@ (8002f30 <HAL_DMA_Init+0x1c8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d036      	beq.n	8002e20 <HAL_DMA_Init+0xb8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a5f      	ldr	r2, [pc, #380]	@ (8002f34 <HAL_DMA_Init+0x1cc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d031      	beq.n	8002e20 <HAL_DMA_Init+0xb8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a5d      	ldr	r2, [pc, #372]	@ (8002f38 <HAL_DMA_Init+0x1d0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d02c      	beq.n	8002e20 <HAL_DMA_Init+0xb8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a5c      	ldr	r2, [pc, #368]	@ (8002f3c <HAL_DMA_Init+0x1d4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d027      	beq.n	8002e20 <HAL_DMA_Init+0xb8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a5a      	ldr	r2, [pc, #360]	@ (8002f40 <HAL_DMA_Init+0x1d8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d022      	beq.n	8002e20 <HAL_DMA_Init+0xb8>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a59      	ldr	r2, [pc, #356]	@ (8002f44 <HAL_DMA_Init+0x1dc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d01d      	beq.n	8002e20 <HAL_DMA_Init+0xb8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a57      	ldr	r2, [pc, #348]	@ (8002f48 <HAL_DMA_Init+0x1e0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d018      	beq.n	8002e20 <HAL_DMA_Init+0xb8>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a56      	ldr	r2, [pc, #344]	@ (8002f4c <HAL_DMA_Init+0x1e4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d013      	beq.n	8002e20 <HAL_DMA_Init+0xb8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a54      	ldr	r2, [pc, #336]	@ (8002f50 <HAL_DMA_Init+0x1e8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00e      	beq.n	8002e20 <HAL_DMA_Init+0xb8>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a53      	ldr	r2, [pc, #332]	@ (8002f54 <HAL_DMA_Init+0x1ec>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d009      	beq.n	8002e20 <HAL_DMA_Init+0xb8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a51      	ldr	r2, [pc, #324]	@ (8002f58 <HAL_DMA_Init+0x1f0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d004      	beq.n	8002e20 <HAL_DMA_Init+0xb8>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a50      	ldr	r2, [pc, #320]	@ (8002f5c <HAL_DMA_Init+0x1f4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d101      	bne.n	8002e24 <HAL_DMA_Init+0xbc>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <HAL_DMA_Init+0xbe>
 8002e24:	2300      	movs	r3, #0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 813c 	beq.w	80030a4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a37      	ldr	r2, [pc, #220]	@ (8002f20 <HAL_DMA_Init+0x1b8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d04a      	beq.n	8002edc <HAL_DMA_Init+0x174>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a36      	ldr	r2, [pc, #216]	@ (8002f24 <HAL_DMA_Init+0x1bc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d045      	beq.n	8002edc <HAL_DMA_Init+0x174>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a34      	ldr	r2, [pc, #208]	@ (8002f28 <HAL_DMA_Init+0x1c0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d040      	beq.n	8002edc <HAL_DMA_Init+0x174>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a33      	ldr	r2, [pc, #204]	@ (8002f2c <HAL_DMA_Init+0x1c4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d03b      	beq.n	8002edc <HAL_DMA_Init+0x174>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a31      	ldr	r2, [pc, #196]	@ (8002f30 <HAL_DMA_Init+0x1c8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d036      	beq.n	8002edc <HAL_DMA_Init+0x174>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a30      	ldr	r2, [pc, #192]	@ (8002f34 <HAL_DMA_Init+0x1cc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d031      	beq.n	8002edc <HAL_DMA_Init+0x174>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8002f38 <HAL_DMA_Init+0x1d0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d02c      	beq.n	8002edc <HAL_DMA_Init+0x174>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2d      	ldr	r2, [pc, #180]	@ (8002f3c <HAL_DMA_Init+0x1d4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d027      	beq.n	8002edc <HAL_DMA_Init+0x174>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a2b      	ldr	r2, [pc, #172]	@ (8002f40 <HAL_DMA_Init+0x1d8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d022      	beq.n	8002edc <HAL_DMA_Init+0x174>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8002f44 <HAL_DMA_Init+0x1dc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d01d      	beq.n	8002edc <HAL_DMA_Init+0x174>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a28      	ldr	r2, [pc, #160]	@ (8002f48 <HAL_DMA_Init+0x1e0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d018      	beq.n	8002edc <HAL_DMA_Init+0x174>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a27      	ldr	r2, [pc, #156]	@ (8002f4c <HAL_DMA_Init+0x1e4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d013      	beq.n	8002edc <HAL_DMA_Init+0x174>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a25      	ldr	r2, [pc, #148]	@ (8002f50 <HAL_DMA_Init+0x1e8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00e      	beq.n	8002edc <HAL_DMA_Init+0x174>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a24      	ldr	r2, [pc, #144]	@ (8002f54 <HAL_DMA_Init+0x1ec>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d009      	beq.n	8002edc <HAL_DMA_Init+0x174>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a22      	ldr	r2, [pc, #136]	@ (8002f58 <HAL_DMA_Init+0x1f0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d004      	beq.n	8002edc <HAL_DMA_Init+0x174>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a21      	ldr	r2, [pc, #132]	@ (8002f5c <HAL_DMA_Init+0x1f4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d108      	bne.n	8002eee <HAL_DMA_Init+0x186>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e007      	b.n	8002efe <HAL_DMA_Init+0x196>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002efe:	e02f      	b.n	8002f60 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f00:	f7ff fdf2 	bl	8002ae8 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b05      	cmp	r3, #5
 8002f0c:	d928      	bls.n	8002f60 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2220      	movs	r2, #32
 8002f12:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2203      	movs	r2, #3
 8002f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e242      	b.n	80033a6 <HAL_DMA_Init+0x63e>
 8002f20:	40020010 	.word	0x40020010
 8002f24:	40020028 	.word	0x40020028
 8002f28:	40020040 	.word	0x40020040
 8002f2c:	40020058 	.word	0x40020058
 8002f30:	40020070 	.word	0x40020070
 8002f34:	40020088 	.word	0x40020088
 8002f38:	400200a0 	.word	0x400200a0
 8002f3c:	400200b8 	.word	0x400200b8
 8002f40:	40020410 	.word	0x40020410
 8002f44:	40020428 	.word	0x40020428
 8002f48:	40020440 	.word	0x40020440
 8002f4c:	40020458 	.word	0x40020458
 8002f50:	40020470 	.word	0x40020470
 8002f54:	40020488 	.word	0x40020488
 8002f58:	400204a0 	.word	0x400204a0
 8002f5c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1c8      	bne.n	8002f00 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4b83      	ldr	r3, [pc, #524]	@ (8003188 <HAL_DMA_Init+0x420>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002f86:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f92:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f9e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d107      	bne.n	8002fc4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b28      	cmp	r3, #40	@ 0x28
 8002fca:	d903      	bls.n	8002fd4 <HAL_DMA_Init+0x26c>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fd2:	d91f      	bls.n	8003014 <HAL_DMA_Init+0x2ac>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8002fda:	d903      	bls.n	8002fe4 <HAL_DMA_Init+0x27c>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b42      	cmp	r3, #66	@ 0x42
 8002fe2:	d917      	bls.n	8003014 <HAL_DMA_Init+0x2ac>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b46      	cmp	r3, #70	@ 0x46
 8002fea:	d903      	bls.n	8002ff4 <HAL_DMA_Init+0x28c>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b48      	cmp	r3, #72	@ 0x48
 8002ff2:	d90f      	bls.n	8003014 <HAL_DMA_Init+0x2ac>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b4e      	cmp	r3, #78	@ 0x4e
 8002ffa:	d903      	bls.n	8003004 <HAL_DMA_Init+0x29c>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b52      	cmp	r3, #82	@ 0x52
 8003002:	d907      	bls.n	8003014 <HAL_DMA_Init+0x2ac>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b73      	cmp	r3, #115	@ 0x73
 800300a:	d905      	bls.n	8003018 <HAL_DMA_Init+0x2b0>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b77      	cmp	r3, #119	@ 0x77
 8003012:	d801      	bhi.n	8003018 <HAL_DMA_Init+0x2b0>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <HAL_DMA_Init+0x2b2>
 8003018:	2300      	movs	r3, #0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003024:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f023 0307 	bic.w	r3, r3, #7
 800303c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304c:	2b04      	cmp	r3, #4
 800304e:	d117      	bne.n	8003080 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00e      	beq.n	8003080 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f001 ff18 	bl	8004e98 <DMA_CheckFifoParam>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2240      	movs	r2, #64	@ 0x40
 8003072:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e192      	b.n	80033a6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f001 fe53 	bl	8004d34 <DMA_CalcBaseAndBitshift>
 800308e:	4603      	mov	r3, r0
 8003090:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	223f      	movs	r2, #63	@ 0x3f
 800309c:	409a      	lsls	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	609a      	str	r2, [r3, #8]
 80030a2:	e0c8      	b.n	8003236 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a38      	ldr	r2, [pc, #224]	@ (800318c <HAL_DMA_Init+0x424>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d022      	beq.n	80030f4 <HAL_DMA_Init+0x38c>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a37      	ldr	r2, [pc, #220]	@ (8003190 <HAL_DMA_Init+0x428>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d01d      	beq.n	80030f4 <HAL_DMA_Init+0x38c>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a35      	ldr	r2, [pc, #212]	@ (8003194 <HAL_DMA_Init+0x42c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d018      	beq.n	80030f4 <HAL_DMA_Init+0x38c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a34      	ldr	r2, [pc, #208]	@ (8003198 <HAL_DMA_Init+0x430>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d013      	beq.n	80030f4 <HAL_DMA_Init+0x38c>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a32      	ldr	r2, [pc, #200]	@ (800319c <HAL_DMA_Init+0x434>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00e      	beq.n	80030f4 <HAL_DMA_Init+0x38c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a31      	ldr	r2, [pc, #196]	@ (80031a0 <HAL_DMA_Init+0x438>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d009      	beq.n	80030f4 <HAL_DMA_Init+0x38c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a2f      	ldr	r2, [pc, #188]	@ (80031a4 <HAL_DMA_Init+0x43c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d004      	beq.n	80030f4 <HAL_DMA_Init+0x38c>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a2e      	ldr	r2, [pc, #184]	@ (80031a8 <HAL_DMA_Init+0x440>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d101      	bne.n	80030f8 <HAL_DMA_Init+0x390>
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <HAL_DMA_Init+0x392>
 80030f8:	2300      	movs	r3, #0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8092 	beq.w	8003224 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a21      	ldr	r2, [pc, #132]	@ (800318c <HAL_DMA_Init+0x424>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d021      	beq.n	800314e <HAL_DMA_Init+0x3e6>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a20      	ldr	r2, [pc, #128]	@ (8003190 <HAL_DMA_Init+0x428>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d01c      	beq.n	800314e <HAL_DMA_Init+0x3e6>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a1e      	ldr	r2, [pc, #120]	@ (8003194 <HAL_DMA_Init+0x42c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d017      	beq.n	800314e <HAL_DMA_Init+0x3e6>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1d      	ldr	r2, [pc, #116]	@ (8003198 <HAL_DMA_Init+0x430>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d012      	beq.n	800314e <HAL_DMA_Init+0x3e6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1b      	ldr	r2, [pc, #108]	@ (800319c <HAL_DMA_Init+0x434>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00d      	beq.n	800314e <HAL_DMA_Init+0x3e6>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1a      	ldr	r2, [pc, #104]	@ (80031a0 <HAL_DMA_Init+0x438>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d008      	beq.n	800314e <HAL_DMA_Init+0x3e6>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a18      	ldr	r2, [pc, #96]	@ (80031a4 <HAL_DMA_Init+0x43c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d003      	beq.n	800314e <HAL_DMA_Init+0x3e6>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a17      	ldr	r2, [pc, #92]	@ (80031a8 <HAL_DMA_Init+0x440>)
 800314c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2202      	movs	r2, #2
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <HAL_DMA_Init+0x444>)
 800316a:	4013      	ands	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b40      	cmp	r3, #64	@ 0x40
 8003174:	d01c      	beq.n	80031b0 <HAL_DMA_Init+0x448>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b80      	cmp	r3, #128	@ 0x80
 800317c:	d102      	bne.n	8003184 <HAL_DMA_Init+0x41c>
 800317e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003182:	e016      	b.n	80031b2 <HAL_DMA_Init+0x44a>
 8003184:	2300      	movs	r3, #0
 8003186:	e014      	b.n	80031b2 <HAL_DMA_Init+0x44a>
 8003188:	fe10803f 	.word	0xfe10803f
 800318c:	58025408 	.word	0x58025408
 8003190:	5802541c 	.word	0x5802541c
 8003194:	58025430 	.word	0x58025430
 8003198:	58025444 	.word	0x58025444
 800319c:	58025458 	.word	0x58025458
 80031a0:	5802546c 	.word	0x5802546c
 80031a4:	58025480 	.word	0x58025480
 80031a8:	58025494 	.word	0x58025494
 80031ac:	fffe000f 	.word	0xfffe000f
 80031b0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68d2      	ldr	r2, [r2, #12]
 80031b6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031e0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	4b6e      	ldr	r3, [pc, #440]	@ (80033b0 <HAL_DMA_Init+0x648>)
 80031f8:	4413      	add	r3, r2
 80031fa:	4a6e      	ldr	r2, [pc, #440]	@ (80033b4 <HAL_DMA_Init+0x64c>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	009a      	lsls	r2, r3, #2
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f001 fd93 	bl	8004d34 <DMA_CalcBaseAndBitshift>
 800320e:	4603      	mov	r3, r0
 8003210:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	2201      	movs	r2, #1
 800321c:	409a      	lsls	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	e008      	b.n	8003236 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2240      	movs	r2, #64	@ 0x40
 8003228:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2203      	movs	r2, #3
 800322e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e0b7      	b.n	80033a6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a5f      	ldr	r2, [pc, #380]	@ (80033b8 <HAL_DMA_Init+0x650>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d072      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a5d      	ldr	r2, [pc, #372]	@ (80033bc <HAL_DMA_Init+0x654>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d06d      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a5c      	ldr	r2, [pc, #368]	@ (80033c0 <HAL_DMA_Init+0x658>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d068      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a5a      	ldr	r2, [pc, #360]	@ (80033c4 <HAL_DMA_Init+0x65c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d063      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a59      	ldr	r2, [pc, #356]	@ (80033c8 <HAL_DMA_Init+0x660>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d05e      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a57      	ldr	r2, [pc, #348]	@ (80033cc <HAL_DMA_Init+0x664>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d059      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a56      	ldr	r2, [pc, #344]	@ (80033d0 <HAL_DMA_Init+0x668>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d054      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a54      	ldr	r2, [pc, #336]	@ (80033d4 <HAL_DMA_Init+0x66c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d04f      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a53      	ldr	r2, [pc, #332]	@ (80033d8 <HAL_DMA_Init+0x670>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d04a      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a51      	ldr	r2, [pc, #324]	@ (80033dc <HAL_DMA_Init+0x674>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d045      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a50      	ldr	r2, [pc, #320]	@ (80033e0 <HAL_DMA_Init+0x678>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d040      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a4e      	ldr	r2, [pc, #312]	@ (80033e4 <HAL_DMA_Init+0x67c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d03b      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a4d      	ldr	r2, [pc, #308]	@ (80033e8 <HAL_DMA_Init+0x680>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d036      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a4b      	ldr	r2, [pc, #300]	@ (80033ec <HAL_DMA_Init+0x684>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d031      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a4a      	ldr	r2, [pc, #296]	@ (80033f0 <HAL_DMA_Init+0x688>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d02c      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a48      	ldr	r2, [pc, #288]	@ (80033f4 <HAL_DMA_Init+0x68c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d027      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a47      	ldr	r2, [pc, #284]	@ (80033f8 <HAL_DMA_Init+0x690>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d022      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a45      	ldr	r2, [pc, #276]	@ (80033fc <HAL_DMA_Init+0x694>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d01d      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a44      	ldr	r2, [pc, #272]	@ (8003400 <HAL_DMA_Init+0x698>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d018      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a42      	ldr	r2, [pc, #264]	@ (8003404 <HAL_DMA_Init+0x69c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a41      	ldr	r2, [pc, #260]	@ (8003408 <HAL_DMA_Init+0x6a0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00e      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a3f      	ldr	r2, [pc, #252]	@ (800340c <HAL_DMA_Init+0x6a4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d009      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a3e      	ldr	r2, [pc, #248]	@ (8003410 <HAL_DMA_Init+0x6a8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d004      	beq.n	8003326 <HAL_DMA_Init+0x5be>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a3c      	ldr	r2, [pc, #240]	@ (8003414 <HAL_DMA_Init+0x6ac>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d101      	bne.n	800332a <HAL_DMA_Init+0x5c2>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_DMA_Init+0x5c4>
 800332a:	2300      	movs	r3, #0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d032      	beq.n	8003396 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f001 fe2d 	bl	8004f90 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b80      	cmp	r3, #128	@ 0x80
 800333c:	d102      	bne.n	8003344 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003358:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d010      	beq.n	8003384 <HAL_DMA_Init+0x61c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b08      	cmp	r3, #8
 8003368:	d80c      	bhi.n	8003384 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f001 feaa 	bl	80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	e008      	b.n	8003396 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	a7fdabf8 	.word	0xa7fdabf8
 80033b4:	cccccccd 	.word	0xcccccccd
 80033b8:	40020010 	.word	0x40020010
 80033bc:	40020028 	.word	0x40020028
 80033c0:	40020040 	.word	0x40020040
 80033c4:	40020058 	.word	0x40020058
 80033c8:	40020070 	.word	0x40020070
 80033cc:	40020088 	.word	0x40020088
 80033d0:	400200a0 	.word	0x400200a0
 80033d4:	400200b8 	.word	0x400200b8
 80033d8:	40020410 	.word	0x40020410
 80033dc:	40020428 	.word	0x40020428
 80033e0:	40020440 	.word	0x40020440
 80033e4:	40020458 	.word	0x40020458
 80033e8:	40020470 	.word	0x40020470
 80033ec:	40020488 	.word	0x40020488
 80033f0:	400204a0 	.word	0x400204a0
 80033f4:	400204b8 	.word	0x400204b8
 80033f8:	58025408 	.word	0x58025408
 80033fc:	5802541c 	.word	0x5802541c
 8003400:	58025430 	.word	0x58025430
 8003404:	58025444 	.word	0x58025444
 8003408:	58025458 	.word	0x58025458
 800340c:	5802546c 	.word	0x5802546c
 8003410:	58025480 	.word	0x58025480
 8003414:	58025494 	.word	0x58025494

08003418 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003420:	f7ff fb62 	bl	8002ae8 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e2dc      	b.n	80039ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d008      	beq.n	800344e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2280      	movs	r2, #128	@ 0x80
 8003440:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e2cd      	b.n	80039ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a76      	ldr	r2, [pc, #472]	@ (800362c <HAL_DMA_Abort+0x214>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d04a      	beq.n	80034ee <HAL_DMA_Abort+0xd6>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a74      	ldr	r2, [pc, #464]	@ (8003630 <HAL_DMA_Abort+0x218>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d045      	beq.n	80034ee <HAL_DMA_Abort+0xd6>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a73      	ldr	r2, [pc, #460]	@ (8003634 <HAL_DMA_Abort+0x21c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d040      	beq.n	80034ee <HAL_DMA_Abort+0xd6>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a71      	ldr	r2, [pc, #452]	@ (8003638 <HAL_DMA_Abort+0x220>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d03b      	beq.n	80034ee <HAL_DMA_Abort+0xd6>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a70      	ldr	r2, [pc, #448]	@ (800363c <HAL_DMA_Abort+0x224>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d036      	beq.n	80034ee <HAL_DMA_Abort+0xd6>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a6e      	ldr	r2, [pc, #440]	@ (8003640 <HAL_DMA_Abort+0x228>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d031      	beq.n	80034ee <HAL_DMA_Abort+0xd6>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a6d      	ldr	r2, [pc, #436]	@ (8003644 <HAL_DMA_Abort+0x22c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d02c      	beq.n	80034ee <HAL_DMA_Abort+0xd6>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a6b      	ldr	r2, [pc, #428]	@ (8003648 <HAL_DMA_Abort+0x230>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d027      	beq.n	80034ee <HAL_DMA_Abort+0xd6>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a6a      	ldr	r2, [pc, #424]	@ (800364c <HAL_DMA_Abort+0x234>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d022      	beq.n	80034ee <HAL_DMA_Abort+0xd6>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a68      	ldr	r2, [pc, #416]	@ (8003650 <HAL_DMA_Abort+0x238>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01d      	beq.n	80034ee <HAL_DMA_Abort+0xd6>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a67      	ldr	r2, [pc, #412]	@ (8003654 <HAL_DMA_Abort+0x23c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d018      	beq.n	80034ee <HAL_DMA_Abort+0xd6>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a65      	ldr	r2, [pc, #404]	@ (8003658 <HAL_DMA_Abort+0x240>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_DMA_Abort+0xd6>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a64      	ldr	r2, [pc, #400]	@ (800365c <HAL_DMA_Abort+0x244>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00e      	beq.n	80034ee <HAL_DMA_Abort+0xd6>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a62      	ldr	r2, [pc, #392]	@ (8003660 <HAL_DMA_Abort+0x248>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_DMA_Abort+0xd6>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a61      	ldr	r2, [pc, #388]	@ (8003664 <HAL_DMA_Abort+0x24c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <HAL_DMA_Abort+0xd6>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a5f      	ldr	r2, [pc, #380]	@ (8003668 <HAL_DMA_Abort+0x250>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d101      	bne.n	80034f2 <HAL_DMA_Abort+0xda>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_DMA_Abort+0xdc>
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d013      	beq.n	8003520 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 021e 	bic.w	r2, r2, #30
 8003506:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003516:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	e00a      	b.n	8003536 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 020e 	bic.w	r2, r2, #14
 800352e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a3c      	ldr	r2, [pc, #240]	@ (800362c <HAL_DMA_Abort+0x214>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d072      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a3a      	ldr	r2, [pc, #232]	@ (8003630 <HAL_DMA_Abort+0x218>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d06d      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a39      	ldr	r2, [pc, #228]	@ (8003634 <HAL_DMA_Abort+0x21c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d068      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a37      	ldr	r2, [pc, #220]	@ (8003638 <HAL_DMA_Abort+0x220>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d063      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a36      	ldr	r2, [pc, #216]	@ (800363c <HAL_DMA_Abort+0x224>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d05e      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a34      	ldr	r2, [pc, #208]	@ (8003640 <HAL_DMA_Abort+0x228>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d059      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a33      	ldr	r2, [pc, #204]	@ (8003644 <HAL_DMA_Abort+0x22c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d054      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a31      	ldr	r2, [pc, #196]	@ (8003648 <HAL_DMA_Abort+0x230>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d04f      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a30      	ldr	r2, [pc, #192]	@ (800364c <HAL_DMA_Abort+0x234>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d04a      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a2e      	ldr	r2, [pc, #184]	@ (8003650 <HAL_DMA_Abort+0x238>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d045      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a2d      	ldr	r2, [pc, #180]	@ (8003654 <HAL_DMA_Abort+0x23c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d040      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003658 <HAL_DMA_Abort+0x240>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d03b      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2a      	ldr	r2, [pc, #168]	@ (800365c <HAL_DMA_Abort+0x244>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d036      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a28      	ldr	r2, [pc, #160]	@ (8003660 <HAL_DMA_Abort+0x248>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d031      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a27      	ldr	r2, [pc, #156]	@ (8003664 <HAL_DMA_Abort+0x24c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d02c      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a25      	ldr	r2, [pc, #148]	@ (8003668 <HAL_DMA_Abort+0x250>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d027      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a24      	ldr	r2, [pc, #144]	@ (800366c <HAL_DMA_Abort+0x254>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d022      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a22      	ldr	r2, [pc, #136]	@ (8003670 <HAL_DMA_Abort+0x258>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01d      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a21      	ldr	r2, [pc, #132]	@ (8003674 <HAL_DMA_Abort+0x25c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d018      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003678 <HAL_DMA_Abort+0x260>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1e      	ldr	r2, [pc, #120]	@ (800367c <HAL_DMA_Abort+0x264>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1c      	ldr	r2, [pc, #112]	@ (8003680 <HAL_DMA_Abort+0x268>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1b      	ldr	r2, [pc, #108]	@ (8003684 <HAL_DMA_Abort+0x26c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_DMA_Abort+0x20e>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a19      	ldr	r2, [pc, #100]	@ (8003688 <HAL_DMA_Abort+0x270>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d132      	bne.n	800368c <HAL_DMA_Abort+0x274>
 8003626:	2301      	movs	r3, #1
 8003628:	e031      	b.n	800368e <HAL_DMA_Abort+0x276>
 800362a:	bf00      	nop
 800362c:	40020010 	.word	0x40020010
 8003630:	40020028 	.word	0x40020028
 8003634:	40020040 	.word	0x40020040
 8003638:	40020058 	.word	0x40020058
 800363c:	40020070 	.word	0x40020070
 8003640:	40020088 	.word	0x40020088
 8003644:	400200a0 	.word	0x400200a0
 8003648:	400200b8 	.word	0x400200b8
 800364c:	40020410 	.word	0x40020410
 8003650:	40020428 	.word	0x40020428
 8003654:	40020440 	.word	0x40020440
 8003658:	40020458 	.word	0x40020458
 800365c:	40020470 	.word	0x40020470
 8003660:	40020488 	.word	0x40020488
 8003664:	400204a0 	.word	0x400204a0
 8003668:	400204b8 	.word	0x400204b8
 800366c:	58025408 	.word	0x58025408
 8003670:	5802541c 	.word	0x5802541c
 8003674:	58025430 	.word	0x58025430
 8003678:	58025444 	.word	0x58025444
 800367c:	58025458 	.word	0x58025458
 8003680:	5802546c 	.word	0x5802546c
 8003684:	58025480 	.word	0x58025480
 8003688:	58025494 	.word	0x58025494
 800368c:	2300      	movs	r3, #0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d007      	beq.n	80036a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800369c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6d      	ldr	r2, [pc, #436]	@ (800385c <HAL_DMA_Abort+0x444>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d04a      	beq.n	8003742 <HAL_DMA_Abort+0x32a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003860 <HAL_DMA_Abort+0x448>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d045      	beq.n	8003742 <HAL_DMA_Abort+0x32a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a6a      	ldr	r2, [pc, #424]	@ (8003864 <HAL_DMA_Abort+0x44c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d040      	beq.n	8003742 <HAL_DMA_Abort+0x32a>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a68      	ldr	r2, [pc, #416]	@ (8003868 <HAL_DMA_Abort+0x450>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d03b      	beq.n	8003742 <HAL_DMA_Abort+0x32a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a67      	ldr	r2, [pc, #412]	@ (800386c <HAL_DMA_Abort+0x454>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d036      	beq.n	8003742 <HAL_DMA_Abort+0x32a>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a65      	ldr	r2, [pc, #404]	@ (8003870 <HAL_DMA_Abort+0x458>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d031      	beq.n	8003742 <HAL_DMA_Abort+0x32a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a64      	ldr	r2, [pc, #400]	@ (8003874 <HAL_DMA_Abort+0x45c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d02c      	beq.n	8003742 <HAL_DMA_Abort+0x32a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a62      	ldr	r2, [pc, #392]	@ (8003878 <HAL_DMA_Abort+0x460>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d027      	beq.n	8003742 <HAL_DMA_Abort+0x32a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a61      	ldr	r2, [pc, #388]	@ (800387c <HAL_DMA_Abort+0x464>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d022      	beq.n	8003742 <HAL_DMA_Abort+0x32a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a5f      	ldr	r2, [pc, #380]	@ (8003880 <HAL_DMA_Abort+0x468>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01d      	beq.n	8003742 <HAL_DMA_Abort+0x32a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a5e      	ldr	r2, [pc, #376]	@ (8003884 <HAL_DMA_Abort+0x46c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d018      	beq.n	8003742 <HAL_DMA_Abort+0x32a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a5c      	ldr	r2, [pc, #368]	@ (8003888 <HAL_DMA_Abort+0x470>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_DMA_Abort+0x32a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a5b      	ldr	r2, [pc, #364]	@ (800388c <HAL_DMA_Abort+0x474>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00e      	beq.n	8003742 <HAL_DMA_Abort+0x32a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a59      	ldr	r2, [pc, #356]	@ (8003890 <HAL_DMA_Abort+0x478>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d009      	beq.n	8003742 <HAL_DMA_Abort+0x32a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a58      	ldr	r2, [pc, #352]	@ (8003894 <HAL_DMA_Abort+0x47c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_DMA_Abort+0x32a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a56      	ldr	r2, [pc, #344]	@ (8003898 <HAL_DMA_Abort+0x480>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d108      	bne.n	8003754 <HAL_DMA_Abort+0x33c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	e007      	b.n	8003764 <HAL_DMA_Abort+0x34c>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0201 	bic.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003764:	e013      	b.n	800378e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003766:	f7ff f9bf 	bl	8002ae8 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b05      	cmp	r3, #5
 8003772:	d90c      	bls.n	800378e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2203      	movs	r2, #3
 800377e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e12d      	b.n	80039ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1e5      	bne.n	8003766 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a2f      	ldr	r2, [pc, #188]	@ (800385c <HAL_DMA_Abort+0x444>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d04a      	beq.n	800383a <HAL_DMA_Abort+0x422>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003860 <HAL_DMA_Abort+0x448>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d045      	beq.n	800383a <HAL_DMA_Abort+0x422>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003864 <HAL_DMA_Abort+0x44c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d040      	beq.n	800383a <HAL_DMA_Abort+0x422>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003868 <HAL_DMA_Abort+0x450>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d03b      	beq.n	800383a <HAL_DMA_Abort+0x422>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a29      	ldr	r2, [pc, #164]	@ (800386c <HAL_DMA_Abort+0x454>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d036      	beq.n	800383a <HAL_DMA_Abort+0x422>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a27      	ldr	r2, [pc, #156]	@ (8003870 <HAL_DMA_Abort+0x458>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d031      	beq.n	800383a <HAL_DMA_Abort+0x422>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a26      	ldr	r2, [pc, #152]	@ (8003874 <HAL_DMA_Abort+0x45c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d02c      	beq.n	800383a <HAL_DMA_Abort+0x422>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a24      	ldr	r2, [pc, #144]	@ (8003878 <HAL_DMA_Abort+0x460>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d027      	beq.n	800383a <HAL_DMA_Abort+0x422>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a23      	ldr	r2, [pc, #140]	@ (800387c <HAL_DMA_Abort+0x464>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d022      	beq.n	800383a <HAL_DMA_Abort+0x422>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a21      	ldr	r2, [pc, #132]	@ (8003880 <HAL_DMA_Abort+0x468>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d01d      	beq.n	800383a <HAL_DMA_Abort+0x422>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a20      	ldr	r2, [pc, #128]	@ (8003884 <HAL_DMA_Abort+0x46c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d018      	beq.n	800383a <HAL_DMA_Abort+0x422>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a1e      	ldr	r2, [pc, #120]	@ (8003888 <HAL_DMA_Abort+0x470>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d013      	beq.n	800383a <HAL_DMA_Abort+0x422>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1d      	ldr	r2, [pc, #116]	@ (800388c <HAL_DMA_Abort+0x474>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00e      	beq.n	800383a <HAL_DMA_Abort+0x422>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a1b      	ldr	r2, [pc, #108]	@ (8003890 <HAL_DMA_Abort+0x478>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d009      	beq.n	800383a <HAL_DMA_Abort+0x422>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a1a      	ldr	r2, [pc, #104]	@ (8003894 <HAL_DMA_Abort+0x47c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d004      	beq.n	800383a <HAL_DMA_Abort+0x422>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a18      	ldr	r2, [pc, #96]	@ (8003898 <HAL_DMA_Abort+0x480>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d101      	bne.n	800383e <HAL_DMA_Abort+0x426>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_DMA_Abort+0x428>
 800383e:	2300      	movs	r3, #0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d02b      	beq.n	800389c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003848:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	223f      	movs	r2, #63	@ 0x3f
 8003854:	409a      	lsls	r2, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	e02a      	b.n	80038b2 <HAL_DMA_Abort+0x49a>
 800385c:	40020010 	.word	0x40020010
 8003860:	40020028 	.word	0x40020028
 8003864:	40020040 	.word	0x40020040
 8003868:	40020058 	.word	0x40020058
 800386c:	40020070 	.word	0x40020070
 8003870:	40020088 	.word	0x40020088
 8003874:	400200a0 	.word	0x400200a0
 8003878:	400200b8 	.word	0x400200b8
 800387c:	40020410 	.word	0x40020410
 8003880:	40020428 	.word	0x40020428
 8003884:	40020440 	.word	0x40020440
 8003888:	40020458 	.word	0x40020458
 800388c:	40020470 	.word	0x40020470
 8003890:	40020488 	.word	0x40020488
 8003894:	400204a0 	.word	0x400204a0
 8003898:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	2201      	movs	r2, #1
 80038ac:	409a      	lsls	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a4f      	ldr	r2, [pc, #316]	@ (80039f4 <HAL_DMA_Abort+0x5dc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d072      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a4d      	ldr	r2, [pc, #308]	@ (80039f8 <HAL_DMA_Abort+0x5e0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d06d      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a4c      	ldr	r2, [pc, #304]	@ (80039fc <HAL_DMA_Abort+0x5e4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d068      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003a00 <HAL_DMA_Abort+0x5e8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d063      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a49      	ldr	r2, [pc, #292]	@ (8003a04 <HAL_DMA_Abort+0x5ec>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d05e      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a47      	ldr	r2, [pc, #284]	@ (8003a08 <HAL_DMA_Abort+0x5f0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d059      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a46      	ldr	r2, [pc, #280]	@ (8003a0c <HAL_DMA_Abort+0x5f4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d054      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a44      	ldr	r2, [pc, #272]	@ (8003a10 <HAL_DMA_Abort+0x5f8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d04f      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a43      	ldr	r2, [pc, #268]	@ (8003a14 <HAL_DMA_Abort+0x5fc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d04a      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a41      	ldr	r2, [pc, #260]	@ (8003a18 <HAL_DMA_Abort+0x600>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d045      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a40      	ldr	r2, [pc, #256]	@ (8003a1c <HAL_DMA_Abort+0x604>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d040      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a3e      	ldr	r2, [pc, #248]	@ (8003a20 <HAL_DMA_Abort+0x608>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d03b      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a24 <HAL_DMA_Abort+0x60c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d036      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a3b      	ldr	r2, [pc, #236]	@ (8003a28 <HAL_DMA_Abort+0x610>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d031      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a3a      	ldr	r2, [pc, #232]	@ (8003a2c <HAL_DMA_Abort+0x614>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d02c      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a38      	ldr	r2, [pc, #224]	@ (8003a30 <HAL_DMA_Abort+0x618>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d027      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a37      	ldr	r2, [pc, #220]	@ (8003a34 <HAL_DMA_Abort+0x61c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d022      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a35      	ldr	r2, [pc, #212]	@ (8003a38 <HAL_DMA_Abort+0x620>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01d      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a34      	ldr	r2, [pc, #208]	@ (8003a3c <HAL_DMA_Abort+0x624>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d018      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a32      	ldr	r2, [pc, #200]	@ (8003a40 <HAL_DMA_Abort+0x628>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a31      	ldr	r2, [pc, #196]	@ (8003a44 <HAL_DMA_Abort+0x62c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00e      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a2f      	ldr	r2, [pc, #188]	@ (8003a48 <HAL_DMA_Abort+0x630>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d009      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a2e      	ldr	r2, [pc, #184]	@ (8003a4c <HAL_DMA_Abort+0x634>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_DMA_Abort+0x58a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2c      	ldr	r2, [pc, #176]	@ (8003a50 <HAL_DMA_Abort+0x638>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d101      	bne.n	80039a6 <HAL_DMA_Abort+0x58e>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_DMA_Abort+0x590>
 80039a6:	2300      	movs	r3, #0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d015      	beq.n	80039d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00c      	beq.n	80039d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40020010 	.word	0x40020010
 80039f8:	40020028 	.word	0x40020028
 80039fc:	40020040 	.word	0x40020040
 8003a00:	40020058 	.word	0x40020058
 8003a04:	40020070 	.word	0x40020070
 8003a08:	40020088 	.word	0x40020088
 8003a0c:	400200a0 	.word	0x400200a0
 8003a10:	400200b8 	.word	0x400200b8
 8003a14:	40020410 	.word	0x40020410
 8003a18:	40020428 	.word	0x40020428
 8003a1c:	40020440 	.word	0x40020440
 8003a20:	40020458 	.word	0x40020458
 8003a24:	40020470 	.word	0x40020470
 8003a28:	40020488 	.word	0x40020488
 8003a2c:	400204a0 	.word	0x400204a0
 8003a30:	400204b8 	.word	0x400204b8
 8003a34:	58025408 	.word	0x58025408
 8003a38:	5802541c 	.word	0x5802541c
 8003a3c:	58025430 	.word	0x58025430
 8003a40:	58025444 	.word	0x58025444
 8003a44:	58025458 	.word	0x58025458
 8003a48:	5802546c 	.word	0x5802546c
 8003a4c:	58025480 	.word	0x58025480
 8003a50:	58025494 	.word	0x58025494

08003a54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e237      	b.n	8003ed6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d004      	beq.n	8003a7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2280      	movs	r2, #128	@ 0x80
 8003a76:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e22c      	b.n	8003ed6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a5c      	ldr	r2, [pc, #368]	@ (8003bf4 <HAL_DMA_Abort_IT+0x1a0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d04a      	beq.n	8003b1c <HAL_DMA_Abort_IT+0xc8>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a5b      	ldr	r2, [pc, #364]	@ (8003bf8 <HAL_DMA_Abort_IT+0x1a4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d045      	beq.n	8003b1c <HAL_DMA_Abort_IT+0xc8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a59      	ldr	r2, [pc, #356]	@ (8003bfc <HAL_DMA_Abort_IT+0x1a8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d040      	beq.n	8003b1c <HAL_DMA_Abort_IT+0xc8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a58      	ldr	r2, [pc, #352]	@ (8003c00 <HAL_DMA_Abort_IT+0x1ac>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d03b      	beq.n	8003b1c <HAL_DMA_Abort_IT+0xc8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a56      	ldr	r2, [pc, #344]	@ (8003c04 <HAL_DMA_Abort_IT+0x1b0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d036      	beq.n	8003b1c <HAL_DMA_Abort_IT+0xc8>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a55      	ldr	r2, [pc, #340]	@ (8003c08 <HAL_DMA_Abort_IT+0x1b4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d031      	beq.n	8003b1c <HAL_DMA_Abort_IT+0xc8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a53      	ldr	r2, [pc, #332]	@ (8003c0c <HAL_DMA_Abort_IT+0x1b8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d02c      	beq.n	8003b1c <HAL_DMA_Abort_IT+0xc8>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a52      	ldr	r2, [pc, #328]	@ (8003c10 <HAL_DMA_Abort_IT+0x1bc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d027      	beq.n	8003b1c <HAL_DMA_Abort_IT+0xc8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a50      	ldr	r2, [pc, #320]	@ (8003c14 <HAL_DMA_Abort_IT+0x1c0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d022      	beq.n	8003b1c <HAL_DMA_Abort_IT+0xc8>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a4f      	ldr	r2, [pc, #316]	@ (8003c18 <HAL_DMA_Abort_IT+0x1c4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d01d      	beq.n	8003b1c <HAL_DMA_Abort_IT+0xc8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a4d      	ldr	r2, [pc, #308]	@ (8003c1c <HAL_DMA_Abort_IT+0x1c8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d018      	beq.n	8003b1c <HAL_DMA_Abort_IT+0xc8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a4c      	ldr	r2, [pc, #304]	@ (8003c20 <HAL_DMA_Abort_IT+0x1cc>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d013      	beq.n	8003b1c <HAL_DMA_Abort_IT+0xc8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a4a      	ldr	r2, [pc, #296]	@ (8003c24 <HAL_DMA_Abort_IT+0x1d0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00e      	beq.n	8003b1c <HAL_DMA_Abort_IT+0xc8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a49      	ldr	r2, [pc, #292]	@ (8003c28 <HAL_DMA_Abort_IT+0x1d4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d009      	beq.n	8003b1c <HAL_DMA_Abort_IT+0xc8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a47      	ldr	r2, [pc, #284]	@ (8003c2c <HAL_DMA_Abort_IT+0x1d8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d004      	beq.n	8003b1c <HAL_DMA_Abort_IT+0xc8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a46      	ldr	r2, [pc, #280]	@ (8003c30 <HAL_DMA_Abort_IT+0x1dc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d101      	bne.n	8003b20 <HAL_DMA_Abort_IT+0xcc>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <HAL_DMA_Abort_IT+0xce>
 8003b20:	2300      	movs	r3, #0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8086 	beq.w	8003c34 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a2f      	ldr	r2, [pc, #188]	@ (8003bf4 <HAL_DMA_Abort_IT+0x1a0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d04a      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x17c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a2e      	ldr	r2, [pc, #184]	@ (8003bf8 <HAL_DMA_Abort_IT+0x1a4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d045      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x17c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2c      	ldr	r2, [pc, #176]	@ (8003bfc <HAL_DMA_Abort_IT+0x1a8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d040      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x17c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a2b      	ldr	r2, [pc, #172]	@ (8003c00 <HAL_DMA_Abort_IT+0x1ac>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d03b      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x17c>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a29      	ldr	r2, [pc, #164]	@ (8003c04 <HAL_DMA_Abort_IT+0x1b0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d036      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x17c>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a28      	ldr	r2, [pc, #160]	@ (8003c08 <HAL_DMA_Abort_IT+0x1b4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d031      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x17c>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a26      	ldr	r2, [pc, #152]	@ (8003c0c <HAL_DMA_Abort_IT+0x1b8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d02c      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x17c>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a25      	ldr	r2, [pc, #148]	@ (8003c10 <HAL_DMA_Abort_IT+0x1bc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d027      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x17c>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a23      	ldr	r2, [pc, #140]	@ (8003c14 <HAL_DMA_Abort_IT+0x1c0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d022      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x17c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a22      	ldr	r2, [pc, #136]	@ (8003c18 <HAL_DMA_Abort_IT+0x1c4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d01d      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x17c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a20      	ldr	r2, [pc, #128]	@ (8003c1c <HAL_DMA_Abort_IT+0x1c8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d018      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x17c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c20 <HAL_DMA_Abort_IT+0x1cc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d013      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x17c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1d      	ldr	r2, [pc, #116]	@ (8003c24 <HAL_DMA_Abort_IT+0x1d0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00e      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x17c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c28 <HAL_DMA_Abort_IT+0x1d4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d009      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x17c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c2c <HAL_DMA_Abort_IT+0x1d8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d004      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x17c>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a19      	ldr	r2, [pc, #100]	@ (8003c30 <HAL_DMA_Abort_IT+0x1dc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d108      	bne.n	8003be2 <HAL_DMA_Abort_IT+0x18e>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0201 	bic.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	e178      	b.n	8003ed4 <HAL_DMA_Abort_IT+0x480>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0201 	bic.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e16f      	b.n	8003ed4 <HAL_DMA_Abort_IT+0x480>
 8003bf4:	40020010 	.word	0x40020010
 8003bf8:	40020028 	.word	0x40020028
 8003bfc:	40020040 	.word	0x40020040
 8003c00:	40020058 	.word	0x40020058
 8003c04:	40020070 	.word	0x40020070
 8003c08:	40020088 	.word	0x40020088
 8003c0c:	400200a0 	.word	0x400200a0
 8003c10:	400200b8 	.word	0x400200b8
 8003c14:	40020410 	.word	0x40020410
 8003c18:	40020428 	.word	0x40020428
 8003c1c:	40020440 	.word	0x40020440
 8003c20:	40020458 	.word	0x40020458
 8003c24:	40020470 	.word	0x40020470
 8003c28:	40020488 	.word	0x40020488
 8003c2c:	400204a0 	.word	0x400204a0
 8003c30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 020e 	bic.w	r2, r2, #14
 8003c42:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a6c      	ldr	r2, [pc, #432]	@ (8003dfc <HAL_DMA_Abort_IT+0x3a8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d04a      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x290>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a6b      	ldr	r2, [pc, #428]	@ (8003e00 <HAL_DMA_Abort_IT+0x3ac>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d045      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x290>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a69      	ldr	r2, [pc, #420]	@ (8003e04 <HAL_DMA_Abort_IT+0x3b0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d040      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x290>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a68      	ldr	r2, [pc, #416]	@ (8003e08 <HAL_DMA_Abort_IT+0x3b4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d03b      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x290>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a66      	ldr	r2, [pc, #408]	@ (8003e0c <HAL_DMA_Abort_IT+0x3b8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d036      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x290>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a65      	ldr	r2, [pc, #404]	@ (8003e10 <HAL_DMA_Abort_IT+0x3bc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d031      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x290>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a63      	ldr	r2, [pc, #396]	@ (8003e14 <HAL_DMA_Abort_IT+0x3c0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d02c      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x290>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a62      	ldr	r2, [pc, #392]	@ (8003e18 <HAL_DMA_Abort_IT+0x3c4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d027      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x290>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a60      	ldr	r2, [pc, #384]	@ (8003e1c <HAL_DMA_Abort_IT+0x3c8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d022      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x290>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a5f      	ldr	r2, [pc, #380]	@ (8003e20 <HAL_DMA_Abort_IT+0x3cc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d01d      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x290>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a5d      	ldr	r2, [pc, #372]	@ (8003e24 <HAL_DMA_Abort_IT+0x3d0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d018      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x290>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a5c      	ldr	r2, [pc, #368]	@ (8003e28 <HAL_DMA_Abort_IT+0x3d4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d013      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x290>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a5a      	ldr	r2, [pc, #360]	@ (8003e2c <HAL_DMA_Abort_IT+0x3d8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00e      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x290>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a59      	ldr	r2, [pc, #356]	@ (8003e30 <HAL_DMA_Abort_IT+0x3dc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d009      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x290>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a57      	ldr	r2, [pc, #348]	@ (8003e34 <HAL_DMA_Abort_IT+0x3e0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d004      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x290>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a56      	ldr	r2, [pc, #344]	@ (8003e38 <HAL_DMA_Abort_IT+0x3e4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d108      	bne.n	8003cf6 <HAL_DMA_Abort_IT+0x2a2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0201 	bic.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e007      	b.n	8003d06 <HAL_DMA_Abort_IT+0x2b2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a3c      	ldr	r2, [pc, #240]	@ (8003dfc <HAL_DMA_Abort_IT+0x3a8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d072      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a3a      	ldr	r2, [pc, #232]	@ (8003e00 <HAL_DMA_Abort_IT+0x3ac>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d06d      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a39      	ldr	r2, [pc, #228]	@ (8003e04 <HAL_DMA_Abort_IT+0x3b0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d068      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a37      	ldr	r2, [pc, #220]	@ (8003e08 <HAL_DMA_Abort_IT+0x3b4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d063      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a36      	ldr	r2, [pc, #216]	@ (8003e0c <HAL_DMA_Abort_IT+0x3b8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d05e      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a34      	ldr	r2, [pc, #208]	@ (8003e10 <HAL_DMA_Abort_IT+0x3bc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d059      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a33      	ldr	r2, [pc, #204]	@ (8003e14 <HAL_DMA_Abort_IT+0x3c0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d054      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a31      	ldr	r2, [pc, #196]	@ (8003e18 <HAL_DMA_Abort_IT+0x3c4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d04f      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a30      	ldr	r2, [pc, #192]	@ (8003e1c <HAL_DMA_Abort_IT+0x3c8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d04a      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2e      	ldr	r2, [pc, #184]	@ (8003e20 <HAL_DMA_Abort_IT+0x3cc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d045      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e24 <HAL_DMA_Abort_IT+0x3d0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d040      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2b      	ldr	r2, [pc, #172]	@ (8003e28 <HAL_DMA_Abort_IT+0x3d4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d03b      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2a      	ldr	r2, [pc, #168]	@ (8003e2c <HAL_DMA_Abort_IT+0x3d8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d036      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a28      	ldr	r2, [pc, #160]	@ (8003e30 <HAL_DMA_Abort_IT+0x3dc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d031      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a27      	ldr	r2, [pc, #156]	@ (8003e34 <HAL_DMA_Abort_IT+0x3e0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d02c      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a25      	ldr	r2, [pc, #148]	@ (8003e38 <HAL_DMA_Abort_IT+0x3e4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d027      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a24      	ldr	r2, [pc, #144]	@ (8003e3c <HAL_DMA_Abort_IT+0x3e8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d022      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a22      	ldr	r2, [pc, #136]	@ (8003e40 <HAL_DMA_Abort_IT+0x3ec>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01d      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a21      	ldr	r2, [pc, #132]	@ (8003e44 <HAL_DMA_Abort_IT+0x3f0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d018      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8003e48 <HAL_DMA_Abort_IT+0x3f4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e4c <HAL_DMA_Abort_IT+0x3f8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00e      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8003e50 <HAL_DMA_Abort_IT+0x3fc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d009      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e54 <HAL_DMA_Abort_IT+0x400>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d004      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x3a2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a19      	ldr	r2, [pc, #100]	@ (8003e58 <HAL_DMA_Abort_IT+0x404>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d132      	bne.n	8003e5c <HAL_DMA_Abort_IT+0x408>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e031      	b.n	8003e5e <HAL_DMA_Abort_IT+0x40a>
 8003dfa:	bf00      	nop
 8003dfc:	40020010 	.word	0x40020010
 8003e00:	40020028 	.word	0x40020028
 8003e04:	40020040 	.word	0x40020040
 8003e08:	40020058 	.word	0x40020058
 8003e0c:	40020070 	.word	0x40020070
 8003e10:	40020088 	.word	0x40020088
 8003e14:	400200a0 	.word	0x400200a0
 8003e18:	400200b8 	.word	0x400200b8
 8003e1c:	40020410 	.word	0x40020410
 8003e20:	40020428 	.word	0x40020428
 8003e24:	40020440 	.word	0x40020440
 8003e28:	40020458 	.word	0x40020458
 8003e2c:	40020470 	.word	0x40020470
 8003e30:	40020488 	.word	0x40020488
 8003e34:	400204a0 	.word	0x400204a0
 8003e38:	400204b8 	.word	0x400204b8
 8003e3c:	58025408 	.word	0x58025408
 8003e40:	5802541c 	.word	0x5802541c
 8003e44:	58025430 	.word	0x58025430
 8003e48:	58025444 	.word	0x58025444
 8003e4c:	58025458 	.word	0x58025458
 8003e50:	5802546c 	.word	0x5802546c
 8003e54:	58025480 	.word	0x58025480
 8003e58:	58025494 	.word	0x58025494
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d028      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e70:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e76:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	2201      	movs	r2, #1
 8003e82:	409a      	lsls	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e90:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00c      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ea4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ea8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003eb2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop

08003ee0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08a      	sub	sp, #40	@ 0x28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003eec:	4b67      	ldr	r3, [pc, #412]	@ (800408c <HAL_DMA_IRQHandler+0x1ac>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a67      	ldr	r2, [pc, #412]	@ (8004090 <HAL_DMA_IRQHandler+0x1b0>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	0a9b      	lsrs	r3, r3, #10
 8003ef8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f04:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a5f      	ldr	r2, [pc, #380]	@ (8004094 <HAL_DMA_IRQHandler+0x1b4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d04a      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xd2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a5d      	ldr	r2, [pc, #372]	@ (8004098 <HAL_DMA_IRQHandler+0x1b8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d045      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xd2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a5c      	ldr	r2, [pc, #368]	@ (800409c <HAL_DMA_IRQHandler+0x1bc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d040      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xd2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a5a      	ldr	r2, [pc, #360]	@ (80040a0 <HAL_DMA_IRQHandler+0x1c0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d03b      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xd2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a59      	ldr	r2, [pc, #356]	@ (80040a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d036      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xd2>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a57      	ldr	r2, [pc, #348]	@ (80040a8 <HAL_DMA_IRQHandler+0x1c8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d031      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xd2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a56      	ldr	r2, [pc, #344]	@ (80040ac <HAL_DMA_IRQHandler+0x1cc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d02c      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xd2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a54      	ldr	r2, [pc, #336]	@ (80040b0 <HAL_DMA_IRQHandler+0x1d0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d027      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xd2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a53      	ldr	r2, [pc, #332]	@ (80040b4 <HAL_DMA_IRQHandler+0x1d4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d022      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xd2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a51      	ldr	r2, [pc, #324]	@ (80040b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01d      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xd2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a50      	ldr	r2, [pc, #320]	@ (80040bc <HAL_DMA_IRQHandler+0x1dc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d018      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xd2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a4e      	ldr	r2, [pc, #312]	@ (80040c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xd2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a4d      	ldr	r2, [pc, #308]	@ (80040c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00e      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xd2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a4b      	ldr	r2, [pc, #300]	@ (80040c8 <HAL_DMA_IRQHandler+0x1e8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d009      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xd2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a4a      	ldr	r2, [pc, #296]	@ (80040cc <HAL_DMA_IRQHandler+0x1ec>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xd2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a48      	ldr	r2, [pc, #288]	@ (80040d0 <HAL_DMA_IRQHandler+0x1f0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d101      	bne.n	8003fb6 <HAL_DMA_IRQHandler+0xd6>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <HAL_DMA_IRQHandler+0xd8>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 842b 	beq.w	8004814 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	2208      	movs	r2, #8
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 80a2 	beq.w	8004118 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8004094 <HAL_DMA_IRQHandler+0x1b4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d04a      	beq.n	8004074 <HAL_DMA_IRQHandler+0x194>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8004098 <HAL_DMA_IRQHandler+0x1b8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d045      	beq.n	8004074 <HAL_DMA_IRQHandler+0x194>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a2b      	ldr	r2, [pc, #172]	@ (800409c <HAL_DMA_IRQHandler+0x1bc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d040      	beq.n	8004074 <HAL_DMA_IRQHandler+0x194>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80040a0 <HAL_DMA_IRQHandler+0x1c0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d03b      	beq.n	8004074 <HAL_DMA_IRQHandler+0x194>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a28      	ldr	r2, [pc, #160]	@ (80040a4 <HAL_DMA_IRQHandler+0x1c4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d036      	beq.n	8004074 <HAL_DMA_IRQHandler+0x194>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a27      	ldr	r2, [pc, #156]	@ (80040a8 <HAL_DMA_IRQHandler+0x1c8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d031      	beq.n	8004074 <HAL_DMA_IRQHandler+0x194>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a25      	ldr	r2, [pc, #148]	@ (80040ac <HAL_DMA_IRQHandler+0x1cc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d02c      	beq.n	8004074 <HAL_DMA_IRQHandler+0x194>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a24      	ldr	r2, [pc, #144]	@ (80040b0 <HAL_DMA_IRQHandler+0x1d0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d027      	beq.n	8004074 <HAL_DMA_IRQHandler+0x194>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a22      	ldr	r2, [pc, #136]	@ (80040b4 <HAL_DMA_IRQHandler+0x1d4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d022      	beq.n	8004074 <HAL_DMA_IRQHandler+0x194>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a21      	ldr	r2, [pc, #132]	@ (80040b8 <HAL_DMA_IRQHandler+0x1d8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d01d      	beq.n	8004074 <HAL_DMA_IRQHandler+0x194>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a1f      	ldr	r2, [pc, #124]	@ (80040bc <HAL_DMA_IRQHandler+0x1dc>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d018      	beq.n	8004074 <HAL_DMA_IRQHandler+0x194>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1e      	ldr	r2, [pc, #120]	@ (80040c0 <HAL_DMA_IRQHandler+0x1e0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <HAL_DMA_IRQHandler+0x194>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a1c      	ldr	r2, [pc, #112]	@ (80040c4 <HAL_DMA_IRQHandler+0x1e4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00e      	beq.n	8004074 <HAL_DMA_IRQHandler+0x194>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1b      	ldr	r2, [pc, #108]	@ (80040c8 <HAL_DMA_IRQHandler+0x1e8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <HAL_DMA_IRQHandler+0x194>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a19      	ldr	r2, [pc, #100]	@ (80040cc <HAL_DMA_IRQHandler+0x1ec>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <HAL_DMA_IRQHandler+0x194>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a18      	ldr	r2, [pc, #96]	@ (80040d0 <HAL_DMA_IRQHandler+0x1f0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d12f      	bne.n	80040d4 <HAL_DMA_IRQHandler+0x1f4>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	bf14      	ite	ne
 8004082:	2301      	movne	r3, #1
 8004084:	2300      	moveq	r3, #0
 8004086:	b2db      	uxtb	r3, r3
 8004088:	e02e      	b.n	80040e8 <HAL_DMA_IRQHandler+0x208>
 800408a:	bf00      	nop
 800408c:	24000090 	.word	0x24000090
 8004090:	1b4e81b5 	.word	0x1b4e81b5
 8004094:	40020010 	.word	0x40020010
 8004098:	40020028 	.word	0x40020028
 800409c:	40020040 	.word	0x40020040
 80040a0:	40020058 	.word	0x40020058
 80040a4:	40020070 	.word	0x40020070
 80040a8:	40020088 	.word	0x40020088
 80040ac:	400200a0 	.word	0x400200a0
 80040b0:	400200b8 	.word	0x400200b8
 80040b4:	40020410 	.word	0x40020410
 80040b8:	40020428 	.word	0x40020428
 80040bc:	40020440 	.word	0x40020440
 80040c0:	40020458 	.word	0x40020458
 80040c4:	40020470 	.word	0x40020470
 80040c8:	40020488 	.word	0x40020488
 80040cc:	400204a0 	.word	0x400204a0
 80040d0:	400204b8 	.word	0x400204b8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bf14      	ite	ne
 80040e2:	2301      	movne	r3, #1
 80040e4:	2300      	moveq	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d015      	beq.n	8004118 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0204 	bic.w	r2, r2, #4
 80040fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	2208      	movs	r2, #8
 8004106:	409a      	lsls	r2, r3
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004110:	f043 0201 	orr.w	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	fa22 f303 	lsr.w	r3, r2, r3
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d06e      	beq.n	800420c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a69      	ldr	r2, [pc, #420]	@ (80042d8 <HAL_DMA_IRQHandler+0x3f8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d04a      	beq.n	80041ce <HAL_DMA_IRQHandler+0x2ee>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a67      	ldr	r2, [pc, #412]	@ (80042dc <HAL_DMA_IRQHandler+0x3fc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d045      	beq.n	80041ce <HAL_DMA_IRQHandler+0x2ee>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a66      	ldr	r2, [pc, #408]	@ (80042e0 <HAL_DMA_IRQHandler+0x400>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d040      	beq.n	80041ce <HAL_DMA_IRQHandler+0x2ee>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a64      	ldr	r2, [pc, #400]	@ (80042e4 <HAL_DMA_IRQHandler+0x404>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d03b      	beq.n	80041ce <HAL_DMA_IRQHandler+0x2ee>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a63      	ldr	r2, [pc, #396]	@ (80042e8 <HAL_DMA_IRQHandler+0x408>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d036      	beq.n	80041ce <HAL_DMA_IRQHandler+0x2ee>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a61      	ldr	r2, [pc, #388]	@ (80042ec <HAL_DMA_IRQHandler+0x40c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d031      	beq.n	80041ce <HAL_DMA_IRQHandler+0x2ee>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a60      	ldr	r2, [pc, #384]	@ (80042f0 <HAL_DMA_IRQHandler+0x410>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d02c      	beq.n	80041ce <HAL_DMA_IRQHandler+0x2ee>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a5e      	ldr	r2, [pc, #376]	@ (80042f4 <HAL_DMA_IRQHandler+0x414>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d027      	beq.n	80041ce <HAL_DMA_IRQHandler+0x2ee>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a5d      	ldr	r2, [pc, #372]	@ (80042f8 <HAL_DMA_IRQHandler+0x418>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d022      	beq.n	80041ce <HAL_DMA_IRQHandler+0x2ee>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a5b      	ldr	r2, [pc, #364]	@ (80042fc <HAL_DMA_IRQHandler+0x41c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d01d      	beq.n	80041ce <HAL_DMA_IRQHandler+0x2ee>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a5a      	ldr	r2, [pc, #360]	@ (8004300 <HAL_DMA_IRQHandler+0x420>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d018      	beq.n	80041ce <HAL_DMA_IRQHandler+0x2ee>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a58      	ldr	r2, [pc, #352]	@ (8004304 <HAL_DMA_IRQHandler+0x424>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d013      	beq.n	80041ce <HAL_DMA_IRQHandler+0x2ee>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a57      	ldr	r2, [pc, #348]	@ (8004308 <HAL_DMA_IRQHandler+0x428>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00e      	beq.n	80041ce <HAL_DMA_IRQHandler+0x2ee>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a55      	ldr	r2, [pc, #340]	@ (800430c <HAL_DMA_IRQHandler+0x42c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d009      	beq.n	80041ce <HAL_DMA_IRQHandler+0x2ee>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a54      	ldr	r2, [pc, #336]	@ (8004310 <HAL_DMA_IRQHandler+0x430>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d004      	beq.n	80041ce <HAL_DMA_IRQHandler+0x2ee>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a52      	ldr	r2, [pc, #328]	@ (8004314 <HAL_DMA_IRQHandler+0x434>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d10a      	bne.n	80041e4 <HAL_DMA_IRQHandler+0x304>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf14      	ite	ne
 80041dc:	2301      	movne	r3, #1
 80041de:	2300      	moveq	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	e003      	b.n	80041ec <HAL_DMA_IRQHandler+0x30c>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00d      	beq.n	800420c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	2201      	movs	r2, #1
 80041fa:	409a      	lsls	r2, r3
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004204:	f043 0202 	orr.w	r2, r3, #2
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	2204      	movs	r2, #4
 8004216:	409a      	lsls	r2, r3
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 808f 	beq.w	8004340 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2c      	ldr	r2, [pc, #176]	@ (80042d8 <HAL_DMA_IRQHandler+0x3f8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d04a      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x3e2>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2a      	ldr	r2, [pc, #168]	@ (80042dc <HAL_DMA_IRQHandler+0x3fc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d045      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x3e2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a29      	ldr	r2, [pc, #164]	@ (80042e0 <HAL_DMA_IRQHandler+0x400>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d040      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x3e2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a27      	ldr	r2, [pc, #156]	@ (80042e4 <HAL_DMA_IRQHandler+0x404>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d03b      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x3e2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a26      	ldr	r2, [pc, #152]	@ (80042e8 <HAL_DMA_IRQHandler+0x408>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d036      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x3e2>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a24      	ldr	r2, [pc, #144]	@ (80042ec <HAL_DMA_IRQHandler+0x40c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d031      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x3e2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a23      	ldr	r2, [pc, #140]	@ (80042f0 <HAL_DMA_IRQHandler+0x410>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d02c      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x3e2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a21      	ldr	r2, [pc, #132]	@ (80042f4 <HAL_DMA_IRQHandler+0x414>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d027      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x3e2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a20      	ldr	r2, [pc, #128]	@ (80042f8 <HAL_DMA_IRQHandler+0x418>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d022      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x3e2>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1e      	ldr	r2, [pc, #120]	@ (80042fc <HAL_DMA_IRQHandler+0x41c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d01d      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x3e2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1d      	ldr	r2, [pc, #116]	@ (8004300 <HAL_DMA_IRQHandler+0x420>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d018      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x3e2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1b      	ldr	r2, [pc, #108]	@ (8004304 <HAL_DMA_IRQHandler+0x424>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x3e2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1a      	ldr	r2, [pc, #104]	@ (8004308 <HAL_DMA_IRQHandler+0x428>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00e      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x3e2>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a18      	ldr	r2, [pc, #96]	@ (800430c <HAL_DMA_IRQHandler+0x42c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d009      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x3e2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a17      	ldr	r2, [pc, #92]	@ (8004310 <HAL_DMA_IRQHandler+0x430>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x3e2>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a15      	ldr	r2, [pc, #84]	@ (8004314 <HAL_DMA_IRQHandler+0x434>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d12a      	bne.n	8004318 <HAL_DMA_IRQHandler+0x438>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf14      	ite	ne
 80042d0:	2301      	movne	r3, #1
 80042d2:	2300      	moveq	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	e023      	b.n	8004320 <HAL_DMA_IRQHandler+0x440>
 80042d8:	40020010 	.word	0x40020010
 80042dc:	40020028 	.word	0x40020028
 80042e0:	40020040 	.word	0x40020040
 80042e4:	40020058 	.word	0x40020058
 80042e8:	40020070 	.word	0x40020070
 80042ec:	40020088 	.word	0x40020088
 80042f0:	400200a0 	.word	0x400200a0
 80042f4:	400200b8 	.word	0x400200b8
 80042f8:	40020410 	.word	0x40020410
 80042fc:	40020428 	.word	0x40020428
 8004300:	40020440 	.word	0x40020440
 8004304:	40020458 	.word	0x40020458
 8004308:	40020470 	.word	0x40020470
 800430c:	40020488 	.word	0x40020488
 8004310:	400204a0 	.word	0x400204a0
 8004314:	400204b8 	.word	0x400204b8
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2300      	movs	r3, #0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00d      	beq.n	8004340 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	2204      	movs	r2, #4
 800432e:	409a      	lsls	r2, r3
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004338:	f043 0204 	orr.w	r2, r3, #4
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	2210      	movs	r2, #16
 800434a:	409a      	lsls	r2, r3
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80a6 	beq.w	80044a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a85      	ldr	r2, [pc, #532]	@ (8004570 <HAL_DMA_IRQHandler+0x690>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d04a      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x516>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a83      	ldr	r2, [pc, #524]	@ (8004574 <HAL_DMA_IRQHandler+0x694>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d045      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x516>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a82      	ldr	r2, [pc, #520]	@ (8004578 <HAL_DMA_IRQHandler+0x698>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d040      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x516>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a80      	ldr	r2, [pc, #512]	@ (800457c <HAL_DMA_IRQHandler+0x69c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d03b      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x516>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a7f      	ldr	r2, [pc, #508]	@ (8004580 <HAL_DMA_IRQHandler+0x6a0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d036      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x516>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a7d      	ldr	r2, [pc, #500]	@ (8004584 <HAL_DMA_IRQHandler+0x6a4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d031      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x516>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a7c      	ldr	r2, [pc, #496]	@ (8004588 <HAL_DMA_IRQHandler+0x6a8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d02c      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x516>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a7a      	ldr	r2, [pc, #488]	@ (800458c <HAL_DMA_IRQHandler+0x6ac>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d027      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x516>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a79      	ldr	r2, [pc, #484]	@ (8004590 <HAL_DMA_IRQHandler+0x6b0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d022      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x516>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a77      	ldr	r2, [pc, #476]	@ (8004594 <HAL_DMA_IRQHandler+0x6b4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01d      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x516>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a76      	ldr	r2, [pc, #472]	@ (8004598 <HAL_DMA_IRQHandler+0x6b8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d018      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x516>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a74      	ldr	r2, [pc, #464]	@ (800459c <HAL_DMA_IRQHandler+0x6bc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d013      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x516>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a73      	ldr	r2, [pc, #460]	@ (80045a0 <HAL_DMA_IRQHandler+0x6c0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00e      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x516>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a71      	ldr	r2, [pc, #452]	@ (80045a4 <HAL_DMA_IRQHandler+0x6c4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d009      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x516>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a70      	ldr	r2, [pc, #448]	@ (80045a8 <HAL_DMA_IRQHandler+0x6c8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d004      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x516>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a6e      	ldr	r2, [pc, #440]	@ (80045ac <HAL_DMA_IRQHandler+0x6cc>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d10a      	bne.n	800440c <HAL_DMA_IRQHandler+0x52c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf14      	ite	ne
 8004404:	2301      	movne	r3, #1
 8004406:	2300      	moveq	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e009      	b.n	8004420 <HAL_DMA_IRQHandler+0x540>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	bf14      	ite	ne
 800441a:	2301      	movne	r3, #1
 800441c:	2300      	moveq	r3, #0
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d03e      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	2210      	movs	r2, #16
 800442e:	409a      	lsls	r2, r3
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d018      	beq.n	8004474 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d108      	bne.n	8004462 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d024      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	4798      	blx	r3
 8004460:	e01f      	b.n	80044a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01b      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	4798      	blx	r3
 8004472:	e016      	b.n	80044a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d107      	bne.n	8004492 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0208 	bic.w	r2, r2, #8
 8004490:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a6:	f003 031f 	and.w	r3, r3, #31
 80044aa:	2220      	movs	r2, #32
 80044ac:	409a      	lsls	r2, r3
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 8110 	beq.w	80046d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004570 <HAL_DMA_IRQHandler+0x690>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d04a      	beq.n	8004558 <HAL_DMA_IRQHandler+0x678>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2b      	ldr	r2, [pc, #172]	@ (8004574 <HAL_DMA_IRQHandler+0x694>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d045      	beq.n	8004558 <HAL_DMA_IRQHandler+0x678>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a29      	ldr	r2, [pc, #164]	@ (8004578 <HAL_DMA_IRQHandler+0x698>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d040      	beq.n	8004558 <HAL_DMA_IRQHandler+0x678>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a28      	ldr	r2, [pc, #160]	@ (800457c <HAL_DMA_IRQHandler+0x69c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d03b      	beq.n	8004558 <HAL_DMA_IRQHandler+0x678>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a26      	ldr	r2, [pc, #152]	@ (8004580 <HAL_DMA_IRQHandler+0x6a0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d036      	beq.n	8004558 <HAL_DMA_IRQHandler+0x678>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a25      	ldr	r2, [pc, #148]	@ (8004584 <HAL_DMA_IRQHandler+0x6a4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d031      	beq.n	8004558 <HAL_DMA_IRQHandler+0x678>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a23      	ldr	r2, [pc, #140]	@ (8004588 <HAL_DMA_IRQHandler+0x6a8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d02c      	beq.n	8004558 <HAL_DMA_IRQHandler+0x678>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a22      	ldr	r2, [pc, #136]	@ (800458c <HAL_DMA_IRQHandler+0x6ac>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d027      	beq.n	8004558 <HAL_DMA_IRQHandler+0x678>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a20      	ldr	r2, [pc, #128]	@ (8004590 <HAL_DMA_IRQHandler+0x6b0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d022      	beq.n	8004558 <HAL_DMA_IRQHandler+0x678>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1f      	ldr	r2, [pc, #124]	@ (8004594 <HAL_DMA_IRQHandler+0x6b4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d01d      	beq.n	8004558 <HAL_DMA_IRQHandler+0x678>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1d      	ldr	r2, [pc, #116]	@ (8004598 <HAL_DMA_IRQHandler+0x6b8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d018      	beq.n	8004558 <HAL_DMA_IRQHandler+0x678>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1c      	ldr	r2, [pc, #112]	@ (800459c <HAL_DMA_IRQHandler+0x6bc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d013      	beq.n	8004558 <HAL_DMA_IRQHandler+0x678>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1a      	ldr	r2, [pc, #104]	@ (80045a0 <HAL_DMA_IRQHandler+0x6c0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00e      	beq.n	8004558 <HAL_DMA_IRQHandler+0x678>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a19      	ldr	r2, [pc, #100]	@ (80045a4 <HAL_DMA_IRQHandler+0x6c4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d009      	beq.n	8004558 <HAL_DMA_IRQHandler+0x678>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a17      	ldr	r2, [pc, #92]	@ (80045a8 <HAL_DMA_IRQHandler+0x6c8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <HAL_DMA_IRQHandler+0x678>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a16      	ldr	r2, [pc, #88]	@ (80045ac <HAL_DMA_IRQHandler+0x6cc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d12b      	bne.n	80045b0 <HAL_DMA_IRQHandler+0x6d0>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0310 	and.w	r3, r3, #16
 8004562:	2b00      	cmp	r3, #0
 8004564:	bf14      	ite	ne
 8004566:	2301      	movne	r3, #1
 8004568:	2300      	moveq	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	e02a      	b.n	80045c4 <HAL_DMA_IRQHandler+0x6e4>
 800456e:	bf00      	nop
 8004570:	40020010 	.word	0x40020010
 8004574:	40020028 	.word	0x40020028
 8004578:	40020040 	.word	0x40020040
 800457c:	40020058 	.word	0x40020058
 8004580:	40020070 	.word	0x40020070
 8004584:	40020088 	.word	0x40020088
 8004588:	400200a0 	.word	0x400200a0
 800458c:	400200b8 	.word	0x400200b8
 8004590:	40020410 	.word	0x40020410
 8004594:	40020428 	.word	0x40020428
 8004598:	40020440 	.word	0x40020440
 800459c:	40020458 	.word	0x40020458
 80045a0:	40020470 	.word	0x40020470
 80045a4:	40020488 	.word	0x40020488
 80045a8:	400204a0 	.word	0x400204a0
 80045ac:	400204b8 	.word	0x400204b8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	bf14      	ite	ne
 80045be:	2301      	movne	r3, #1
 80045c0:	2300      	moveq	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 8087 	beq.w	80046d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	2220      	movs	r2, #32
 80045d4:	409a      	lsls	r2, r3
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d139      	bne.n	800465a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0216 	bic.w	r2, r2, #22
 80045f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004604:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d103      	bne.n	8004616 <HAL_DMA_IRQHandler+0x736>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0208 	bic.w	r2, r2, #8
 8004624:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462a:	f003 031f 	and.w	r3, r3, #31
 800462e:	223f      	movs	r2, #63	@ 0x3f
 8004630:	409a      	lsls	r2, r3
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 834a 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	4798      	blx	r3
          }
          return;
 8004658:	e344      	b.n	8004ce4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d018      	beq.n	800469a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d108      	bne.n	8004688 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467a:	2b00      	cmp	r3, #0
 800467c:	d02c      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
 8004686:	e027      	b.n	80046d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468c:	2b00      	cmp	r3, #0
 800468e:	d023      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
 8004698:	e01e      	b.n	80046d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10f      	bne.n	80046c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0210 	bic.w	r2, r2, #16
 80046b6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8306 	beq.w	8004cee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8088 	beq.w	8004800 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2204      	movs	r2, #4
 80046f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a7a      	ldr	r2, [pc, #488]	@ (80048e8 <HAL_DMA_IRQHandler+0xa08>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d04a      	beq.n	8004798 <HAL_DMA_IRQHandler+0x8b8>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a79      	ldr	r2, [pc, #484]	@ (80048ec <HAL_DMA_IRQHandler+0xa0c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d045      	beq.n	8004798 <HAL_DMA_IRQHandler+0x8b8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a77      	ldr	r2, [pc, #476]	@ (80048f0 <HAL_DMA_IRQHandler+0xa10>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d040      	beq.n	8004798 <HAL_DMA_IRQHandler+0x8b8>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a76      	ldr	r2, [pc, #472]	@ (80048f4 <HAL_DMA_IRQHandler+0xa14>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d03b      	beq.n	8004798 <HAL_DMA_IRQHandler+0x8b8>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a74      	ldr	r2, [pc, #464]	@ (80048f8 <HAL_DMA_IRQHandler+0xa18>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d036      	beq.n	8004798 <HAL_DMA_IRQHandler+0x8b8>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a73      	ldr	r2, [pc, #460]	@ (80048fc <HAL_DMA_IRQHandler+0xa1c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d031      	beq.n	8004798 <HAL_DMA_IRQHandler+0x8b8>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a71      	ldr	r2, [pc, #452]	@ (8004900 <HAL_DMA_IRQHandler+0xa20>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02c      	beq.n	8004798 <HAL_DMA_IRQHandler+0x8b8>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a70      	ldr	r2, [pc, #448]	@ (8004904 <HAL_DMA_IRQHandler+0xa24>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d027      	beq.n	8004798 <HAL_DMA_IRQHandler+0x8b8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a6e      	ldr	r2, [pc, #440]	@ (8004908 <HAL_DMA_IRQHandler+0xa28>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d022      	beq.n	8004798 <HAL_DMA_IRQHandler+0x8b8>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a6d      	ldr	r2, [pc, #436]	@ (800490c <HAL_DMA_IRQHandler+0xa2c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d01d      	beq.n	8004798 <HAL_DMA_IRQHandler+0x8b8>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a6b      	ldr	r2, [pc, #428]	@ (8004910 <HAL_DMA_IRQHandler+0xa30>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d018      	beq.n	8004798 <HAL_DMA_IRQHandler+0x8b8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a6a      	ldr	r2, [pc, #424]	@ (8004914 <HAL_DMA_IRQHandler+0xa34>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d013      	beq.n	8004798 <HAL_DMA_IRQHandler+0x8b8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a68      	ldr	r2, [pc, #416]	@ (8004918 <HAL_DMA_IRQHandler+0xa38>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00e      	beq.n	8004798 <HAL_DMA_IRQHandler+0x8b8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a67      	ldr	r2, [pc, #412]	@ (800491c <HAL_DMA_IRQHandler+0xa3c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d009      	beq.n	8004798 <HAL_DMA_IRQHandler+0x8b8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a65      	ldr	r2, [pc, #404]	@ (8004920 <HAL_DMA_IRQHandler+0xa40>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <HAL_DMA_IRQHandler+0x8b8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a64      	ldr	r2, [pc, #400]	@ (8004924 <HAL_DMA_IRQHandler+0xa44>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d108      	bne.n	80047aa <HAL_DMA_IRQHandler+0x8ca>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0201 	bic.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	e007      	b.n	80047ba <HAL_DMA_IRQHandler+0x8da>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0201 	bic.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3301      	adds	r3, #1
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d307      	bcc.n	80047d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f2      	bne.n	80047ba <HAL_DMA_IRQHandler+0x8da>
 80047d4:	e000      	b.n	80047d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80047d6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d004      	beq.n	80047f0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2203      	movs	r2, #3
 80047ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80047ee:	e003      	b.n	80047f8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 8272 	beq.w	8004cee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	4798      	blx	r3
 8004812:	e26c      	b.n	8004cee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a43      	ldr	r2, [pc, #268]	@ (8004928 <HAL_DMA_IRQHandler+0xa48>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d022      	beq.n	8004864 <HAL_DMA_IRQHandler+0x984>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a42      	ldr	r2, [pc, #264]	@ (800492c <HAL_DMA_IRQHandler+0xa4c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d01d      	beq.n	8004864 <HAL_DMA_IRQHandler+0x984>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a40      	ldr	r2, [pc, #256]	@ (8004930 <HAL_DMA_IRQHandler+0xa50>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d018      	beq.n	8004864 <HAL_DMA_IRQHandler+0x984>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a3f      	ldr	r2, [pc, #252]	@ (8004934 <HAL_DMA_IRQHandler+0xa54>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d013      	beq.n	8004864 <HAL_DMA_IRQHandler+0x984>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a3d      	ldr	r2, [pc, #244]	@ (8004938 <HAL_DMA_IRQHandler+0xa58>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00e      	beq.n	8004864 <HAL_DMA_IRQHandler+0x984>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a3c      	ldr	r2, [pc, #240]	@ (800493c <HAL_DMA_IRQHandler+0xa5c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d009      	beq.n	8004864 <HAL_DMA_IRQHandler+0x984>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a3a      	ldr	r2, [pc, #232]	@ (8004940 <HAL_DMA_IRQHandler+0xa60>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_DMA_IRQHandler+0x984>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a39      	ldr	r2, [pc, #228]	@ (8004944 <HAL_DMA_IRQHandler+0xa64>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d101      	bne.n	8004868 <HAL_DMA_IRQHandler+0x988>
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <HAL_DMA_IRQHandler+0x98a>
 8004868:	2300      	movs	r3, #0
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 823f 	beq.w	8004cee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800487c:	f003 031f 	and.w	r3, r3, #31
 8004880:	2204      	movs	r2, #4
 8004882:	409a      	lsls	r2, r3
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	4013      	ands	r3, r2
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80cd 	beq.w	8004a28 <HAL_DMA_IRQHandler+0xb48>
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 80c7 	beq.w	8004a28 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	2204      	movs	r2, #4
 80048a4:	409a      	lsls	r2, r3
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d049      	beq.n	8004948 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 8210 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048d0:	e20a      	b.n	8004ce8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 8206 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048e4:	e200      	b.n	8004ce8 <HAL_DMA_IRQHandler+0xe08>
 80048e6:	bf00      	nop
 80048e8:	40020010 	.word	0x40020010
 80048ec:	40020028 	.word	0x40020028
 80048f0:	40020040 	.word	0x40020040
 80048f4:	40020058 	.word	0x40020058
 80048f8:	40020070 	.word	0x40020070
 80048fc:	40020088 	.word	0x40020088
 8004900:	400200a0 	.word	0x400200a0
 8004904:	400200b8 	.word	0x400200b8
 8004908:	40020410 	.word	0x40020410
 800490c:	40020428 	.word	0x40020428
 8004910:	40020440 	.word	0x40020440
 8004914:	40020458 	.word	0x40020458
 8004918:	40020470 	.word	0x40020470
 800491c:	40020488 	.word	0x40020488
 8004920:	400204a0 	.word	0x400204a0
 8004924:	400204b8 	.word	0x400204b8
 8004928:	58025408 	.word	0x58025408
 800492c:	5802541c 	.word	0x5802541c
 8004930:	58025430 	.word	0x58025430
 8004934:	58025444 	.word	0x58025444
 8004938:	58025458 	.word	0x58025458
 800493c:	5802546c 	.word	0x5802546c
 8004940:	58025480 	.word	0x58025480
 8004944:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d160      	bne.n	8004a14 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a7f      	ldr	r2, [pc, #508]	@ (8004b54 <HAL_DMA_IRQHandler+0xc74>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d04a      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb12>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a7d      	ldr	r2, [pc, #500]	@ (8004b58 <HAL_DMA_IRQHandler+0xc78>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d045      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb12>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b5c <HAL_DMA_IRQHandler+0xc7c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d040      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb12>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a7a      	ldr	r2, [pc, #488]	@ (8004b60 <HAL_DMA_IRQHandler+0xc80>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d03b      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb12>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a79      	ldr	r2, [pc, #484]	@ (8004b64 <HAL_DMA_IRQHandler+0xc84>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d036      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb12>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a77      	ldr	r2, [pc, #476]	@ (8004b68 <HAL_DMA_IRQHandler+0xc88>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d031      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb12>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a76      	ldr	r2, [pc, #472]	@ (8004b6c <HAL_DMA_IRQHandler+0xc8c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d02c      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb12>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a74      	ldr	r2, [pc, #464]	@ (8004b70 <HAL_DMA_IRQHandler+0xc90>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d027      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb12>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a73      	ldr	r2, [pc, #460]	@ (8004b74 <HAL_DMA_IRQHandler+0xc94>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d022      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb12>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a71      	ldr	r2, [pc, #452]	@ (8004b78 <HAL_DMA_IRQHandler+0xc98>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d01d      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb12>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a70      	ldr	r2, [pc, #448]	@ (8004b7c <HAL_DMA_IRQHandler+0xc9c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d018      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb12>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004b80 <HAL_DMA_IRQHandler+0xca0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb12>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a6d      	ldr	r2, [pc, #436]	@ (8004b84 <HAL_DMA_IRQHandler+0xca4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d00e      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb12>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a6b      	ldr	r2, [pc, #428]	@ (8004b88 <HAL_DMA_IRQHandler+0xca8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d009      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb12>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a6a      	ldr	r2, [pc, #424]	@ (8004b8c <HAL_DMA_IRQHandler+0xcac>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d004      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xb12>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a68      	ldr	r2, [pc, #416]	@ (8004b90 <HAL_DMA_IRQHandler+0xcb0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d108      	bne.n	8004a04 <HAL_DMA_IRQHandler+0xb24>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0208 	bic.w	r2, r2, #8
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e007      	b.n	8004a14 <HAL_DMA_IRQHandler+0xb34>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0204 	bic.w	r2, r2, #4
 8004a12:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8165 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a26:	e15f      	b.n	8004ce8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	2202      	movs	r2, #2
 8004a32:	409a      	lsls	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	4013      	ands	r3, r2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80c5 	beq.w	8004bc8 <HAL_DMA_IRQHandler+0xce8>
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 80bf 	beq.w	8004bc8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	2202      	movs	r2, #2
 8004a54:	409a      	lsls	r2, r3
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d018      	beq.n	8004a96 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 813a 	beq.w	8004cec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a80:	e134      	b.n	8004cec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 8130 	beq.w	8004cec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a94:	e12a      	b.n	8004cec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f040 8089 	bne.w	8004bb4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8004b54 <HAL_DMA_IRQHandler+0xc74>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d04a      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xc62>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a29      	ldr	r2, [pc, #164]	@ (8004b58 <HAL_DMA_IRQHandler+0xc78>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d045      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xc62>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a28      	ldr	r2, [pc, #160]	@ (8004b5c <HAL_DMA_IRQHandler+0xc7c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d040      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xc62>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a26      	ldr	r2, [pc, #152]	@ (8004b60 <HAL_DMA_IRQHandler+0xc80>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d03b      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xc62>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a25      	ldr	r2, [pc, #148]	@ (8004b64 <HAL_DMA_IRQHandler+0xc84>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d036      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xc62>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a23      	ldr	r2, [pc, #140]	@ (8004b68 <HAL_DMA_IRQHandler+0xc88>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d031      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xc62>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a22      	ldr	r2, [pc, #136]	@ (8004b6c <HAL_DMA_IRQHandler+0xc8c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d02c      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xc62>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a20      	ldr	r2, [pc, #128]	@ (8004b70 <HAL_DMA_IRQHandler+0xc90>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d027      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xc62>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b74 <HAL_DMA_IRQHandler+0xc94>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d022      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xc62>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1d      	ldr	r2, [pc, #116]	@ (8004b78 <HAL_DMA_IRQHandler+0xc98>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01d      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xc62>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8004b7c <HAL_DMA_IRQHandler+0xc9c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d018      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xc62>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1a      	ldr	r2, [pc, #104]	@ (8004b80 <HAL_DMA_IRQHandler+0xca0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xc62>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a19      	ldr	r2, [pc, #100]	@ (8004b84 <HAL_DMA_IRQHandler+0xca4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xc62>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a17      	ldr	r2, [pc, #92]	@ (8004b88 <HAL_DMA_IRQHandler+0xca8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xc62>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a16      	ldr	r2, [pc, #88]	@ (8004b8c <HAL_DMA_IRQHandler+0xcac>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xc62>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a14      	ldr	r2, [pc, #80]	@ (8004b90 <HAL_DMA_IRQHandler+0xcb0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d128      	bne.n	8004b94 <HAL_DMA_IRQHandler+0xcb4>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0214 	bic.w	r2, r2, #20
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	e027      	b.n	8004ba4 <HAL_DMA_IRQHandler+0xcc4>
 8004b54:	40020010 	.word	0x40020010
 8004b58:	40020028 	.word	0x40020028
 8004b5c:	40020040 	.word	0x40020040
 8004b60:	40020058 	.word	0x40020058
 8004b64:	40020070 	.word	0x40020070
 8004b68:	40020088 	.word	0x40020088
 8004b6c:	400200a0 	.word	0x400200a0
 8004b70:	400200b8 	.word	0x400200b8
 8004b74:	40020410 	.word	0x40020410
 8004b78:	40020428 	.word	0x40020428
 8004b7c:	40020440 	.word	0x40020440
 8004b80:	40020458 	.word	0x40020458
 8004b84:	40020470 	.word	0x40020470
 8004b88:	40020488 	.word	0x40020488
 8004b8c:	400204a0 	.word	0x400204a0
 8004b90:	400204b8 	.word	0x400204b8
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 020a 	bic.w	r2, r2, #10
 8004ba2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 8097 	beq.w	8004cec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bc6:	e091      	b.n	8004cec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	409a      	lsls	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8088 	beq.w	8004cee <HAL_DMA_IRQHandler+0xe0e>
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8082 	beq.w	8004cee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a41      	ldr	r2, [pc, #260]	@ (8004cf4 <HAL_DMA_IRQHandler+0xe14>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d04a      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xdaa>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a3f      	ldr	r2, [pc, #252]	@ (8004cf8 <HAL_DMA_IRQHandler+0xe18>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d045      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xdaa>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a3e      	ldr	r2, [pc, #248]	@ (8004cfc <HAL_DMA_IRQHandler+0xe1c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d040      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xdaa>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d00 <HAL_DMA_IRQHandler+0xe20>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d03b      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xdaa>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a3b      	ldr	r2, [pc, #236]	@ (8004d04 <HAL_DMA_IRQHandler+0xe24>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d036      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xdaa>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a39      	ldr	r2, [pc, #228]	@ (8004d08 <HAL_DMA_IRQHandler+0xe28>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d031      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xdaa>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a38      	ldr	r2, [pc, #224]	@ (8004d0c <HAL_DMA_IRQHandler+0xe2c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d02c      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xdaa>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a36      	ldr	r2, [pc, #216]	@ (8004d10 <HAL_DMA_IRQHandler+0xe30>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d027      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xdaa>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a35      	ldr	r2, [pc, #212]	@ (8004d14 <HAL_DMA_IRQHandler+0xe34>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d022      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xdaa>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a33      	ldr	r2, [pc, #204]	@ (8004d18 <HAL_DMA_IRQHandler+0xe38>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d01d      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xdaa>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a32      	ldr	r2, [pc, #200]	@ (8004d1c <HAL_DMA_IRQHandler+0xe3c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d018      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xdaa>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a30      	ldr	r2, [pc, #192]	@ (8004d20 <HAL_DMA_IRQHandler+0xe40>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d013      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xdaa>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a2f      	ldr	r2, [pc, #188]	@ (8004d24 <HAL_DMA_IRQHandler+0xe44>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00e      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xdaa>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a2d      	ldr	r2, [pc, #180]	@ (8004d28 <HAL_DMA_IRQHandler+0xe48>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d009      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xdaa>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004d2c <HAL_DMA_IRQHandler+0xe4c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <HAL_DMA_IRQHandler+0xdaa>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a2a      	ldr	r2, [pc, #168]	@ (8004d30 <HAL_DMA_IRQHandler+0xe50>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d108      	bne.n	8004c9c <HAL_DMA_IRQHandler+0xdbc>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 021c 	bic.w	r2, r2, #28
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	e007      	b.n	8004cac <HAL_DMA_IRQHandler+0xdcc>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 020e 	bic.w	r2, r2, #14
 8004caa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb0:	f003 031f 	and.w	r3, r3, #31
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d009      	beq.n	8004cee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
 8004ce2:	e004      	b.n	8004cee <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004ce4:	bf00      	nop
 8004ce6:	e002      	b.n	8004cee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ce8:	bf00      	nop
 8004cea:	e000      	b.n	8004cee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004cee:	3728      	adds	r7, #40	@ 0x28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40020010 	.word	0x40020010
 8004cf8:	40020028 	.word	0x40020028
 8004cfc:	40020040 	.word	0x40020040
 8004d00:	40020058 	.word	0x40020058
 8004d04:	40020070 	.word	0x40020070
 8004d08:	40020088 	.word	0x40020088
 8004d0c:	400200a0 	.word	0x400200a0
 8004d10:	400200b8 	.word	0x400200b8
 8004d14:	40020410 	.word	0x40020410
 8004d18:	40020428 	.word	0x40020428
 8004d1c:	40020440 	.word	0x40020440
 8004d20:	40020458 	.word	0x40020458
 8004d24:	40020470 	.word	0x40020470
 8004d28:	40020488 	.word	0x40020488
 8004d2c:	400204a0 	.word	0x400204a0
 8004d30:	400204b8 	.word	0x400204b8

08004d34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a42      	ldr	r2, [pc, #264]	@ (8004e4c <DMA_CalcBaseAndBitshift+0x118>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d04a      	beq.n	8004ddc <DMA_CalcBaseAndBitshift+0xa8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a41      	ldr	r2, [pc, #260]	@ (8004e50 <DMA_CalcBaseAndBitshift+0x11c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d045      	beq.n	8004ddc <DMA_CalcBaseAndBitshift+0xa8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a3f      	ldr	r2, [pc, #252]	@ (8004e54 <DMA_CalcBaseAndBitshift+0x120>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d040      	beq.n	8004ddc <DMA_CalcBaseAndBitshift+0xa8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a3e      	ldr	r2, [pc, #248]	@ (8004e58 <DMA_CalcBaseAndBitshift+0x124>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d03b      	beq.n	8004ddc <DMA_CalcBaseAndBitshift+0xa8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a3c      	ldr	r2, [pc, #240]	@ (8004e5c <DMA_CalcBaseAndBitshift+0x128>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d036      	beq.n	8004ddc <DMA_CalcBaseAndBitshift+0xa8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a3b      	ldr	r2, [pc, #236]	@ (8004e60 <DMA_CalcBaseAndBitshift+0x12c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d031      	beq.n	8004ddc <DMA_CalcBaseAndBitshift+0xa8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a39      	ldr	r2, [pc, #228]	@ (8004e64 <DMA_CalcBaseAndBitshift+0x130>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d02c      	beq.n	8004ddc <DMA_CalcBaseAndBitshift+0xa8>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a38      	ldr	r2, [pc, #224]	@ (8004e68 <DMA_CalcBaseAndBitshift+0x134>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d027      	beq.n	8004ddc <DMA_CalcBaseAndBitshift+0xa8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a36      	ldr	r2, [pc, #216]	@ (8004e6c <DMA_CalcBaseAndBitshift+0x138>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d022      	beq.n	8004ddc <DMA_CalcBaseAndBitshift+0xa8>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a35      	ldr	r2, [pc, #212]	@ (8004e70 <DMA_CalcBaseAndBitshift+0x13c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d01d      	beq.n	8004ddc <DMA_CalcBaseAndBitshift+0xa8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a33      	ldr	r2, [pc, #204]	@ (8004e74 <DMA_CalcBaseAndBitshift+0x140>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d018      	beq.n	8004ddc <DMA_CalcBaseAndBitshift+0xa8>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a32      	ldr	r2, [pc, #200]	@ (8004e78 <DMA_CalcBaseAndBitshift+0x144>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d013      	beq.n	8004ddc <DMA_CalcBaseAndBitshift+0xa8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a30      	ldr	r2, [pc, #192]	@ (8004e7c <DMA_CalcBaseAndBitshift+0x148>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00e      	beq.n	8004ddc <DMA_CalcBaseAndBitshift+0xa8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8004e80 <DMA_CalcBaseAndBitshift+0x14c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d009      	beq.n	8004ddc <DMA_CalcBaseAndBitshift+0xa8>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8004e84 <DMA_CalcBaseAndBitshift+0x150>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d004      	beq.n	8004ddc <DMA_CalcBaseAndBitshift+0xa8>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8004e88 <DMA_CalcBaseAndBitshift+0x154>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d101      	bne.n	8004de0 <DMA_CalcBaseAndBitshift+0xac>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <DMA_CalcBaseAndBitshift+0xae>
 8004de0:	2300      	movs	r3, #0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d024      	beq.n	8004e30 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	3b10      	subs	r3, #16
 8004dee:	4a27      	ldr	r2, [pc, #156]	@ (8004e8c <DMA_CalcBaseAndBitshift+0x158>)
 8004df0:	fba2 2303 	umull	r2, r3, r2, r3
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	4a24      	ldr	r2, [pc, #144]	@ (8004e90 <DMA_CalcBaseAndBitshift+0x15c>)
 8004e00:	5cd3      	ldrb	r3, [r2, r3]
 8004e02:	461a      	mov	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d908      	bls.n	8004e20 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	4b1f      	ldr	r3, [pc, #124]	@ (8004e94 <DMA_CalcBaseAndBitshift+0x160>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	1d1a      	adds	r2, r3, #4
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e1e:	e00d      	b.n	8004e3c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	4b1b      	ldr	r3, [pc, #108]	@ (8004e94 <DMA_CalcBaseAndBitshift+0x160>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e2e:	e005      	b.n	8004e3c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	40020010 	.word	0x40020010
 8004e50:	40020028 	.word	0x40020028
 8004e54:	40020040 	.word	0x40020040
 8004e58:	40020058 	.word	0x40020058
 8004e5c:	40020070 	.word	0x40020070
 8004e60:	40020088 	.word	0x40020088
 8004e64:	400200a0 	.word	0x400200a0
 8004e68:	400200b8 	.word	0x400200b8
 8004e6c:	40020410 	.word	0x40020410
 8004e70:	40020428 	.word	0x40020428
 8004e74:	40020440 	.word	0x40020440
 8004e78:	40020458 	.word	0x40020458
 8004e7c:	40020470 	.word	0x40020470
 8004e80:	40020488 	.word	0x40020488
 8004e84:	400204a0 	.word	0x400204a0
 8004e88:	400204b8 	.word	0x400204b8
 8004e8c:	aaaaaaab 	.word	0xaaaaaaab
 8004e90:	08016cd0 	.word	0x08016cd0
 8004e94:	fffffc00 	.word	0xfffffc00

08004e98 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d120      	bne.n	8004eee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d858      	bhi.n	8004f66 <DMA_CheckFifoParam+0xce>
 8004eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ebc <DMA_CheckFifoParam+0x24>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004ecd 	.word	0x08004ecd
 8004ec0:	08004edf 	.word	0x08004edf
 8004ec4:	08004ecd 	.word	0x08004ecd
 8004ec8:	08004f67 	.word	0x08004f67
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d048      	beq.n	8004f6a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004edc:	e045      	b.n	8004f6a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ee6:	d142      	bne.n	8004f6e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eec:	e03f      	b.n	8004f6e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ef6:	d123      	bne.n	8004f40 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d838      	bhi.n	8004f72 <DMA_CheckFifoParam+0xda>
 8004f00:	a201      	add	r2, pc, #4	@ (adr r2, 8004f08 <DMA_CheckFifoParam+0x70>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004f1f 	.word	0x08004f1f
 8004f10:	08004f19 	.word	0x08004f19
 8004f14:	08004f31 	.word	0x08004f31
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	73fb      	strb	r3, [r7, #15]
        break;
 8004f1c:	e030      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d025      	beq.n	8004f76 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f2e:	e022      	b.n	8004f76 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f38:	d11f      	bne.n	8004f7a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f3e:	e01c      	b.n	8004f7a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d902      	bls.n	8004f4e <DMA_CheckFifoParam+0xb6>
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d003      	beq.n	8004f54 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004f4c:	e018      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	73fb      	strb	r3, [r7, #15]
        break;
 8004f52:	e015      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00e      	beq.n	8004f7e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	73fb      	strb	r3, [r7, #15]
    break;
 8004f64:	e00b      	b.n	8004f7e <DMA_CheckFifoParam+0xe6>
        break;
 8004f66:	bf00      	nop
 8004f68:	e00a      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
        break;
 8004f6a:	bf00      	nop
 8004f6c:	e008      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
        break;
 8004f6e:	bf00      	nop
 8004f70:	e006      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
        break;
 8004f72:	bf00      	nop
 8004f74:	e004      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
        break;
 8004f76:	bf00      	nop
 8004f78:	e002      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
        break;
 8004f7a:	bf00      	nop
 8004f7c:	e000      	b.n	8004f80 <DMA_CheckFifoParam+0xe8>
    break;
 8004f7e:	bf00      	nop
    }
  }

  return status;
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop

08004f90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a38      	ldr	r2, [pc, #224]	@ (8005084 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d022      	beq.n	8004fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a36      	ldr	r2, [pc, #216]	@ (8005088 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01d      	beq.n	8004fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a35      	ldr	r2, [pc, #212]	@ (800508c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d018      	beq.n	8004fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a33      	ldr	r2, [pc, #204]	@ (8005090 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a32      	ldr	r2, [pc, #200]	@ (8005094 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00e      	beq.n	8004fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a30      	ldr	r2, [pc, #192]	@ (8005098 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d009      	beq.n	8004fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a2f      	ldr	r2, [pc, #188]	@ (800509c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d004      	beq.n	8004fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80050a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d101      	bne.n	8004ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01a      	beq.n	800502e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	3b08      	subs	r3, #8
 8005000:	4a28      	ldr	r2, [pc, #160]	@ (80050a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4b26      	ldr	r3, [pc, #152]	@ (80050a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	461a      	mov	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a24      	ldr	r2, [pc, #144]	@ (80050ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800501c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	2201      	movs	r2, #1
 8005026:	409a      	lsls	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800502c:	e024      	b.n	8005078 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	3b10      	subs	r3, #16
 8005036:	4a1e      	ldr	r2, [pc, #120]	@ (80050b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005038:	fba2 2303 	umull	r2, r3, r2, r3
 800503c:	091b      	lsrs	r3, r3, #4
 800503e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4a1c      	ldr	r2, [pc, #112]	@ (80050b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d806      	bhi.n	8005056 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4a1b      	ldr	r2, [pc, #108]	@ (80050b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d902      	bls.n	8005056 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	3308      	adds	r3, #8
 8005054:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4b18      	ldr	r3, [pc, #96]	@ (80050bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	461a      	mov	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a16      	ldr	r2, [pc, #88]	@ (80050c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005068:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f003 031f 	and.w	r3, r3, #31
 8005070:	2201      	movs	r2, #1
 8005072:	409a      	lsls	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005078:	bf00      	nop
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	58025408 	.word	0x58025408
 8005088:	5802541c 	.word	0x5802541c
 800508c:	58025430 	.word	0x58025430
 8005090:	58025444 	.word	0x58025444
 8005094:	58025458 	.word	0x58025458
 8005098:	5802546c 	.word	0x5802546c
 800509c:	58025480 	.word	0x58025480
 80050a0:	58025494 	.word	0x58025494
 80050a4:	cccccccd 	.word	0xcccccccd
 80050a8:	16009600 	.word	0x16009600
 80050ac:	58025880 	.word	0x58025880
 80050b0:	aaaaaaab 	.word	0xaaaaaaab
 80050b4:	400204b8 	.word	0x400204b8
 80050b8:	4002040f 	.word	0x4002040f
 80050bc:	10008200 	.word	0x10008200
 80050c0:	40020880 	.word	0x40020880

080050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d04a      	beq.n	8005170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d847      	bhi.n	8005170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a25      	ldr	r2, [pc, #148]	@ (800517c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d022      	beq.n	8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a24      	ldr	r2, [pc, #144]	@ (8005180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d01d      	beq.n	8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a22      	ldr	r2, [pc, #136]	@ (8005184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d018      	beq.n	8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a21      	ldr	r2, [pc, #132]	@ (8005188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d013      	beq.n	8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1f      	ldr	r2, [pc, #124]	@ (800518c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00e      	beq.n	8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1e      	ldr	r2, [pc, #120]	@ (8005190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d009      	beq.n	8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a1c      	ldr	r2, [pc, #112]	@ (8005194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d004      	beq.n	8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1b      	ldr	r2, [pc, #108]	@ (8005198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d101      	bne.n	8005134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005130:	2301      	movs	r3, #1
 8005132:	e000      	b.n	8005136 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005134:	2300      	movs	r3, #0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4b17      	ldr	r3, [pc, #92]	@ (800519c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	461a      	mov	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a15      	ldr	r2, [pc, #84]	@ (80051a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800514c:	671a      	str	r2, [r3, #112]	@ 0x70
 800514e:	e009      	b.n	8005164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4b14      	ldr	r3, [pc, #80]	@ (80051a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	461a      	mov	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a11      	ldr	r2, [pc, #68]	@ (80051a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005162:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3b01      	subs	r3, #1
 8005168:	2201      	movs	r2, #1
 800516a:	409a      	lsls	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005170:	bf00      	nop
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	58025408 	.word	0x58025408
 8005180:	5802541c 	.word	0x5802541c
 8005184:	58025430 	.word	0x58025430
 8005188:	58025444 	.word	0x58025444
 800518c:	58025458 	.word	0x58025458
 8005190:	5802546c 	.word	0x5802546c
 8005194:	58025480 	.word	0x58025480
 8005198:	58025494 	.word	0x58025494
 800519c:	1600963f 	.word	0x1600963f
 80051a0:	58025940 	.word	0x58025940
 80051a4:	1000823f 	.word	0x1000823f
 80051a8:	40020940 	.word	0x40020940

080051ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b089      	sub	sp, #36	@ 0x24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80051ba:	4b86      	ldr	r3, [pc, #536]	@ (80053d4 <HAL_GPIO_Init+0x228>)
 80051bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051be:	e18c      	b.n	80054da <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	2101      	movs	r1, #1
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	fa01 f303 	lsl.w	r3, r1, r3
 80051cc:	4013      	ands	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 817e 	beq.w	80054d4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d005      	beq.n	80051f0 <HAL_GPIO_Init+0x44>
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d130      	bne.n	8005252 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	2203      	movs	r2, #3
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	43db      	mvns	r3, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4013      	ands	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4313      	orrs	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005226:	2201      	movs	r2, #1
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	43db      	mvns	r3, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4013      	ands	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	091b      	lsrs	r3, r3, #4
 800523c:	f003 0201 	and.w	r2, r3, #1
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4313      	orrs	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	2b03      	cmp	r3, #3
 800525c:	d017      	beq.n	800528e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	2203      	movs	r2, #3
 800526a:	fa02 f303 	lsl.w	r3, r2, r3
 800526e:	43db      	mvns	r3, r3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	4013      	ands	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4313      	orrs	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d123      	bne.n	80052e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	08da      	lsrs	r2, r3, #3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3208      	adds	r2, #8
 80052a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	220f      	movs	r2, #15
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	43db      	mvns	r3, r3
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	4013      	ands	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	691a      	ldr	r2, [r3, #16]
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	fa02 f303 	lsl.w	r3, r2, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	08da      	lsrs	r2, r3, #3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3208      	adds	r2, #8
 80052dc:	69b9      	ldr	r1, [r7, #24]
 80052de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	2203      	movs	r2, #3
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	43db      	mvns	r3, r3
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	4013      	ands	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f003 0203 	and.w	r2, r3, #3
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	4313      	orrs	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 80d8 	beq.w	80054d4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005324:	4b2c      	ldr	r3, [pc, #176]	@ (80053d8 <HAL_GPIO_Init+0x22c>)
 8005326:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800532a:	4a2b      	ldr	r2, [pc, #172]	@ (80053d8 <HAL_GPIO_Init+0x22c>)
 800532c:	f043 0302 	orr.w	r3, r3, #2
 8005330:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005334:	4b28      	ldr	r3, [pc, #160]	@ (80053d8 <HAL_GPIO_Init+0x22c>)
 8005336:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005342:	4a26      	ldr	r2, [pc, #152]	@ (80053dc <HAL_GPIO_Init+0x230>)
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	089b      	lsrs	r3, r3, #2
 8005348:	3302      	adds	r3, #2
 800534a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800534e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	220f      	movs	r2, #15
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	43db      	mvns	r3, r3
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	4013      	ands	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a1d      	ldr	r2, [pc, #116]	@ (80053e0 <HAL_GPIO_Init+0x234>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d04a      	beq.n	8005404 <HAL_GPIO_Init+0x258>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a1c      	ldr	r2, [pc, #112]	@ (80053e4 <HAL_GPIO_Init+0x238>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d02b      	beq.n	80053ce <HAL_GPIO_Init+0x222>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1b      	ldr	r2, [pc, #108]	@ (80053e8 <HAL_GPIO_Init+0x23c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d025      	beq.n	80053ca <HAL_GPIO_Init+0x21e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a1a      	ldr	r2, [pc, #104]	@ (80053ec <HAL_GPIO_Init+0x240>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d01f      	beq.n	80053c6 <HAL_GPIO_Init+0x21a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a19      	ldr	r2, [pc, #100]	@ (80053f0 <HAL_GPIO_Init+0x244>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d019      	beq.n	80053c2 <HAL_GPIO_Init+0x216>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a18      	ldr	r2, [pc, #96]	@ (80053f4 <HAL_GPIO_Init+0x248>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <HAL_GPIO_Init+0x212>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a17      	ldr	r2, [pc, #92]	@ (80053f8 <HAL_GPIO_Init+0x24c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00d      	beq.n	80053ba <HAL_GPIO_Init+0x20e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a16      	ldr	r2, [pc, #88]	@ (80053fc <HAL_GPIO_Init+0x250>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d007      	beq.n	80053b6 <HAL_GPIO_Init+0x20a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a15      	ldr	r2, [pc, #84]	@ (8005400 <HAL_GPIO_Init+0x254>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d101      	bne.n	80053b2 <HAL_GPIO_Init+0x206>
 80053ae:	2309      	movs	r3, #9
 80053b0:	e029      	b.n	8005406 <HAL_GPIO_Init+0x25a>
 80053b2:	230a      	movs	r3, #10
 80053b4:	e027      	b.n	8005406 <HAL_GPIO_Init+0x25a>
 80053b6:	2307      	movs	r3, #7
 80053b8:	e025      	b.n	8005406 <HAL_GPIO_Init+0x25a>
 80053ba:	2306      	movs	r3, #6
 80053bc:	e023      	b.n	8005406 <HAL_GPIO_Init+0x25a>
 80053be:	2305      	movs	r3, #5
 80053c0:	e021      	b.n	8005406 <HAL_GPIO_Init+0x25a>
 80053c2:	2304      	movs	r3, #4
 80053c4:	e01f      	b.n	8005406 <HAL_GPIO_Init+0x25a>
 80053c6:	2303      	movs	r3, #3
 80053c8:	e01d      	b.n	8005406 <HAL_GPIO_Init+0x25a>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e01b      	b.n	8005406 <HAL_GPIO_Init+0x25a>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e019      	b.n	8005406 <HAL_GPIO_Init+0x25a>
 80053d2:	bf00      	nop
 80053d4:	58000080 	.word	0x58000080
 80053d8:	58024400 	.word	0x58024400
 80053dc:	58000400 	.word	0x58000400
 80053e0:	58020000 	.word	0x58020000
 80053e4:	58020400 	.word	0x58020400
 80053e8:	58020800 	.word	0x58020800
 80053ec:	58020c00 	.word	0x58020c00
 80053f0:	58021000 	.word	0x58021000
 80053f4:	58021400 	.word	0x58021400
 80053f8:	58021800 	.word	0x58021800
 80053fc:	58021c00 	.word	0x58021c00
 8005400:	58022400 	.word	0x58022400
 8005404:	2300      	movs	r3, #0
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	f002 0203 	and.w	r2, r2, #3
 800540c:	0092      	lsls	r2, r2, #2
 800540e:	4093      	lsls	r3, r2
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4313      	orrs	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005416:	4938      	ldr	r1, [pc, #224]	@ (80054f8 <HAL_GPIO_Init+0x34c>)
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	089b      	lsrs	r3, r3, #2
 800541c:	3302      	adds	r3, #2
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	43db      	mvns	r3, r3
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	4013      	ands	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800544a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	43db      	mvns	r3, r3
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	4013      	ands	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	43db      	mvns	r3, r3
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	4013      	ands	r3, r2
 800548e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	43db      	mvns	r3, r3
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	4013      	ands	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	3301      	adds	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	fa22 f303 	lsr.w	r3, r2, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f47f ae6b 	bne.w	80051c0 <HAL_GPIO_Init+0x14>
  }
}
 80054ea:	bf00      	nop
 80054ec:	bf00      	nop
 80054ee:	3724      	adds	r7, #36	@ 0x24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	58000400 	.word	0x58000400

080054fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	887b      	ldrh	r3, [r7, #2]
 800550e:	4013      	ands	r3, r2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
 8005518:	e001      	b.n	800551e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800551e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	460b      	mov	r3, r1
 8005536:	807b      	strh	r3, [r7, #2]
 8005538:	4613      	mov	r3, r2
 800553a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800553c:	787b      	ldrb	r3, [r7, #1]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005542:	887a      	ldrh	r2, [r7, #2]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005548:	e003      	b.n	8005552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800554a:	887b      	ldrh	r3, [r7, #2]
 800554c:	041a      	lsls	r2, r3, #16
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	619a      	str	r2, [r3, #24]
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	460b      	mov	r3, r1
 8005568:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005570:	887a      	ldrh	r2, [r7, #2]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4013      	ands	r3, r2
 8005576:	041a      	lsls	r2, r3, #16
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	43d9      	mvns	r1, r3
 800557c:	887b      	ldrh	r3, [r7, #2]
 800557e:	400b      	ands	r3, r1
 8005580:	431a      	orrs	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	619a      	str	r2, [r3, #24]
}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b086      	sub	sp, #24
 8005596:	af02      	add	r7, sp, #8
 8005598:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0fe      	b.n	80057a2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d106      	bne.n	80055be <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f00f f8c9 	bl	8014750 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2203      	movs	r2, #3
 80055c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f008 fb41 	bl	800dc52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	7c1a      	ldrb	r2, [r3, #16]
 80055d8:	f88d 2000 	strb.w	r2, [sp]
 80055dc:	3304      	adds	r3, #4
 80055de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055e0:	f008 fa12 	bl	800da08 <USB_CoreInit>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e0d5      	b.n	80057a2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2100      	movs	r1, #0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f008 fb39 	bl	800dc74 <USB_SetCurrentMode>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e0c6      	b.n	80057a2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005614:	2300      	movs	r3, #0
 8005616:	73fb      	strb	r3, [r7, #15]
 8005618:	e04a      	b.n	80056b0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800561a:	7bfa      	ldrb	r2, [r7, #15]
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	4613      	mov	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	3315      	adds	r3, #21
 800562a:	2201      	movs	r2, #1
 800562c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800562e:	7bfa      	ldrb	r2, [r7, #15]
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	3314      	adds	r3, #20
 800563e:	7bfa      	ldrb	r2, [r7, #15]
 8005640:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005642:	7bfa      	ldrb	r2, [r7, #15]
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	b298      	uxth	r0, r3
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	332e      	adds	r3, #46	@ 0x2e
 8005656:	4602      	mov	r2, r0
 8005658:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800565a:	7bfa      	ldrb	r2, [r7, #15]
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	3318      	adds	r3, #24
 800566a:	2200      	movs	r2, #0
 800566c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800566e:	7bfa      	ldrb	r2, [r7, #15]
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	331c      	adds	r3, #28
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005682:	7bfa      	ldrb	r2, [r7, #15]
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	4413      	add	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	3320      	adds	r3, #32
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005696:	7bfa      	ldrb	r2, [r7, #15]
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	4413      	add	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	440b      	add	r3, r1
 80056a4:	3324      	adds	r3, #36	@ 0x24
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	3301      	adds	r3, #1
 80056ae:	73fb      	strb	r3, [r7, #15]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	791b      	ldrb	r3, [r3, #4]
 80056b4:	7bfa      	ldrb	r2, [r7, #15]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d3af      	bcc.n	800561a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]
 80056be:	e044      	b.n	800574a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056c0:	7bfa      	ldrb	r2, [r7, #15]
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	4613      	mov	r3, r2
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056d6:	7bfa      	ldrb	r2, [r7, #15]
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80056e8:	7bfa      	ldrb	r2, [r7, #15]
 80056ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056ec:	7bfa      	ldrb	r2, [r7, #15]
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	4613      	mov	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80056fe:	2200      	movs	r2, #0
 8005700:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005702:	7bfa      	ldrb	r2, [r7, #15]
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	4613      	mov	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	440b      	add	r3, r1
 8005710:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005718:	7bfa      	ldrb	r2, [r7, #15]
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	4613      	mov	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	440b      	add	r3, r1
 8005726:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800572e:	7bfa      	ldrb	r2, [r7, #15]
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	3301      	adds	r3, #1
 8005748:	73fb      	strb	r3, [r7, #15]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	791b      	ldrb	r3, [r3, #4]
 800574e:	7bfa      	ldrb	r2, [r7, #15]
 8005750:	429a      	cmp	r2, r3
 8005752:	d3b5      	bcc.n	80056c0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	7c1a      	ldrb	r2, [r3, #16]
 800575c:	f88d 2000 	strb.w	r2, [sp]
 8005760:	3304      	adds	r3, #4
 8005762:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005764:	f008 fad2 	bl	800dd0c <USB_DevInit>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e013      	b.n	80057a2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	7b1b      	ldrb	r3, [r3, #12]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d102      	bne.n	8005796 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f001 f96d 	bl	8006a70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f009 fb11 	bl	800edc2 <USB_DevDisconnect>

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <HAL_PCD_Start+0x1c>
 80057c2:	2302      	movs	r3, #2
 80057c4:	e022      	b.n	800580c <HAL_PCD_Start+0x62>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d009      	beq.n	80057ee <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d105      	bne.n	80057ee <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f008 fa1c 	bl	800dc30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f009 fabf 	bl	800ed80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005814:	b590      	push	{r4, r7, lr}
 8005816:	b08d      	sub	sp, #52	@ 0x34
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f009 fb7d 	bl	800ef2a <USB_GetMode>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	f040 84b9 	bne.w	80061aa <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4618      	mov	r0, r3
 800583e:	f009 fae1 	bl	800ee04 <USB_ReadInterrupts>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 84af 	beq.w	80061a8 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	0a1b      	lsrs	r3, r3, #8
 8005854:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f009 face 	bl	800ee04 <USB_ReadInterrupts>
 8005868:	4603      	mov	r3, r0
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b02      	cmp	r3, #2
 8005870:	d107      	bne.n	8005882 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f002 0202 	and.w	r2, r2, #2
 8005880:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f009 fabc 	bl	800ee04 <USB_ReadInterrupts>
 800588c:	4603      	mov	r3, r0
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b10      	cmp	r3, #16
 8005894:	d161      	bne.n	800595a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699a      	ldr	r2, [r3, #24]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0210 	bic.w	r2, r2, #16
 80058a4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	f003 020f 	and.w	r2, r3, #15
 80058b2:	4613      	mov	r3, r2
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	4413      	add	r3, r2
 80058c2:	3304      	adds	r3, #4
 80058c4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	0c5b      	lsrs	r3, r3, #17
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d124      	bne.n	800591c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80058d8:	4013      	ands	r3, r2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d035      	beq.n	800594a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	091b      	lsrs	r3, r3, #4
 80058e6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80058e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	461a      	mov	r2, r3
 80058f0:	6a38      	ldr	r0, [r7, #32]
 80058f2:	f009 f8f3 	bl	800eadc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	091b      	lsrs	r3, r3, #4
 80058fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005902:	441a      	add	r2, r3
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	695a      	ldr	r2, [r3, #20]
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005914:	441a      	add	r2, r3
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	615a      	str	r2, [r3, #20]
 800591a:	e016      	b.n	800594a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	0c5b      	lsrs	r3, r3, #17
 8005920:	f003 030f 	and.w	r3, r3, #15
 8005924:	2b06      	cmp	r3, #6
 8005926:	d110      	bne.n	800594a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800592e:	2208      	movs	r2, #8
 8005930:	4619      	mov	r1, r3
 8005932:	6a38      	ldr	r0, [r7, #32]
 8005934:	f009 f8d2 	bl	800eadc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	695a      	ldr	r2, [r3, #20]
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	091b      	lsrs	r3, r3, #4
 8005940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005944:	441a      	add	r2, r3
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699a      	ldr	r2, [r3, #24]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0210 	orr.w	r2, r2, #16
 8005958:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f009 fa50 	bl	800ee04 <USB_ReadInterrupts>
 8005964:	4603      	mov	r3, r0
 8005966:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800596a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800596e:	f040 80a7 	bne.w	8005ac0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4618      	mov	r0, r3
 800597c:	f009 fa55 	bl	800ee2a <USB_ReadDevAllOutEpInterrupt>
 8005980:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005982:	e099      	b.n	8005ab8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 808e 	beq.w	8005aac <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	4611      	mov	r1, r2
 800599a:	4618      	mov	r0, r3
 800599c:	f009 fa79 	bl	800ee92 <USB_ReadDevOutEPInterrupt>
 80059a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00c      	beq.n	80059c6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b8:	461a      	mov	r2, r3
 80059ba:	2301      	movs	r3, #1
 80059bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80059be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fecf 	bl	8006764 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00c      	beq.n	80059ea <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059dc:	461a      	mov	r2, r3
 80059de:	2308      	movs	r3, #8
 80059e0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80059e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 ffa5 	bl	8006934 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d008      	beq.n	8005a06 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a00:	461a      	mov	r2, r3
 8005a02:	2310      	movs	r3, #16
 8005a04:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d030      	beq.n	8005a72 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a18:	2b80      	cmp	r3, #128	@ 0x80
 8005a1a:	d109      	bne.n	8005a30 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a2e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a32:	4613      	mov	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	4413      	add	r3, r2
 8005a42:	3304      	adds	r3, #4
 8005a44:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	78db      	ldrb	r3, [r3, #3]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d108      	bne.n	8005a60 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2200      	movs	r2, #0
 8005a52:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f00e ff9e 	bl	801499c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	2302      	movs	r3, #2
 8005a70:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a88:	461a      	mov	r2, r3
 8005a8a:	2320      	movs	r3, #32
 8005a8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d009      	beq.n	8005aac <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005aaa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aae:	3301      	adds	r3, #1
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab4:	085b      	lsrs	r3, r3, #1
 8005ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f47f af62 	bne.w	8005984 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f009 f99d 	bl	800ee04 <USB_ReadInterrupts>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ad0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ad4:	f040 80db 	bne.w	8005c8e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f009 f9be 	bl	800ee5e <USB_ReadDevAllInEpInterrupt>
 8005ae2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005ae8:	e0cd      	b.n	8005c86 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80c2 	beq.w	8005c7a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	4611      	mov	r1, r2
 8005b00:	4618      	mov	r0, r3
 8005b02:	f009 f9e4 	bl	800eece <USB_ReadDevInEPInterrupt>
 8005b06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d057      	beq.n	8005bc2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	2201      	movs	r2, #1
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	43db      	mvns	r3, r3
 8005b2c:	69f9      	ldr	r1, [r7, #28]
 8005b2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b32:	4013      	ands	r3, r2
 8005b34:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b42:	461a      	mov	r2, r3
 8005b44:	2301      	movs	r3, #1
 8005b46:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	799b      	ldrb	r3, [r3, #6]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d132      	bne.n	8005bb6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b54:	4613      	mov	r3, r2
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	3320      	adds	r3, #32
 8005b60:	6819      	ldr	r1, [r3, #0]
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b66:	4613      	mov	r3, r2
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4403      	add	r3, r0
 8005b70:	331c      	adds	r3, #28
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4419      	add	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4403      	add	r3, r0
 8005b84:	3320      	adds	r3, #32
 8005b86:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d113      	bne.n	8005bb6 <HAL_PCD_IRQHandler+0x3a2>
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b92:	4613      	mov	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	440b      	add	r3, r1
 8005b9c:	3324      	adds	r3, #36	@ 0x24
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d108      	bne.n	8005bb6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bae:	461a      	mov	r2, r3
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	f009 f9ed 	bl	800ef90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f00e fe68 	bl	8014892 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d008      	beq.n	8005bde <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd8:	461a      	mov	r2, r3
 8005bda:	2308      	movs	r3, #8
 8005bdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f003 0310 	and.w	r3, r3, #16
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d008      	beq.n	8005bfa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	2310      	movs	r3, #16
 8005bf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d008      	beq.n	8005c16 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c10:	461a      	mov	r2, r3
 8005c12:	2340      	movs	r3, #64	@ 0x40
 8005c14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d023      	beq.n	8005c68 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005c20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c22:	6a38      	ldr	r0, [r7, #32]
 8005c24:	f008 f9d0 	bl	800dfc8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	3310      	adds	r3, #16
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	4413      	add	r3, r2
 8005c38:	3304      	adds	r3, #4
 8005c3a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	78db      	ldrb	r3, [r3, #3]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d108      	bne.n	8005c56 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2200      	movs	r2, #0
 8005c48:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f00e feb5 	bl	80149c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c62:	461a      	mov	r2, r3
 8005c64:	2302      	movs	r3, #2
 8005c66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005c72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fce8 	bl	800664a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c82:	085b      	lsrs	r3, r3, #1
 8005c84:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f47f af2e 	bne.w	8005aea <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f009 f8b6 	bl	800ee04 <USB_ReadInterrupts>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ca2:	d122      	bne.n	8005cea <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cb2:	f023 0301 	bic.w	r3, r3, #1
 8005cb6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d108      	bne.n	8005cd4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005cca:	2100      	movs	r1, #0
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fef3 	bl	8006ab8 <HAL_PCDEx_LPM_Callback>
 8005cd2:	e002      	b.n	8005cda <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f00e fe53 	bl	8014980 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695a      	ldr	r2, [r3, #20]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f009 f888 	bl	800ee04 <USB_ReadInterrupts>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cfe:	d112      	bne.n	8005d26 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d102      	bne.n	8005d16 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f00e fe0f 	bl	8014934 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	695a      	ldr	r2, [r3, #20]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f009 f86a 	bl	800ee04 <USB_ReadInterrupts>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d3a:	d121      	bne.n	8005d80 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695a      	ldr	r2, [r3, #20]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005d4a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d111      	bne.n	8005d7a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d64:	089b      	lsrs	r3, r3, #2
 8005d66:	f003 020f 	and.w	r2, r3, #15
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005d70:	2101      	movs	r1, #1
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fea0 	bl	8006ab8 <HAL_PCDEx_LPM_Callback>
 8005d78:	e002      	b.n	8005d80 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f00e fdda 	bl	8014934 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f009 f83d 	bl	800ee04 <USB_ReadInterrupts>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d94:	f040 80b7 	bne.w	8005f06 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	69fa      	ldr	r2, [r7, #28]
 8005da2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005da6:	f023 0301 	bic.w	r3, r3, #1
 8005daa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2110      	movs	r1, #16
 8005db2:	4618      	mov	r0, r3
 8005db4:	f008 f908 	bl	800dfc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005db8:	2300      	movs	r3, #0
 8005dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dbc:	e046      	b.n	8005e4c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005dd0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005df0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e04:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e16:	0151      	lsls	r1, r2, #5
 8005e18:	69fa      	ldr	r2, [r7, #28]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e20:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e44:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e48:	3301      	adds	r3, #1
 8005e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	791b      	ldrb	r3, [r3, #4]
 8005e50:	461a      	mov	r2, r3
 8005e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d3b2      	bcc.n	8005dbe <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e66:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005e6a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	7bdb      	ldrb	r3, [r3, #15]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d016      	beq.n	8005ea2 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e84:	f043 030b 	orr.w	r3, r3, #11
 8005e88:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e9a:	f043 030b 	orr.w	r3, r3, #11
 8005e9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ea0:	e015      	b.n	8005ece <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea8:	695a      	ldr	r2, [r3, #20]
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	f242 032b 	movw	r3, #8235	@ 0x202b
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	69fa      	ldr	r2, [r7, #28]
 8005ec4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ec8:	f043 030b 	orr.w	r3, r3, #11
 8005ecc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005edc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005ee0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	f009 f84d 	bl	800ef90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695a      	ldr	r2, [r3, #20]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005f04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f008 ff7a 	bl	800ee04 <USB_ReadInterrupts>
 8005f10:	4603      	mov	r3, r0
 8005f12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f1a:	d123      	bne.n	8005f64 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f009 f811 	bl	800ef48 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f008 f8c5 	bl	800e0ba <USB_GetDevSpeed>
 8005f30:	4603      	mov	r3, r0
 8005f32:	461a      	mov	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681c      	ldr	r4, [r3, #0]
 8005f3c:	f001 fd1c 	bl	8007978 <HAL_RCC_GetHCLKFreq>
 8005f40:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f46:	461a      	mov	r2, r3
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f007 fdcf 	bl	800daec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f00e fcc7 	bl	80148e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	695a      	ldr	r2, [r3, #20]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005f62:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f008 ff4b 	bl	800ee04 <USB_ReadInterrupts>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d10a      	bne.n	8005f8e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f00e fca4 	bl	80148c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	695a      	ldr	r2, [r3, #20]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f002 0208 	and.w	r2, r2, #8
 8005f8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f008 ff36 	bl	800ee04 <USB_ReadInterrupts>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f9e:	2b80      	cmp	r3, #128	@ 0x80
 8005fa0:	d123      	bne.n	8005fea <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fae:	2301      	movs	r3, #1
 8005fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fb2:	e014      	b.n	8005fde <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb8:	4613      	mov	r3, r2
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d105      	bne.n	8005fd8 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fb08 	bl	80065e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fda:	3301      	adds	r3, #1
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	791b      	ldrb	r3, [r3, #4]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d3e4      	bcc.n	8005fb4 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f008 ff08 	bl	800ee04 <USB_ReadInterrupts>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ffe:	d13c      	bne.n	800607a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006000:	2301      	movs	r3, #1
 8006002:	627b      	str	r3, [r7, #36]	@ 0x24
 8006004:	e02b      	b.n	800605e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800601a:	4613      	mov	r3, r2
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	440b      	add	r3, r1
 8006024:	3318      	adds	r3, #24
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d115      	bne.n	8006058 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800602c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800602e:	2b00      	cmp	r3, #0
 8006030:	da12      	bge.n	8006058 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006036:	4613      	mov	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	440b      	add	r3, r1
 8006040:	3317      	adds	r3, #23
 8006042:	2201      	movs	r2, #1
 8006044:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	b2db      	uxtb	r3, r3
 800604a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800604e:	b2db      	uxtb	r3, r3
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fac8 	bl	80065e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	3301      	adds	r3, #1
 800605c:	627b      	str	r3, [r7, #36]	@ 0x24
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	791b      	ldrb	r3, [r3, #4]
 8006062:	461a      	mov	r2, r3
 8006064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006066:	4293      	cmp	r3, r2
 8006068:	d3cd      	bcc.n	8006006 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695a      	ldr	r2, [r3, #20]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006078:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4618      	mov	r0, r3
 8006080:	f008 fec0 	bl	800ee04 <USB_ReadInterrupts>
 8006084:	4603      	mov	r3, r0
 8006086:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800608a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800608e:	d156      	bne.n	800613e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006090:	2301      	movs	r3, #1
 8006092:	627b      	str	r3, [r7, #36]	@ 0x24
 8006094:	e045      	b.n	8006122 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060aa:	4613      	mov	r3, r2
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d12e      	bne.n	800611c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	da2b      	bge.n	800611c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80060d0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d121      	bne.n	800611c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060dc:	4613      	mov	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	4413      	add	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	440b      	add	r3, r1
 80060e6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80060ea:	2201      	movs	r2, #1
 80060ec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	69fa      	ldr	r2, [r7, #28]
 8006110:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006114:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006118:	6053      	str	r3, [r2, #4]
            break;
 800611a:	e008      	b.n	800612e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800611c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611e:	3301      	adds	r3, #1
 8006120:	627b      	str	r3, [r7, #36]	@ 0x24
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	791b      	ldrb	r3, [r3, #4]
 8006126:	461a      	mov	r2, r3
 8006128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612a:	4293      	cmp	r3, r2
 800612c:	d3b3      	bcc.n	8006096 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695a      	ldr	r2, [r3, #20]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800613c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f008 fe5e 	bl	800ee04 <USB_ReadInterrupts>
 8006148:	4603      	mov	r3, r0
 800614a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800614e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006152:	d10a      	bne.n	800616a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f00e fc45 	bl	80149e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695a      	ldr	r2, [r3, #20]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006168:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f008 fe48 	bl	800ee04 <USB_ReadInterrupts>
 8006174:	4603      	mov	r3, r0
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	2b04      	cmp	r3, #4
 800617c:	d115      	bne.n	80061aa <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f00e fc35 	bl	8014a00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6859      	ldr	r1, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]
 80061a6:	e000      	b.n	80061aa <HAL_PCD_IRQHandler+0x996>
      return;
 80061a8:	bf00      	nop
    }
  }
}
 80061aa:	3734      	adds	r7, #52	@ 0x34
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd90      	pop	{r4, r7, pc}

080061b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d101      	bne.n	80061ca <HAL_PCD_SetAddress+0x1a>
 80061c6:	2302      	movs	r3, #2
 80061c8:	e012      	b.n	80061f0 <HAL_PCD_SetAddress+0x40>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	78fa      	ldrb	r2, [r7, #3]
 80061d6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	4611      	mov	r1, r2
 80061e0:	4618      	mov	r0, r3
 80061e2:	f008 fda7 	bl	800ed34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	4608      	mov	r0, r1
 8006202:	4611      	mov	r1, r2
 8006204:	461a      	mov	r2, r3
 8006206:	4603      	mov	r3, r0
 8006208:	70fb      	strb	r3, [r7, #3]
 800620a:	460b      	mov	r3, r1
 800620c:	803b      	strh	r3, [r7, #0]
 800620e:	4613      	mov	r3, r2
 8006210:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006216:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800621a:	2b00      	cmp	r3, #0
 800621c:	da0f      	bge.n	800623e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	f003 020f 	and.w	r2, r3, #15
 8006224:	4613      	mov	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	4413      	add	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	3310      	adds	r3, #16
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	4413      	add	r3, r2
 8006232:	3304      	adds	r3, #4
 8006234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	705a      	strb	r2, [r3, #1]
 800623c:	e00f      	b.n	800625e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800623e:	78fb      	ldrb	r3, [r7, #3]
 8006240:	f003 020f 	and.w	r2, r3, #15
 8006244:	4613      	mov	r3, r2
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	4413      	add	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	4413      	add	r3, r2
 8006254:	3304      	adds	r3, #4
 8006256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800625e:	78fb      	ldrb	r3, [r7, #3]
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	b2da      	uxtb	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800626a:	883a      	ldrh	r2, [r7, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	78ba      	ldrb	r2, [r7, #2]
 8006274:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	785b      	ldrb	r3, [r3, #1]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006288:	78bb      	ldrb	r3, [r7, #2]
 800628a:	2b02      	cmp	r3, #2
 800628c:	d102      	bne.n	8006294 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_PCD_EP_Open+0xaa>
 800629e:	2302      	movs	r3, #2
 80062a0:	e00e      	b.n	80062c0 <HAL_PCD_EP_Open+0xc8>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68f9      	ldr	r1, [r7, #12]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f007 ff27 	bl	800e104 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80062be:	7afb      	ldrb	r3, [r7, #11]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	460b      	mov	r3, r1
 80062d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	da0f      	bge.n	80062fc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062dc:	78fb      	ldrb	r3, [r7, #3]
 80062de:	f003 020f 	and.w	r2, r3, #15
 80062e2:	4613      	mov	r3, r2
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	3310      	adds	r3, #16
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	4413      	add	r3, r2
 80062f0:	3304      	adds	r3, #4
 80062f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	705a      	strb	r2, [r3, #1]
 80062fa:	e00f      	b.n	800631c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	f003 020f 	and.w	r2, r3, #15
 8006302:	4613      	mov	r3, r2
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	4413      	add	r3, r2
 8006312:	3304      	adds	r3, #4
 8006314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	f003 030f 	and.w	r3, r3, #15
 8006322:	b2da      	uxtb	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <HAL_PCD_EP_Close+0x6e>
 8006332:	2302      	movs	r3, #2
 8006334:	e00e      	b.n	8006354 <HAL_PCD_EP_Close+0x8c>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68f9      	ldr	r1, [r7, #12]
 8006344:	4618      	mov	r0, r3
 8006346:	f007 ff65 	bl	800e214 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	607a      	str	r2, [r7, #4]
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	460b      	mov	r3, r1
 800636a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800636c:	7afb      	ldrb	r3, [r7, #11]
 800636e:	f003 020f 	and.w	r2, r3, #15
 8006372:	4613      	mov	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	4413      	add	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4413      	add	r3, r2
 8006382:	3304      	adds	r3, #4
 8006384:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2200      	movs	r2, #0
 8006396:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2200      	movs	r2, #0
 800639c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800639e:	7afb      	ldrb	r3, [r7, #11]
 80063a0:	f003 030f 	and.w	r3, r3, #15
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	799b      	ldrb	r3, [r3, #6]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d102      	bne.n	80063b8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	799b      	ldrb	r3, [r3, #6]
 80063c0:	461a      	mov	r2, r3
 80063c2:	6979      	ldr	r1, [r7, #20]
 80063c4:	f008 f802 	bl	800e3cc <USB_EPStartXfer>

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	460b      	mov	r3, r1
 80063dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	f003 020f 	and.w	r2, r3, #15
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	4613      	mov	r3, r2
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	4413      	add	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	440b      	add	r3, r1
 80063f0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80063f4:	681b      	ldr	r3, [r3, #0]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b086      	sub	sp, #24
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	603b      	str	r3, [r7, #0]
 800640e:	460b      	mov	r3, r1
 8006410:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006412:	7afb      	ldrb	r3, [r7, #11]
 8006414:	f003 020f 	and.w	r2, r3, #15
 8006418:	4613      	mov	r3, r2
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	3310      	adds	r3, #16
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4413      	add	r3, r2
 8006426:	3304      	adds	r3, #4
 8006428:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2200      	movs	r2, #0
 800643a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	2201      	movs	r2, #1
 8006440:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006442:	7afb      	ldrb	r3, [r7, #11]
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	b2da      	uxtb	r2, r3
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	799b      	ldrb	r3, [r3, #6]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d102      	bne.n	800645c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6818      	ldr	r0, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	799b      	ldrb	r3, [r3, #6]
 8006464:	461a      	mov	r2, r3
 8006466:	6979      	ldr	r1, [r7, #20]
 8006468:	f007 ffb0 	bl	800e3cc <USB_EPStartXfer>

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	460b      	mov	r3, r1
 8006480:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006482:	78fb      	ldrb	r3, [r7, #3]
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	7912      	ldrb	r2, [r2, #4]
 800648c:	4293      	cmp	r3, r2
 800648e:	d901      	bls.n	8006494 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e04f      	b.n	8006534 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006494:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006498:	2b00      	cmp	r3, #0
 800649a:	da0f      	bge.n	80064bc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	f003 020f 	and.w	r2, r3, #15
 80064a2:	4613      	mov	r3, r2
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	4413      	add	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	3310      	adds	r3, #16
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	4413      	add	r3, r2
 80064b0:	3304      	adds	r3, #4
 80064b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	705a      	strb	r2, [r3, #1]
 80064ba:	e00d      	b.n	80064d8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	4613      	mov	r3, r2
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	4413      	add	r3, r2
 80064ce:	3304      	adds	r3, #4
 80064d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2201      	movs	r2, #1
 80064dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064de:	78fb      	ldrb	r3, [r7, #3]
 80064e0:	f003 030f 	and.w	r3, r3, #15
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d101      	bne.n	80064f8 <HAL_PCD_EP_SetStall+0x82>
 80064f4:	2302      	movs	r3, #2
 80064f6:	e01d      	b.n	8006534 <HAL_PCD_EP_SetStall+0xbe>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68f9      	ldr	r1, [r7, #12]
 8006506:	4618      	mov	r0, r3
 8006508:	f008 fb40 	bl	800eb8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	7999      	ldrb	r1, [r3, #6]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006524:	461a      	mov	r2, r3
 8006526:	f008 fd33 	bl	800ef90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	7912      	ldrb	r2, [r2, #4]
 8006552:	4293      	cmp	r3, r2
 8006554:	d901      	bls.n	800655a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e042      	b.n	80065e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800655a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800655e:	2b00      	cmp	r3, #0
 8006560:	da0f      	bge.n	8006582 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006562:	78fb      	ldrb	r3, [r7, #3]
 8006564:	f003 020f 	and.w	r2, r3, #15
 8006568:	4613      	mov	r3, r2
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	4413      	add	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	3310      	adds	r3, #16
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	4413      	add	r3, r2
 8006576:	3304      	adds	r3, #4
 8006578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	705a      	strb	r2, [r3, #1]
 8006580:	e00f      	b.n	80065a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	f003 020f 	and.w	r2, r3, #15
 8006588:	4613      	mov	r3, r2
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	4413      	add	r3, r2
 8006598:	3304      	adds	r3, #4
 800659a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065a8:	78fb      	ldrb	r3, [r7, #3]
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <HAL_PCD_EP_ClrStall+0x86>
 80065be:	2302      	movs	r3, #2
 80065c0:	e00e      	b.n	80065e0 <HAL_PCD_EP_ClrStall+0xa4>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68f9      	ldr	r1, [r7, #12]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f008 fb49 	bl	800ec68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80065f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	da0c      	bge.n	8006616 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	f003 020f 	and.w	r2, r3, #15
 8006602:	4613      	mov	r3, r2
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	3310      	adds	r3, #16
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4413      	add	r3, r2
 8006610:	3304      	adds	r3, #4
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	e00c      	b.n	8006630 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	f003 020f 	and.w	r2, r3, #15
 800661c:	4613      	mov	r3, r2
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	4413      	add	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	4413      	add	r3, r2
 800662c:	3304      	adds	r3, #4
 800662e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68f9      	ldr	r1, [r7, #12]
 8006636:	4618      	mov	r0, r3
 8006638:	f008 f968 	bl	800e90c <USB_EPStopXfer>
 800663c:	4603      	mov	r3, r0
 800663e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006640:	7afb      	ldrb	r3, [r7, #11]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b08a      	sub	sp, #40	@ 0x28
 800664e:	af02      	add	r7, sp, #8
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	4613      	mov	r3, r2
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	4413      	add	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	3310      	adds	r3, #16
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	4413      	add	r3, r2
 800666e:	3304      	adds	r3, #4
 8006670:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	695a      	ldr	r2, [r3, #20]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	429a      	cmp	r2, r3
 800667c:	d901      	bls.n	8006682 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e06b      	b.n	800675a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	691a      	ldr	r2, [r3, #16]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	429a      	cmp	r2, r3
 8006696:	d902      	bls.n	800669e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	3303      	adds	r3, #3
 80066a2:	089b      	lsrs	r3, r3, #2
 80066a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066a6:	e02a      	b.n	80066fe <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	691a      	ldr	r2, [r3, #16]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d902      	bls.n	80066c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	3303      	adds	r3, #3
 80066c8:	089b      	lsrs	r3, r3, #2
 80066ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	68d9      	ldr	r1, [r3, #12]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	4603      	mov	r3, r0
 80066e0:	6978      	ldr	r0, [r7, #20]
 80066e2:	f008 f9bd 	bl	800ea60 <USB_WritePacket>

    ep->xfer_buff  += len;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	441a      	add	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	695a      	ldr	r2, [r3, #20]
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	441a      	add	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	429a      	cmp	r2, r3
 8006712:	d809      	bhi.n	8006728 <PCD_WriteEmptyTxFifo+0xde>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	695a      	ldr	r2, [r3, #20]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800671c:	429a      	cmp	r2, r3
 800671e:	d203      	bcs.n	8006728 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1bf      	bne.n	80066a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	429a      	cmp	r2, r3
 8006732:	d811      	bhi.n	8006758 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	f003 030f 	and.w	r3, r3, #15
 800673a:	2201      	movs	r2, #1
 800673c:	fa02 f303 	lsl.w	r3, r2, r3
 8006740:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	43db      	mvns	r3, r3
 800674e:	6939      	ldr	r1, [r7, #16]
 8006750:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006754:	4013      	ands	r3, r2
 8006756:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3720      	adds	r7, #32
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	333c      	adds	r3, #60	@ 0x3c
 800677c:	3304      	adds	r3, #4
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	799b      	ldrb	r3, [r3, #6]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d17b      	bne.n	8006892 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d015      	beq.n	80067d0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	4a61      	ldr	r2, [pc, #388]	@ (800692c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	f240 80b9 	bls.w	8006920 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 80b3 	beq.w	8006920 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c6:	461a      	mov	r2, r3
 80067c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067cc:	6093      	str	r3, [r2, #8]
 80067ce:	e0a7      	b.n	8006920 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d009      	beq.n	80067ee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e6:	461a      	mov	r2, r3
 80067e8:	2320      	movs	r3, #32
 80067ea:	6093      	str	r3, [r2, #8]
 80067ec:	e098      	b.n	8006920 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f040 8093 	bne.w	8006920 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	4a4b      	ldr	r2, [pc, #300]	@ (800692c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d90f      	bls.n	8006822 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00a      	beq.n	8006822 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006818:	461a      	mov	r2, r3
 800681a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800681e:	6093      	str	r3, [r2, #8]
 8006820:	e07e      	b.n	8006920 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	4613      	mov	r3, r2
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	4413      	add	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	4413      	add	r3, r2
 8006834:	3304      	adds	r3, #4
 8006836:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a1a      	ldr	r2, [r3, #32]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	0159      	lsls	r1, r3, #5
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	440b      	add	r3, r1
 8006844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800684e:	1ad2      	subs	r2, r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d114      	bne.n	8006884 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6818      	ldr	r0, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800686c:	461a      	mov	r2, r3
 800686e:	2101      	movs	r1, #1
 8006870:	f008 fb8e 	bl	800ef90 <USB_EP0_OutStart>
 8006874:	e006      	b.n	8006884 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	441a      	add	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f00d ffe6 	bl	801485c <HAL_PCD_DataOutStageCallback>
 8006890:	e046      	b.n	8006920 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	4a26      	ldr	r2, [pc, #152]	@ (8006930 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d124      	bne.n	80068e4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b0:	461a      	mov	r2, r3
 80068b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068b6:	6093      	str	r3, [r2, #8]
 80068b8:	e032      	b.n	8006920 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f003 0320 	and.w	r3, r3, #32
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d008      	beq.n	80068d6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d0:	461a      	mov	r2, r3
 80068d2:	2320      	movs	r3, #32
 80068d4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f00d ffbd 	bl	801485c <HAL_PCD_DataOutStageCallback>
 80068e2:	e01d      	b.n	8006920 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d114      	bne.n	8006914 <PCD_EP_OutXfrComplete_int+0x1b0>
 80068ea:	6879      	ldr	r1, [r7, #4]
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	4613      	mov	r3, r2
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d108      	bne.n	8006914 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800690c:	461a      	mov	r2, r3
 800690e:	2100      	movs	r1, #0
 8006910:	f008 fb3e 	bl	800ef90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	b2db      	uxtb	r3, r3
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f00d ff9e 	bl	801485c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3720      	adds	r7, #32
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	4f54300a 	.word	0x4f54300a
 8006930:	4f54310a 	.word	0x4f54310a

08006934 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	333c      	adds	r3, #60	@ 0x3c
 800694c:	3304      	adds	r3, #4
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4a15      	ldr	r2, [pc, #84]	@ (80069bc <PCD_EP_OutSetupPacket_int+0x88>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d90e      	bls.n	8006988 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006970:	2b00      	cmp	r3, #0
 8006972:	d009      	beq.n	8006988 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006980:	461a      	mov	r2, r3
 8006982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006986:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f00d ff55 	bl	8014838 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4a0a      	ldr	r2, [pc, #40]	@ (80069bc <PCD_EP_OutSetupPacket_int+0x88>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d90c      	bls.n	80069b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	799b      	ldrb	r3, [r3, #6]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d108      	bne.n	80069b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6818      	ldr	r0, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80069a8:	461a      	mov	r2, r3
 80069aa:	2101      	movs	r1, #1
 80069ac:	f008 faf0 	bl	800ef90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	4f54300a 	.word	0x4f54300a

080069c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70fb      	strb	r3, [r7, #3]
 80069cc:	4613      	mov	r3, r2
 80069ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80069d8:	78fb      	ldrb	r3, [r7, #3]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d107      	bne.n	80069ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80069de:	883b      	ldrh	r3, [r7, #0]
 80069e0:	0419      	lsls	r1, r3, #16
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80069ec:	e028      	b.n	8006a40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f4:	0c1b      	lsrs	r3, r3, #16
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	4413      	add	r3, r2
 80069fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80069fc:	2300      	movs	r3, #0
 80069fe:	73fb      	strb	r3, [r7, #15]
 8006a00:	e00d      	b.n	8006a1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	3340      	adds	r3, #64	@ 0x40
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	4413      	add	r3, r2
 8006a16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	73fb      	strb	r3, [r7, #15]
 8006a1e:	7bfa      	ldrb	r2, [r7, #15]
 8006a20:	78fb      	ldrb	r3, [r7, #3]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d3ec      	bcc.n	8006a02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006a28:	883b      	ldrh	r3, [r7, #0]
 8006a2a:	0418      	lsls	r0, r3, #16
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6819      	ldr	r1, [r3, #0]
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	4302      	orrs	r2, r0
 8006a38:	3340      	adds	r3, #64	@ 0x40
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	440b      	add	r3, r1
 8006a3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	460b      	mov	r3, r1
 8006a58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	887a      	ldrh	r2, [r7, #2]
 8006a60:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a9e:	4b05      	ldr	r3, [pc, #20]	@ (8006ab4 <HAL_PCDEx_ActivateLPM+0x44>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	10000003 	.word	0x10000003

08006ab8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006ad8:	4b19      	ldr	r3, [pc, #100]	@ (8006b40 <HAL_PWREx_ConfigSupply+0x70>)
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b04      	cmp	r3, #4
 8006ae2:	d00a      	beq.n	8006afa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006ae4:	4b16      	ldr	r3, [pc, #88]	@ (8006b40 <HAL_PWREx_ConfigSupply+0x70>)
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d001      	beq.n	8006af6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e01f      	b.n	8006b36 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	e01d      	b.n	8006b36 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006afa:	4b11      	ldr	r3, [pc, #68]	@ (8006b40 <HAL_PWREx_ConfigSupply+0x70>)
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f023 0207 	bic.w	r2, r3, #7
 8006b02:	490f      	ldr	r1, [pc, #60]	@ (8006b40 <HAL_PWREx_ConfigSupply+0x70>)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b0a:	f7fb ffed 	bl	8002ae8 <HAL_GetTick>
 8006b0e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b10:	e009      	b.n	8006b26 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b12:	f7fb ffe9 	bl	8002ae8 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b20:	d901      	bls.n	8006b26 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e007      	b.n	8006b36 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b26:	4b06      	ldr	r3, [pc, #24]	@ (8006b40 <HAL_PWREx_ConfigSupply+0x70>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b32:	d1ee      	bne.n	8006b12 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	58024800 	.word	0x58024800

08006b44 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006b48:	4b05      	ldr	r3, [pc, #20]	@ (8006b60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	4a04      	ldr	r2, [pc, #16]	@ (8006b60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006b4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b52:	60d3      	str	r3, [r2, #12]
}
 8006b54:	bf00      	nop
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	58024800 	.word	0x58024800

08006b64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08c      	sub	sp, #48	@ 0x30
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e3c8      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 8087 	beq.w	8006c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b84:	4b88      	ldr	r3, [pc, #544]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b8e:	4b86      	ldr	r3, [pc, #536]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b92:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b96:	2b10      	cmp	r3, #16
 8006b98:	d007      	beq.n	8006baa <HAL_RCC_OscConfig+0x46>
 8006b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9c:	2b18      	cmp	r3, #24
 8006b9e:	d110      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x5e>
 8006ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d10b      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006baa:	4b7f      	ldr	r3, [pc, #508]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d06c      	beq.n	8006c90 <HAL_RCC_OscConfig+0x12c>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d168      	bne.n	8006c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e3a2      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bca:	d106      	bne.n	8006bda <HAL_RCC_OscConfig+0x76>
 8006bcc:	4b76      	ldr	r3, [pc, #472]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a75      	ldr	r2, [pc, #468]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	e02e      	b.n	8006c38 <HAL_RCC_OscConfig+0xd4>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10c      	bne.n	8006bfc <HAL_RCC_OscConfig+0x98>
 8006be2:	4b71      	ldr	r3, [pc, #452]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a70      	ldr	r2, [pc, #448]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	4b6e      	ldr	r3, [pc, #440]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a6d      	ldr	r2, [pc, #436]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006bf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	e01d      	b.n	8006c38 <HAL_RCC_OscConfig+0xd4>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c04:	d10c      	bne.n	8006c20 <HAL_RCC_OscConfig+0xbc>
 8006c06:	4b68      	ldr	r3, [pc, #416]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a67      	ldr	r2, [pc, #412]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	4b65      	ldr	r3, [pc, #404]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a64      	ldr	r2, [pc, #400]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	e00b      	b.n	8006c38 <HAL_RCC_OscConfig+0xd4>
 8006c20:	4b61      	ldr	r3, [pc, #388]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a60      	ldr	r2, [pc, #384]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c2a:	6013      	str	r3, [r2, #0]
 8006c2c:	4b5e      	ldr	r3, [pc, #376]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a5d      	ldr	r2, [pc, #372]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d013      	beq.n	8006c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c40:	f7fb ff52 	bl	8002ae8 <HAL_GetTick>
 8006c44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c48:	f7fb ff4e 	bl	8002ae8 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b64      	cmp	r3, #100	@ 0x64
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e356      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c5a:	4b53      	ldr	r3, [pc, #332]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0f0      	beq.n	8006c48 <HAL_RCC_OscConfig+0xe4>
 8006c66:	e014      	b.n	8006c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c68:	f7fb ff3e 	bl	8002ae8 <HAL_GetTick>
 8006c6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c6e:	e008      	b.n	8006c82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c70:	f7fb ff3a 	bl	8002ae8 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b64      	cmp	r3, #100	@ 0x64
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e342      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c82:	4b49      	ldr	r3, [pc, #292]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1f0      	bne.n	8006c70 <HAL_RCC_OscConfig+0x10c>
 8006c8e:	e000      	b.n	8006c92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 808c 	beq.w	8006db8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ca0:	4b41      	ldr	r3, [pc, #260]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ca8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006caa:	4b3f      	ldr	r3, [pc, #252]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d007      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x162>
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	2b18      	cmp	r3, #24
 8006cba:	d137      	bne.n	8006d2c <HAL_RCC_OscConfig+0x1c8>
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d132      	bne.n	8006d2c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cc6:	4b38      	ldr	r3, [pc, #224]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0304 	and.w	r3, r3, #4
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d005      	beq.n	8006cde <HAL_RCC_OscConfig+0x17a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e314      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006cde:	4b32      	ldr	r3, [pc, #200]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f023 0219 	bic.w	r2, r3, #25
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	492f      	ldr	r1, [pc, #188]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf0:	f7fb fefa 	bl	8002ae8 <HAL_GetTick>
 8006cf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cf8:	f7fb fef6 	bl	8002ae8 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e2fe      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d0a:	4b27      	ldr	r3, [pc, #156]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f0      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d16:	4b24      	ldr	r3, [pc, #144]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	061b      	lsls	r3, r3, #24
 8006d24:	4920      	ldr	r1, [pc, #128]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d2a:	e045      	b.n	8006db8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d026      	beq.n	8006d82 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d34:	4b1c      	ldr	r3, [pc, #112]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f023 0219 	bic.w	r2, r3, #25
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	4919      	ldr	r1, [pc, #100]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d46:	f7fb fecf 	bl	8002ae8 <HAL_GetTick>
 8006d4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d4c:	e008      	b.n	8006d60 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d4e:	f7fb fecb 	bl	8002ae8 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e2d3      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d60:	4b11      	ldr	r3, [pc, #68]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0f0      	beq.n	8006d4e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	061b      	lsls	r3, r3, #24
 8006d7a:	490b      	ldr	r1, [pc, #44]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	604b      	str	r3, [r1, #4]
 8006d80:	e01a      	b.n	8006db8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d82:	4b09      	ldr	r3, [pc, #36]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a08      	ldr	r2, [pc, #32]	@ (8006da8 <HAL_RCC_OscConfig+0x244>)
 8006d88:	f023 0301 	bic.w	r3, r3, #1
 8006d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d8e:	f7fb feab 	bl	8002ae8 <HAL_GetTick>
 8006d92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d94:	e00a      	b.n	8006dac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d96:	f7fb fea7 	bl	8002ae8 <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d903      	bls.n	8006dac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e2af      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
 8006da8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dac:	4b96      	ldr	r3, [pc, #600]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0304 	and.w	r3, r3, #4
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1ee      	bne.n	8006d96 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0310 	and.w	r3, r3, #16
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d06a      	beq.n	8006e9a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dc4:	4b90      	ldr	r3, [pc, #576]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dcc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006dce:	4b8e      	ldr	r3, [pc, #568]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	2b08      	cmp	r3, #8
 8006dd8:	d007      	beq.n	8006dea <HAL_RCC_OscConfig+0x286>
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	2b18      	cmp	r3, #24
 8006dde:	d11b      	bne.n	8006e18 <HAL_RCC_OscConfig+0x2b4>
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d116      	bne.n	8006e18 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006dea:	4b87      	ldr	r3, [pc, #540]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <HAL_RCC_OscConfig+0x29e>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	2b80      	cmp	r3, #128	@ 0x80
 8006dfc:	d001      	beq.n	8006e02 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e282      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e02:	4b81      	ldr	r3, [pc, #516]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	061b      	lsls	r3, r3, #24
 8006e10:	497d      	ldr	r1, [pc, #500]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e16:	e040      	b.n	8006e9a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d023      	beq.n	8006e68 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e20:	4b79      	ldr	r3, [pc, #484]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a78      	ldr	r2, [pc, #480]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e2c:	f7fb fe5c 	bl	8002ae8 <HAL_GetTick>
 8006e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006e34:	f7fb fe58 	bl	8002ae8 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e260      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e46:	4b70      	ldr	r3, [pc, #448]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0f0      	beq.n	8006e34 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e52:	4b6d      	ldr	r3, [pc, #436]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	061b      	lsls	r3, r3, #24
 8006e60:	4969      	ldr	r1, [pc, #420]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60cb      	str	r3, [r1, #12]
 8006e66:	e018      	b.n	8006e9a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006e68:	4b67      	ldr	r3, [pc, #412]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a66      	ldr	r2, [pc, #408]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006e6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e74:	f7fb fe38 	bl	8002ae8 <HAL_GetTick>
 8006e78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006e7c:	f7fb fe34 	bl	8002ae8 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e23c      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e8e:	4b5e      	ldr	r3, [pc, #376]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1f0      	bne.n	8006e7c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0308 	and.w	r3, r3, #8
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d036      	beq.n	8006f14 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d019      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eae:	4b56      	ldr	r3, [pc, #344]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eb2:	4a55      	ldr	r2, [pc, #340]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006eb4:	f043 0301 	orr.w	r3, r3, #1
 8006eb8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eba:	f7fb fe15 	bl	8002ae8 <HAL_GetTick>
 8006ebe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ec2:	f7fb fe11 	bl	8002ae8 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e219      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ed4:	4b4c      	ldr	r3, [pc, #304]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0f0      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x35e>
 8006ee0:	e018      	b.n	8006f14 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ee2:	4b49      	ldr	r3, [pc, #292]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ee6:	4a48      	ldr	r2, [pc, #288]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006ee8:	f023 0301 	bic.w	r3, r3, #1
 8006eec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eee:	f7fb fdfb 	bl	8002ae8 <HAL_GetTick>
 8006ef2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ef4:	e008      	b.n	8006f08 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ef6:	f7fb fdf7 	bl	8002ae8 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d901      	bls.n	8006f08 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e1ff      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f08:	4b3f      	ldr	r3, [pc, #252]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1f0      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0320 	and.w	r3, r3, #32
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d036      	beq.n	8006f8e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d019      	beq.n	8006f5c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f28:	4b37      	ldr	r3, [pc, #220]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a36      	ldr	r2, [pc, #216]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006f2e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006f32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f34:	f7fb fdd8 	bl	8002ae8 <HAL_GetTick>
 8006f38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f3a:	e008      	b.n	8006f4e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f3c:	f7fb fdd4 	bl	8002ae8 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e1dc      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d0f0      	beq.n	8006f3c <HAL_RCC_OscConfig+0x3d8>
 8006f5a:	e018      	b.n	8006f8e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a29      	ldr	r2, [pc, #164]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006f62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f68:	f7fb fdbe 	bl	8002ae8 <HAL_GetTick>
 8006f6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f6e:	e008      	b.n	8006f82 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f70:	f7fb fdba 	bl	8002ae8 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e1c2      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f82:	4b21      	ldr	r3, [pc, #132]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1f0      	bne.n	8006f70 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 8086 	beq.w	80070a8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800700c <HAL_RCC_OscConfig+0x4a8>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800700c <HAL_RCC_OscConfig+0x4a8>)
 8006fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fa8:	f7fb fd9e 	bl	8002ae8 <HAL_GetTick>
 8006fac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fae:	e008      	b.n	8006fc2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb0:	f7fb fd9a 	bl	8002ae8 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b64      	cmp	r3, #100	@ 0x64
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e1a2      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fc2:	4b12      	ldr	r3, [pc, #72]	@ (800700c <HAL_RCC_OscConfig+0x4a8>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d0f0      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d106      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x480>
 8006fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fda:	4a0b      	ldr	r2, [pc, #44]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006fdc:	f043 0301 	orr.w	r3, r3, #1
 8006fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fe2:	e032      	b.n	800704a <HAL_RCC_OscConfig+0x4e6>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d111      	bne.n	8007010 <HAL_RCC_OscConfig+0x4ac>
 8006fec:	4b06      	ldr	r3, [pc, #24]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff0:	4a05      	ldr	r2, [pc, #20]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006ff2:	f023 0301 	bic.w	r3, r3, #1
 8006ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ff8:	4b03      	ldr	r3, [pc, #12]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ffc:	4a02      	ldr	r2, [pc, #8]	@ (8007008 <HAL_RCC_OscConfig+0x4a4>)
 8006ffe:	f023 0304 	bic.w	r3, r3, #4
 8007002:	6713      	str	r3, [r2, #112]	@ 0x70
 8007004:	e021      	b.n	800704a <HAL_RCC_OscConfig+0x4e6>
 8007006:	bf00      	nop
 8007008:	58024400 	.word	0x58024400
 800700c:	58024800 	.word	0x58024800
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	2b05      	cmp	r3, #5
 8007016:	d10c      	bne.n	8007032 <HAL_RCC_OscConfig+0x4ce>
 8007018:	4b83      	ldr	r3, [pc, #524]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 800701a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800701c:	4a82      	ldr	r2, [pc, #520]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 800701e:	f043 0304 	orr.w	r3, r3, #4
 8007022:	6713      	str	r3, [r2, #112]	@ 0x70
 8007024:	4b80      	ldr	r3, [pc, #512]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 8007026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007028:	4a7f      	ldr	r2, [pc, #508]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 800702a:	f043 0301 	orr.w	r3, r3, #1
 800702e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007030:	e00b      	b.n	800704a <HAL_RCC_OscConfig+0x4e6>
 8007032:	4b7d      	ldr	r3, [pc, #500]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 8007034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007036:	4a7c      	ldr	r2, [pc, #496]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 8007038:	f023 0301 	bic.w	r3, r3, #1
 800703c:	6713      	str	r3, [r2, #112]	@ 0x70
 800703e:	4b7a      	ldr	r3, [pc, #488]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 8007040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007042:	4a79      	ldr	r2, [pc, #484]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 8007044:	f023 0304 	bic.w	r3, r3, #4
 8007048:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d015      	beq.n	800707e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007052:	f7fb fd49 	bl	8002ae8 <HAL_GetTick>
 8007056:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007058:	e00a      	b.n	8007070 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800705a:	f7fb fd45 	bl	8002ae8 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007068:	4293      	cmp	r3, r2
 800706a:	d901      	bls.n	8007070 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e14b      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007070:	4b6d      	ldr	r3, [pc, #436]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 8007072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d0ee      	beq.n	800705a <HAL_RCC_OscConfig+0x4f6>
 800707c:	e014      	b.n	80070a8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800707e:	f7fb fd33 	bl	8002ae8 <HAL_GetTick>
 8007082:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007084:	e00a      	b.n	800709c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007086:	f7fb fd2f 	bl	8002ae8 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007094:	4293      	cmp	r3, r2
 8007096:	d901      	bls.n	800709c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e135      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800709c:	4b62      	ldr	r3, [pc, #392]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 800709e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1ee      	bne.n	8007086 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 812a 	beq.w	8007306 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80070b2:	4b5d      	ldr	r3, [pc, #372]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070ba:	2b18      	cmp	r3, #24
 80070bc:	f000 80ba 	beq.w	8007234 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	f040 8095 	bne.w	80071f4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ca:	4b57      	ldr	r3, [pc, #348]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a56      	ldr	r2, [pc, #344]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 80070d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d6:	f7fb fd07 	bl	8002ae8 <HAL_GetTick>
 80070da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070dc:	e008      	b.n	80070f0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070de:	f7fb fd03 	bl	8002ae8 <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d901      	bls.n	80070f0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e10b      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070f0:	4b4d      	ldr	r3, [pc, #308]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1f0      	bne.n	80070de <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070fc:	4b4a      	ldr	r3, [pc, #296]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 80070fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007100:	4b4a      	ldr	r3, [pc, #296]	@ (800722c <HAL_RCC_OscConfig+0x6c8>)
 8007102:	4013      	ands	r3, r2
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800710c:	0112      	lsls	r2, r2, #4
 800710e:	430a      	orrs	r2, r1
 8007110:	4945      	ldr	r1, [pc, #276]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 8007112:	4313      	orrs	r3, r2
 8007114:	628b      	str	r3, [r1, #40]	@ 0x28
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711a:	3b01      	subs	r3, #1
 800711c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007124:	3b01      	subs	r3, #1
 8007126:	025b      	lsls	r3, r3, #9
 8007128:	b29b      	uxth	r3, r3
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007130:	3b01      	subs	r3, #1
 8007132:	041b      	lsls	r3, r3, #16
 8007134:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713e:	3b01      	subs	r3, #1
 8007140:	061b      	lsls	r3, r3, #24
 8007142:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007146:	4938      	ldr	r1, [pc, #224]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 8007148:	4313      	orrs	r3, r2
 800714a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800714c:	4b36      	ldr	r3, [pc, #216]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 800714e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007150:	4a35      	ldr	r2, [pc, #212]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 8007152:	f023 0301 	bic.w	r3, r3, #1
 8007156:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007158:	4b33      	ldr	r3, [pc, #204]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 800715a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800715c:	4b34      	ldr	r3, [pc, #208]	@ (8007230 <HAL_RCC_OscConfig+0x6cc>)
 800715e:	4013      	ands	r3, r2
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007164:	00d2      	lsls	r2, r2, #3
 8007166:	4930      	ldr	r1, [pc, #192]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 8007168:	4313      	orrs	r3, r2
 800716a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800716c:	4b2e      	ldr	r3, [pc, #184]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 800716e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007170:	f023 020c 	bic.w	r2, r3, #12
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007178:	492b      	ldr	r1, [pc, #172]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 800717a:	4313      	orrs	r3, r2
 800717c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800717e:	4b2a      	ldr	r3, [pc, #168]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 8007180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007182:	f023 0202 	bic.w	r2, r3, #2
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718a:	4927      	ldr	r1, [pc, #156]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 800718c:	4313      	orrs	r3, r2
 800718e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007190:	4b25      	ldr	r3, [pc, #148]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 8007192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007194:	4a24      	ldr	r2, [pc, #144]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 8007196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800719a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800719c:	4b22      	ldr	r3, [pc, #136]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 800719e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a0:	4a21      	ldr	r2, [pc, #132]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 80071a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80071a8:	4b1f      	ldr	r3, [pc, #124]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 80071aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ac:	4a1e      	ldr	r2, [pc, #120]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 80071ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80071b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 80071b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b8:	4a1b      	ldr	r2, [pc, #108]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 80071ba:	f043 0301 	orr.w	r3, r3, #1
 80071be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071c0:	4b19      	ldr	r3, [pc, #100]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a18      	ldr	r2, [pc, #96]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 80071c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071cc:	f7fb fc8c 	bl	8002ae8 <HAL_GetTick>
 80071d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071d4:	f7fb fc88 	bl	8002ae8 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e090      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071e6:	4b10      	ldr	r3, [pc, #64]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0f0      	beq.n	80071d4 <HAL_RCC_OscConfig+0x670>
 80071f2:	e088      	b.n	8007306 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a0b      	ldr	r2, [pc, #44]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 80071fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007200:	f7fb fc72 	bl	8002ae8 <HAL_GetTick>
 8007204:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007206:	e008      	b.n	800721a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007208:	f7fb fc6e 	bl	8002ae8 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b02      	cmp	r3, #2
 8007214:	d901      	bls.n	800721a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e076      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800721a:	4b03      	ldr	r3, [pc, #12]	@ (8007228 <HAL_RCC_OscConfig+0x6c4>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1f0      	bne.n	8007208 <HAL_RCC_OscConfig+0x6a4>
 8007226:	e06e      	b.n	8007306 <HAL_RCC_OscConfig+0x7a2>
 8007228:	58024400 	.word	0x58024400
 800722c:	fffffc0c 	.word	0xfffffc0c
 8007230:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007234:	4b36      	ldr	r3, [pc, #216]	@ (8007310 <HAL_RCC_OscConfig+0x7ac>)
 8007236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007238:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800723a:	4b35      	ldr	r3, [pc, #212]	@ (8007310 <HAL_RCC_OscConfig+0x7ac>)
 800723c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007244:	2b01      	cmp	r3, #1
 8007246:	d031      	beq.n	80072ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f003 0203 	and.w	r2, r3, #3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007252:	429a      	cmp	r2, r3
 8007254:	d12a      	bne.n	80072ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	091b      	lsrs	r3, r3, #4
 800725a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007262:	429a      	cmp	r2, r3
 8007264:	d122      	bne.n	80072ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007270:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007272:	429a      	cmp	r2, r3
 8007274:	d11a      	bne.n	80072ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	0a5b      	lsrs	r3, r3, #9
 800727a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007282:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007284:	429a      	cmp	r2, r3
 8007286:	d111      	bne.n	80072ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	0c1b      	lsrs	r3, r3, #16
 800728c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007294:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007296:	429a      	cmp	r2, r3
 8007298:	d108      	bne.n	80072ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	0e1b      	lsrs	r3, r3, #24
 800729e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d001      	beq.n	80072b0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e02b      	b.n	8007308 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80072b0:	4b17      	ldr	r3, [pc, #92]	@ (8007310 <HAL_RCC_OscConfig+0x7ac>)
 80072b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b4:	08db      	lsrs	r3, r3, #3
 80072b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d01f      	beq.n	8007306 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80072c6:	4b12      	ldr	r3, [pc, #72]	@ (8007310 <HAL_RCC_OscConfig+0x7ac>)
 80072c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ca:	4a11      	ldr	r2, [pc, #68]	@ (8007310 <HAL_RCC_OscConfig+0x7ac>)
 80072cc:	f023 0301 	bic.w	r3, r3, #1
 80072d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80072d2:	f7fb fc09 	bl	8002ae8 <HAL_GetTick>
 80072d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80072d8:	bf00      	nop
 80072da:	f7fb fc05 	bl	8002ae8 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d0f9      	beq.n	80072da <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80072e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007310 <HAL_RCC_OscConfig+0x7ac>)
 80072e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007314 <HAL_RCC_OscConfig+0x7b0>)
 80072ec:	4013      	ands	r3, r2
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80072f2:	00d2      	lsls	r2, r2, #3
 80072f4:	4906      	ldr	r1, [pc, #24]	@ (8007310 <HAL_RCC_OscConfig+0x7ac>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80072fa:	4b05      	ldr	r3, [pc, #20]	@ (8007310 <HAL_RCC_OscConfig+0x7ac>)
 80072fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fe:	4a04      	ldr	r2, [pc, #16]	@ (8007310 <HAL_RCC_OscConfig+0x7ac>)
 8007300:	f043 0301 	orr.w	r3, r3, #1
 8007304:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3730      	adds	r7, #48	@ 0x30
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	58024400 	.word	0x58024400
 8007314:	ffff0007 	.word	0xffff0007

08007318 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e19c      	b.n	8007666 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800732c:	4b8a      	ldr	r3, [pc, #552]	@ (8007558 <HAL_RCC_ClockConfig+0x240>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 030f 	and.w	r3, r3, #15
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d910      	bls.n	800735c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800733a:	4b87      	ldr	r3, [pc, #540]	@ (8007558 <HAL_RCC_ClockConfig+0x240>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f023 020f 	bic.w	r2, r3, #15
 8007342:	4985      	ldr	r1, [pc, #532]	@ (8007558 <HAL_RCC_ClockConfig+0x240>)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	4313      	orrs	r3, r2
 8007348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800734a:	4b83      	ldr	r3, [pc, #524]	@ (8007558 <HAL_RCC_ClockConfig+0x240>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 030f 	and.w	r3, r3, #15
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	429a      	cmp	r2, r3
 8007356:	d001      	beq.n	800735c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e184      	b.n	8007666 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0304 	and.w	r3, r3, #4
 8007364:	2b00      	cmp	r3, #0
 8007366:	d010      	beq.n	800738a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	691a      	ldr	r2, [r3, #16]
 800736c:	4b7b      	ldr	r3, [pc, #492]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007374:	429a      	cmp	r2, r3
 8007376:	d908      	bls.n	800738a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007378:	4b78      	ldr	r3, [pc, #480]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	4975      	ldr	r1, [pc, #468]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 8007386:	4313      	orrs	r3, r2
 8007388:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0308 	and.w	r3, r3, #8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d010      	beq.n	80073b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	695a      	ldr	r2, [r3, #20]
 800739a:	4b70      	ldr	r3, [pc, #448]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d908      	bls.n	80073b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073a6:	4b6d      	ldr	r3, [pc, #436]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	496a      	ldr	r1, [pc, #424]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0310 	and.w	r3, r3, #16
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d010      	beq.n	80073e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	699a      	ldr	r2, [r3, #24]
 80073c8:	4b64      	ldr	r3, [pc, #400]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d908      	bls.n	80073e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073d4:	4b61      	ldr	r3, [pc, #388]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	495e      	ldr	r1, [pc, #376]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d010      	beq.n	8007414 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	69da      	ldr	r2, [r3, #28]
 80073f6:	4b59      	ldr	r3, [pc, #356]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073fe:	429a      	cmp	r2, r3
 8007400:	d908      	bls.n	8007414 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007402:	4b56      	ldr	r3, [pc, #344]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	4953      	ldr	r1, [pc, #332]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 8007410:	4313      	orrs	r3, r2
 8007412:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d010      	beq.n	8007442 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	4b4d      	ldr	r3, [pc, #308]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	f003 030f 	and.w	r3, r3, #15
 800742c:	429a      	cmp	r2, r3
 800742e:	d908      	bls.n	8007442 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007430:	4b4a      	ldr	r3, [pc, #296]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	f023 020f 	bic.w	r2, r3, #15
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	4947      	ldr	r1, [pc, #284]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 800743e:	4313      	orrs	r3, r2
 8007440:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d055      	beq.n	80074fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800744e:	4b43      	ldr	r3, [pc, #268]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	4940      	ldr	r1, [pc, #256]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 800745c:	4313      	orrs	r3, r2
 800745e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	2b02      	cmp	r3, #2
 8007466:	d107      	bne.n	8007478 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007468:	4b3c      	ldr	r3, [pc, #240]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d121      	bne.n	80074b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e0f6      	b.n	8007666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	2b03      	cmp	r3, #3
 800747e:	d107      	bne.n	8007490 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007480:	4b36      	ldr	r3, [pc, #216]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d115      	bne.n	80074b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e0ea      	b.n	8007666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d107      	bne.n	80074a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007498:	4b30      	ldr	r3, [pc, #192]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d109      	bne.n	80074b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e0de      	b.n	8007666 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074a8:	4b2c      	ldr	r3, [pc, #176]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0304 	and.w	r3, r3, #4
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e0d6      	b.n	8007666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074b8:	4b28      	ldr	r3, [pc, #160]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	f023 0207 	bic.w	r2, r3, #7
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	4925      	ldr	r1, [pc, #148]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ca:	f7fb fb0d 	bl	8002ae8 <HAL_GetTick>
 80074ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074d0:	e00a      	b.n	80074e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074d2:	f7fb fb09 	bl	8002ae8 <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d901      	bls.n	80074e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e0be      	b.n	8007666 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074e8:	4b1c      	ldr	r3, [pc, #112]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d1eb      	bne.n	80074d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d010      	beq.n	8007528 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	4b14      	ldr	r3, [pc, #80]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	f003 030f 	and.w	r3, r3, #15
 8007512:	429a      	cmp	r2, r3
 8007514:	d208      	bcs.n	8007528 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007516:	4b11      	ldr	r3, [pc, #68]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	f023 020f 	bic.w	r2, r3, #15
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	490e      	ldr	r1, [pc, #56]	@ (800755c <HAL_RCC_ClockConfig+0x244>)
 8007524:	4313      	orrs	r3, r2
 8007526:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007528:	4b0b      	ldr	r3, [pc, #44]	@ (8007558 <HAL_RCC_ClockConfig+0x240>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 030f 	and.w	r3, r3, #15
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d214      	bcs.n	8007560 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007536:	4b08      	ldr	r3, [pc, #32]	@ (8007558 <HAL_RCC_ClockConfig+0x240>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f023 020f 	bic.w	r2, r3, #15
 800753e:	4906      	ldr	r1, [pc, #24]	@ (8007558 <HAL_RCC_ClockConfig+0x240>)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	4313      	orrs	r3, r2
 8007544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007546:	4b04      	ldr	r3, [pc, #16]	@ (8007558 <HAL_RCC_ClockConfig+0x240>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d005      	beq.n	8007560 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e086      	b.n	8007666 <HAL_RCC_ClockConfig+0x34e>
 8007558:	52002000 	.word	0x52002000
 800755c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0304 	and.w	r3, r3, #4
 8007568:	2b00      	cmp	r3, #0
 800756a:	d010      	beq.n	800758e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	691a      	ldr	r2, [r3, #16]
 8007570:	4b3f      	ldr	r3, [pc, #252]	@ (8007670 <HAL_RCC_ClockConfig+0x358>)
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007578:	429a      	cmp	r2, r3
 800757a:	d208      	bcs.n	800758e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800757c:	4b3c      	ldr	r3, [pc, #240]	@ (8007670 <HAL_RCC_ClockConfig+0x358>)
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	4939      	ldr	r1, [pc, #228]	@ (8007670 <HAL_RCC_ClockConfig+0x358>)
 800758a:	4313      	orrs	r3, r2
 800758c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0308 	and.w	r3, r3, #8
 8007596:	2b00      	cmp	r3, #0
 8007598:	d010      	beq.n	80075bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	695a      	ldr	r2, [r3, #20]
 800759e:	4b34      	ldr	r3, [pc, #208]	@ (8007670 <HAL_RCC_ClockConfig+0x358>)
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d208      	bcs.n	80075bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075aa:	4b31      	ldr	r3, [pc, #196]	@ (8007670 <HAL_RCC_ClockConfig+0x358>)
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	492e      	ldr	r1, [pc, #184]	@ (8007670 <HAL_RCC_ClockConfig+0x358>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0310 	and.w	r3, r3, #16
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d010      	beq.n	80075ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699a      	ldr	r2, [r3, #24]
 80075cc:	4b28      	ldr	r3, [pc, #160]	@ (8007670 <HAL_RCC_ClockConfig+0x358>)
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d208      	bcs.n	80075ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80075d8:	4b25      	ldr	r3, [pc, #148]	@ (8007670 <HAL_RCC_ClockConfig+0x358>)
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	4922      	ldr	r1, [pc, #136]	@ (8007670 <HAL_RCC_ClockConfig+0x358>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0320 	and.w	r3, r3, #32
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d010      	beq.n	8007618 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	69da      	ldr	r2, [r3, #28]
 80075fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007670 <HAL_RCC_ClockConfig+0x358>)
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007602:	429a      	cmp	r2, r3
 8007604:	d208      	bcs.n	8007618 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007606:	4b1a      	ldr	r3, [pc, #104]	@ (8007670 <HAL_RCC_ClockConfig+0x358>)
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	4917      	ldr	r1, [pc, #92]	@ (8007670 <HAL_RCC_ClockConfig+0x358>)
 8007614:	4313      	orrs	r3, r2
 8007616:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007618:	f000 f834 	bl	8007684 <HAL_RCC_GetSysClockFreq>
 800761c:	4602      	mov	r2, r0
 800761e:	4b14      	ldr	r3, [pc, #80]	@ (8007670 <HAL_RCC_ClockConfig+0x358>)
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	0a1b      	lsrs	r3, r3, #8
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	4912      	ldr	r1, [pc, #72]	@ (8007674 <HAL_RCC_ClockConfig+0x35c>)
 800762a:	5ccb      	ldrb	r3, [r1, r3]
 800762c:	f003 031f 	and.w	r3, r3, #31
 8007630:	fa22 f303 	lsr.w	r3, r2, r3
 8007634:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007636:	4b0e      	ldr	r3, [pc, #56]	@ (8007670 <HAL_RCC_ClockConfig+0x358>)
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	f003 030f 	and.w	r3, r3, #15
 800763e:	4a0d      	ldr	r2, [pc, #52]	@ (8007674 <HAL_RCC_ClockConfig+0x35c>)
 8007640:	5cd3      	ldrb	r3, [r2, r3]
 8007642:	f003 031f 	and.w	r3, r3, #31
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	fa22 f303 	lsr.w	r3, r2, r3
 800764c:	4a0a      	ldr	r2, [pc, #40]	@ (8007678 <HAL_RCC_ClockConfig+0x360>)
 800764e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007650:	4a0a      	ldr	r2, [pc, #40]	@ (800767c <HAL_RCC_ClockConfig+0x364>)
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007656:	4b0a      	ldr	r3, [pc, #40]	@ (8007680 <HAL_RCC_ClockConfig+0x368>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4618      	mov	r0, r3
 800765c:	f7fb f9fa 	bl	8002a54 <HAL_InitTick>
 8007660:	4603      	mov	r3, r0
 8007662:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007664:	7bfb      	ldrb	r3, [r7, #15]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	58024400 	.word	0x58024400
 8007674:	08016cc0 	.word	0x08016cc0
 8007678:	24000094 	.word	0x24000094
 800767c:	24000090 	.word	0x24000090
 8007680:	24000104 	.word	0x24000104

08007684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007684:	b480      	push	{r7}
 8007686:	b089      	sub	sp, #36	@ 0x24
 8007688:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800768a:	4bb3      	ldr	r3, [pc, #716]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007692:	2b18      	cmp	r3, #24
 8007694:	f200 8155 	bhi.w	8007942 <HAL_RCC_GetSysClockFreq+0x2be>
 8007698:	a201      	add	r2, pc, #4	@ (adr r2, 80076a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800769a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769e:	bf00      	nop
 80076a0:	08007705 	.word	0x08007705
 80076a4:	08007943 	.word	0x08007943
 80076a8:	08007943 	.word	0x08007943
 80076ac:	08007943 	.word	0x08007943
 80076b0:	08007943 	.word	0x08007943
 80076b4:	08007943 	.word	0x08007943
 80076b8:	08007943 	.word	0x08007943
 80076bc:	08007943 	.word	0x08007943
 80076c0:	0800772b 	.word	0x0800772b
 80076c4:	08007943 	.word	0x08007943
 80076c8:	08007943 	.word	0x08007943
 80076cc:	08007943 	.word	0x08007943
 80076d0:	08007943 	.word	0x08007943
 80076d4:	08007943 	.word	0x08007943
 80076d8:	08007943 	.word	0x08007943
 80076dc:	08007943 	.word	0x08007943
 80076e0:	08007731 	.word	0x08007731
 80076e4:	08007943 	.word	0x08007943
 80076e8:	08007943 	.word	0x08007943
 80076ec:	08007943 	.word	0x08007943
 80076f0:	08007943 	.word	0x08007943
 80076f4:	08007943 	.word	0x08007943
 80076f8:	08007943 	.word	0x08007943
 80076fc:	08007943 	.word	0x08007943
 8007700:	08007737 	.word	0x08007737
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007704:	4b94      	ldr	r3, [pc, #592]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0320 	and.w	r3, r3, #32
 800770c:	2b00      	cmp	r3, #0
 800770e:	d009      	beq.n	8007724 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007710:	4b91      	ldr	r3, [pc, #580]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	08db      	lsrs	r3, r3, #3
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	4a90      	ldr	r2, [pc, #576]	@ (800795c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800771c:	fa22 f303 	lsr.w	r3, r2, r3
 8007720:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007722:	e111      	b.n	8007948 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007724:	4b8d      	ldr	r3, [pc, #564]	@ (800795c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007726:	61bb      	str	r3, [r7, #24]
      break;
 8007728:	e10e      	b.n	8007948 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800772a:	4b8d      	ldr	r3, [pc, #564]	@ (8007960 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800772c:	61bb      	str	r3, [r7, #24]
      break;
 800772e:	e10b      	b.n	8007948 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007730:	4b8c      	ldr	r3, [pc, #560]	@ (8007964 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007732:	61bb      	str	r3, [r7, #24]
      break;
 8007734:	e108      	b.n	8007948 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007736:	4b88      	ldr	r3, [pc, #544]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773a:	f003 0303 	and.w	r3, r3, #3
 800773e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007740:	4b85      	ldr	r3, [pc, #532]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007744:	091b      	lsrs	r3, r3, #4
 8007746:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800774a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800774c:	4b82      	ldr	r3, [pc, #520]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800774e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007756:	4b80      	ldr	r3, [pc, #512]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800775a:	08db      	lsrs	r3, r3, #3
 800775c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	fb02 f303 	mul.w	r3, r2, r3
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 80e1 	beq.w	800793c <HAL_RCC_GetSysClockFreq+0x2b8>
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b02      	cmp	r3, #2
 800777e:	f000 8083 	beq.w	8007888 <HAL_RCC_GetSysClockFreq+0x204>
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2b02      	cmp	r3, #2
 8007786:	f200 80a1 	bhi.w	80078cc <HAL_RCC_GetSysClockFreq+0x248>
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <HAL_RCC_GetSysClockFreq+0x114>
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d056      	beq.n	8007844 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007796:	e099      	b.n	80078cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007798:	4b6f      	ldr	r3, [pc, #444]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0320 	and.w	r3, r3, #32
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d02d      	beq.n	8007800 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077a4:	4b6c      	ldr	r3, [pc, #432]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	08db      	lsrs	r3, r3, #3
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	4a6b      	ldr	r2, [pc, #428]	@ (800795c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077b0:	fa22 f303 	lsr.w	r3, r2, r3
 80077b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	ee07 3a90 	vmov	s15, r3
 80077bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	ee07 3a90 	vmov	s15, r3
 80077c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ce:	4b62      	ldr	r3, [pc, #392]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077de:	ed97 6a02 	vldr	s12, [r7, #8]
 80077e2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80077fe:	e087      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800796c <HAL_RCC_GetSysClockFreq+0x2e8>
 800780e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007812:	4b51      	ldr	r3, [pc, #324]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800781a:	ee07 3a90 	vmov	s15, r3
 800781e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007822:	ed97 6a02 	vldr	s12, [r7, #8]
 8007826:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007968 <HAL_RCC_GetSysClockFreq+0x2e4>
 800782a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800782e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800783a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800783e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007842:	e065      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800784e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007970 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007856:	4b40      	ldr	r3, [pc, #256]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800785a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007866:	ed97 6a02 	vldr	s12, [r7, #8]
 800786a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007968 <HAL_RCC_GetSysClockFreq+0x2e4>
 800786e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800787a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800787e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007882:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007886:	e043      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007892:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007974 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800789a:	4b2f      	ldr	r3, [pc, #188]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800789c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800789e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a2:	ee07 3a90 	vmov	s15, r3
 80078a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80078ae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80078ca:	e021      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007970 <HAL_RCC_GetSysClockFreq+0x2ec>
 80078da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078de:	4b1e      	ldr	r3, [pc, #120]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e6:	ee07 3a90 	vmov	s15, r3
 80078ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80078f2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800790e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007910:	4b11      	ldr	r3, [pc, #68]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007914:	0a5b      	lsrs	r3, r3, #9
 8007916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800791a:	3301      	adds	r3, #1
 800791c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	ee07 3a90 	vmov	s15, r3
 8007924:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007928:	edd7 6a07 	vldr	s13, [r7, #28]
 800792c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007934:	ee17 3a90 	vmov	r3, s15
 8007938:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800793a:	e005      	b.n	8007948 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	61bb      	str	r3, [r7, #24]
      break;
 8007940:	e002      	b.n	8007948 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007942:	4b07      	ldr	r3, [pc, #28]	@ (8007960 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007944:	61bb      	str	r3, [r7, #24]
      break;
 8007946:	bf00      	nop
  }

  return sysclockfreq;
 8007948:	69bb      	ldr	r3, [r7, #24]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3724      	adds	r7, #36	@ 0x24
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	58024400 	.word	0x58024400
 800795c:	03d09000 	.word	0x03d09000
 8007960:	003d0900 	.word	0x003d0900
 8007964:	007a1200 	.word	0x007a1200
 8007968:	46000000 	.word	0x46000000
 800796c:	4c742400 	.word	0x4c742400
 8007970:	4a742400 	.word	0x4a742400
 8007974:	4af42400 	.word	0x4af42400

08007978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800797e:	f7ff fe81 	bl	8007684 <HAL_RCC_GetSysClockFreq>
 8007982:	4602      	mov	r2, r0
 8007984:	4b10      	ldr	r3, [pc, #64]	@ (80079c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	0a1b      	lsrs	r3, r3, #8
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	490f      	ldr	r1, [pc, #60]	@ (80079cc <HAL_RCC_GetHCLKFreq+0x54>)
 8007990:	5ccb      	ldrb	r3, [r1, r3]
 8007992:	f003 031f 	and.w	r3, r3, #31
 8007996:	fa22 f303 	lsr.w	r3, r2, r3
 800799a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800799c:	4b0a      	ldr	r3, [pc, #40]	@ (80079c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	f003 030f 	and.w	r3, r3, #15
 80079a4:	4a09      	ldr	r2, [pc, #36]	@ (80079cc <HAL_RCC_GetHCLKFreq+0x54>)
 80079a6:	5cd3      	ldrb	r3, [r2, r3]
 80079a8:	f003 031f 	and.w	r3, r3, #31
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	fa22 f303 	lsr.w	r3, r2, r3
 80079b2:	4a07      	ldr	r2, [pc, #28]	@ (80079d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80079b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079b6:	4a07      	ldr	r2, [pc, #28]	@ (80079d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80079bc:	4b04      	ldr	r3, [pc, #16]	@ (80079d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80079be:	681b      	ldr	r3, [r3, #0]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	58024400 	.word	0x58024400
 80079cc:	08016cc0 	.word	0x08016cc0
 80079d0:	24000094 	.word	0x24000094
 80079d4:	24000090 	.word	0x24000090

080079d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80079dc:	f7ff ffcc 	bl	8007978 <HAL_RCC_GetHCLKFreq>
 80079e0:	4602      	mov	r2, r0
 80079e2:	4b06      	ldr	r3, [pc, #24]	@ (80079fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	091b      	lsrs	r3, r3, #4
 80079e8:	f003 0307 	and.w	r3, r3, #7
 80079ec:	4904      	ldr	r1, [pc, #16]	@ (8007a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079ee:	5ccb      	ldrb	r3, [r1, r3]
 80079f0:	f003 031f 	and.w	r3, r3, #31
 80079f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	58024400 	.word	0x58024400
 8007a00:	08016cc0 	.word	0x08016cc0

08007a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007a08:	f7ff ffb6 	bl	8007978 <HAL_RCC_GetHCLKFreq>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	4b06      	ldr	r3, [pc, #24]	@ (8007a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	0a1b      	lsrs	r3, r3, #8
 8007a14:	f003 0307 	and.w	r3, r3, #7
 8007a18:	4904      	ldr	r1, [pc, #16]	@ (8007a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a1a:	5ccb      	ldrb	r3, [r1, r3]
 8007a1c:	f003 031f 	and.w	r3, r3, #31
 8007a20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	58024400 	.word	0x58024400
 8007a2c:	08016cc0 	.word	0x08016cc0

08007a30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a34:	b0c6      	sub	sp, #280	@ 0x118
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a42:	2300      	movs	r3, #0
 8007a44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007a54:	2500      	movs	r5, #0
 8007a56:	ea54 0305 	orrs.w	r3, r4, r5
 8007a5a:	d049      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a66:	d02f      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007a68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a6c:	d828      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a72:	d01a      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007a74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a78:	d822      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007a7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a82:	d007      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a84:	e01c      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a86:	4bab      	ldr	r3, [pc, #684]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8a:	4aaa      	ldr	r2, [pc, #680]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007a92:	e01a      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a98:	3308      	adds	r3, #8
 8007a9a:	2102      	movs	r1, #2
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f001 fc25 	bl	80092ec <RCCEx_PLL2_Config>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007aa8:	e00f      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aae:	3328      	adds	r3, #40	@ 0x28
 8007ab0:	2102      	movs	r1, #2
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f001 fccc 	bl	8009450 <RCCEx_PLL3_Config>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007abe:	e004      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ac6:	e000      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10a      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007ad2:	4b98      	ldr	r3, [pc, #608]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ad6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ae0:	4a94      	ldr	r2, [pc, #592]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ae2:	430b      	orrs	r3, r1
 8007ae4:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ae6:	e003      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007afc:	f04f 0900 	mov.w	r9, #0
 8007b00:	ea58 0309 	orrs.w	r3, r8, r9
 8007b04:	d047      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b0c:	2b04      	cmp	r3, #4
 8007b0e:	d82a      	bhi.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007b10:	a201      	add	r2, pc, #4	@ (adr r2, 8007b18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b16:	bf00      	nop
 8007b18:	08007b2d 	.word	0x08007b2d
 8007b1c:	08007b3b 	.word	0x08007b3b
 8007b20:	08007b51 	.word	0x08007b51
 8007b24:	08007b6f 	.word	0x08007b6f
 8007b28:	08007b6f 	.word	0x08007b6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b2c:	4b81      	ldr	r3, [pc, #516]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b30:	4a80      	ldr	r2, [pc, #512]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b38:	e01a      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3e:	3308      	adds	r3, #8
 8007b40:	2100      	movs	r1, #0
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 fbd2 	bl	80092ec <RCCEx_PLL2_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b4e:	e00f      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b54:	3328      	adds	r3, #40	@ 0x28
 8007b56:	2100      	movs	r1, #0
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f001 fc79 	bl	8009450 <RCCEx_PLL3_Config>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b64:	e004      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b6c:	e000      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b78:	4b6e      	ldr	r3, [pc, #440]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b7c:	f023 0107 	bic.w	r1, r3, #7
 8007b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b86:	4a6b      	ldr	r2, [pc, #428]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007b88:	430b      	orrs	r3, r1
 8007b8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b8c:	e003      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007ba2:	f04f 0b00 	mov.w	fp, #0
 8007ba6:	ea5a 030b 	orrs.w	r3, sl, fp
 8007baa:	d05b      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007bb4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007bb8:	d03b      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007bba:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007bbe:	d834      	bhi.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007bc0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007bc4:	d037      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007bc6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007bca:	d82e      	bhi.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007bcc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007bd0:	d033      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007bd2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007bd6:	d828      	bhi.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007bd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bdc:	d01a      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007bde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007be2:	d822      	bhi.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007be8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bec:	d007      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007bee:	e01c      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bf0:	4b50      	ldr	r3, [pc, #320]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf4:	4a4f      	ldr	r2, [pc, #316]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bfc:	e01e      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c02:	3308      	adds	r3, #8
 8007c04:	2100      	movs	r1, #0
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 fb70 	bl	80092ec <RCCEx_PLL2_Config>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007c12:	e013      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c18:	3328      	adds	r3, #40	@ 0x28
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f001 fc17 	bl	8009450 <RCCEx_PLL3_Config>
 8007c22:	4603      	mov	r3, r0
 8007c24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c28:	e008      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c30:	e004      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007c32:	bf00      	nop
 8007c34:	e002      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007c36:	bf00      	nop
 8007c38:	e000      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10b      	bne.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007c44:	4b3b      	ldr	r3, [pc, #236]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c48:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c54:	4a37      	ldr	r2, [pc, #220]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007c56:	430b      	orrs	r3, r1
 8007c58:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c5a:	e003      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007c70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007c74:	2300      	movs	r3, #0
 8007c76:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007c7a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4313      	orrs	r3, r2
 8007c82:	d05d      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007c8c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007c90:	d03b      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007c92:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007c96:	d834      	bhi.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007c98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c9c:	d037      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007c9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ca2:	d82e      	bhi.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007ca4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ca8:	d033      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007caa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007cae:	d828      	bhi.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007cb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cb4:	d01a      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007cb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cba:	d822      	bhi.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cc4:	d007      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007cc6:	e01c      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ccc:	4a19      	ldr	r2, [pc, #100]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007cd4:	e01e      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cda:	3308      	adds	r3, #8
 8007cdc:	2100      	movs	r1, #0
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f001 fb04 	bl	80092ec <RCCEx_PLL2_Config>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007cea:	e013      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf0:	3328      	adds	r3, #40	@ 0x28
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f001 fbab 	bl	8009450 <RCCEx_PLL3_Config>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d00:	e008      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d08:	e004      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007d0a:	bf00      	nop
 8007d0c:	e002      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007d0e:	bf00      	nop
 8007d10:	e000      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10d      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007d1c:	4b05      	ldr	r3, [pc, #20]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d20:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007d2c:	4a01      	ldr	r2, [pc, #4]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d2e:	430b      	orrs	r3, r1
 8007d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d32:	e005      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007d34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d48:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007d4c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007d50:	2300      	movs	r3, #0
 8007d52:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d56:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	d03a      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d66:	2b30      	cmp	r3, #48	@ 0x30
 8007d68:	d01f      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007d6a:	2b30      	cmp	r3, #48	@ 0x30
 8007d6c:	d819      	bhi.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007d6e:	2b20      	cmp	r3, #32
 8007d70:	d00c      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007d72:	2b20      	cmp	r3, #32
 8007d74:	d815      	bhi.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d019      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007d7a:	2b10      	cmp	r3, #16
 8007d7c:	d111      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d7e:	4baa      	ldr	r3, [pc, #680]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d82:	4aa9      	ldr	r2, [pc, #676]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007d8a:	e011      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d90:	3308      	adds	r3, #8
 8007d92:	2102      	movs	r1, #2
 8007d94:	4618      	mov	r0, r3
 8007d96:	f001 faa9 	bl	80092ec <RCCEx_PLL2_Config>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007da0:	e006      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007da8:	e002      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007daa:	bf00      	nop
 8007dac:	e000      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007db0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007db8:	4b9b      	ldr	r3, [pc, #620]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dbc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dc6:	4a98      	ldr	r2, [pc, #608]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007dcc:	e003      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007de2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007de6:	2300      	movs	r3, #0
 8007de8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007dec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007df0:	460b      	mov	r3, r1
 8007df2:	4313      	orrs	r3, r2
 8007df4:	d051      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e00:	d035      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007e02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e06:	d82e      	bhi.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007e08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e0c:	d031      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007e0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e12:	d828      	bhi.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e18:	d01a      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e1e:	d822      	bhi.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007e24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e28:	d007      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007e2a:	e01c      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e2c:	4b7e      	ldr	r3, [pc, #504]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e30:	4a7d      	ldr	r2, [pc, #500]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e38:	e01c      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e3e:	3308      	adds	r3, #8
 8007e40:	2100      	movs	r1, #0
 8007e42:	4618      	mov	r0, r3
 8007e44:	f001 fa52 	bl	80092ec <RCCEx_PLL2_Config>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e4e:	e011      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e54:	3328      	adds	r3, #40	@ 0x28
 8007e56:	2100      	movs	r1, #0
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f001 faf9 	bl	8009450 <RCCEx_PLL3_Config>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e64:	e006      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e6c:	e002      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007e6e:	bf00      	nop
 8007e70:	e000      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10a      	bne.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e80:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e8a:	4a67      	ldr	r2, [pc, #412]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e90:	e003      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007ea6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007eb0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	d053      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ec4:	d033      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007ec6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007eca:	d82c      	bhi.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007ecc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ed0:	d02f      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007ed2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ed6:	d826      	bhi.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007ed8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007edc:	d02b      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007ede:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ee2:	d820      	bhi.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007ee4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ee8:	d012      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007eea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eee:	d81a      	bhi.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d022      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ef8:	d115      	bne.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007efe:	3308      	adds	r3, #8
 8007f00:	2101      	movs	r1, #1
 8007f02:	4618      	mov	r0, r3
 8007f04:	f001 f9f2 	bl	80092ec <RCCEx_PLL2_Config>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f0e:	e015      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f14:	3328      	adds	r3, #40	@ 0x28
 8007f16:	2101      	movs	r1, #1
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f001 fa99 	bl	8009450 <RCCEx_PLL3_Config>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f24:	e00a      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f2c:	e006      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007f2e:	bf00      	nop
 8007f30:	e004      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007f32:	bf00      	nop
 8007f34:	e002      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007f36:	bf00      	nop
 8007f38:	e000      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007f44:	4b38      	ldr	r3, [pc, #224]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f48:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f52:	4a35      	ldr	r2, [pc, #212]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007f54:	430b      	orrs	r3, r1
 8007f56:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f58:	e003      	b.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f72:	2300      	movs	r3, #0
 8007f74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007f78:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	d058      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f8e:	d033      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f94:	d82c      	bhi.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f9a:	d02f      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fa0:	d826      	bhi.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007fa2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fa6:	d02b      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007fa8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fac:	d820      	bhi.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007fae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fb2:	d012      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007fb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fb8:	d81a      	bhi.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d022      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007fbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fc2:	d115      	bne.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc8:	3308      	adds	r3, #8
 8007fca:	2101      	movs	r1, #1
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f001 f98d 	bl	80092ec <RCCEx_PLL2_Config>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007fd8:	e015      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fde:	3328      	adds	r3, #40	@ 0x28
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f001 fa34 	bl	8009450 <RCCEx_PLL3_Config>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007fee:	e00a      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ff6:	e006      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007ff8:	bf00      	nop
 8007ffa:	e004      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007ffc:	bf00      	nop
 8007ffe:	e002      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008000:	bf00      	nop
 8008002:	e000      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008006:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10e      	bne.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800800e:	4b06      	ldr	r3, [pc, #24]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008012:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800801a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800801e:	4a02      	ldr	r2, [pc, #8]	@ (8008028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008020:	430b      	orrs	r3, r1
 8008022:	6593      	str	r3, [r2, #88]	@ 0x58
 8008024:	e006      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008026:	bf00      	nop
 8008028:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800802c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008030:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008040:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008044:	2300      	movs	r3, #0
 8008046:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800804a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800804e:	460b      	mov	r3, r1
 8008050:	4313      	orrs	r3, r2
 8008052:	d037      	beq.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800805a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800805e:	d00e      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008060:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008064:	d816      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008066:	2b00      	cmp	r3, #0
 8008068:	d018      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800806a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800806e:	d111      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008070:	4bc4      	ldr	r3, [pc, #784]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008074:	4ac3      	ldr	r2, [pc, #780]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800807a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800807c:	e00f      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800807e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008082:	3308      	adds	r3, #8
 8008084:	2101      	movs	r1, #1
 8008086:	4618      	mov	r0, r3
 8008088:	f001 f930 	bl	80092ec <RCCEx_PLL2_Config>
 800808c:	4603      	mov	r3, r0
 800808e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008092:	e004      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800809a:	e000      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800809c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800809e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10a      	bne.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80080a6:	4bb7      	ldr	r3, [pc, #732]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080aa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80080ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080b4:	4ab3      	ldr	r2, [pc, #716]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80080b6:	430b      	orrs	r3, r1
 80080b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80080ba:	e003      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80080c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080cc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80080d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080d4:	2300      	movs	r3, #0
 80080d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80080da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80080de:	460b      	mov	r3, r1
 80080e0:	4313      	orrs	r3, r2
 80080e2:	d039      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80080e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d81c      	bhi.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80080ee:	a201      	add	r2, pc, #4	@ (adr r2, 80080f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80080f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f4:	08008131 	.word	0x08008131
 80080f8:	08008105 	.word	0x08008105
 80080fc:	08008113 	.word	0x08008113
 8008100:	08008131 	.word	0x08008131
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008104:	4b9f      	ldr	r3, [pc, #636]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008108:	4a9e      	ldr	r2, [pc, #632]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800810a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800810e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008110:	e00f      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008116:	3308      	adds	r3, #8
 8008118:	2102      	movs	r1, #2
 800811a:	4618      	mov	r0, r3
 800811c:	f001 f8e6 	bl	80092ec <RCCEx_PLL2_Config>
 8008120:	4603      	mov	r3, r0
 8008122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008126:	e004      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800812e:	e000      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008132:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800813a:	4b92      	ldr	r3, [pc, #584]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800813c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800813e:	f023 0103 	bic.w	r1, r3, #3
 8008142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008148:	4a8e      	ldr	r2, [pc, #568]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800814a:	430b      	orrs	r3, r1
 800814c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800814e:	e003      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008150:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008154:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008164:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008168:	2300      	movs	r3, #0
 800816a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800816e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008172:	460b      	mov	r3, r1
 8008174:	4313      	orrs	r3, r2
 8008176:	f000 8099 	beq.w	80082ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800817a:	4b83      	ldr	r3, [pc, #524]	@ (8008388 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a82      	ldr	r2, [pc, #520]	@ (8008388 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008184:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008186:	f7fa fcaf 	bl	8002ae8 <HAL_GetTick>
 800818a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800818e:	e00b      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008190:	f7fa fcaa 	bl	8002ae8 <HAL_GetTick>
 8008194:	4602      	mov	r2, r0
 8008196:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b64      	cmp	r3, #100	@ 0x64
 800819e:	d903      	bls.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80081a6:	e005      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081a8:	4b77      	ldr	r3, [pc, #476]	@ (8008388 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d0ed      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80081b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d173      	bne.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80081bc:	4b71      	ldr	r3, [pc, #452]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80081c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081c8:	4053      	eors	r3, r2
 80081ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d015      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081d2:	4b6c      	ldr	r3, [pc, #432]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081de:	4b69      	ldr	r3, [pc, #420]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081e2:	4a68      	ldr	r2, [pc, #416]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081ea:	4b66      	ldr	r3, [pc, #408]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ee:	4a65      	ldr	r2, [pc, #404]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80081f6:	4a63      	ldr	r2, [pc, #396]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80081f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80081fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008202:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800820a:	d118      	bne.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800820c:	f7fa fc6c 	bl	8002ae8 <HAL_GetTick>
 8008210:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008214:	e00d      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008216:	f7fa fc67 	bl	8002ae8 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008220:	1ad2      	subs	r2, r2, r3
 8008222:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008226:	429a      	cmp	r2, r3
 8008228:	d903      	bls.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8008230:	e005      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008232:	4b54      	ldr	r3, [pc, #336]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b00      	cmp	r3, #0
 800823c:	d0eb      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800823e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008242:	2b00      	cmp	r3, #0
 8008244:	d129      	bne.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800824e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008252:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008256:	d10e      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008258:	4b4a      	ldr	r3, [pc, #296]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008264:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008268:	091a      	lsrs	r2, r3, #4
 800826a:	4b48      	ldr	r3, [pc, #288]	@ (800838c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800826c:	4013      	ands	r3, r2
 800826e:	4a45      	ldr	r2, [pc, #276]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008270:	430b      	orrs	r3, r1
 8008272:	6113      	str	r3, [r2, #16]
 8008274:	e005      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008276:	4b43      	ldr	r3, [pc, #268]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	4a42      	ldr	r2, [pc, #264]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800827c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008280:	6113      	str	r3, [r2, #16]
 8008282:	4b40      	ldr	r3, [pc, #256]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008284:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800828a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800828e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008292:	4a3c      	ldr	r2, [pc, #240]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008294:	430b      	orrs	r3, r1
 8008296:	6713      	str	r3, [r2, #112]	@ 0x70
 8008298:	e008      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800829a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800829e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80082a2:	e003      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80082ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b4:	f002 0301 	and.w	r3, r2, #1
 80082b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082bc:	2300      	movs	r3, #0
 80082be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80082c6:	460b      	mov	r3, r1
 80082c8:	4313      	orrs	r3, r2
 80082ca:	f000 808f 	beq.w	80083ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80082ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082d4:	2b28      	cmp	r3, #40	@ 0x28
 80082d6:	d871      	bhi.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80082d8:	a201      	add	r2, pc, #4	@ (adr r2, 80082e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80082da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082de:	bf00      	nop
 80082e0:	080083c5 	.word	0x080083c5
 80082e4:	080083bd 	.word	0x080083bd
 80082e8:	080083bd 	.word	0x080083bd
 80082ec:	080083bd 	.word	0x080083bd
 80082f0:	080083bd 	.word	0x080083bd
 80082f4:	080083bd 	.word	0x080083bd
 80082f8:	080083bd 	.word	0x080083bd
 80082fc:	080083bd 	.word	0x080083bd
 8008300:	08008391 	.word	0x08008391
 8008304:	080083bd 	.word	0x080083bd
 8008308:	080083bd 	.word	0x080083bd
 800830c:	080083bd 	.word	0x080083bd
 8008310:	080083bd 	.word	0x080083bd
 8008314:	080083bd 	.word	0x080083bd
 8008318:	080083bd 	.word	0x080083bd
 800831c:	080083bd 	.word	0x080083bd
 8008320:	080083a7 	.word	0x080083a7
 8008324:	080083bd 	.word	0x080083bd
 8008328:	080083bd 	.word	0x080083bd
 800832c:	080083bd 	.word	0x080083bd
 8008330:	080083bd 	.word	0x080083bd
 8008334:	080083bd 	.word	0x080083bd
 8008338:	080083bd 	.word	0x080083bd
 800833c:	080083bd 	.word	0x080083bd
 8008340:	080083c5 	.word	0x080083c5
 8008344:	080083bd 	.word	0x080083bd
 8008348:	080083bd 	.word	0x080083bd
 800834c:	080083bd 	.word	0x080083bd
 8008350:	080083bd 	.word	0x080083bd
 8008354:	080083bd 	.word	0x080083bd
 8008358:	080083bd 	.word	0x080083bd
 800835c:	080083bd 	.word	0x080083bd
 8008360:	080083c5 	.word	0x080083c5
 8008364:	080083bd 	.word	0x080083bd
 8008368:	080083bd 	.word	0x080083bd
 800836c:	080083bd 	.word	0x080083bd
 8008370:	080083bd 	.word	0x080083bd
 8008374:	080083bd 	.word	0x080083bd
 8008378:	080083bd 	.word	0x080083bd
 800837c:	080083bd 	.word	0x080083bd
 8008380:	080083c5 	.word	0x080083c5
 8008384:	58024400 	.word	0x58024400
 8008388:	58024800 	.word	0x58024800
 800838c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008394:	3308      	adds	r3, #8
 8008396:	2101      	movs	r1, #1
 8008398:	4618      	mov	r0, r3
 800839a:	f000 ffa7 	bl	80092ec <RCCEx_PLL2_Config>
 800839e:	4603      	mov	r3, r0
 80083a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80083a4:	e00f      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083aa:	3328      	adds	r3, #40	@ 0x28
 80083ac:	2101      	movs	r1, #1
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 f84e 	bl	8009450 <RCCEx_PLL3_Config>
 80083b4:	4603      	mov	r3, r0
 80083b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80083ba:	e004      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80083c2:	e000      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80083c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10a      	bne.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80083ce:	4bbf      	ldr	r3, [pc, #764]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80083d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80083d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083dc:	4abb      	ldr	r2, [pc, #748]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80083de:	430b      	orrs	r3, r1
 80083e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80083e2:	e003      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80083ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f4:	f002 0302 	and.w	r3, r2, #2
 80083f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80083fc:	2300      	movs	r3, #0
 80083fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008402:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008406:	460b      	mov	r3, r1
 8008408:	4313      	orrs	r3, r2
 800840a:	d041      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800840c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008412:	2b05      	cmp	r3, #5
 8008414:	d824      	bhi.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008416:	a201      	add	r2, pc, #4	@ (adr r2, 800841c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841c:	08008469 	.word	0x08008469
 8008420:	08008435 	.word	0x08008435
 8008424:	0800844b 	.word	0x0800844b
 8008428:	08008469 	.word	0x08008469
 800842c:	08008469 	.word	0x08008469
 8008430:	08008469 	.word	0x08008469
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008438:	3308      	adds	r3, #8
 800843a:	2101      	movs	r1, #1
 800843c:	4618      	mov	r0, r3
 800843e:	f000 ff55 	bl	80092ec <RCCEx_PLL2_Config>
 8008442:	4603      	mov	r3, r0
 8008444:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008448:	e00f      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800844a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800844e:	3328      	adds	r3, #40	@ 0x28
 8008450:	2101      	movs	r1, #1
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fffc 	bl	8009450 <RCCEx_PLL3_Config>
 8008458:	4603      	mov	r3, r0
 800845a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800845e:	e004      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008466:	e000      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800846a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10a      	bne.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008472:	4b96      	ldr	r3, [pc, #600]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008476:	f023 0107 	bic.w	r1, r3, #7
 800847a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800847e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008480:	4a92      	ldr	r2, [pc, #584]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008482:	430b      	orrs	r3, r1
 8008484:	6553      	str	r3, [r2, #84]	@ 0x54
 8008486:	e003      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008488:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800848c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	f002 0304 	and.w	r3, r2, #4
 800849c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084a0:	2300      	movs	r3, #0
 80084a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084a6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80084aa:	460b      	mov	r3, r1
 80084ac:	4313      	orrs	r3, r2
 80084ae:	d044      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80084b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084b8:	2b05      	cmp	r3, #5
 80084ba:	d825      	bhi.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80084bc:	a201      	add	r2, pc, #4	@ (adr r2, 80084c4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80084be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c2:	bf00      	nop
 80084c4:	08008511 	.word	0x08008511
 80084c8:	080084dd 	.word	0x080084dd
 80084cc:	080084f3 	.word	0x080084f3
 80084d0:	08008511 	.word	0x08008511
 80084d4:	08008511 	.word	0x08008511
 80084d8:	08008511 	.word	0x08008511
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e0:	3308      	adds	r3, #8
 80084e2:	2101      	movs	r1, #1
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 ff01 	bl	80092ec <RCCEx_PLL2_Config>
 80084ea:	4603      	mov	r3, r0
 80084ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80084f0:	e00f      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084f6:	3328      	adds	r3, #40	@ 0x28
 80084f8:	2101      	movs	r1, #1
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 ffa8 	bl	8009450 <RCCEx_PLL3_Config>
 8008500:	4603      	mov	r3, r0
 8008502:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008506:	e004      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800850e:	e000      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008512:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10b      	bne.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800851a:	4b6c      	ldr	r3, [pc, #432]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800851c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800851e:	f023 0107 	bic.w	r1, r3, #7
 8008522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800852a:	4a68      	ldr	r2, [pc, #416]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800852c:	430b      	orrs	r3, r1
 800852e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008530:	e003      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008532:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008536:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800853a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800853e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008542:	f002 0320 	and.w	r3, r2, #32
 8008546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800854a:	2300      	movs	r3, #0
 800854c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008550:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008554:	460b      	mov	r3, r1
 8008556:	4313      	orrs	r3, r2
 8008558:	d055      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800855a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800855e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008562:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008566:	d033      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008568:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800856c:	d82c      	bhi.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800856e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008572:	d02f      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008578:	d826      	bhi.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800857a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800857e:	d02b      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008580:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008584:	d820      	bhi.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800858a:	d012      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800858c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008590:	d81a      	bhi.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008592:	2b00      	cmp	r3, #0
 8008594:	d022      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008596:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800859a:	d115      	bne.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800859c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a0:	3308      	adds	r3, #8
 80085a2:	2100      	movs	r1, #0
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 fea1 	bl	80092ec <RCCEx_PLL2_Config>
 80085aa:	4603      	mov	r3, r0
 80085ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80085b0:	e015      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b6:	3328      	adds	r3, #40	@ 0x28
 80085b8:	2102      	movs	r1, #2
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 ff48 	bl	8009450 <RCCEx_PLL3_Config>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80085c6:	e00a      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80085ce:	e006      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80085d0:	bf00      	nop
 80085d2:	e004      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80085d4:	bf00      	nop
 80085d6:	e002      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80085d8:	bf00      	nop
 80085da:	e000      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80085dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10b      	bne.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085e6:	4b39      	ldr	r3, [pc, #228]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80085e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80085ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085f6:	4a35      	ldr	r2, [pc, #212]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80085f8:	430b      	orrs	r3, r1
 80085fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80085fc:	e003      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008602:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800860a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008612:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008616:	2300      	movs	r3, #0
 8008618:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800861c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008620:	460b      	mov	r3, r1
 8008622:	4313      	orrs	r3, r2
 8008624:	d058      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800862a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800862e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008632:	d033      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008634:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008638:	d82c      	bhi.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800863a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800863e:	d02f      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008644:	d826      	bhi.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008646:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800864a:	d02b      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800864c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008650:	d820      	bhi.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008652:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008656:	d012      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800865c:	d81a      	bhi.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800865e:	2b00      	cmp	r3, #0
 8008660:	d022      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008666:	d115      	bne.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800866c:	3308      	adds	r3, #8
 800866e:	2100      	movs	r1, #0
 8008670:	4618      	mov	r0, r3
 8008672:	f000 fe3b 	bl	80092ec <RCCEx_PLL2_Config>
 8008676:	4603      	mov	r3, r0
 8008678:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800867c:	e015      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800867e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008682:	3328      	adds	r3, #40	@ 0x28
 8008684:	2102      	movs	r1, #2
 8008686:	4618      	mov	r0, r3
 8008688:	f000 fee2 	bl	8009450 <RCCEx_PLL3_Config>
 800868c:	4603      	mov	r3, r0
 800868e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008692:	e00a      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800869a:	e006      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800869c:	bf00      	nop
 800869e:	e004      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80086a0:	bf00      	nop
 80086a2:	e002      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80086a4:	bf00      	nop
 80086a6:	e000      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80086a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10e      	bne.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80086b2:	4b06      	ldr	r3, [pc, #24]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80086b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086b6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80086ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086c2:	4a02      	ldr	r2, [pc, #8]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80086c4:	430b      	orrs	r3, r1
 80086c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80086c8:	e006      	b.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80086ca:	bf00      	nop
 80086cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80086d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80086e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80086e8:	2300      	movs	r3, #0
 80086ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80086ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80086f2:	460b      	mov	r3, r1
 80086f4:	4313      	orrs	r3, r2
 80086f6:	d055      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80086f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008700:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008704:	d033      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008706:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800870a:	d82c      	bhi.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800870c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008710:	d02f      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008716:	d826      	bhi.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008718:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800871c:	d02b      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800871e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008722:	d820      	bhi.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008724:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008728:	d012      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800872a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800872e:	d81a      	bhi.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008730:	2b00      	cmp	r3, #0
 8008732:	d022      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008738:	d115      	bne.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800873a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800873e:	3308      	adds	r3, #8
 8008740:	2100      	movs	r1, #0
 8008742:	4618      	mov	r0, r3
 8008744:	f000 fdd2 	bl	80092ec <RCCEx_PLL2_Config>
 8008748:	4603      	mov	r3, r0
 800874a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800874e:	e015      	b.n	800877c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008754:	3328      	adds	r3, #40	@ 0x28
 8008756:	2102      	movs	r1, #2
 8008758:	4618      	mov	r0, r3
 800875a:	f000 fe79 	bl	8009450 <RCCEx_PLL3_Config>
 800875e:	4603      	mov	r3, r0
 8008760:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008764:	e00a      	b.n	800877c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800876c:	e006      	b.n	800877c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800876e:	bf00      	nop
 8008770:	e004      	b.n	800877c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008772:	bf00      	nop
 8008774:	e002      	b.n	800877c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008776:	bf00      	nop
 8008778:	e000      	b.n	800877c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800877a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800877c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10b      	bne.n	800879c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008784:	4ba0      	ldr	r3, [pc, #640]	@ (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008788:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800878c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008790:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008794:	4a9c      	ldr	r2, [pc, #624]	@ (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008796:	430b      	orrs	r3, r1
 8008798:	6593      	str	r3, [r2, #88]	@ 0x58
 800879a:	e003      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800879c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80087a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ac:	f002 0308 	and.w	r3, r2, #8
 80087b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087b4:	2300      	movs	r3, #0
 80087b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80087ba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80087be:	460b      	mov	r3, r1
 80087c0:	4313      	orrs	r3, r2
 80087c2:	d01e      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80087c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087d0:	d10c      	bne.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80087d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d6:	3328      	adds	r3, #40	@ 0x28
 80087d8:	2102      	movs	r1, #2
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fe38 	bl	8009450 <RCCEx_PLL3_Config>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80087ec:	4b86      	ldr	r3, [pc, #536]	@ (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80087ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087f0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087fc:	4a82      	ldr	r2, [pc, #520]	@ (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80087fe:	430b      	orrs	r3, r1
 8008800:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880a:	f002 0310 	and.w	r3, r2, #16
 800880e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008812:	2300      	movs	r3, #0
 8008814:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008818:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800881c:	460b      	mov	r3, r1
 800881e:	4313      	orrs	r3, r2
 8008820:	d01e      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800882a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800882e:	d10c      	bne.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008834:	3328      	adds	r3, #40	@ 0x28
 8008836:	2102      	movs	r1, #2
 8008838:	4618      	mov	r0, r3
 800883a:	f000 fe09 	bl	8009450 <RCCEx_PLL3_Config>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d002      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800884a:	4b6f      	ldr	r3, [pc, #444]	@ (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800884c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800884e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800885a:	4a6b      	ldr	r2, [pc, #428]	@ (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800885c:	430b      	orrs	r3, r1
 800885e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800886c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800886e:	2300      	movs	r3, #0
 8008870:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008872:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008876:	460b      	mov	r3, r1
 8008878:	4313      	orrs	r3, r2
 800887a:	d03e      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800887c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008880:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008888:	d022      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800888a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800888e:	d81b      	bhi.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008890:	2b00      	cmp	r3, #0
 8008892:	d003      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008898:	d00b      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800889a:	e015      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800889c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088a0:	3308      	adds	r3, #8
 80088a2:	2100      	movs	r1, #0
 80088a4:	4618      	mov	r0, r3
 80088a6:	f000 fd21 	bl	80092ec <RCCEx_PLL2_Config>
 80088aa:	4603      	mov	r3, r0
 80088ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80088b0:	e00f      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088b6:	3328      	adds	r3, #40	@ 0x28
 80088b8:	2102      	movs	r1, #2
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 fdc8 	bl	8009450 <RCCEx_PLL3_Config>
 80088c0:	4603      	mov	r3, r0
 80088c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80088c6:	e004      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80088ce:	e000      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80088d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10b      	bne.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088da:	4b4b      	ldr	r3, [pc, #300]	@ (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80088dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80088e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80088ea:	4a47      	ldr	r2, [pc, #284]	@ (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80088ec:	430b      	orrs	r3, r1
 80088ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80088f0:	e003      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80088fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008906:	673b      	str	r3, [r7, #112]	@ 0x70
 8008908:	2300      	movs	r3, #0
 800890a:	677b      	str	r3, [r7, #116]	@ 0x74
 800890c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008910:	460b      	mov	r3, r1
 8008912:	4313      	orrs	r3, r2
 8008914:	d03b      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800891a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800891e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008922:	d01f      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008924:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008928:	d818      	bhi.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800892a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800892e:	d003      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008930:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008934:	d007      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008936:	e011      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008938:	4b33      	ldr	r3, [pc, #204]	@ (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800893a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893c:	4a32      	ldr	r2, [pc, #200]	@ (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800893e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008944:	e00f      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800894a:	3328      	adds	r3, #40	@ 0x28
 800894c:	2101      	movs	r1, #1
 800894e:	4618      	mov	r0, r3
 8008950:	f000 fd7e 	bl	8009450 <RCCEx_PLL3_Config>
 8008954:	4603      	mov	r3, r0
 8008956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800895a:	e004      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008962:	e000      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008966:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10b      	bne.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800896e:	4b26      	ldr	r3, [pc, #152]	@ (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008972:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800897a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800897e:	4a22      	ldr	r2, [pc, #136]	@ (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008980:	430b      	orrs	r3, r1
 8008982:	6553      	str	r3, [r2, #84]	@ 0x54
 8008984:	e003      	b.n	800898e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008986:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800898a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800898e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800899a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800899c:	2300      	movs	r3, #0
 800899e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80089a0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80089a4:	460b      	mov	r3, r1
 80089a6:	4313      	orrs	r3, r2
 80089a8:	d034      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80089aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80089b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089b8:	d007      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80089ba:	e011      	b.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089bc:	4b12      	ldr	r3, [pc, #72]	@ (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80089be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c0:	4a11      	ldr	r2, [pc, #68]	@ (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80089c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80089c8:	e00e      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ce:	3308      	adds	r3, #8
 80089d0:	2102      	movs	r1, #2
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 fc8a 	bl	80092ec <RCCEx_PLL2_Config>
 80089d8:	4603      	mov	r3, r0
 80089da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80089de:	e003      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80089e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10d      	bne.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80089f0:	4b05      	ldr	r3, [pc, #20]	@ (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80089f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80089f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089fe:	4a02      	ldr	r2, [pc, #8]	@ (8008a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008a00:	430b      	orrs	r3, r1
 8008a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a04:	e006      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008a06:	bf00      	nop
 8008a08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008a20:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a22:	2300      	movs	r3, #0
 8008a24:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a26:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	d00c      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a34:	3328      	adds	r3, #40	@ 0x28
 8008a36:	2102      	movs	r1, #2
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 fd09 	bl	8009450 <RCCEx_PLL3_Config>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008a56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a58:	2300      	movs	r3, #0
 8008a5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a5c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008a60:	460b      	mov	r3, r1
 8008a62:	4313      	orrs	r3, r2
 8008a64:	d036      	beq.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a70:	d018      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008a72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a76:	d811      	bhi.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a7c:	d014      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008a7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a82:	d80b      	bhi.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d011      	beq.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008a88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a8c:	d106      	bne.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a8e:	4bb7      	ldr	r3, [pc, #732]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a92:	4ab6      	ldr	r2, [pc, #728]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008a9a:	e008      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008aa2:	e004      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008aa4:	bf00      	nop
 8008aa6:	e002      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008aa8:	bf00      	nop
 8008aaa:	e000      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10a      	bne.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ab6:	4bad      	ldr	r3, [pc, #692]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ac2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ac4:	4aa9      	ldr	r2, [pc, #676]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ac6:	430b      	orrs	r3, r1
 8008ac8:	6553      	str	r3, [r2, #84]	@ 0x54
 8008aca:	e003      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008acc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ad0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008adc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008ae0:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ae6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008aea:	460b      	mov	r3, r1
 8008aec:	4313      	orrs	r3, r2
 8008aee:	d009      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008af0:	4b9e      	ldr	r3, [pc, #632]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008af4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008afe:	4a9b      	ldr	r2, [pc, #620]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b00:	430b      	orrs	r3, r1
 8008b02:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008b10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b12:	2300      	movs	r3, #0
 8008b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b16:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	d009      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b20:	4b92      	ldr	r3, [pc, #584]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b24:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b2e:	4a8f      	ldr	r2, [pc, #572]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b30:	430b      	orrs	r3, r1
 8008b32:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008b40:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b42:	2300      	movs	r3, #0
 8008b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b46:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	d00e      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b50:	4b86      	ldr	r3, [pc, #536]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	4a85      	ldr	r2, [pc, #532]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b5a:	6113      	str	r3, [r2, #16]
 8008b5c:	4b83      	ldr	r3, [pc, #524]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b5e:	6919      	ldr	r1, [r3, #16]
 8008b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b68:	4a80      	ldr	r2, [pc, #512]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b6a:	430b      	orrs	r3, r1
 8008b6c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b76:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b80:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008b84:	460b      	mov	r3, r1
 8008b86:	4313      	orrs	r3, r2
 8008b88:	d009      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008b8a:	4b78      	ldr	r3, [pc, #480]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b8e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b98:	4a74      	ldr	r2, [pc, #464]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008b9a:	430b      	orrs	r3, r1
 8008b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008baa:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bac:	2300      	movs	r3, #0
 8008bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bb0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	d00a      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008bba:	4b6c      	ldr	r3, [pc, #432]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bbe:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bca:	4a68      	ldr	r2, [pc, #416]	@ (8008d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd8:	2100      	movs	r1, #0
 8008bda:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008be2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008be6:	460b      	mov	r3, r1
 8008be8:	4313      	orrs	r3, r2
 8008bea:	d011      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 fb79 	bl	80092ec <RCCEx_PLL2_Config>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008c00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d003      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	2100      	movs	r1, #0
 8008c1a:	6239      	str	r1, [r7, #32]
 8008c1c:	f003 0302 	and.w	r3, r3, #2
 8008c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c22:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008c26:	460b      	mov	r3, r1
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	d011      	beq.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c30:	3308      	adds	r3, #8
 8008c32:	2101      	movs	r1, #1
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 fb59 	bl	80092ec <RCCEx_PLL2_Config>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008c40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d003      	beq.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	2100      	movs	r1, #0
 8008c5a:	61b9      	str	r1, [r7, #24]
 8008c5c:	f003 0304 	and.w	r3, r3, #4
 8008c60:	61fb      	str	r3, [r7, #28]
 8008c62:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c66:	460b      	mov	r3, r1
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	d011      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c70:	3308      	adds	r3, #8
 8008c72:	2102      	movs	r1, #2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 fb39 	bl	80092ec <RCCEx_PLL2_Config>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008c80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d003      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c98:	2100      	movs	r1, #0
 8008c9a:	6139      	str	r1, [r7, #16]
 8008c9c:	f003 0308 	and.w	r3, r3, #8
 8008ca0:	617b      	str	r3, [r7, #20]
 8008ca2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	d011      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb0:	3328      	adds	r3, #40	@ 0x28
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 fbcb 	bl	8009450 <RCCEx_PLL3_Config>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008cc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d003      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ccc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	2100      	movs	r1, #0
 8008cda:	60b9      	str	r1, [r7, #8]
 8008cdc:	f003 0310 	and.w	r3, r3, #16
 8008ce0:	60fb      	str	r3, [r7, #12]
 8008ce2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	d011      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf0:	3328      	adds	r3, #40	@ 0x28
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 fbab 	bl	8009450 <RCCEx_PLL3_Config>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008d00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d003      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	2100      	movs	r1, #0
 8008d1a:	6039      	str	r1, [r7, #0]
 8008d1c:	f003 0320 	and.w	r3, r3, #32
 8008d20:	607b      	str	r3, [r7, #4]
 8008d22:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008d26:	460b      	mov	r3, r1
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	d011      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d30:	3328      	adds	r3, #40	@ 0x28
 8008d32:	2102      	movs	r1, #2
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 fb8b 	bl	8009450 <RCCEx_PLL3_Config>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008d40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008d50:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	e000      	b.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008d64:	46bd      	mov	sp, r7
 8008d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d6a:	bf00      	nop
 8008d6c:	58024400 	.word	0x58024400

08008d70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008d74:	f7fe fe00 	bl	8007978 <HAL_RCC_GetHCLKFreq>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	4b06      	ldr	r3, [pc, #24]	@ (8008d94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	091b      	lsrs	r3, r3, #4
 8008d80:	f003 0307 	and.w	r3, r3, #7
 8008d84:	4904      	ldr	r1, [pc, #16]	@ (8008d98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008d86:	5ccb      	ldrb	r3, [r1, r3]
 8008d88:	f003 031f 	and.w	r3, r3, #31
 8008d8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	58024400 	.word	0x58024400
 8008d98:	08016cc0 	.word	0x08016cc0

08008d9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b089      	sub	sp, #36	@ 0x24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008da4:	4ba1      	ldr	r3, [pc, #644]	@ (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da8:	f003 0303 	and.w	r3, r3, #3
 8008dac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008dae:	4b9f      	ldr	r3, [pc, #636]	@ (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db2:	0b1b      	lsrs	r3, r3, #12
 8008db4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008db8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008dba:	4b9c      	ldr	r3, [pc, #624]	@ (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dbe:	091b      	lsrs	r3, r3, #4
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008dc6:	4b99      	ldr	r3, [pc, #612]	@ (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dca:	08db      	lsrs	r3, r3, #3
 8008dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	fb02 f303 	mul.w	r3, r2, r3
 8008dd6:	ee07 3a90 	vmov	s15, r3
 8008dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 8111 	beq.w	800900c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	f000 8083 	beq.w	8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	f200 80a1 	bhi.w	8008f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d003      	beq.n	8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d056      	beq.n	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008e06:	e099      	b.n	8008f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e08:	4b88      	ldr	r3, [pc, #544]	@ (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 0320 	and.w	r3, r3, #32
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d02d      	beq.n	8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e14:	4b85      	ldr	r3, [pc, #532]	@ (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	08db      	lsrs	r3, r3, #3
 8008e1a:	f003 0303 	and.w	r3, r3, #3
 8008e1e:	4a84      	ldr	r2, [pc, #528]	@ (8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008e20:	fa22 f303 	lsr.w	r3, r2, r3
 8008e24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	ee07 3a90 	vmov	s15, r3
 8008e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	ee07 3a90 	vmov	s15, r3
 8008e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3e:	4b7b      	ldr	r3, [pc, #492]	@ (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e6e:	e087      	b.n	8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009038 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e82:	4b6a      	ldr	r3, [pc, #424]	@ (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8a:	ee07 3a90 	vmov	s15, r3
 8008e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e96:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008eb2:	e065      	b.n	8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800903c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ec6:	4b59      	ldr	r3, [pc, #356]	@ (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eda:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ef6:	e043      	b.n	8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	ee07 3a90 	vmov	s15, r3
 8008efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f02:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f0a:	4b48      	ldr	r3, [pc, #288]	@ (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f12:	ee07 3a90 	vmov	s15, r3
 8008f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f1e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f3a:	e021      	b.n	8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800903c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f4e:	4b37      	ldr	r3, [pc, #220]	@ (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f56:	ee07 3a90 	vmov	s15, r3
 8008f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008f80:	4b2a      	ldr	r3, [pc, #168]	@ (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f84:	0a5b      	lsrs	r3, r3, #9
 8008f86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f8a:	ee07 3a90 	vmov	s15, r3
 8008f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fa6:	ee17 2a90 	vmov	r2, s15
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008fae:	4b1f      	ldr	r3, [pc, #124]	@ (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb2:	0c1b      	lsrs	r3, r3, #16
 8008fb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fb8:	ee07 3a90 	vmov	s15, r3
 8008fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fd4:	ee17 2a90 	vmov	r2, s15
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008fdc:	4b13      	ldr	r3, [pc, #76]	@ (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe0:	0e1b      	lsrs	r3, r3, #24
 8008fe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009002:	ee17 2a90 	vmov	r2, s15
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800900a:	e008      	b.n	800901e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	609a      	str	r2, [r3, #8]
}
 800901e:	bf00      	nop
 8009020:	3724      	adds	r7, #36	@ 0x24
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	58024400 	.word	0x58024400
 8009030:	03d09000 	.word	0x03d09000
 8009034:	46000000 	.word	0x46000000
 8009038:	4c742400 	.word	0x4c742400
 800903c:	4a742400 	.word	0x4a742400
 8009040:	4af42400 	.word	0x4af42400

08009044 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009044:	b480      	push	{r7}
 8009046:	b089      	sub	sp, #36	@ 0x24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800904c:	4ba1      	ldr	r3, [pc, #644]	@ (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800904e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009050:	f003 0303 	and.w	r3, r3, #3
 8009054:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009056:	4b9f      	ldr	r3, [pc, #636]	@ (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800905a:	0d1b      	lsrs	r3, r3, #20
 800905c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009060:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009062:	4b9c      	ldr	r3, [pc, #624]	@ (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009066:	0a1b      	lsrs	r3, r3, #8
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800906e:	4b99      	ldr	r3, [pc, #612]	@ (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009072:	08db      	lsrs	r3, r3, #3
 8009074:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009078:	693a      	ldr	r2, [r7, #16]
 800907a:	fb02 f303 	mul.w	r3, r2, r3
 800907e:	ee07 3a90 	vmov	s15, r3
 8009082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009086:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 8111 	beq.w	80092b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	2b02      	cmp	r3, #2
 8009096:	f000 8083 	beq.w	80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	2b02      	cmp	r3, #2
 800909e:	f200 80a1 	bhi.w	80091e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d003      	beq.n	80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d056      	beq.n	800915c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80090ae:	e099      	b.n	80091e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090b0:	4b88      	ldr	r3, [pc, #544]	@ (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0320 	and.w	r3, r3, #32
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d02d      	beq.n	8009118 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090bc:	4b85      	ldr	r3, [pc, #532]	@ (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	08db      	lsrs	r3, r3, #3
 80090c2:	f003 0303 	and.w	r3, r3, #3
 80090c6:	4a84      	ldr	r2, [pc, #528]	@ (80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80090c8:	fa22 f303 	lsr.w	r3, r2, r3
 80090cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	ee07 3a90 	vmov	s15, r3
 80090d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	ee07 3a90 	vmov	s15, r3
 80090de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e6:	4b7b      	ldr	r3, [pc, #492]	@ (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ee:	ee07 3a90 	vmov	s15, r3
 80090f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80092dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800910a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800910e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009112:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009116:	e087      	b.n	8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	ee07 3a90 	vmov	s15, r3
 800911e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009122:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80092e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800912a:	4b6a      	ldr	r3, [pc, #424]	@ (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800912c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800912e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009132:	ee07 3a90 	vmov	s15, r3
 8009136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800913a:	ed97 6a03 	vldr	s12, [r7, #12]
 800913e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80092dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800914a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800914e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800915a:	e065      	b.n	8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	ee07 3a90 	vmov	s15, r3
 8009162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009166:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800916a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800916e:	4b59      	ldr	r3, [pc, #356]	@ (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009176:	ee07 3a90 	vmov	s15, r3
 800917a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800917e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009182:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80092dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800918a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800918e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800919e:	e043      	b.n	8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	ee07 3a90 	vmov	s15, r3
 80091a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80092e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80091ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091b2:	4b48      	ldr	r3, [pc, #288]	@ (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ba:	ee07 3a90 	vmov	s15, r3
 80091be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80092dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091e2:	e021      	b.n	8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80091f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091f6:	4b37      	ldr	r3, [pc, #220]	@ (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091fe:	ee07 3a90 	vmov	s15, r3
 8009202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009206:	ed97 6a03 	vldr	s12, [r7, #12]
 800920a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80092dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800920e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800921a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800921e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009226:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009228:	4b2a      	ldr	r3, [pc, #168]	@ (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800922a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800922c:	0a5b      	lsrs	r3, r3, #9
 800922e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009232:	ee07 3a90 	vmov	s15, r3
 8009236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800923a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800923e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009242:	edd7 6a07 	vldr	s13, [r7, #28]
 8009246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800924a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800924e:	ee17 2a90 	vmov	r2, s15
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009256:	4b1f      	ldr	r3, [pc, #124]	@ (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800925a:	0c1b      	lsrs	r3, r3, #16
 800925c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009260:	ee07 3a90 	vmov	s15, r3
 8009264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009268:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800926c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009270:	edd7 6a07 	vldr	s13, [r7, #28]
 8009274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800927c:	ee17 2a90 	vmov	r2, s15
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009284:	4b13      	ldr	r3, [pc, #76]	@ (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009288:	0e1b      	lsrs	r3, r3, #24
 800928a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800928e:	ee07 3a90 	vmov	s15, r3
 8009292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009296:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800929a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800929e:	edd7 6a07 	vldr	s13, [r7, #28]
 80092a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092aa:	ee17 2a90 	vmov	r2, s15
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80092b2:	e008      	b.n	80092c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	609a      	str	r2, [r3, #8]
}
 80092c6:	bf00      	nop
 80092c8:	3724      	adds	r7, #36	@ 0x24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	58024400 	.word	0x58024400
 80092d8:	03d09000 	.word	0x03d09000
 80092dc:	46000000 	.word	0x46000000
 80092e0:	4c742400 	.word	0x4c742400
 80092e4:	4a742400 	.word	0x4a742400
 80092e8:	4af42400 	.word	0x4af42400

080092ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80092fa:	4b53      	ldr	r3, [pc, #332]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 80092fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fe:	f003 0303 	and.w	r3, r3, #3
 8009302:	2b03      	cmp	r3, #3
 8009304:	d101      	bne.n	800930a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e099      	b.n	800943e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800930a:	4b4f      	ldr	r3, [pc, #316]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a4e      	ldr	r2, [pc, #312]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 8009310:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009316:	f7f9 fbe7 	bl	8002ae8 <HAL_GetTick>
 800931a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800931c:	e008      	b.n	8009330 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800931e:	f7f9 fbe3 	bl	8002ae8 <HAL_GetTick>
 8009322:	4602      	mov	r2, r0
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	2b02      	cmp	r3, #2
 800932a:	d901      	bls.n	8009330 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	e086      	b.n	800943e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009330:	4b45      	ldr	r3, [pc, #276]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1f0      	bne.n	800931e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800933c:	4b42      	ldr	r3, [pc, #264]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 800933e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009340:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	031b      	lsls	r3, r3, #12
 800934a:	493f      	ldr	r1, [pc, #252]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 800934c:	4313      	orrs	r3, r2
 800934e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	3b01      	subs	r3, #1
 8009356:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	3b01      	subs	r3, #1
 8009360:	025b      	lsls	r3, r3, #9
 8009362:	b29b      	uxth	r3, r3
 8009364:	431a      	orrs	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	3b01      	subs	r3, #1
 800936c:	041b      	lsls	r3, r3, #16
 800936e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009372:	431a      	orrs	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	3b01      	subs	r3, #1
 800937a:	061b      	lsls	r3, r3, #24
 800937c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009380:	4931      	ldr	r1, [pc, #196]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 8009382:	4313      	orrs	r3, r2
 8009384:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009386:	4b30      	ldr	r3, [pc, #192]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 8009388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800938a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	695b      	ldr	r3, [r3, #20]
 8009392:	492d      	ldr	r1, [pc, #180]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 8009394:	4313      	orrs	r3, r2
 8009396:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009398:	4b2b      	ldr	r3, [pc, #172]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 800939a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800939c:	f023 0220 	bic.w	r2, r3, #32
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	4928      	ldr	r1, [pc, #160]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 80093a6:	4313      	orrs	r3, r2
 80093a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80093aa:	4b27      	ldr	r3, [pc, #156]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 80093ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ae:	4a26      	ldr	r2, [pc, #152]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 80093b0:	f023 0310 	bic.w	r3, r3, #16
 80093b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80093b6:	4b24      	ldr	r3, [pc, #144]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 80093b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093ba:	4b24      	ldr	r3, [pc, #144]	@ (800944c <RCCEx_PLL2_Config+0x160>)
 80093bc:	4013      	ands	r3, r2
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	69d2      	ldr	r2, [r2, #28]
 80093c2:	00d2      	lsls	r2, r2, #3
 80093c4:	4920      	ldr	r1, [pc, #128]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 80093c6:	4313      	orrs	r3, r2
 80093c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80093ca:	4b1f      	ldr	r3, [pc, #124]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 80093cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ce:	4a1e      	ldr	r2, [pc, #120]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 80093d0:	f043 0310 	orr.w	r3, r3, #16
 80093d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d106      	bne.n	80093ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80093dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 80093de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e0:	4a19      	ldr	r2, [pc, #100]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 80093e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80093e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80093e8:	e00f      	b.n	800940a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d106      	bne.n	80093fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80093f0:	4b15      	ldr	r3, [pc, #84]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 80093f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f4:	4a14      	ldr	r2, [pc, #80]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 80093f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80093fc:	e005      	b.n	800940a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80093fe:	4b12      	ldr	r3, [pc, #72]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 8009400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009402:	4a11      	ldr	r2, [pc, #68]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 8009404:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009408:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800940a:	4b0f      	ldr	r3, [pc, #60]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a0e      	ldr	r2, [pc, #56]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 8009410:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009416:	f7f9 fb67 	bl	8002ae8 <HAL_GetTick>
 800941a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800941c:	e008      	b.n	8009430 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800941e:	f7f9 fb63 	bl	8002ae8 <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	2b02      	cmp	r3, #2
 800942a:	d901      	bls.n	8009430 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	e006      	b.n	800943e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009430:	4b05      	ldr	r3, [pc, #20]	@ (8009448 <RCCEx_PLL2_Config+0x15c>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009438:	2b00      	cmp	r3, #0
 800943a:	d0f0      	beq.n	800941e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800943c:	7bfb      	ldrb	r3, [r7, #15]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	58024400 	.word	0x58024400
 800944c:	ffff0007 	.word	0xffff0007

08009450 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800945e:	4b53      	ldr	r3, [pc, #332]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 8009460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009462:	f003 0303 	and.w	r3, r3, #3
 8009466:	2b03      	cmp	r3, #3
 8009468:	d101      	bne.n	800946e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e099      	b.n	80095a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800946e:	4b4f      	ldr	r3, [pc, #316]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a4e      	ldr	r2, [pc, #312]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 8009474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800947a:	f7f9 fb35 	bl	8002ae8 <HAL_GetTick>
 800947e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009480:	e008      	b.n	8009494 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009482:	f7f9 fb31 	bl	8002ae8 <HAL_GetTick>
 8009486:	4602      	mov	r2, r0
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	2b02      	cmp	r3, #2
 800948e:	d901      	bls.n	8009494 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009490:	2303      	movs	r3, #3
 8009492:	e086      	b.n	80095a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009494:	4b45      	ldr	r3, [pc, #276]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1f0      	bne.n	8009482 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80094a0:	4b42      	ldr	r3, [pc, #264]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 80094a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	051b      	lsls	r3, r3, #20
 80094ae:	493f      	ldr	r1, [pc, #252]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 80094b0:	4313      	orrs	r3, r2
 80094b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	3b01      	subs	r3, #1
 80094ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	3b01      	subs	r3, #1
 80094c4:	025b      	lsls	r3, r3, #9
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	041b      	lsls	r3, r3, #16
 80094d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80094d6:	431a      	orrs	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	3b01      	subs	r3, #1
 80094de:	061b      	lsls	r3, r3, #24
 80094e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80094e4:	4931      	ldr	r1, [pc, #196]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80094ea:	4b30      	ldr	r3, [pc, #192]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 80094ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	492d      	ldr	r1, [pc, #180]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80094fc:	4b2b      	ldr	r3, [pc, #172]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 80094fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009500:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	4928      	ldr	r1, [pc, #160]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 800950a:	4313      	orrs	r3, r2
 800950c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800950e:	4b27      	ldr	r3, [pc, #156]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 8009510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009512:	4a26      	ldr	r2, [pc, #152]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 8009514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009518:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800951a:	4b24      	ldr	r3, [pc, #144]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 800951c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800951e:	4b24      	ldr	r3, [pc, #144]	@ (80095b0 <RCCEx_PLL3_Config+0x160>)
 8009520:	4013      	ands	r3, r2
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	69d2      	ldr	r2, [r2, #28]
 8009526:	00d2      	lsls	r2, r2, #3
 8009528:	4920      	ldr	r1, [pc, #128]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 800952a:	4313      	orrs	r3, r2
 800952c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800952e:	4b1f      	ldr	r3, [pc, #124]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 8009530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009532:	4a1e      	ldr	r2, [pc, #120]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 8009534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009538:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d106      	bne.n	800954e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009540:	4b1a      	ldr	r3, [pc, #104]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 8009542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009544:	4a19      	ldr	r2, [pc, #100]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 8009546:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800954a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800954c:	e00f      	b.n	800956e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d106      	bne.n	8009562 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009554:	4b15      	ldr	r3, [pc, #84]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 8009556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009558:	4a14      	ldr	r2, [pc, #80]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 800955a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800955e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009560:	e005      	b.n	800956e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009562:	4b12      	ldr	r3, [pc, #72]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 8009564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009566:	4a11      	ldr	r2, [pc, #68]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 8009568:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800956c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800956e:	4b0f      	ldr	r3, [pc, #60]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a0e      	ldr	r2, [pc, #56]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 8009574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800957a:	f7f9 fab5 	bl	8002ae8 <HAL_GetTick>
 800957e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009580:	e008      	b.n	8009594 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009582:	f7f9 fab1 	bl	8002ae8 <HAL_GetTick>
 8009586:	4602      	mov	r2, r0
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	2b02      	cmp	r3, #2
 800958e:	d901      	bls.n	8009594 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009590:	2303      	movs	r3, #3
 8009592:	e006      	b.n	80095a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009594:	4b05      	ldr	r3, [pc, #20]	@ (80095ac <RCCEx_PLL3_Config+0x15c>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800959c:	2b00      	cmp	r3, #0
 800959e:	d0f0      	beq.n	8009582 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	58024400 	.word	0x58024400
 80095b0:	ffff0007 	.word	0xffff0007

080095b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d101      	bne.n	80095c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e10f      	b.n	80097e6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a87      	ldr	r2, [pc, #540]	@ (80097f0 <HAL_SPI_Init+0x23c>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d00f      	beq.n	80095f6 <HAL_SPI_Init+0x42>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a86      	ldr	r2, [pc, #536]	@ (80097f4 <HAL_SPI_Init+0x240>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d00a      	beq.n	80095f6 <HAL_SPI_Init+0x42>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a84      	ldr	r2, [pc, #528]	@ (80097f8 <HAL_SPI_Init+0x244>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d005      	beq.n	80095f6 <HAL_SPI_Init+0x42>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	2b0f      	cmp	r3, #15
 80095f0:	d901      	bls.n	80095f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e0f7      	b.n	80097e6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f001 f910 	bl	800a81c <SPI_GetPacketSize>
 80095fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a7b      	ldr	r2, [pc, #492]	@ (80097f0 <HAL_SPI_Init+0x23c>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d00c      	beq.n	8009622 <HAL_SPI_Init+0x6e>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a79      	ldr	r2, [pc, #484]	@ (80097f4 <HAL_SPI_Init+0x240>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d007      	beq.n	8009622 <HAL_SPI_Init+0x6e>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a78      	ldr	r2, [pc, #480]	@ (80097f8 <HAL_SPI_Init+0x244>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d002      	beq.n	8009622 <HAL_SPI_Init+0x6e>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2b08      	cmp	r3, #8
 8009620:	d811      	bhi.n	8009646 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009626:	4a72      	ldr	r2, [pc, #456]	@ (80097f0 <HAL_SPI_Init+0x23c>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d009      	beq.n	8009640 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a70      	ldr	r2, [pc, #448]	@ (80097f4 <HAL_SPI_Init+0x240>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d004      	beq.n	8009640 <HAL_SPI_Init+0x8c>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a6f      	ldr	r2, [pc, #444]	@ (80097f8 <HAL_SPI_Init+0x244>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d104      	bne.n	800964a <HAL_SPI_Init+0x96>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b10      	cmp	r3, #16
 8009644:	d901      	bls.n	800964a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e0cd      	b.n	80097e6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2b00      	cmp	r3, #0
 8009654:	d106      	bne.n	8009664 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7f8 fbde 	bl	8001e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2202      	movs	r2, #2
 8009668:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f022 0201 	bic.w	r2, r2, #1
 800967a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009686:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009690:	d119      	bne.n	80096c6 <HAL_SPI_Init+0x112>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800969a:	d103      	bne.n	80096a4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d008      	beq.n	80096b6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10c      	bne.n	80096c6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80096b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096b4:	d107      	bne.n	80096c6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80096c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00f      	beq.n	80096f2 <HAL_SPI_Init+0x13e>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	2b06      	cmp	r3, #6
 80096d8:	d90b      	bls.n	80096f2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	430a      	orrs	r2, r1
 80096ee:	601a      	str	r2, [r3, #0]
 80096f0:	e007      	b.n	8009702 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009700:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	69da      	ldr	r2, [r3, #28]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800970a:	431a      	orrs	r2, r3
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	431a      	orrs	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009714:	ea42 0103 	orr.w	r1, r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	68da      	ldr	r2, [r3, #12]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	430a      	orrs	r2, r1
 8009722:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800972c:	431a      	orrs	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009732:	431a      	orrs	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	431a      	orrs	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	431a      	orrs	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	431a      	orrs	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a1b      	ldr	r3, [r3, #32]
 800974a:	431a      	orrs	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	431a      	orrs	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009756:	431a      	orrs	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	431a      	orrs	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009762:	ea42 0103 	orr.w	r1, r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	430a      	orrs	r2, r1
 8009770:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d113      	bne.n	80097a2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800978c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80097a0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f022 0201 	bic.w	r2, r2, #1
 80097b0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00a      	beq.n	80097d4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	430a      	orrs	r2, r1
 80097d2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	40013000 	.word	0x40013000
 80097f4:	40003800 	.word	0x40003800
 80097f8:	40003c00 	.word	0x40003c00

080097fc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af02      	add	r7, sp, #8
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	603b      	str	r3, [r7, #0]
 8009808:	4613      	mov	r3, r2
 800980a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3320      	adds	r3, #32
 8009812:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009814:	f7f9 f968 	bl	8002ae8 <HAL_GetTick>
 8009818:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b01      	cmp	r3, #1
 8009824:	d001      	beq.n	800982a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009826:	2302      	movs	r3, #2
 8009828:	e1d1      	b.n	8009bce <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d002      	beq.n	8009836 <HAL_SPI_Transmit+0x3a>
 8009830:	88fb      	ldrh	r3, [r7, #6]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e1c9      	b.n	8009bce <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009840:	2b01      	cmp	r3, #1
 8009842:	d101      	bne.n	8009848 <HAL_SPI_Transmit+0x4c>
 8009844:	2302      	movs	r3, #2
 8009846:	e1c2      	b.n	8009bce <HAL_SPI_Transmit+0x3d2>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2203      	movs	r2, #3
 8009854:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	88fa      	ldrh	r2, [r7, #6]
 800986a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	88fa      	ldrh	r2, [r7, #6]
 8009872:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80098a0:	d108      	bne.n	80098b4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098b0:	601a      	str	r2, [r3, #0]
 80098b2:	e009      	b.n	80098c8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80098c6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	4b96      	ldr	r3, [pc, #600]	@ (8009b28 <HAL_SPI_Transmit+0x32c>)
 80098d0:	4013      	ands	r3, r2
 80098d2:	88f9      	ldrh	r1, [r7, #6]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	6812      	ldr	r2, [r2, #0]
 80098d8:	430b      	orrs	r3, r1
 80098da:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f042 0201 	orr.w	r2, r2, #1
 80098ea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80098f4:	d107      	bne.n	8009906 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009904:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	2b0f      	cmp	r3, #15
 800990c:	d947      	bls.n	800999e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800990e:	e03f      	b.n	8009990 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	f003 0302 	and.w	r3, r3, #2
 800991a:	2b02      	cmp	r3, #2
 800991c:	d114      	bne.n	8009948 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6812      	ldr	r2, [r2, #0]
 8009928:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800992e:	1d1a      	adds	r2, r3, #4
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800993a:	b29b      	uxth	r3, r3
 800993c:	3b01      	subs	r3, #1
 800993e:	b29a      	uxth	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009946:	e023      	b.n	8009990 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009948:	f7f9 f8ce 	bl	8002ae8 <HAL_GetTick>
 800994c:	4602      	mov	r2, r0
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	429a      	cmp	r2, r3
 8009956:	d803      	bhi.n	8009960 <HAL_SPI_Transmit+0x164>
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995e:	d102      	bne.n	8009966 <HAL_SPI_Transmit+0x16a>
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d114      	bne.n	8009990 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f000 fe8a 	bl	800a680 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009972:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	e11e      	b.n	8009bce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009996:	b29b      	uxth	r3, r3
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1b9      	bne.n	8009910 <HAL_SPI_Transmit+0x114>
 800999c:	e0f1      	b.n	8009b82 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	2b07      	cmp	r3, #7
 80099a4:	f240 80e6 	bls.w	8009b74 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80099a8:	e05d      	b.n	8009a66 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	695b      	ldr	r3, [r3, #20]
 80099b0:	f003 0302 	and.w	r3, r3, #2
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d132      	bne.n	8009a1e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80099be:	b29b      	uxth	r3, r3
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d918      	bls.n	80099f6 <HAL_SPI_Transmit+0x1fa>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d014      	beq.n	80099f6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6812      	ldr	r2, [r2, #0]
 80099d6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099dc:	1d1a      	adds	r2, r3, #4
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	3b02      	subs	r3, #2
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80099f4:	e037      	b.n	8009a66 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099fa:	881a      	ldrh	r2, [r3, #0]
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a04:	1c9a      	adds	r2, r3, #2
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	3b01      	subs	r3, #1
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009a1c:	e023      	b.n	8009a66 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a1e:	f7f9 f863 	bl	8002ae8 <HAL_GetTick>
 8009a22:	4602      	mov	r2, r0
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d803      	bhi.n	8009a36 <HAL_SPI_Transmit+0x23a>
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a34:	d102      	bne.n	8009a3c <HAL_SPI_Transmit+0x240>
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d114      	bne.n	8009a66 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f000 fe1f 	bl	800a680 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e0b3      	b.n	8009bce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d19b      	bne.n	80099aa <HAL_SPI_Transmit+0x1ae>
 8009a72:	e086      	b.n	8009b82 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	f003 0302 	and.w	r3, r3, #2
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	d154      	bne.n	8009b2c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	2b03      	cmp	r3, #3
 8009a8c:	d918      	bls.n	8009ac0 <HAL_SPI_Transmit+0x2c4>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a92:	2b40      	cmp	r3, #64	@ 0x40
 8009a94:	d914      	bls.n	8009ac0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	6812      	ldr	r2, [r2, #0]
 8009aa0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009aa6:	1d1a      	adds	r2, r3, #4
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	3b04      	subs	r3, #4
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009abe:	e059      	b.n	8009b74 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d917      	bls.n	8009afc <HAL_SPI_Transmit+0x300>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d013      	beq.n	8009afc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ad8:	881a      	ldrh	r2, [r3, #0]
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ae2:	1c9a      	adds	r2, r3, #2
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	3b02      	subs	r3, #2
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009afa:	e03b      	b.n	8009b74 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3320      	adds	r3, #32
 8009b06:	7812      	ldrb	r2, [r2, #0]
 8009b08:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b0e:	1c5a      	adds	r2, r3, #1
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009b26:	e025      	b.n	8009b74 <HAL_SPI_Transmit+0x378>
 8009b28:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b2c:	f7f8 ffdc 	bl	8002ae8 <HAL_GetTick>
 8009b30:	4602      	mov	r2, r0
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d803      	bhi.n	8009b44 <HAL_SPI_Transmit+0x348>
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b42:	d102      	bne.n	8009b4a <HAL_SPI_Transmit+0x34e>
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d114      	bne.n	8009b74 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f000 fd98 	bl	800a680 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e02c      	b.n	8009bce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f47f af79 	bne.w	8009a74 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2108      	movs	r1, #8
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f000 fe17 	bl	800a7c0 <SPI_WaitOnFlagUntilTimeout>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d007      	beq.n	8009ba8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b9e:	f043 0220 	orr.w	r2, r3, #32
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 fd69 	bl	800a680 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d001      	beq.n	8009bcc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e000      	b.n	8009bce <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
  }
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3718      	adds	r7, #24
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop

08009bd8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b08e      	sub	sp, #56	@ 0x38
 8009bdc:	af02      	add	r7, sp, #8
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
 8009be4:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3320      	adds	r3, #32
 8009bec:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3330      	adds	r3, #48	@ 0x30
 8009bf4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bfa:	095b      	lsrs	r3, r3, #5
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	3301      	adds	r3, #1
 8009c00:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c02:	f7f8 ff71 	bl	8002ae8 <HAL_GetTick>
 8009c06:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8009c08:	887b      	ldrh	r3, [r7, #2]
 8009c0a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8009c0c:	887b      	ldrh	r3, [r7, #2]
 8009c0e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d001      	beq.n	8009c20 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	e310      	b.n	800a242 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d005      	beq.n	8009c32 <HAL_SPI_TransmitReceive+0x5a>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <HAL_SPI_TransmitReceive+0x5a>
 8009c2c:	887b      	ldrh	r3, [r7, #2]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e305      	b.n	800a242 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d101      	bne.n	8009c44 <HAL_SPI_TransmitReceive+0x6c>
 8009c40:	2302      	movs	r3, #2
 8009c42:	e2fe      	b.n	800a242 <HAL_SPI_TransmitReceive+0x66a>
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2205      	movs	r2, #5
 8009c50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	887a      	ldrh	r2, [r7, #2]
 8009c66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	887a      	ldrh	r2, [r7, #2]
 8009c6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	887a      	ldrh	r2, [r7, #2]
 8009c7c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	887a      	ldrh	r2, [r7, #2]
 8009c84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68da      	ldr	r2, [r3, #12]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8009ca2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a70      	ldr	r2, [pc, #448]	@ (8009e6c <HAL_SPI_TransmitReceive+0x294>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d009      	beq.n	8009cc2 <HAL_SPI_TransmitReceive+0xea>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a6f      	ldr	r2, [pc, #444]	@ (8009e70 <HAL_SPI_TransmitReceive+0x298>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d004      	beq.n	8009cc2 <HAL_SPI_TransmitReceive+0xea>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a6d      	ldr	r2, [pc, #436]	@ (8009e74 <HAL_SPI_TransmitReceive+0x29c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d102      	bne.n	8009cc8 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8009cc2:	2310      	movs	r3, #16
 8009cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cc6:	e001      	b.n	8009ccc <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8009cc8:	2308      	movs	r3, #8
 8009cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	4b69      	ldr	r3, [pc, #420]	@ (8009e78 <HAL_SPI_TransmitReceive+0x2a0>)
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	8879      	ldrh	r1, [r7, #2]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	6812      	ldr	r2, [r2, #0]
 8009cdc:	430b      	orrs	r3, r1
 8009cde:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f042 0201 	orr.w	r2, r2, #1
 8009cee:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009cf8:	d107      	bne.n	8009d0a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	2b0f      	cmp	r3, #15
 8009d10:	f240 80a2 	bls.w	8009e58 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8009d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d16:	089b      	lsrs	r3, r3, #2
 8009d18:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009d1a:	e094      	b.n	8009e46 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	f003 0302 	and.w	r3, r3, #2
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d120      	bne.n	8009d6c <HAL_SPI_TransmitReceive+0x194>
 8009d2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d01d      	beq.n	8009d6c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009d30:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009d32:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d36:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d217      	bcs.n	8009d6c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6812      	ldr	r2, [r2, #0]
 8009d46:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d4c:	1d1a      	adds	r2, r3, #4
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d6a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	695b      	ldr	r3, [r3, #20]
 8009d72:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009d74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d065      	beq.n	8009e46 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	695b      	ldr	r3, [r3, #20]
 8009d80:	f003 0301 	and.w	r3, r3, #1
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d118      	bne.n	8009dba <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009d92:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d98:	1d1a      	adds	r2, r3, #4
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	3b01      	subs	r3, #1
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009db6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009db8:	e045      	b.n	8009e46 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009dba:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009dbc:	8bfb      	ldrh	r3, [r7, #30]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d21d      	bcs.n	8009dfe <HAL_SPI_TransmitReceive+0x226>
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d018      	beq.n	8009dfe <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009dd4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009dd6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ddc:	1d1a      	adds	r2, r3, #4
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	3b01      	subs	r3, #1
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009dfa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009dfc:	e023      	b.n	8009e46 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009dfe:	f7f8 fe73 	bl	8002ae8 <HAL_GetTick>
 8009e02:	4602      	mov	r2, r0
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d803      	bhi.n	8009e16 <HAL_SPI_TransmitReceive+0x23e>
 8009e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e14:	d102      	bne.n	8009e1c <HAL_SPI_TransmitReceive+0x244>
 8009e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d114      	bne.n	8009e46 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 fc2f 	bl	800a680 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2201      	movs	r2, #1
 8009e36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009e42:	2303      	movs	r3, #3
 8009e44:	e1fd      	b.n	800a242 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009e46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f47f af67 	bne.w	8009d1c <HAL_SPI_TransmitReceive+0x144>
 8009e4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f47f af63 	bne.w	8009d1c <HAL_SPI_TransmitReceive+0x144>
 8009e56:	e1ce      	b.n	800a1f6 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	2b07      	cmp	r3, #7
 8009e5e:	f240 81c2 	bls.w	800a1e6 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8009e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e64:	085b      	lsrs	r3, r3, #1
 8009e66:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009e68:	e0c9      	b.n	8009ffe <HAL_SPI_TransmitReceive+0x426>
 8009e6a:	bf00      	nop
 8009e6c:	40013000 	.word	0x40013000
 8009e70:	40003800 	.word	0x40003800
 8009e74:	40003c00 	.word	0x40003c00
 8009e78:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	f003 0302 	and.w	r3, r3, #2
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d11f      	bne.n	8009eca <HAL_SPI_TransmitReceive+0x2f2>
 8009e8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d01c      	beq.n	8009eca <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009e90:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009e92:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e96:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d216      	bcs.n	8009eca <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ea0:	881a      	ldrh	r2, [r3, #0]
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009eaa:	1c9a      	adds	r2, r3, #2
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ec8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	695b      	ldr	r3, [r3, #20]
 8009ed0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009ed2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f000 8092 	beq.w	8009ffe <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	f003 0301 	and.w	r3, r3, #1
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d118      	bne.n	8009f1a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009eec:	6a3a      	ldr	r2, [r7, #32]
 8009eee:	8812      	ldrh	r2, [r2, #0]
 8009ef0:	b292      	uxth	r2, r2
 8009ef2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ef8:	1c9a      	adds	r2, r3, #2
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	3b01      	subs	r3, #1
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f16:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009f18:	e071      	b.n	8009ffe <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009f1a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009f1c:	8bfb      	ldrh	r3, [r7, #30]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d228      	bcs.n	8009f74 <HAL_SPI_TransmitReceive+0x39c>
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d023      	beq.n	8009f74 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f30:	6a3a      	ldr	r2, [r7, #32]
 8009f32:	8812      	ldrh	r2, [r2, #0]
 8009f34:	b292      	uxth	r2, r2
 8009f36:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f3c:	1c9a      	adds	r2, r3, #2
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f46:	6a3a      	ldr	r2, [r7, #32]
 8009f48:	8812      	ldrh	r2, [r2, #0]
 8009f4a:	b292      	uxth	r2, r2
 8009f4c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f52:	1c9a      	adds	r2, r3, #2
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	3b02      	subs	r3, #2
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f70:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009f72:	e044      	b.n	8009ffe <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8009f74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d11d      	bne.n	8009fb6 <HAL_SPI_TransmitReceive+0x3de>
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d018      	beq.n	8009fb6 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f88:	6a3a      	ldr	r2, [r7, #32]
 8009f8a:	8812      	ldrh	r2, [r2, #0]
 8009f8c:	b292      	uxth	r2, r2
 8009f8e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f94:	1c9a      	adds	r2, r3, #2
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009fb2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009fb4:	e023      	b.n	8009ffe <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009fb6:	f7f8 fd97 	bl	8002ae8 <HAL_GetTick>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d803      	bhi.n	8009fce <HAL_SPI_TransmitReceive+0x3f6>
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fcc:	d102      	bne.n	8009fd4 <HAL_SPI_TransmitReceive+0x3fc>
 8009fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d114      	bne.n	8009ffe <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f000 fb53 	bl	800a680 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fe0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	e121      	b.n	800a242 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009ffe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a000:	2b00      	cmp	r3, #0
 800a002:	f47f af3b 	bne.w	8009e7c <HAL_SPI_TransmitReceive+0x2a4>
 800a006:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f47f af37 	bne.w	8009e7c <HAL_SPI_TransmitReceive+0x2a4>
 800a00e:	e0f2      	b.n	800a1f6 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d121      	bne.n	800a062 <HAL_SPI_TransmitReceive+0x48a>
 800a01e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a020:	2b00      	cmp	r3, #0
 800a022:	d01e      	beq.n	800a062 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a024:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a026:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a02a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d218      	bcs.n	800a062 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	3320      	adds	r3, #32
 800a03a:	7812      	ldrb	r2, [r2, #0]
 800a03c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a042:	1c5a      	adds	r2, r3, #1
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a04e:	b29b      	uxth	r3, r3
 800a050:	3b01      	subs	r3, #1
 800a052:	b29a      	uxth	r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a060:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a06a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f000 80ba 	beq.w	800a1e6 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	695b      	ldr	r3, [r3, #20]
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d11b      	bne.n	800a0b8 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a08c:	7812      	ldrb	r2, [r2, #0]
 800a08e:	b2d2      	uxtb	r2, r2
 800a090:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a096:	1c5a      	adds	r2, r3, #1
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0b4:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a0b6:	e096      	b.n	800a1e6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a0b8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a0ba:	8bfb      	ldrh	r3, [r7, #30]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d24a      	bcs.n	800a156 <HAL_SPI_TransmitReceive+0x57e>
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d045      	beq.n	800a156 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0d6:	7812      	ldrb	r2, [r2, #0]
 800a0d8:	b2d2      	uxtb	r2, r2
 800a0da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0e0:	1c5a      	adds	r2, r3, #1
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0f2:	7812      	ldrb	r2, [r2, #0]
 800a0f4:	b2d2      	uxtb	r2, r2
 800a0f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a10e:	7812      	ldrb	r2, [r2, #0]
 800a110:	b2d2      	uxtb	r2, r2
 800a112:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a118:	1c5a      	adds	r2, r3, #1
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a12a:	7812      	ldrb	r2, [r2, #0]
 800a12c:	b2d2      	uxtb	r2, r2
 800a12e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a134:	1c5a      	adds	r2, r3, #1
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a140:	b29b      	uxth	r3, r3
 800a142:	3b04      	subs	r3, #4
 800a144:	b29a      	uxth	r2, r3
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a152:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a154:	e047      	b.n	800a1e6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a156:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d820      	bhi.n	800a19e <HAL_SPI_TransmitReceive+0x5c6>
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d01b      	beq.n	800a19e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a172:	7812      	ldrb	r2, [r2, #0]
 800a174:	b2d2      	uxtb	r2, r2
 800a176:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a188:	b29b      	uxth	r3, r3
 800a18a:	3b01      	subs	r3, #1
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a19a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a19c:	e023      	b.n	800a1e6 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a19e:	f7f8 fca3 	bl	8002ae8 <HAL_GetTick>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d803      	bhi.n	800a1b6 <HAL_SPI_TransmitReceive+0x5de>
 800a1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b4:	d102      	bne.n	800a1bc <HAL_SPI_TransmitReceive+0x5e4>
 800a1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d114      	bne.n	800a1e6 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f000 fa5f 	bl	800a680 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	e02d      	b.n	800a242 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a1e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f47f af11 	bne.w	800a010 <HAL_SPI_TransmitReceive+0x438>
 800a1ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f47f af0d 	bne.w	800a010 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	2108      	movs	r1, #8
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 fadd 	bl	800a7c0 <SPI_WaitOnFlagUntilTimeout>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d007      	beq.n	800a21c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a212:	f043 0220 	orr.w	r2, r3, #32
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f000 fa2f 	bl	800a680 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2201      	movs	r2, #1
 800a226:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	e000      	b.n	800a242 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800a240:	2300      	movs	r3, #0
  }
}
 800a242:	4618      	mov	r0, r3
 800a244:	3730      	adds	r7, #48	@ 0x30
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop

0800a24c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08a      	sub	sp, #40	@ 0x28
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a264:	6a3a      	ldr	r2, [r7, #32]
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	4013      	ands	r3, r2
 800a26a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a274:	2300      	movs	r3, #0
 800a276:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a27e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	3330      	adds	r3, #48	@ 0x30
 800a286:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d010      	beq.n	800a2b4 <HAL_SPI_IRQHandler+0x68>
 800a292:	6a3b      	ldr	r3, [r7, #32]
 800a294:	f003 0308 	and.w	r3, r3, #8
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00b      	beq.n	800a2b4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	699a      	ldr	r2, [r3, #24]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a2aa:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f9c3 	bl	800a638 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a2b2:	e192      	b.n	800a5da <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d113      	bne.n	800a2e6 <HAL_SPI_IRQHandler+0x9a>
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	f003 0320 	and.w	r3, r3, #32
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10e      	bne.n	800a2e6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d009      	beq.n	800a2e6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	4798      	blx	r3
    handled = 1UL;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10f      	bne.n	800a310 <HAL_SPI_IRQHandler+0xc4>
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	f003 0301 	and.w	r3, r3, #1
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00a      	beq.n	800a310 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a300:	2b00      	cmp	r3, #0
 800a302:	d105      	bne.n	800a310 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	4798      	blx	r3
    handled = 1UL;
 800a30c:	2301      	movs	r3, #1
 800a30e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	f003 0320 	and.w	r3, r3, #32
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10f      	bne.n	800a33a <HAL_SPI_IRQHandler+0xee>
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	f003 0302 	and.w	r3, r3, #2
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00a      	beq.n	800a33a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d105      	bne.n	800a33a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	4798      	blx	r3
    handled = 1UL;
 800a336:	2301      	movs	r3, #1
 800a338:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f040 8147 	bne.w	800a5d0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	f003 0308 	and.w	r3, r3, #8
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 808b 	beq.w	800a464 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	699a      	ldr	r2, [r3, #24]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f042 0208 	orr.w	r2, r2, #8
 800a35c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	699a      	ldr	r2, [r3, #24]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f042 0210 	orr.w	r2, r2, #16
 800a36c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	699a      	ldr	r2, [r3, #24]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a37c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	691a      	ldr	r2, [r3, #16]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f022 0208 	bic.w	r2, r2, #8
 800a38c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d13d      	bne.n	800a418 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a39c:	e036      	b.n	800a40c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	2b0f      	cmp	r3, #15
 800a3a4:	d90b      	bls.n	800a3be <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3ae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a3b0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3b6:	1d1a      	adds	r2, r3, #4
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	665a      	str	r2, [r3, #100]	@ 0x64
 800a3bc:	e01d      	b.n	800a3fa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	2b07      	cmp	r3, #7
 800a3c4:	d90b      	bls.n	800a3de <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	8812      	ldrh	r2, [r2, #0]
 800a3ce:	b292      	uxth	r2, r2
 800a3d0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3d6:	1c9a      	adds	r2, r3, #2
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	665a      	str	r2, [r3, #100]	@ 0x64
 800a3dc:	e00d      	b.n	800a3fa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3ea:	7812      	ldrb	r2, [r2, #0]
 800a3ec:	b2d2      	uxtb	r2, r2
 800a3ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3f4:	1c5a      	adds	r2, r3, #1
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a400:	b29b      	uxth	r3, r3
 800a402:	3b01      	subs	r3, #1
 800a404:	b29a      	uxth	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a412:	b29b      	uxth	r3, r3
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1c2      	bne.n	800a39e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 f931 	bl	800a680 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d003      	beq.n	800a438 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 f8f7 	bl	800a624 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a436:	e0d0      	b.n	800a5da <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a438:	7cfb      	ldrb	r3, [r7, #19]
 800a43a:	2b05      	cmp	r3, #5
 800a43c:	d103      	bne.n	800a446 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f8e6 	bl	800a610 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a444:	e0c6      	b.n	800a5d4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a446:	7cfb      	ldrb	r3, [r7, #19]
 800a448:	2b04      	cmp	r3, #4
 800a44a:	d103      	bne.n	800a454 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 f8d5 	bl	800a5fc <HAL_SPI_RxCpltCallback>
    return;
 800a452:	e0bf      	b.n	800a5d4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a454:	7cfb      	ldrb	r3, [r7, #19]
 800a456:	2b03      	cmp	r3, #3
 800a458:	f040 80bc 	bne.w	800a5d4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 f8c3 	bl	800a5e8 <HAL_SPI_TxCpltCallback>
    return;
 800a462:	e0b7      	b.n	800a5d4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f000 80b5 	beq.w	800a5da <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00f      	beq.n	800a49a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a480:	f043 0204 	orr.w	r2, r3, #4
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	699a      	ldr	r2, [r3, #24]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a498:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00f      	beq.n	800a4c4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4aa:	f043 0201 	orr.w	r2, r3, #1
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	699a      	ldr	r2, [r3, #24]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4c2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00f      	beq.n	800a4ee <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4d4:	f043 0208 	orr.w	r2, r3, #8
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	699a      	ldr	r2, [r3, #24]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a4ec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	f003 0320 	and.w	r3, r3, #32
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00f      	beq.n	800a518 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	699a      	ldr	r2, [r3, #24]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f042 0220 	orr.w	r2, r2, #32
 800a516:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d05a      	beq.n	800a5d8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f022 0201 	bic.w	r2, r2, #1
 800a530:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6919      	ldr	r1, [r3, #16]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	4b28      	ldr	r3, [pc, #160]	@ (800a5e0 <HAL_SPI_IRQHandler+0x394>)
 800a53e:	400b      	ands	r3, r1
 800a540:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a548:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a54c:	d138      	bne.n	800a5c0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	689a      	ldr	r2, [r3, #8]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a55c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a562:	2b00      	cmp	r3, #0
 800a564:	d013      	beq.n	800a58e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a56a:	4a1e      	ldr	r2, [pc, #120]	@ (800a5e4 <HAL_SPI_IRQHandler+0x398>)
 800a56c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a572:	4618      	mov	r0, r3
 800a574:	f7f9 fa6e 	bl	8003a54 <HAL_DMA_Abort_IT>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d007      	beq.n	800a58e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a584:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a592:	2b00      	cmp	r3, #0
 800a594:	d020      	beq.n	800a5d8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a59a:	4a12      	ldr	r2, [pc, #72]	@ (800a5e4 <HAL_SPI_IRQHandler+0x398>)
 800a59c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7f9 fa56 	bl	8003a54 <HAL_DMA_Abort_IT>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d014      	beq.n	800a5d8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a5be:	e00b      	b.n	800a5d8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 f82b 	bl	800a624 <HAL_SPI_ErrorCallback>
    return;
 800a5ce:	e003      	b.n	800a5d8 <HAL_SPI_IRQHandler+0x38c>
    return;
 800a5d0:	bf00      	nop
 800a5d2:	e002      	b.n	800a5da <HAL_SPI_IRQHandler+0x38e>
    return;
 800a5d4:	bf00      	nop
 800a5d6:	e000      	b.n	800a5da <HAL_SPI_IRQHandler+0x38e>
    return;
 800a5d8:	bf00      	nop
  }
}
 800a5da:	3728      	adds	r7, #40	@ 0x28
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	fffffc94 	.word	0xfffffc94
 800a5e4:	0800a64d 	.word	0x0800a64d

0800a5e8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a604:	bf00      	nop
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a658:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2201      	movs	r2, #1
 800a66e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f7ff ffd6 	bl	800a624 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a678:	bf00      	nop
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	699a      	ldr	r2, [r3, #24]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f042 0208 	orr.w	r2, r2, #8
 800a69e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	699a      	ldr	r2, [r3, #24]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f042 0210 	orr.w	r2, r2, #16
 800a6ae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f022 0201 	bic.w	r2, r2, #1
 800a6be:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6919      	ldr	r1, [r3, #16]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	4b3c      	ldr	r3, [pc, #240]	@ (800a7bc <SPI_CloseTransfer+0x13c>)
 800a6cc:	400b      	ands	r3, r1
 800a6ce:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	689a      	ldr	r2, [r3, #8]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a6de:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	2b04      	cmp	r3, #4
 800a6ea:	d014      	beq.n	800a716 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f003 0320 	and.w	r3, r3, #32
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00f      	beq.n	800a716 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	699a      	ldr	r2, [r3, #24]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f042 0220 	orr.w	r2, r2, #32
 800a714:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b03      	cmp	r3, #3
 800a720:	d014      	beq.n	800a74c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d00f      	beq.n	800a74c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a732:	f043 0204 	orr.w	r2, r3, #4
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	699a      	ldr	r2, [r3, #24]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a74a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00f      	beq.n	800a776 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a75c:	f043 0201 	orr.w	r2, r3, #1
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	699a      	ldr	r2, [r3, #24]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a774:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00f      	beq.n	800a7a0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a786:	f043 0208 	orr.w	r2, r3, #8
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	699a      	ldr	r2, [r3, #24]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a79e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a7b0:	bf00      	nop
 800a7b2:	3714      	adds	r7, #20
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	fffffc90 	.word	0xfffffc90

0800a7c0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	603b      	str	r3, [r7, #0]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a7d0:	e010      	b.n	800a7f4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7d2:	f7f8 f989 	bl	8002ae8 <HAL_GetTick>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	683a      	ldr	r2, [r7, #0]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d803      	bhi.n	800a7ea <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e8:	d102      	bne.n	800a7f0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	e00f      	b.n	800a814 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	695a      	ldr	r2, [r3, #20]
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	429a      	cmp	r2, r3
 800a802:	bf0c      	ite	eq
 800a804:	2301      	moveq	r3, #1
 800a806:	2300      	movne	r3, #0
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	461a      	mov	r2, r3
 800a80c:	79fb      	ldrb	r3, [r7, #7]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d0df      	beq.n	800a7d2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a828:	095b      	lsrs	r3, r3, #5
 800a82a:	3301      	adds	r3, #1
 800a82c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	3301      	adds	r3, #1
 800a834:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	3307      	adds	r3, #7
 800a83a:	08db      	lsrs	r3, r3, #3
 800a83c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	fb02 f303 	mul.w	r3, r2, r3
}
 800a846:	4618      	mov	r0, r3
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr

0800a852 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b082      	sub	sp, #8
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d101      	bne.n	800a864 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	e049      	b.n	800a8f8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d106      	bne.n	800a87e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f7f7 fba3 	bl	8001fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2202      	movs	r2, #2
 800a882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	3304      	adds	r3, #4
 800a88e:	4619      	mov	r1, r3
 800a890:	4610      	mov	r0, r2
 800a892:	f000 f9ed 	bl	800ac70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	2b01      	cmp	r3, #1
 800a912:	d001      	beq.n	800a918 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	e056      	b.n	800a9c6 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2202      	movs	r2, #2
 800a91c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a2b      	ldr	r2, [pc, #172]	@ (800a9d4 <HAL_TIM_Base_Start+0xd4>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d02c      	beq.n	800a984 <HAL_TIM_Base_Start+0x84>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a932:	d027      	beq.n	800a984 <HAL_TIM_Base_Start+0x84>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a27      	ldr	r2, [pc, #156]	@ (800a9d8 <HAL_TIM_Base_Start+0xd8>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d022      	beq.n	800a984 <HAL_TIM_Base_Start+0x84>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a26      	ldr	r2, [pc, #152]	@ (800a9dc <HAL_TIM_Base_Start+0xdc>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d01d      	beq.n	800a984 <HAL_TIM_Base_Start+0x84>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a24      	ldr	r2, [pc, #144]	@ (800a9e0 <HAL_TIM_Base_Start+0xe0>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d018      	beq.n	800a984 <HAL_TIM_Base_Start+0x84>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a23      	ldr	r2, [pc, #140]	@ (800a9e4 <HAL_TIM_Base_Start+0xe4>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d013      	beq.n	800a984 <HAL_TIM_Base_Start+0x84>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a21      	ldr	r2, [pc, #132]	@ (800a9e8 <HAL_TIM_Base_Start+0xe8>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d00e      	beq.n	800a984 <HAL_TIM_Base_Start+0x84>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a20      	ldr	r2, [pc, #128]	@ (800a9ec <HAL_TIM_Base_Start+0xec>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d009      	beq.n	800a984 <HAL_TIM_Base_Start+0x84>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a1e      	ldr	r2, [pc, #120]	@ (800a9f0 <HAL_TIM_Base_Start+0xf0>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d004      	beq.n	800a984 <HAL_TIM_Base_Start+0x84>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a1d      	ldr	r2, [pc, #116]	@ (800a9f4 <HAL_TIM_Base_Start+0xf4>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d115      	bne.n	800a9b0 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	689a      	ldr	r2, [r3, #8]
 800a98a:	4b1b      	ldr	r3, [pc, #108]	@ (800a9f8 <HAL_TIM_Base_Start+0xf8>)
 800a98c:	4013      	ands	r3, r2
 800a98e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2b06      	cmp	r3, #6
 800a994:	d015      	beq.n	800a9c2 <HAL_TIM_Base_Start+0xc2>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a99c:	d011      	beq.n	800a9c2 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f042 0201 	orr.w	r2, r2, #1
 800a9ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9ae:	e008      	b.n	800a9c2 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f042 0201 	orr.w	r2, r2, #1
 800a9be:	601a      	str	r2, [r3, #0]
 800a9c0:	e000      	b.n	800a9c4 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	40010000 	.word	0x40010000
 800a9d8:	40000400 	.word	0x40000400
 800a9dc:	40000800 	.word	0x40000800
 800a9e0:	40000c00 	.word	0x40000c00
 800a9e4:	40010400 	.word	0x40010400
 800a9e8:	40001800 	.word	0x40001800
 800a9ec:	40014000 	.word	0x40014000
 800a9f0:	4000e000 	.word	0x4000e000
 800a9f4:	4000e400 	.word	0x4000e400
 800a9f8:	00010007 	.word	0x00010007

0800a9fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	f003 0302 	and.w	r3, r3, #2
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d020      	beq.n	800aa60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f003 0302 	and.w	r3, r3, #2
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d01b      	beq.n	800aa60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f06f 0202 	mvn.w	r2, #2
 800aa30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	f003 0303 	and.w	r3, r3, #3
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d003      	beq.n	800aa4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 f8f3 	bl	800ac32 <HAL_TIM_IC_CaptureCallback>
 800aa4c:	e005      	b.n	800aa5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f8e5 	bl	800ac1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 f8f6 	bl	800ac46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	f003 0304 	and.w	r3, r3, #4
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d020      	beq.n	800aaac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f003 0304 	and.w	r3, r3, #4
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d01b      	beq.n	800aaac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f06f 0204 	mvn.w	r2, #4
 800aa7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2202      	movs	r2, #2
 800aa82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	699b      	ldr	r3, [r3, #24]
 800aa8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d003      	beq.n	800aa9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f8cd 	bl	800ac32 <HAL_TIM_IC_CaptureCallback>
 800aa98:	e005      	b.n	800aaa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 f8bf 	bl	800ac1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 f8d0 	bl	800ac46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	f003 0308 	and.w	r3, r3, #8
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d020      	beq.n	800aaf8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f003 0308 	and.w	r3, r3, #8
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d01b      	beq.n	800aaf8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f06f 0208 	mvn.w	r2, #8
 800aac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2204      	movs	r2, #4
 800aace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	69db      	ldr	r3, [r3, #28]
 800aad6:	f003 0303 	and.w	r3, r3, #3
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d003      	beq.n	800aae6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 f8a7 	bl	800ac32 <HAL_TIM_IC_CaptureCallback>
 800aae4:	e005      	b.n	800aaf2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f899 	bl	800ac1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f8aa 	bl	800ac46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	f003 0310 	and.w	r3, r3, #16
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d020      	beq.n	800ab44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f003 0310 	and.w	r3, r3, #16
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d01b      	beq.n	800ab44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f06f 0210 	mvn.w	r2, #16
 800ab14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2208      	movs	r2, #8
 800ab1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	69db      	ldr	r3, [r3, #28]
 800ab22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d003      	beq.n	800ab32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f881 	bl	800ac32 <HAL_TIM_IC_CaptureCallback>
 800ab30:	e005      	b.n	800ab3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f873 	bl	800ac1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 f884 	bl	800ac46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	f003 0301 	and.w	r3, r3, #1
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00c      	beq.n	800ab68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f003 0301 	and.w	r3, r3, #1
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d007      	beq.n	800ab68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f06f 0201 	mvn.w	r2, #1
 800ab60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f851 	bl	800ac0a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d104      	bne.n	800ab7c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00c      	beq.n	800ab96 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d007      	beq.n	800ab96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ab8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 f929 	bl	800ade8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00c      	beq.n	800abba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d007      	beq.n	800abba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800abb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f921 	bl	800adfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00c      	beq.n	800abde <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d007      	beq.n	800abde <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800abd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 f83e 	bl	800ac5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	f003 0320 	and.w	r3, r3, #32
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00c      	beq.n	800ac02 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f003 0320 	and.w	r3, r3, #32
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d007      	beq.n	800ac02 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f06f 0220 	mvn.w	r2, #32
 800abfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 f8e9 	bl	800add4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac02:	bf00      	nop
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac0a:	b480      	push	{r7}
 800ac0c:	b083      	sub	sp, #12
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ac12:	bf00      	nop
 800ac14:	370c      	adds	r7, #12
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b083      	sub	sp, #12
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac26:	bf00      	nop
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac32:	b480      	push	{r7}
 800ac34:	b083      	sub	sp, #12
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac3a:	bf00      	nop
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac46:	b480      	push	{r7}
 800ac48:	b083      	sub	sp, #12
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac4e:	bf00      	nop
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b083      	sub	sp, #12
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac62:	bf00      	nop
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
	...

0800ac70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a4a      	ldr	r2, [pc, #296]	@ (800adac <TIM_Base_SetConfig+0x13c>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d013      	beq.n	800acb0 <TIM_Base_SetConfig+0x40>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac8e:	d00f      	beq.n	800acb0 <TIM_Base_SetConfig+0x40>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a47      	ldr	r2, [pc, #284]	@ (800adb0 <TIM_Base_SetConfig+0x140>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d00b      	beq.n	800acb0 <TIM_Base_SetConfig+0x40>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a46      	ldr	r2, [pc, #280]	@ (800adb4 <TIM_Base_SetConfig+0x144>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d007      	beq.n	800acb0 <TIM_Base_SetConfig+0x40>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a45      	ldr	r2, [pc, #276]	@ (800adb8 <TIM_Base_SetConfig+0x148>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d003      	beq.n	800acb0 <TIM_Base_SetConfig+0x40>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a44      	ldr	r2, [pc, #272]	@ (800adbc <TIM_Base_SetConfig+0x14c>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d108      	bne.n	800acc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a39      	ldr	r2, [pc, #228]	@ (800adac <TIM_Base_SetConfig+0x13c>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d027      	beq.n	800ad1a <TIM_Base_SetConfig+0xaa>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acd0:	d023      	beq.n	800ad1a <TIM_Base_SetConfig+0xaa>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a36      	ldr	r2, [pc, #216]	@ (800adb0 <TIM_Base_SetConfig+0x140>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d01f      	beq.n	800ad1a <TIM_Base_SetConfig+0xaa>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a35      	ldr	r2, [pc, #212]	@ (800adb4 <TIM_Base_SetConfig+0x144>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d01b      	beq.n	800ad1a <TIM_Base_SetConfig+0xaa>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a34      	ldr	r2, [pc, #208]	@ (800adb8 <TIM_Base_SetConfig+0x148>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d017      	beq.n	800ad1a <TIM_Base_SetConfig+0xaa>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a33      	ldr	r2, [pc, #204]	@ (800adbc <TIM_Base_SetConfig+0x14c>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d013      	beq.n	800ad1a <TIM_Base_SetConfig+0xaa>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a32      	ldr	r2, [pc, #200]	@ (800adc0 <TIM_Base_SetConfig+0x150>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d00f      	beq.n	800ad1a <TIM_Base_SetConfig+0xaa>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a31      	ldr	r2, [pc, #196]	@ (800adc4 <TIM_Base_SetConfig+0x154>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d00b      	beq.n	800ad1a <TIM_Base_SetConfig+0xaa>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a30      	ldr	r2, [pc, #192]	@ (800adc8 <TIM_Base_SetConfig+0x158>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d007      	beq.n	800ad1a <TIM_Base_SetConfig+0xaa>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a2f      	ldr	r2, [pc, #188]	@ (800adcc <TIM_Base_SetConfig+0x15c>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d003      	beq.n	800ad1a <TIM_Base_SetConfig+0xaa>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a2e      	ldr	r2, [pc, #184]	@ (800add0 <TIM_Base_SetConfig+0x160>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d108      	bne.n	800ad2c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	695b      	ldr	r3, [r3, #20]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	689a      	ldr	r2, [r3, #8]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a16      	ldr	r2, [pc, #88]	@ (800adac <TIM_Base_SetConfig+0x13c>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d00f      	beq.n	800ad78 <TIM_Base_SetConfig+0x108>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a18      	ldr	r2, [pc, #96]	@ (800adbc <TIM_Base_SetConfig+0x14c>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d00b      	beq.n	800ad78 <TIM_Base_SetConfig+0x108>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a17      	ldr	r2, [pc, #92]	@ (800adc0 <TIM_Base_SetConfig+0x150>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d007      	beq.n	800ad78 <TIM_Base_SetConfig+0x108>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a16      	ldr	r2, [pc, #88]	@ (800adc4 <TIM_Base_SetConfig+0x154>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d003      	beq.n	800ad78 <TIM_Base_SetConfig+0x108>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a15      	ldr	r2, [pc, #84]	@ (800adc8 <TIM_Base_SetConfig+0x158>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d103      	bne.n	800ad80 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	691a      	ldr	r2, [r3, #16]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	f003 0301 	and.w	r3, r3, #1
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d105      	bne.n	800ad9e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	f023 0201 	bic.w	r2, r3, #1
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	611a      	str	r2, [r3, #16]
  }
}
 800ad9e:	bf00      	nop
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	40010000 	.word	0x40010000
 800adb0:	40000400 	.word	0x40000400
 800adb4:	40000800 	.word	0x40000800
 800adb8:	40000c00 	.word	0x40000c00
 800adbc:	40010400 	.word	0x40010400
 800adc0:	40014000 	.word	0x40014000
 800adc4:	40014400 	.word	0x40014400
 800adc8:	40014800 	.word	0x40014800
 800adcc:	4000e000 	.word	0x4000e000
 800add0:	4000e400 	.word	0x4000e400

0800add4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800addc:	bf00      	nop
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e042      	b.n	800aea8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d106      	bne.n	800ae3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7f7 f8ed 	bl	8002014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2224      	movs	r2, #36	@ 0x24
 800ae3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f022 0201 	bic.w	r2, r2, #1
 800ae50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d002      	beq.n	800ae60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f001 fbc2 	bl	800c5e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fd53 	bl	800b90c <UART_SetConfig>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d101      	bne.n	800ae70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e01b      	b.n	800aea8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	685a      	ldr	r2, [r3, #4]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ae7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	689a      	ldr	r2, [r3, #8]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ae8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f042 0201 	orr.w	r2, r2, #1
 800ae9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f001 fc41 	bl	800c728 <UART_CheckIdleState>
 800aea6:	4603      	mov	r3, r0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b08a      	sub	sp, #40	@ 0x28
 800aeb4:	af02      	add	r7, sp, #8
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	603b      	str	r3, [r7, #0]
 800aebc:	4613      	mov	r3, r2
 800aebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aec6:	2b20      	cmp	r3, #32
 800aec8:	d17b      	bne.n	800afc2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d002      	beq.n	800aed6 <HAL_UART_Transmit+0x26>
 800aed0:	88fb      	ldrh	r3, [r7, #6]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e074      	b.n	800afc4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2221      	movs	r2, #33	@ 0x21
 800aee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aeea:	f7f7 fdfd 	bl	8002ae8 <HAL_GetTick>
 800aeee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	88fa      	ldrh	r2, [r7, #6]
 800aef4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	88fa      	ldrh	r2, [r7, #6]
 800aefc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af08:	d108      	bne.n	800af1c <HAL_UART_Transmit+0x6c>
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d104      	bne.n	800af1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800af12:	2300      	movs	r3, #0
 800af14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	61bb      	str	r3, [r7, #24]
 800af1a:	e003      	b.n	800af24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af20:	2300      	movs	r3, #0
 800af22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800af24:	e030      	b.n	800af88 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	9300      	str	r3, [sp, #0]
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	2200      	movs	r2, #0
 800af2e:	2180      	movs	r1, #128	@ 0x80
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f001 fca3 	bl	800c87c <UART_WaitOnFlagUntilTimeout>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d005      	beq.n	800af48 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2220      	movs	r2, #32
 800af40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800af44:	2303      	movs	r3, #3
 800af46:	e03d      	b.n	800afc4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10b      	bne.n	800af66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	881b      	ldrh	r3, [r3, #0]
 800af52:	461a      	mov	r2, r3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	3302      	adds	r3, #2
 800af62:	61bb      	str	r3, [r7, #24]
 800af64:	e007      	b.n	800af76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	781a      	ldrb	r2, [r3, #0]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	3301      	adds	r3, #1
 800af74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	3b01      	subs	r3, #1
 800af80:	b29a      	uxth	r2, r3
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800af8e:	b29b      	uxth	r3, r3
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1c8      	bne.n	800af26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	2200      	movs	r2, #0
 800af9c:	2140      	movs	r1, #64	@ 0x40
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f001 fc6c 	bl	800c87c <UART_WaitOnFlagUntilTimeout>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d005      	beq.n	800afb6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2220      	movs	r2, #32
 800afae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e006      	b.n	800afc4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2220      	movs	r2, #32
 800afba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	e000      	b.n	800afc4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800afc2:	2302      	movs	r3, #2
  }
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3720      	adds	r7, #32
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b08a      	sub	sp, #40	@ 0x28
 800afd0:	af02      	add	r7, sp, #8
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	603b      	str	r3, [r7, #0]
 800afd8:	4613      	mov	r3, r2
 800afda:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afe2:	2b20      	cmp	r3, #32
 800afe4:	f040 80b5 	bne.w	800b152 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d002      	beq.n	800aff4 <HAL_UART_Receive+0x28>
 800afee:	88fb      	ldrh	r3, [r7, #6]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d101      	bne.n	800aff8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	e0ad      	b.n	800b154 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2200      	movs	r2, #0
 800affc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2222      	movs	r2, #34	@ 0x22
 800b004:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b00e:	f7f7 fd6b 	bl	8002ae8 <HAL_GetTick>
 800b012:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	88fa      	ldrh	r2, [r7, #6]
 800b018:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	88fa      	ldrh	r2, [r7, #6]
 800b020:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b02c:	d10e      	bne.n	800b04c <HAL_UART_Receive+0x80>
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d105      	bne.n	800b042 <HAL_UART_Receive+0x76>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b03c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b040:	e02d      	b.n	800b09e <HAL_UART_Receive+0xd2>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	22ff      	movs	r2, #255	@ 0xff
 800b046:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b04a:	e028      	b.n	800b09e <HAL_UART_Receive+0xd2>
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10d      	bne.n	800b070 <HAL_UART_Receive+0xa4>
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d104      	bne.n	800b066 <HAL_UART_Receive+0x9a>
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	22ff      	movs	r2, #255	@ 0xff
 800b060:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b064:	e01b      	b.n	800b09e <HAL_UART_Receive+0xd2>
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	227f      	movs	r2, #127	@ 0x7f
 800b06a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b06e:	e016      	b.n	800b09e <HAL_UART_Receive+0xd2>
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b078:	d10d      	bne.n	800b096 <HAL_UART_Receive+0xca>
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d104      	bne.n	800b08c <HAL_UART_Receive+0xc0>
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	227f      	movs	r2, #127	@ 0x7f
 800b086:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b08a:	e008      	b.n	800b09e <HAL_UART_Receive+0xd2>
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	223f      	movs	r2, #63	@ 0x3f
 800b090:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b094:	e003      	b.n	800b09e <HAL_UART_Receive+0xd2>
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2200      	movs	r2, #0
 800b09a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b0a4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0ae:	d108      	bne.n	800b0c2 <HAL_UART_Receive+0xf6>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d104      	bne.n	800b0c2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	61bb      	str	r3, [r7, #24]
 800b0c0:	e003      	b.n	800b0ca <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b0ca:	e036      	b.n	800b13a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	2120      	movs	r1, #32
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f001 fbd0 	bl	800c87c <UART_WaitOnFlagUntilTimeout>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d005      	beq.n	800b0ee <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2220      	movs	r2, #32
 800b0e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800b0ea:	2303      	movs	r3, #3
 800b0ec:	e032      	b.n	800b154 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800b0ee:	69fb      	ldr	r3, [r7, #28]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d10c      	bne.n	800b10e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	8a7b      	ldrh	r3, [r7, #18]
 800b0fe:	4013      	ands	r3, r2
 800b100:	b29a      	uxth	r2, r3
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	3302      	adds	r3, #2
 800b10a:	61bb      	str	r3, [r7, #24]
 800b10c:	e00c      	b.n	800b128 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b114:	b2da      	uxtb	r2, r3
 800b116:	8a7b      	ldrh	r3, [r7, #18]
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	4013      	ands	r3, r2
 800b11c:	b2da      	uxtb	r2, r3
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	3301      	adds	r3, #1
 800b126:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b12e:	b29b      	uxth	r3, r3
 800b130:	3b01      	subs	r3, #1
 800b132:	b29a      	uxth	r2, r3
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b140:	b29b      	uxth	r3, r3
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1c2      	bne.n	800b0cc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2220      	movs	r2, #32
 800b14a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800b14e:	2300      	movs	r3, #0
 800b150:	e000      	b.n	800b154 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800b152:	2302      	movs	r3, #2
  }
}
 800b154:	4618      	mov	r0, r3
 800b156:	3720      	adds	r7, #32
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b0ba      	sub	sp, #232	@ 0xe8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	69db      	ldr	r3, [r3, #28]
 800b16a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b182:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b186:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b18a:	4013      	ands	r3, r2
 800b18c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b194:	2b00      	cmp	r3, #0
 800b196:	d11b      	bne.n	800b1d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b19c:	f003 0320 	and.w	r3, r3, #32
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d015      	beq.n	800b1d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b1a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1a8:	f003 0320 	and.w	r3, r3, #32
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d105      	bne.n	800b1bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b1b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d009      	beq.n	800b1d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 8377 	beq.w	800b8b4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	4798      	blx	r3
      }
      return;
 800b1ce:	e371      	b.n	800b8b4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b1d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f000 8123 	beq.w	800b420 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b1da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b1de:	4b8d      	ldr	r3, [pc, #564]	@ (800b414 <HAL_UART_IRQHandler+0x2b8>)
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d106      	bne.n	800b1f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b1e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b1ea:	4b8b      	ldr	r3, [pc, #556]	@ (800b418 <HAL_UART_IRQHandler+0x2bc>)
 800b1ec:	4013      	ands	r3, r2
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	f000 8116 	beq.w	800b420 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b1f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1f8:	f003 0301 	and.w	r3, r3, #1
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d011      	beq.n	800b224 <HAL_UART_IRQHandler+0xc8>
 800b200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00b      	beq.n	800b224 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2201      	movs	r2, #1
 800b212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b21a:	f043 0201 	orr.w	r2, r3, #1
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b228:	f003 0302 	and.w	r3, r3, #2
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d011      	beq.n	800b254 <HAL_UART_IRQHandler+0xf8>
 800b230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b234:	f003 0301 	and.w	r3, r3, #1
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00b      	beq.n	800b254 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2202      	movs	r2, #2
 800b242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b24a:	f043 0204 	orr.w	r2, r3, #4
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b258:	f003 0304 	and.w	r3, r3, #4
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d011      	beq.n	800b284 <HAL_UART_IRQHandler+0x128>
 800b260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b264:	f003 0301 	and.w	r3, r3, #1
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00b      	beq.n	800b284 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2204      	movs	r2, #4
 800b272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b27a:	f043 0202 	orr.w	r2, r3, #2
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b288:	f003 0308 	and.w	r3, r3, #8
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d017      	beq.n	800b2c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b294:	f003 0320 	and.w	r3, r3, #32
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d105      	bne.n	800b2a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b29c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b2a0:	4b5c      	ldr	r3, [pc, #368]	@ (800b414 <HAL_UART_IRQHandler+0x2b8>)
 800b2a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00b      	beq.n	800b2c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2208      	movs	r2, #8
 800b2ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2b6:	f043 0208 	orr.w	r2, r3, #8
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b2c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d012      	beq.n	800b2f2 <HAL_UART_IRQHandler+0x196>
 800b2cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00c      	beq.n	800b2f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b2e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2e8:	f043 0220 	orr.w	r2, r3, #32
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 82dd 	beq.w	800b8b8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b2fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b302:	f003 0320 	and.w	r3, r3, #32
 800b306:	2b00      	cmp	r3, #0
 800b308:	d013      	beq.n	800b332 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b30a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b30e:	f003 0320 	and.w	r3, r3, #32
 800b312:	2b00      	cmp	r3, #0
 800b314:	d105      	bne.n	800b322 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b31a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d007      	beq.n	800b332 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b326:	2b00      	cmp	r3, #0
 800b328:	d003      	beq.n	800b332 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b338:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b346:	2b40      	cmp	r3, #64	@ 0x40
 800b348:	d005      	beq.n	800b356 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b34a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b34e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b352:	2b00      	cmp	r3, #0
 800b354:	d054      	beq.n	800b400 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f001 fc20 	bl	800cb9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b366:	2b40      	cmp	r3, #64	@ 0x40
 800b368:	d146      	bne.n	800b3f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3308      	adds	r3, #8
 800b370:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b374:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b378:	e853 3f00 	ldrex	r3, [r3]
 800b37c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b380:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b384:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	3308      	adds	r3, #8
 800b392:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b396:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b39a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b3a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b3a6:	e841 2300 	strex	r3, r2, [r1]
 800b3aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b3ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1d9      	bne.n	800b36a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d017      	beq.n	800b3f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3c6:	4a15      	ldr	r2, [pc, #84]	@ (800b41c <HAL_UART_IRQHandler+0x2c0>)
 800b3c8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7f8 fb3f 	bl	8003a54 <HAL_DMA_Abort_IT>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d019      	beq.n	800b410 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b3ea:	4610      	mov	r0, r2
 800b3ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3ee:	e00f      	b.n	800b410 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fa81 	bl	800b8f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3f6:	e00b      	b.n	800b410 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fa7d 	bl	800b8f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3fe:	e007      	b.n	800b410 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 fa79 	bl	800b8f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b40e:	e253      	b.n	800b8b8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b410:	bf00      	nop
    return;
 800b412:	e251      	b.n	800b8b8 <HAL_UART_IRQHandler+0x75c>
 800b414:	10000001 	.word	0x10000001
 800b418:	04000120 	.word	0x04000120
 800b41c:	0800cc69 	.word	0x0800cc69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b424:	2b01      	cmp	r3, #1
 800b426:	f040 81e7 	bne.w	800b7f8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b42a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b42e:	f003 0310 	and.w	r3, r3, #16
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 81e0 	beq.w	800b7f8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b43c:	f003 0310 	and.w	r3, r3, #16
 800b440:	2b00      	cmp	r3, #0
 800b442:	f000 81d9 	beq.w	800b7f8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2210      	movs	r2, #16
 800b44c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b458:	2b40      	cmp	r3, #64	@ 0x40
 800b45a:	f040 8151 	bne.w	800b700 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a96      	ldr	r2, [pc, #600]	@ (800b6c0 <HAL_UART_IRQHandler+0x564>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d068      	beq.n	800b53e <HAL_UART_IRQHandler+0x3e2>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a93      	ldr	r2, [pc, #588]	@ (800b6c4 <HAL_UART_IRQHandler+0x568>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d061      	beq.n	800b53e <HAL_UART_IRQHandler+0x3e2>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a91      	ldr	r2, [pc, #580]	@ (800b6c8 <HAL_UART_IRQHandler+0x56c>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d05a      	beq.n	800b53e <HAL_UART_IRQHandler+0x3e2>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a8e      	ldr	r2, [pc, #568]	@ (800b6cc <HAL_UART_IRQHandler+0x570>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d053      	beq.n	800b53e <HAL_UART_IRQHandler+0x3e2>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a8c      	ldr	r2, [pc, #560]	@ (800b6d0 <HAL_UART_IRQHandler+0x574>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d04c      	beq.n	800b53e <HAL_UART_IRQHandler+0x3e2>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a89      	ldr	r2, [pc, #548]	@ (800b6d4 <HAL_UART_IRQHandler+0x578>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d045      	beq.n	800b53e <HAL_UART_IRQHandler+0x3e2>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a87      	ldr	r2, [pc, #540]	@ (800b6d8 <HAL_UART_IRQHandler+0x57c>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d03e      	beq.n	800b53e <HAL_UART_IRQHandler+0x3e2>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a84      	ldr	r2, [pc, #528]	@ (800b6dc <HAL_UART_IRQHandler+0x580>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d037      	beq.n	800b53e <HAL_UART_IRQHandler+0x3e2>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a82      	ldr	r2, [pc, #520]	@ (800b6e0 <HAL_UART_IRQHandler+0x584>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d030      	beq.n	800b53e <HAL_UART_IRQHandler+0x3e2>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a7f      	ldr	r2, [pc, #508]	@ (800b6e4 <HAL_UART_IRQHandler+0x588>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d029      	beq.n	800b53e <HAL_UART_IRQHandler+0x3e2>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a7d      	ldr	r2, [pc, #500]	@ (800b6e8 <HAL_UART_IRQHandler+0x58c>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d022      	beq.n	800b53e <HAL_UART_IRQHandler+0x3e2>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a7a      	ldr	r2, [pc, #488]	@ (800b6ec <HAL_UART_IRQHandler+0x590>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d01b      	beq.n	800b53e <HAL_UART_IRQHandler+0x3e2>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4a78      	ldr	r2, [pc, #480]	@ (800b6f0 <HAL_UART_IRQHandler+0x594>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d014      	beq.n	800b53e <HAL_UART_IRQHandler+0x3e2>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a75      	ldr	r2, [pc, #468]	@ (800b6f4 <HAL_UART_IRQHandler+0x598>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d00d      	beq.n	800b53e <HAL_UART_IRQHandler+0x3e2>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a73      	ldr	r2, [pc, #460]	@ (800b6f8 <HAL_UART_IRQHandler+0x59c>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d006      	beq.n	800b53e <HAL_UART_IRQHandler+0x3e2>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a70      	ldr	r2, [pc, #448]	@ (800b6fc <HAL_UART_IRQHandler+0x5a0>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d106      	bne.n	800b54c <HAL_UART_IRQHandler+0x3f0>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	b29b      	uxth	r3, r3
 800b54a:	e005      	b.n	800b558 <HAL_UART_IRQHandler+0x3fc>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	b29b      	uxth	r3, r3
 800b558:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b55c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b560:	2b00      	cmp	r3, #0
 800b562:	f000 81ab 	beq.w	800b8bc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b56c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b570:	429a      	cmp	r2, r3
 800b572:	f080 81a3 	bcs.w	800b8bc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b57c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b586:	69db      	ldr	r3, [r3, #28]
 800b588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b58c:	f000 8087 	beq.w	800b69e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b598:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b59c:	e853 3f00 	ldrex	r3, [r3]
 800b5a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b5a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b5a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b5ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b5be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b5c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b5ca:	e841 2300 	strex	r3, r2, [r1]
 800b5ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b5d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d1da      	bne.n	800b590 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	3308      	adds	r3, #8
 800b5e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5e4:	e853 3f00 	ldrex	r3, [r3]
 800b5e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b5ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5ec:	f023 0301 	bic.w	r3, r3, #1
 800b5f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	3308      	adds	r3, #8
 800b5fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b5fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b602:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b604:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b606:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b60a:	e841 2300 	strex	r3, r2, [r1]
 800b60e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b610:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1e1      	bne.n	800b5da <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3308      	adds	r3, #8
 800b61c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b620:	e853 3f00 	ldrex	r3, [r3]
 800b624:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b626:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b62c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	3308      	adds	r3, #8
 800b636:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b63a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b63c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b640:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b642:	e841 2300 	strex	r3, r2, [r1]
 800b646:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1e3      	bne.n	800b616 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2220      	movs	r2, #32
 800b652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b664:	e853 3f00 	ldrex	r3, [r3]
 800b668:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b66a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b66c:	f023 0310 	bic.w	r3, r3, #16
 800b670:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	461a      	mov	r2, r3
 800b67a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b67e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b680:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b682:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b684:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b686:	e841 2300 	strex	r3, r2, [r1]
 800b68a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b68c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1e4      	bne.n	800b65c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b698:	4618      	mov	r0, r3
 800b69a:	f7f7 febd 	bl	8003418 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2202      	movs	r2, #2
 800b6a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	1ad3      	subs	r3, r2, r3
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f7f6 f9f7 	bl	8001aac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b6be:	e0fd      	b.n	800b8bc <HAL_UART_IRQHandler+0x760>
 800b6c0:	40020010 	.word	0x40020010
 800b6c4:	40020028 	.word	0x40020028
 800b6c8:	40020040 	.word	0x40020040
 800b6cc:	40020058 	.word	0x40020058
 800b6d0:	40020070 	.word	0x40020070
 800b6d4:	40020088 	.word	0x40020088
 800b6d8:	400200a0 	.word	0x400200a0
 800b6dc:	400200b8 	.word	0x400200b8
 800b6e0:	40020410 	.word	0x40020410
 800b6e4:	40020428 	.word	0x40020428
 800b6e8:	40020440 	.word	0x40020440
 800b6ec:	40020458 	.word	0x40020458
 800b6f0:	40020470 	.word	0x40020470
 800b6f4:	40020488 	.word	0x40020488
 800b6f8:	400204a0 	.word	0x400204a0
 800b6fc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	1ad3      	subs	r3, r2, r3
 800b710:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f000 80cf 	beq.w	800b8c0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b726:	2b00      	cmp	r3, #0
 800b728:	f000 80ca 	beq.w	800b8c0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b734:	e853 3f00 	ldrex	r3, [r3]
 800b738:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b73a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b73c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b740:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	461a      	mov	r2, r3
 800b74a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b74e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b750:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b752:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b754:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b756:	e841 2300 	strex	r3, r2, [r1]
 800b75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b75c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1e4      	bne.n	800b72c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	3308      	adds	r3, #8
 800b768:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76c:	e853 3f00 	ldrex	r3, [r3]
 800b770:	623b      	str	r3, [r7, #32]
   return(result);
 800b772:	6a3a      	ldr	r2, [r7, #32]
 800b774:	4b55      	ldr	r3, [pc, #340]	@ (800b8cc <HAL_UART_IRQHandler+0x770>)
 800b776:	4013      	ands	r3, r2
 800b778:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3308      	adds	r3, #8
 800b782:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b786:	633a      	str	r2, [r7, #48]	@ 0x30
 800b788:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b78c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b78e:	e841 2300 	strex	r3, r2, [r1]
 800b792:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1e3      	bne.n	800b762 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2220      	movs	r2, #32
 800b79e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	e853 3f00 	ldrex	r3, [r3]
 800b7ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f023 0310 	bic.w	r3, r3, #16
 800b7c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b7d0:	61fb      	str	r3, [r7, #28]
 800b7d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d4:	69b9      	ldr	r1, [r7, #24]
 800b7d6:	69fa      	ldr	r2, [r7, #28]
 800b7d8:	e841 2300 	strex	r3, r2, [r1]
 800b7dc:	617b      	str	r3, [r7, #20]
   return(result);
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1e4      	bne.n	800b7ae <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2202      	movs	r2, #2
 800b7e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b7ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f7f6 f95b 	bl	8001aac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b7f6:	e063      	b.n	800b8c0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b7f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00e      	beq.n	800b822 <HAL_UART_IRQHandler+0x6c6>
 800b804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b808:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d008      	beq.n	800b822 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b818:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f001 ff82 	bl	800d724 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b820:	e051      	b.n	800b8c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d014      	beq.n	800b858 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b82e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b836:	2b00      	cmp	r3, #0
 800b838:	d105      	bne.n	800b846 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b83a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b83e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b842:	2b00      	cmp	r3, #0
 800b844:	d008      	beq.n	800b858 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d03a      	beq.n	800b8c4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	4798      	blx	r3
    }
    return;
 800b856:	e035      	b.n	800b8c4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b85c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b860:	2b00      	cmp	r3, #0
 800b862:	d009      	beq.n	800b878 <HAL_UART_IRQHandler+0x71c>
 800b864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d003      	beq.n	800b878 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f001 fa0f 	bl	800cc94 <UART_EndTransmit_IT>
    return;
 800b876:	e026      	b.n	800b8c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b87c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b880:	2b00      	cmp	r3, #0
 800b882:	d009      	beq.n	800b898 <HAL_UART_IRQHandler+0x73c>
 800b884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b888:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d003      	beq.n	800b898 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f001 ff5b 	bl	800d74c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b896:	e016      	b.n	800b8c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b89c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d010      	beq.n	800b8c6 <HAL_UART_IRQHandler+0x76a>
 800b8a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	da0c      	bge.n	800b8c6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f001 ff43 	bl	800d738 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b8b2:	e008      	b.n	800b8c6 <HAL_UART_IRQHandler+0x76a>
      return;
 800b8b4:	bf00      	nop
 800b8b6:	e006      	b.n	800b8c6 <HAL_UART_IRQHandler+0x76a>
    return;
 800b8b8:	bf00      	nop
 800b8ba:	e004      	b.n	800b8c6 <HAL_UART_IRQHandler+0x76a>
      return;
 800b8bc:	bf00      	nop
 800b8be:	e002      	b.n	800b8c6 <HAL_UART_IRQHandler+0x76a>
      return;
 800b8c0:	bf00      	nop
 800b8c2:	e000      	b.n	800b8c6 <HAL_UART_IRQHandler+0x76a>
    return;
 800b8c4:	bf00      	nop
  }
}
 800b8c6:	37e8      	adds	r7, #232	@ 0xe8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	effffffe 	.word	0xeffffffe

0800b8d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b900:	bf00      	nop
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b90c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b910:	b092      	sub	sp, #72	@ 0x48
 800b912:	af00      	add	r7, sp, #0
 800b914:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b916:	2300      	movs	r3, #0
 800b918:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	689a      	ldr	r2, [r3, #8]
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	431a      	orrs	r2, r3
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	695b      	ldr	r3, [r3, #20]
 800b92a:	431a      	orrs	r2, r3
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	69db      	ldr	r3, [r3, #28]
 800b930:	4313      	orrs	r3, r2
 800b932:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	4bbe      	ldr	r3, [pc, #760]	@ (800bc34 <UART_SetConfig+0x328>)
 800b93c:	4013      	ands	r3, r2
 800b93e:	697a      	ldr	r2, [r7, #20]
 800b940:	6812      	ldr	r2, [r2, #0]
 800b942:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b944:	430b      	orrs	r3, r1
 800b946:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	68da      	ldr	r2, [r3, #12]
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	430a      	orrs	r2, r1
 800b95c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4ab3      	ldr	r2, [pc, #716]	@ (800bc38 <UART_SetConfig+0x32c>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d004      	beq.n	800b978 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	6a1b      	ldr	r3, [r3, #32]
 800b972:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b974:	4313      	orrs	r3, r2
 800b976:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	689a      	ldr	r2, [r3, #8]
 800b97e:	4baf      	ldr	r3, [pc, #700]	@ (800bc3c <UART_SetConfig+0x330>)
 800b980:	4013      	ands	r3, r2
 800b982:	697a      	ldr	r2, [r7, #20]
 800b984:	6812      	ldr	r2, [r2, #0]
 800b986:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b988:	430b      	orrs	r3, r1
 800b98a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b992:	f023 010f 	bic.w	r1, r3, #15
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	430a      	orrs	r2, r1
 800b9a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4aa6      	ldr	r2, [pc, #664]	@ (800bc40 <UART_SetConfig+0x334>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d177      	bne.n	800ba9c <UART_SetConfig+0x190>
 800b9ac:	4ba5      	ldr	r3, [pc, #660]	@ (800bc44 <UART_SetConfig+0x338>)
 800b9ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b9b4:	2b28      	cmp	r3, #40	@ 0x28
 800b9b6:	d86d      	bhi.n	800ba94 <UART_SetConfig+0x188>
 800b9b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b9c0 <UART_SetConfig+0xb4>)
 800b9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9be:	bf00      	nop
 800b9c0:	0800ba65 	.word	0x0800ba65
 800b9c4:	0800ba95 	.word	0x0800ba95
 800b9c8:	0800ba95 	.word	0x0800ba95
 800b9cc:	0800ba95 	.word	0x0800ba95
 800b9d0:	0800ba95 	.word	0x0800ba95
 800b9d4:	0800ba95 	.word	0x0800ba95
 800b9d8:	0800ba95 	.word	0x0800ba95
 800b9dc:	0800ba95 	.word	0x0800ba95
 800b9e0:	0800ba6d 	.word	0x0800ba6d
 800b9e4:	0800ba95 	.word	0x0800ba95
 800b9e8:	0800ba95 	.word	0x0800ba95
 800b9ec:	0800ba95 	.word	0x0800ba95
 800b9f0:	0800ba95 	.word	0x0800ba95
 800b9f4:	0800ba95 	.word	0x0800ba95
 800b9f8:	0800ba95 	.word	0x0800ba95
 800b9fc:	0800ba95 	.word	0x0800ba95
 800ba00:	0800ba75 	.word	0x0800ba75
 800ba04:	0800ba95 	.word	0x0800ba95
 800ba08:	0800ba95 	.word	0x0800ba95
 800ba0c:	0800ba95 	.word	0x0800ba95
 800ba10:	0800ba95 	.word	0x0800ba95
 800ba14:	0800ba95 	.word	0x0800ba95
 800ba18:	0800ba95 	.word	0x0800ba95
 800ba1c:	0800ba95 	.word	0x0800ba95
 800ba20:	0800ba7d 	.word	0x0800ba7d
 800ba24:	0800ba95 	.word	0x0800ba95
 800ba28:	0800ba95 	.word	0x0800ba95
 800ba2c:	0800ba95 	.word	0x0800ba95
 800ba30:	0800ba95 	.word	0x0800ba95
 800ba34:	0800ba95 	.word	0x0800ba95
 800ba38:	0800ba95 	.word	0x0800ba95
 800ba3c:	0800ba95 	.word	0x0800ba95
 800ba40:	0800ba85 	.word	0x0800ba85
 800ba44:	0800ba95 	.word	0x0800ba95
 800ba48:	0800ba95 	.word	0x0800ba95
 800ba4c:	0800ba95 	.word	0x0800ba95
 800ba50:	0800ba95 	.word	0x0800ba95
 800ba54:	0800ba95 	.word	0x0800ba95
 800ba58:	0800ba95 	.word	0x0800ba95
 800ba5c:	0800ba95 	.word	0x0800ba95
 800ba60:	0800ba8d 	.word	0x0800ba8d
 800ba64:	2301      	movs	r3, #1
 800ba66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba6a:	e326      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800ba6c:	2304      	movs	r3, #4
 800ba6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba72:	e322      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800ba74:	2308      	movs	r3, #8
 800ba76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba7a:	e31e      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800ba7c:	2310      	movs	r3, #16
 800ba7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba82:	e31a      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800ba84:	2320      	movs	r3, #32
 800ba86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba8a:	e316      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800ba8c:	2340      	movs	r3, #64	@ 0x40
 800ba8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba92:	e312      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800ba94:	2380      	movs	r3, #128	@ 0x80
 800ba96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba9a:	e30e      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a69      	ldr	r2, [pc, #420]	@ (800bc48 <UART_SetConfig+0x33c>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d130      	bne.n	800bb08 <UART_SetConfig+0x1fc>
 800baa6:	4b67      	ldr	r3, [pc, #412]	@ (800bc44 <UART_SetConfig+0x338>)
 800baa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baaa:	f003 0307 	and.w	r3, r3, #7
 800baae:	2b05      	cmp	r3, #5
 800bab0:	d826      	bhi.n	800bb00 <UART_SetConfig+0x1f4>
 800bab2:	a201      	add	r2, pc, #4	@ (adr r2, 800bab8 <UART_SetConfig+0x1ac>)
 800bab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab8:	0800bad1 	.word	0x0800bad1
 800babc:	0800bad9 	.word	0x0800bad9
 800bac0:	0800bae1 	.word	0x0800bae1
 800bac4:	0800bae9 	.word	0x0800bae9
 800bac8:	0800baf1 	.word	0x0800baf1
 800bacc:	0800baf9 	.word	0x0800baf9
 800bad0:	2300      	movs	r3, #0
 800bad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bad6:	e2f0      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bad8:	2304      	movs	r3, #4
 800bada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bade:	e2ec      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bae0:	2308      	movs	r3, #8
 800bae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bae6:	e2e8      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bae8:	2310      	movs	r3, #16
 800baea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baee:	e2e4      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800baf0:	2320      	movs	r3, #32
 800baf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baf6:	e2e0      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800baf8:	2340      	movs	r3, #64	@ 0x40
 800bafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bafe:	e2dc      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bb00:	2380      	movs	r3, #128	@ 0x80
 800bb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb06:	e2d8      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a4f      	ldr	r2, [pc, #316]	@ (800bc4c <UART_SetConfig+0x340>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d130      	bne.n	800bb74 <UART_SetConfig+0x268>
 800bb12:	4b4c      	ldr	r3, [pc, #304]	@ (800bc44 <UART_SetConfig+0x338>)
 800bb14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb16:	f003 0307 	and.w	r3, r3, #7
 800bb1a:	2b05      	cmp	r3, #5
 800bb1c:	d826      	bhi.n	800bb6c <UART_SetConfig+0x260>
 800bb1e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb24 <UART_SetConfig+0x218>)
 800bb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb24:	0800bb3d 	.word	0x0800bb3d
 800bb28:	0800bb45 	.word	0x0800bb45
 800bb2c:	0800bb4d 	.word	0x0800bb4d
 800bb30:	0800bb55 	.word	0x0800bb55
 800bb34:	0800bb5d 	.word	0x0800bb5d
 800bb38:	0800bb65 	.word	0x0800bb65
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb42:	e2ba      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bb44:	2304      	movs	r3, #4
 800bb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb4a:	e2b6      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bb4c:	2308      	movs	r3, #8
 800bb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb52:	e2b2      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bb54:	2310      	movs	r3, #16
 800bb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb5a:	e2ae      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bb5c:	2320      	movs	r3, #32
 800bb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb62:	e2aa      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bb64:	2340      	movs	r3, #64	@ 0x40
 800bb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb6a:	e2a6      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bb6c:	2380      	movs	r3, #128	@ 0x80
 800bb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb72:	e2a2      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a35      	ldr	r2, [pc, #212]	@ (800bc50 <UART_SetConfig+0x344>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d130      	bne.n	800bbe0 <UART_SetConfig+0x2d4>
 800bb7e:	4b31      	ldr	r3, [pc, #196]	@ (800bc44 <UART_SetConfig+0x338>)
 800bb80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb82:	f003 0307 	and.w	r3, r3, #7
 800bb86:	2b05      	cmp	r3, #5
 800bb88:	d826      	bhi.n	800bbd8 <UART_SetConfig+0x2cc>
 800bb8a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb90 <UART_SetConfig+0x284>)
 800bb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb90:	0800bba9 	.word	0x0800bba9
 800bb94:	0800bbb1 	.word	0x0800bbb1
 800bb98:	0800bbb9 	.word	0x0800bbb9
 800bb9c:	0800bbc1 	.word	0x0800bbc1
 800bba0:	0800bbc9 	.word	0x0800bbc9
 800bba4:	0800bbd1 	.word	0x0800bbd1
 800bba8:	2300      	movs	r3, #0
 800bbaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbae:	e284      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bbb0:	2304      	movs	r3, #4
 800bbb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbb6:	e280      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bbb8:	2308      	movs	r3, #8
 800bbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbbe:	e27c      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bbc0:	2310      	movs	r3, #16
 800bbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbc6:	e278      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bbc8:	2320      	movs	r3, #32
 800bbca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbce:	e274      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bbd0:	2340      	movs	r3, #64	@ 0x40
 800bbd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbd6:	e270      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bbd8:	2380      	movs	r3, #128	@ 0x80
 800bbda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbde:	e26c      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a1b      	ldr	r2, [pc, #108]	@ (800bc54 <UART_SetConfig+0x348>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d142      	bne.n	800bc70 <UART_SetConfig+0x364>
 800bbea:	4b16      	ldr	r3, [pc, #88]	@ (800bc44 <UART_SetConfig+0x338>)
 800bbec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbee:	f003 0307 	and.w	r3, r3, #7
 800bbf2:	2b05      	cmp	r3, #5
 800bbf4:	d838      	bhi.n	800bc68 <UART_SetConfig+0x35c>
 800bbf6:	a201      	add	r2, pc, #4	@ (adr r2, 800bbfc <UART_SetConfig+0x2f0>)
 800bbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbfc:	0800bc15 	.word	0x0800bc15
 800bc00:	0800bc1d 	.word	0x0800bc1d
 800bc04:	0800bc25 	.word	0x0800bc25
 800bc08:	0800bc2d 	.word	0x0800bc2d
 800bc0c:	0800bc59 	.word	0x0800bc59
 800bc10:	0800bc61 	.word	0x0800bc61
 800bc14:	2300      	movs	r3, #0
 800bc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc1a:	e24e      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bc1c:	2304      	movs	r3, #4
 800bc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc22:	e24a      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bc24:	2308      	movs	r3, #8
 800bc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc2a:	e246      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bc2c:	2310      	movs	r3, #16
 800bc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc32:	e242      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bc34:	cfff69f3 	.word	0xcfff69f3
 800bc38:	58000c00 	.word	0x58000c00
 800bc3c:	11fff4ff 	.word	0x11fff4ff
 800bc40:	40011000 	.word	0x40011000
 800bc44:	58024400 	.word	0x58024400
 800bc48:	40004400 	.word	0x40004400
 800bc4c:	40004800 	.word	0x40004800
 800bc50:	40004c00 	.word	0x40004c00
 800bc54:	40005000 	.word	0x40005000
 800bc58:	2320      	movs	r3, #32
 800bc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc5e:	e22c      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bc60:	2340      	movs	r3, #64	@ 0x40
 800bc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc66:	e228      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bc68:	2380      	movs	r3, #128	@ 0x80
 800bc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc6e:	e224      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4ab1      	ldr	r2, [pc, #708]	@ (800bf3c <UART_SetConfig+0x630>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d176      	bne.n	800bd68 <UART_SetConfig+0x45c>
 800bc7a:	4bb1      	ldr	r3, [pc, #708]	@ (800bf40 <UART_SetConfig+0x634>)
 800bc7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc82:	2b28      	cmp	r3, #40	@ 0x28
 800bc84:	d86c      	bhi.n	800bd60 <UART_SetConfig+0x454>
 800bc86:	a201      	add	r2, pc, #4	@ (adr r2, 800bc8c <UART_SetConfig+0x380>)
 800bc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8c:	0800bd31 	.word	0x0800bd31
 800bc90:	0800bd61 	.word	0x0800bd61
 800bc94:	0800bd61 	.word	0x0800bd61
 800bc98:	0800bd61 	.word	0x0800bd61
 800bc9c:	0800bd61 	.word	0x0800bd61
 800bca0:	0800bd61 	.word	0x0800bd61
 800bca4:	0800bd61 	.word	0x0800bd61
 800bca8:	0800bd61 	.word	0x0800bd61
 800bcac:	0800bd39 	.word	0x0800bd39
 800bcb0:	0800bd61 	.word	0x0800bd61
 800bcb4:	0800bd61 	.word	0x0800bd61
 800bcb8:	0800bd61 	.word	0x0800bd61
 800bcbc:	0800bd61 	.word	0x0800bd61
 800bcc0:	0800bd61 	.word	0x0800bd61
 800bcc4:	0800bd61 	.word	0x0800bd61
 800bcc8:	0800bd61 	.word	0x0800bd61
 800bccc:	0800bd41 	.word	0x0800bd41
 800bcd0:	0800bd61 	.word	0x0800bd61
 800bcd4:	0800bd61 	.word	0x0800bd61
 800bcd8:	0800bd61 	.word	0x0800bd61
 800bcdc:	0800bd61 	.word	0x0800bd61
 800bce0:	0800bd61 	.word	0x0800bd61
 800bce4:	0800bd61 	.word	0x0800bd61
 800bce8:	0800bd61 	.word	0x0800bd61
 800bcec:	0800bd49 	.word	0x0800bd49
 800bcf0:	0800bd61 	.word	0x0800bd61
 800bcf4:	0800bd61 	.word	0x0800bd61
 800bcf8:	0800bd61 	.word	0x0800bd61
 800bcfc:	0800bd61 	.word	0x0800bd61
 800bd00:	0800bd61 	.word	0x0800bd61
 800bd04:	0800bd61 	.word	0x0800bd61
 800bd08:	0800bd61 	.word	0x0800bd61
 800bd0c:	0800bd51 	.word	0x0800bd51
 800bd10:	0800bd61 	.word	0x0800bd61
 800bd14:	0800bd61 	.word	0x0800bd61
 800bd18:	0800bd61 	.word	0x0800bd61
 800bd1c:	0800bd61 	.word	0x0800bd61
 800bd20:	0800bd61 	.word	0x0800bd61
 800bd24:	0800bd61 	.word	0x0800bd61
 800bd28:	0800bd61 	.word	0x0800bd61
 800bd2c:	0800bd59 	.word	0x0800bd59
 800bd30:	2301      	movs	r3, #1
 800bd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd36:	e1c0      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bd38:	2304      	movs	r3, #4
 800bd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd3e:	e1bc      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bd40:	2308      	movs	r3, #8
 800bd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd46:	e1b8      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bd48:	2310      	movs	r3, #16
 800bd4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd4e:	e1b4      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bd50:	2320      	movs	r3, #32
 800bd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd56:	e1b0      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bd58:	2340      	movs	r3, #64	@ 0x40
 800bd5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd5e:	e1ac      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bd60:	2380      	movs	r3, #128	@ 0x80
 800bd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd66:	e1a8      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a75      	ldr	r2, [pc, #468]	@ (800bf44 <UART_SetConfig+0x638>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d130      	bne.n	800bdd4 <UART_SetConfig+0x4c8>
 800bd72:	4b73      	ldr	r3, [pc, #460]	@ (800bf40 <UART_SetConfig+0x634>)
 800bd74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd76:	f003 0307 	and.w	r3, r3, #7
 800bd7a:	2b05      	cmp	r3, #5
 800bd7c:	d826      	bhi.n	800bdcc <UART_SetConfig+0x4c0>
 800bd7e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd84 <UART_SetConfig+0x478>)
 800bd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd84:	0800bd9d 	.word	0x0800bd9d
 800bd88:	0800bda5 	.word	0x0800bda5
 800bd8c:	0800bdad 	.word	0x0800bdad
 800bd90:	0800bdb5 	.word	0x0800bdb5
 800bd94:	0800bdbd 	.word	0x0800bdbd
 800bd98:	0800bdc5 	.word	0x0800bdc5
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bda2:	e18a      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bda4:	2304      	movs	r3, #4
 800bda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdaa:	e186      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bdac:	2308      	movs	r3, #8
 800bdae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdb2:	e182      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bdb4:	2310      	movs	r3, #16
 800bdb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdba:	e17e      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bdbc:	2320      	movs	r3, #32
 800bdbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdc2:	e17a      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bdc4:	2340      	movs	r3, #64	@ 0x40
 800bdc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdca:	e176      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bdcc:	2380      	movs	r3, #128	@ 0x80
 800bdce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdd2:	e172      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a5b      	ldr	r2, [pc, #364]	@ (800bf48 <UART_SetConfig+0x63c>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d130      	bne.n	800be40 <UART_SetConfig+0x534>
 800bdde:	4b58      	ldr	r3, [pc, #352]	@ (800bf40 <UART_SetConfig+0x634>)
 800bde0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bde2:	f003 0307 	and.w	r3, r3, #7
 800bde6:	2b05      	cmp	r3, #5
 800bde8:	d826      	bhi.n	800be38 <UART_SetConfig+0x52c>
 800bdea:	a201      	add	r2, pc, #4	@ (adr r2, 800bdf0 <UART_SetConfig+0x4e4>)
 800bdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf0:	0800be09 	.word	0x0800be09
 800bdf4:	0800be11 	.word	0x0800be11
 800bdf8:	0800be19 	.word	0x0800be19
 800bdfc:	0800be21 	.word	0x0800be21
 800be00:	0800be29 	.word	0x0800be29
 800be04:	0800be31 	.word	0x0800be31
 800be08:	2300      	movs	r3, #0
 800be0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be0e:	e154      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800be10:	2304      	movs	r3, #4
 800be12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be16:	e150      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800be18:	2308      	movs	r3, #8
 800be1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be1e:	e14c      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800be20:	2310      	movs	r3, #16
 800be22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be26:	e148      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800be28:	2320      	movs	r3, #32
 800be2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be2e:	e144      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800be30:	2340      	movs	r3, #64	@ 0x40
 800be32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be36:	e140      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800be38:	2380      	movs	r3, #128	@ 0x80
 800be3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be3e:	e13c      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a41      	ldr	r2, [pc, #260]	@ (800bf4c <UART_SetConfig+0x640>)
 800be46:	4293      	cmp	r3, r2
 800be48:	f040 8082 	bne.w	800bf50 <UART_SetConfig+0x644>
 800be4c:	4b3c      	ldr	r3, [pc, #240]	@ (800bf40 <UART_SetConfig+0x634>)
 800be4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800be54:	2b28      	cmp	r3, #40	@ 0x28
 800be56:	d86d      	bhi.n	800bf34 <UART_SetConfig+0x628>
 800be58:	a201      	add	r2, pc, #4	@ (adr r2, 800be60 <UART_SetConfig+0x554>)
 800be5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5e:	bf00      	nop
 800be60:	0800bf05 	.word	0x0800bf05
 800be64:	0800bf35 	.word	0x0800bf35
 800be68:	0800bf35 	.word	0x0800bf35
 800be6c:	0800bf35 	.word	0x0800bf35
 800be70:	0800bf35 	.word	0x0800bf35
 800be74:	0800bf35 	.word	0x0800bf35
 800be78:	0800bf35 	.word	0x0800bf35
 800be7c:	0800bf35 	.word	0x0800bf35
 800be80:	0800bf0d 	.word	0x0800bf0d
 800be84:	0800bf35 	.word	0x0800bf35
 800be88:	0800bf35 	.word	0x0800bf35
 800be8c:	0800bf35 	.word	0x0800bf35
 800be90:	0800bf35 	.word	0x0800bf35
 800be94:	0800bf35 	.word	0x0800bf35
 800be98:	0800bf35 	.word	0x0800bf35
 800be9c:	0800bf35 	.word	0x0800bf35
 800bea0:	0800bf15 	.word	0x0800bf15
 800bea4:	0800bf35 	.word	0x0800bf35
 800bea8:	0800bf35 	.word	0x0800bf35
 800beac:	0800bf35 	.word	0x0800bf35
 800beb0:	0800bf35 	.word	0x0800bf35
 800beb4:	0800bf35 	.word	0x0800bf35
 800beb8:	0800bf35 	.word	0x0800bf35
 800bebc:	0800bf35 	.word	0x0800bf35
 800bec0:	0800bf1d 	.word	0x0800bf1d
 800bec4:	0800bf35 	.word	0x0800bf35
 800bec8:	0800bf35 	.word	0x0800bf35
 800becc:	0800bf35 	.word	0x0800bf35
 800bed0:	0800bf35 	.word	0x0800bf35
 800bed4:	0800bf35 	.word	0x0800bf35
 800bed8:	0800bf35 	.word	0x0800bf35
 800bedc:	0800bf35 	.word	0x0800bf35
 800bee0:	0800bf25 	.word	0x0800bf25
 800bee4:	0800bf35 	.word	0x0800bf35
 800bee8:	0800bf35 	.word	0x0800bf35
 800beec:	0800bf35 	.word	0x0800bf35
 800bef0:	0800bf35 	.word	0x0800bf35
 800bef4:	0800bf35 	.word	0x0800bf35
 800bef8:	0800bf35 	.word	0x0800bf35
 800befc:	0800bf35 	.word	0x0800bf35
 800bf00:	0800bf2d 	.word	0x0800bf2d
 800bf04:	2301      	movs	r3, #1
 800bf06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf0a:	e0d6      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bf0c:	2304      	movs	r3, #4
 800bf0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf12:	e0d2      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bf14:	2308      	movs	r3, #8
 800bf16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf1a:	e0ce      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bf1c:	2310      	movs	r3, #16
 800bf1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf22:	e0ca      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bf24:	2320      	movs	r3, #32
 800bf26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf2a:	e0c6      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bf2c:	2340      	movs	r3, #64	@ 0x40
 800bf2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf32:	e0c2      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bf34:	2380      	movs	r3, #128	@ 0x80
 800bf36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf3a:	e0be      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800bf3c:	40011400 	.word	0x40011400
 800bf40:	58024400 	.word	0x58024400
 800bf44:	40007800 	.word	0x40007800
 800bf48:	40007c00 	.word	0x40007c00
 800bf4c:	40011800 	.word	0x40011800
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4aad      	ldr	r2, [pc, #692]	@ (800c20c <UART_SetConfig+0x900>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d176      	bne.n	800c048 <UART_SetConfig+0x73c>
 800bf5a:	4bad      	ldr	r3, [pc, #692]	@ (800c210 <UART_SetConfig+0x904>)
 800bf5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bf62:	2b28      	cmp	r3, #40	@ 0x28
 800bf64:	d86c      	bhi.n	800c040 <UART_SetConfig+0x734>
 800bf66:	a201      	add	r2, pc, #4	@ (adr r2, 800bf6c <UART_SetConfig+0x660>)
 800bf68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf6c:	0800c011 	.word	0x0800c011
 800bf70:	0800c041 	.word	0x0800c041
 800bf74:	0800c041 	.word	0x0800c041
 800bf78:	0800c041 	.word	0x0800c041
 800bf7c:	0800c041 	.word	0x0800c041
 800bf80:	0800c041 	.word	0x0800c041
 800bf84:	0800c041 	.word	0x0800c041
 800bf88:	0800c041 	.word	0x0800c041
 800bf8c:	0800c019 	.word	0x0800c019
 800bf90:	0800c041 	.word	0x0800c041
 800bf94:	0800c041 	.word	0x0800c041
 800bf98:	0800c041 	.word	0x0800c041
 800bf9c:	0800c041 	.word	0x0800c041
 800bfa0:	0800c041 	.word	0x0800c041
 800bfa4:	0800c041 	.word	0x0800c041
 800bfa8:	0800c041 	.word	0x0800c041
 800bfac:	0800c021 	.word	0x0800c021
 800bfb0:	0800c041 	.word	0x0800c041
 800bfb4:	0800c041 	.word	0x0800c041
 800bfb8:	0800c041 	.word	0x0800c041
 800bfbc:	0800c041 	.word	0x0800c041
 800bfc0:	0800c041 	.word	0x0800c041
 800bfc4:	0800c041 	.word	0x0800c041
 800bfc8:	0800c041 	.word	0x0800c041
 800bfcc:	0800c029 	.word	0x0800c029
 800bfd0:	0800c041 	.word	0x0800c041
 800bfd4:	0800c041 	.word	0x0800c041
 800bfd8:	0800c041 	.word	0x0800c041
 800bfdc:	0800c041 	.word	0x0800c041
 800bfe0:	0800c041 	.word	0x0800c041
 800bfe4:	0800c041 	.word	0x0800c041
 800bfe8:	0800c041 	.word	0x0800c041
 800bfec:	0800c031 	.word	0x0800c031
 800bff0:	0800c041 	.word	0x0800c041
 800bff4:	0800c041 	.word	0x0800c041
 800bff8:	0800c041 	.word	0x0800c041
 800bffc:	0800c041 	.word	0x0800c041
 800c000:	0800c041 	.word	0x0800c041
 800c004:	0800c041 	.word	0x0800c041
 800c008:	0800c041 	.word	0x0800c041
 800c00c:	0800c039 	.word	0x0800c039
 800c010:	2301      	movs	r3, #1
 800c012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c016:	e050      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800c018:	2304      	movs	r3, #4
 800c01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c01e:	e04c      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800c020:	2308      	movs	r3, #8
 800c022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c026:	e048      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800c028:	2310      	movs	r3, #16
 800c02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c02e:	e044      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800c030:	2320      	movs	r3, #32
 800c032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c036:	e040      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800c038:	2340      	movs	r3, #64	@ 0x40
 800c03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c03e:	e03c      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800c040:	2380      	movs	r3, #128	@ 0x80
 800c042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c046:	e038      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a71      	ldr	r2, [pc, #452]	@ (800c214 <UART_SetConfig+0x908>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d130      	bne.n	800c0b4 <UART_SetConfig+0x7a8>
 800c052:	4b6f      	ldr	r3, [pc, #444]	@ (800c210 <UART_SetConfig+0x904>)
 800c054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c056:	f003 0307 	and.w	r3, r3, #7
 800c05a:	2b05      	cmp	r3, #5
 800c05c:	d826      	bhi.n	800c0ac <UART_SetConfig+0x7a0>
 800c05e:	a201      	add	r2, pc, #4	@ (adr r2, 800c064 <UART_SetConfig+0x758>)
 800c060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c064:	0800c07d 	.word	0x0800c07d
 800c068:	0800c085 	.word	0x0800c085
 800c06c:	0800c08d 	.word	0x0800c08d
 800c070:	0800c095 	.word	0x0800c095
 800c074:	0800c09d 	.word	0x0800c09d
 800c078:	0800c0a5 	.word	0x0800c0a5
 800c07c:	2302      	movs	r3, #2
 800c07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c082:	e01a      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800c084:	2304      	movs	r3, #4
 800c086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c08a:	e016      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800c08c:	2308      	movs	r3, #8
 800c08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c092:	e012      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800c094:	2310      	movs	r3, #16
 800c096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c09a:	e00e      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800c09c:	2320      	movs	r3, #32
 800c09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0a2:	e00a      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800c0a4:	2340      	movs	r3, #64	@ 0x40
 800c0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0aa:	e006      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800c0ac:	2380      	movs	r3, #128	@ 0x80
 800c0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0b2:	e002      	b.n	800c0ba <UART_SetConfig+0x7ae>
 800c0b4:	2380      	movs	r3, #128	@ 0x80
 800c0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a55      	ldr	r2, [pc, #340]	@ (800c214 <UART_SetConfig+0x908>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	f040 80f8 	bne.w	800c2b6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c0c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c0ca:	2b20      	cmp	r3, #32
 800c0cc:	dc46      	bgt.n	800c15c <UART_SetConfig+0x850>
 800c0ce:	2b02      	cmp	r3, #2
 800c0d0:	db75      	blt.n	800c1be <UART_SetConfig+0x8b2>
 800c0d2:	3b02      	subs	r3, #2
 800c0d4:	2b1e      	cmp	r3, #30
 800c0d6:	d872      	bhi.n	800c1be <UART_SetConfig+0x8b2>
 800c0d8:	a201      	add	r2, pc, #4	@ (adr r2, 800c0e0 <UART_SetConfig+0x7d4>)
 800c0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0de:	bf00      	nop
 800c0e0:	0800c163 	.word	0x0800c163
 800c0e4:	0800c1bf 	.word	0x0800c1bf
 800c0e8:	0800c16b 	.word	0x0800c16b
 800c0ec:	0800c1bf 	.word	0x0800c1bf
 800c0f0:	0800c1bf 	.word	0x0800c1bf
 800c0f4:	0800c1bf 	.word	0x0800c1bf
 800c0f8:	0800c17b 	.word	0x0800c17b
 800c0fc:	0800c1bf 	.word	0x0800c1bf
 800c100:	0800c1bf 	.word	0x0800c1bf
 800c104:	0800c1bf 	.word	0x0800c1bf
 800c108:	0800c1bf 	.word	0x0800c1bf
 800c10c:	0800c1bf 	.word	0x0800c1bf
 800c110:	0800c1bf 	.word	0x0800c1bf
 800c114:	0800c1bf 	.word	0x0800c1bf
 800c118:	0800c18b 	.word	0x0800c18b
 800c11c:	0800c1bf 	.word	0x0800c1bf
 800c120:	0800c1bf 	.word	0x0800c1bf
 800c124:	0800c1bf 	.word	0x0800c1bf
 800c128:	0800c1bf 	.word	0x0800c1bf
 800c12c:	0800c1bf 	.word	0x0800c1bf
 800c130:	0800c1bf 	.word	0x0800c1bf
 800c134:	0800c1bf 	.word	0x0800c1bf
 800c138:	0800c1bf 	.word	0x0800c1bf
 800c13c:	0800c1bf 	.word	0x0800c1bf
 800c140:	0800c1bf 	.word	0x0800c1bf
 800c144:	0800c1bf 	.word	0x0800c1bf
 800c148:	0800c1bf 	.word	0x0800c1bf
 800c14c:	0800c1bf 	.word	0x0800c1bf
 800c150:	0800c1bf 	.word	0x0800c1bf
 800c154:	0800c1bf 	.word	0x0800c1bf
 800c158:	0800c1b1 	.word	0x0800c1b1
 800c15c:	2b40      	cmp	r3, #64	@ 0x40
 800c15e:	d02a      	beq.n	800c1b6 <UART_SetConfig+0x8aa>
 800c160:	e02d      	b.n	800c1be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c162:	f7fc fe05 	bl	8008d70 <HAL_RCCEx_GetD3PCLK1Freq>
 800c166:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c168:	e02f      	b.n	800c1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c16a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fc fe14 	bl	8008d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c178:	e027      	b.n	800c1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c17a:	f107 0318 	add.w	r3, r7, #24
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fc ff60 	bl	8009044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c188:	e01f      	b.n	800c1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c18a:	4b21      	ldr	r3, [pc, #132]	@ (800c210 <UART_SetConfig+0x904>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f003 0320 	and.w	r3, r3, #32
 800c192:	2b00      	cmp	r3, #0
 800c194:	d009      	beq.n	800c1aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c196:	4b1e      	ldr	r3, [pc, #120]	@ (800c210 <UART_SetConfig+0x904>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	08db      	lsrs	r3, r3, #3
 800c19c:	f003 0303 	and.w	r3, r3, #3
 800c1a0:	4a1d      	ldr	r2, [pc, #116]	@ (800c218 <UART_SetConfig+0x90c>)
 800c1a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c1a8:	e00f      	b.n	800c1ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c1aa:	4b1b      	ldr	r3, [pc, #108]	@ (800c218 <UART_SetConfig+0x90c>)
 800c1ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1ae:	e00c      	b.n	800c1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c1b0:	4b1a      	ldr	r3, [pc, #104]	@ (800c21c <UART_SetConfig+0x910>)
 800c1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1b4:	e009      	b.n	800c1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1bc:	e005      	b.n	800c1ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c1c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c1ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f000 81ee 	beq.w	800c5ae <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1d6:	4a12      	ldr	r2, [pc, #72]	@ (800c220 <UART_SetConfig+0x914>)
 800c1d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1dc:	461a      	mov	r2, r3
 800c1de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1e4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	685a      	ldr	r2, [r3, #4]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	005b      	lsls	r3, r3, #1
 800c1ee:	4413      	add	r3, r2
 800c1f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d305      	bcc.n	800c202 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c1fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d910      	bls.n	800c224 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c202:	2301      	movs	r3, #1
 800c204:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c208:	e1d1      	b.n	800c5ae <UART_SetConfig+0xca2>
 800c20a:	bf00      	nop
 800c20c:	40011c00 	.word	0x40011c00
 800c210:	58024400 	.word	0x58024400
 800c214:	58000c00 	.word	0x58000c00
 800c218:	03d09000 	.word	0x03d09000
 800c21c:	003d0900 	.word	0x003d0900
 800c220:	08016cd8 	.word	0x08016cd8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c226:	2200      	movs	r2, #0
 800c228:	60bb      	str	r3, [r7, #8]
 800c22a:	60fa      	str	r2, [r7, #12]
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c230:	4ac0      	ldr	r2, [pc, #768]	@ (800c534 <UART_SetConfig+0xc28>)
 800c232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c236:	b29b      	uxth	r3, r3
 800c238:	2200      	movs	r2, #0
 800c23a:	603b      	str	r3, [r7, #0]
 800c23c:	607a      	str	r2, [r7, #4]
 800c23e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c242:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c246:	f7f4 f8bb 	bl	80003c0 <__aeabi_uldivmod>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	4610      	mov	r0, r2
 800c250:	4619      	mov	r1, r3
 800c252:	f04f 0200 	mov.w	r2, #0
 800c256:	f04f 0300 	mov.w	r3, #0
 800c25a:	020b      	lsls	r3, r1, #8
 800c25c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c260:	0202      	lsls	r2, r0, #8
 800c262:	6979      	ldr	r1, [r7, #20]
 800c264:	6849      	ldr	r1, [r1, #4]
 800c266:	0849      	lsrs	r1, r1, #1
 800c268:	2000      	movs	r0, #0
 800c26a:	460c      	mov	r4, r1
 800c26c:	4605      	mov	r5, r0
 800c26e:	eb12 0804 	adds.w	r8, r2, r4
 800c272:	eb43 0905 	adc.w	r9, r3, r5
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	469a      	mov	sl, r3
 800c27e:	4693      	mov	fp, r2
 800c280:	4652      	mov	r2, sl
 800c282:	465b      	mov	r3, fp
 800c284:	4640      	mov	r0, r8
 800c286:	4649      	mov	r1, r9
 800c288:	f7f4 f89a 	bl	80003c0 <__aeabi_uldivmod>
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	4613      	mov	r3, r2
 800c292:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c29a:	d308      	bcc.n	800c2ae <UART_SetConfig+0x9a2>
 800c29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c29e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c2a2:	d204      	bcs.n	800c2ae <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c2aa:	60da      	str	r2, [r3, #12]
 800c2ac:	e17f      	b.n	800c5ae <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c2b4:	e17b      	b.n	800c5ae <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	69db      	ldr	r3, [r3, #28]
 800c2ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c2be:	f040 80bd 	bne.w	800c43c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c2c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c2c6:	2b20      	cmp	r3, #32
 800c2c8:	dc48      	bgt.n	800c35c <UART_SetConfig+0xa50>
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	db7b      	blt.n	800c3c6 <UART_SetConfig+0xaba>
 800c2ce:	2b20      	cmp	r3, #32
 800c2d0:	d879      	bhi.n	800c3c6 <UART_SetConfig+0xaba>
 800c2d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2d8 <UART_SetConfig+0x9cc>)
 800c2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d8:	0800c363 	.word	0x0800c363
 800c2dc:	0800c36b 	.word	0x0800c36b
 800c2e0:	0800c3c7 	.word	0x0800c3c7
 800c2e4:	0800c3c7 	.word	0x0800c3c7
 800c2e8:	0800c373 	.word	0x0800c373
 800c2ec:	0800c3c7 	.word	0x0800c3c7
 800c2f0:	0800c3c7 	.word	0x0800c3c7
 800c2f4:	0800c3c7 	.word	0x0800c3c7
 800c2f8:	0800c383 	.word	0x0800c383
 800c2fc:	0800c3c7 	.word	0x0800c3c7
 800c300:	0800c3c7 	.word	0x0800c3c7
 800c304:	0800c3c7 	.word	0x0800c3c7
 800c308:	0800c3c7 	.word	0x0800c3c7
 800c30c:	0800c3c7 	.word	0x0800c3c7
 800c310:	0800c3c7 	.word	0x0800c3c7
 800c314:	0800c3c7 	.word	0x0800c3c7
 800c318:	0800c393 	.word	0x0800c393
 800c31c:	0800c3c7 	.word	0x0800c3c7
 800c320:	0800c3c7 	.word	0x0800c3c7
 800c324:	0800c3c7 	.word	0x0800c3c7
 800c328:	0800c3c7 	.word	0x0800c3c7
 800c32c:	0800c3c7 	.word	0x0800c3c7
 800c330:	0800c3c7 	.word	0x0800c3c7
 800c334:	0800c3c7 	.word	0x0800c3c7
 800c338:	0800c3c7 	.word	0x0800c3c7
 800c33c:	0800c3c7 	.word	0x0800c3c7
 800c340:	0800c3c7 	.word	0x0800c3c7
 800c344:	0800c3c7 	.word	0x0800c3c7
 800c348:	0800c3c7 	.word	0x0800c3c7
 800c34c:	0800c3c7 	.word	0x0800c3c7
 800c350:	0800c3c7 	.word	0x0800c3c7
 800c354:	0800c3c7 	.word	0x0800c3c7
 800c358:	0800c3b9 	.word	0x0800c3b9
 800c35c:	2b40      	cmp	r3, #64	@ 0x40
 800c35e:	d02e      	beq.n	800c3be <UART_SetConfig+0xab2>
 800c360:	e031      	b.n	800c3c6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c362:	f7fb fb39 	bl	80079d8 <HAL_RCC_GetPCLK1Freq>
 800c366:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c368:	e033      	b.n	800c3d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c36a:	f7fb fb4b 	bl	8007a04 <HAL_RCC_GetPCLK2Freq>
 800c36e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c370:	e02f      	b.n	800c3d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c376:	4618      	mov	r0, r3
 800c378:	f7fc fd10 	bl	8008d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c380:	e027      	b.n	800c3d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c382:	f107 0318 	add.w	r3, r7, #24
 800c386:	4618      	mov	r0, r3
 800c388:	f7fc fe5c 	bl	8009044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c390:	e01f      	b.n	800c3d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c392:	4b69      	ldr	r3, [pc, #420]	@ (800c538 <UART_SetConfig+0xc2c>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f003 0320 	and.w	r3, r3, #32
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d009      	beq.n	800c3b2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c39e:	4b66      	ldr	r3, [pc, #408]	@ (800c538 <UART_SetConfig+0xc2c>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	08db      	lsrs	r3, r3, #3
 800c3a4:	f003 0303 	and.w	r3, r3, #3
 800c3a8:	4a64      	ldr	r2, [pc, #400]	@ (800c53c <UART_SetConfig+0xc30>)
 800c3aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c3b0:	e00f      	b.n	800c3d2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800c3b2:	4b62      	ldr	r3, [pc, #392]	@ (800c53c <UART_SetConfig+0xc30>)
 800c3b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3b6:	e00c      	b.n	800c3d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c3b8:	4b61      	ldr	r3, [pc, #388]	@ (800c540 <UART_SetConfig+0xc34>)
 800c3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3bc:	e009      	b.n	800c3d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3c4:	e005      	b.n	800c3d2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c3d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c3d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	f000 80ea 	beq.w	800c5ae <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3de:	4a55      	ldr	r2, [pc, #340]	@ (800c534 <UART_SetConfig+0xc28>)
 800c3e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3ec:	005a      	lsls	r2, r3, #1
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	085b      	lsrs	r3, r3, #1
 800c3f4:	441a      	add	r2, r3
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c402:	2b0f      	cmp	r3, #15
 800c404:	d916      	bls.n	800c434 <UART_SetConfig+0xb28>
 800c406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c40c:	d212      	bcs.n	800c434 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c410:	b29b      	uxth	r3, r3
 800c412:	f023 030f 	bic.w	r3, r3, #15
 800c416:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c41a:	085b      	lsrs	r3, r3, #1
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	f003 0307 	and.w	r3, r3, #7
 800c422:	b29a      	uxth	r2, r3
 800c424:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c426:	4313      	orrs	r3, r2
 800c428:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c430:	60da      	str	r2, [r3, #12]
 800c432:	e0bc      	b.n	800c5ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c434:	2301      	movs	r3, #1
 800c436:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c43a:	e0b8      	b.n	800c5ae <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c43c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c440:	2b20      	cmp	r3, #32
 800c442:	dc4b      	bgt.n	800c4dc <UART_SetConfig+0xbd0>
 800c444:	2b00      	cmp	r3, #0
 800c446:	f2c0 8087 	blt.w	800c558 <UART_SetConfig+0xc4c>
 800c44a:	2b20      	cmp	r3, #32
 800c44c:	f200 8084 	bhi.w	800c558 <UART_SetConfig+0xc4c>
 800c450:	a201      	add	r2, pc, #4	@ (adr r2, 800c458 <UART_SetConfig+0xb4c>)
 800c452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c456:	bf00      	nop
 800c458:	0800c4e3 	.word	0x0800c4e3
 800c45c:	0800c4eb 	.word	0x0800c4eb
 800c460:	0800c559 	.word	0x0800c559
 800c464:	0800c559 	.word	0x0800c559
 800c468:	0800c4f3 	.word	0x0800c4f3
 800c46c:	0800c559 	.word	0x0800c559
 800c470:	0800c559 	.word	0x0800c559
 800c474:	0800c559 	.word	0x0800c559
 800c478:	0800c503 	.word	0x0800c503
 800c47c:	0800c559 	.word	0x0800c559
 800c480:	0800c559 	.word	0x0800c559
 800c484:	0800c559 	.word	0x0800c559
 800c488:	0800c559 	.word	0x0800c559
 800c48c:	0800c559 	.word	0x0800c559
 800c490:	0800c559 	.word	0x0800c559
 800c494:	0800c559 	.word	0x0800c559
 800c498:	0800c513 	.word	0x0800c513
 800c49c:	0800c559 	.word	0x0800c559
 800c4a0:	0800c559 	.word	0x0800c559
 800c4a4:	0800c559 	.word	0x0800c559
 800c4a8:	0800c559 	.word	0x0800c559
 800c4ac:	0800c559 	.word	0x0800c559
 800c4b0:	0800c559 	.word	0x0800c559
 800c4b4:	0800c559 	.word	0x0800c559
 800c4b8:	0800c559 	.word	0x0800c559
 800c4bc:	0800c559 	.word	0x0800c559
 800c4c0:	0800c559 	.word	0x0800c559
 800c4c4:	0800c559 	.word	0x0800c559
 800c4c8:	0800c559 	.word	0x0800c559
 800c4cc:	0800c559 	.word	0x0800c559
 800c4d0:	0800c559 	.word	0x0800c559
 800c4d4:	0800c559 	.word	0x0800c559
 800c4d8:	0800c54b 	.word	0x0800c54b
 800c4dc:	2b40      	cmp	r3, #64	@ 0x40
 800c4de:	d037      	beq.n	800c550 <UART_SetConfig+0xc44>
 800c4e0:	e03a      	b.n	800c558 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4e2:	f7fb fa79 	bl	80079d8 <HAL_RCC_GetPCLK1Freq>
 800c4e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c4e8:	e03c      	b.n	800c564 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c4ea:	f7fb fa8b 	bl	8007a04 <HAL_RCC_GetPCLK2Freq>
 800c4ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c4f0:	e038      	b.n	800c564 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7fc fc50 	bl	8008d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c500:	e030      	b.n	800c564 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c502:	f107 0318 	add.w	r3, r7, #24
 800c506:	4618      	mov	r0, r3
 800c508:	f7fc fd9c 	bl	8009044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c510:	e028      	b.n	800c564 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c512:	4b09      	ldr	r3, [pc, #36]	@ (800c538 <UART_SetConfig+0xc2c>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f003 0320 	and.w	r3, r3, #32
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d012      	beq.n	800c544 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c51e:	4b06      	ldr	r3, [pc, #24]	@ (800c538 <UART_SetConfig+0xc2c>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	08db      	lsrs	r3, r3, #3
 800c524:	f003 0303 	and.w	r3, r3, #3
 800c528:	4a04      	ldr	r2, [pc, #16]	@ (800c53c <UART_SetConfig+0xc30>)
 800c52a:	fa22 f303 	lsr.w	r3, r2, r3
 800c52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c530:	e018      	b.n	800c564 <UART_SetConfig+0xc58>
 800c532:	bf00      	nop
 800c534:	08016cd8 	.word	0x08016cd8
 800c538:	58024400 	.word	0x58024400
 800c53c:	03d09000 	.word	0x03d09000
 800c540:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800c544:	4b24      	ldr	r3, [pc, #144]	@ (800c5d8 <UART_SetConfig+0xccc>)
 800c546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c548:	e00c      	b.n	800c564 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c54a:	4b24      	ldr	r3, [pc, #144]	@ (800c5dc <UART_SetConfig+0xcd0>)
 800c54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c54e:	e009      	b.n	800c564 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c550:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c556:	e005      	b.n	800c564 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c558:	2300      	movs	r3, #0
 800c55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c55c:	2301      	movs	r3, #1
 800c55e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c562:	bf00      	nop
    }

    if (pclk != 0U)
 800c564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c566:	2b00      	cmp	r3, #0
 800c568:	d021      	beq.n	800c5ae <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c56e:	4a1c      	ldr	r2, [pc, #112]	@ (800c5e0 <UART_SetConfig+0xcd4>)
 800c570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c574:	461a      	mov	r2, r3
 800c576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c578:	fbb3 f2f2 	udiv	r2, r3, r2
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	085b      	lsrs	r3, r3, #1
 800c582:	441a      	add	r2, r3
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	fbb2 f3f3 	udiv	r3, r2, r3
 800c58c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c590:	2b0f      	cmp	r3, #15
 800c592:	d909      	bls.n	800c5a8 <UART_SetConfig+0xc9c>
 800c594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c596:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c59a:	d205      	bcs.n	800c5a8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c59e:	b29a      	uxth	r2, r3
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	60da      	str	r2, [r3, #12]
 800c5a6:	e002      	b.n	800c5ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c5ca:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3748      	adds	r7, #72	@ 0x48
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5d8:	03d09000 	.word	0x03d09000
 800c5dc:	003d0900 	.word	0x003d0900
 800c5e0:	08016cd8 	.word	0x08016cd8

0800c5e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5f0:	f003 0308 	and.w	r3, r3, #8
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00a      	beq.n	800c60e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	430a      	orrs	r2, r1
 800c60c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c612:	f003 0301 	and.w	r3, r3, #1
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00a      	beq.n	800c630 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	430a      	orrs	r2, r1
 800c62e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c634:	f003 0302 	and.w	r3, r3, #2
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00a      	beq.n	800c652 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	430a      	orrs	r2, r1
 800c650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c656:	f003 0304 	and.w	r3, r3, #4
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00a      	beq.n	800c674 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	430a      	orrs	r2, r1
 800c672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c678:	f003 0310 	and.w	r3, r3, #16
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00a      	beq.n	800c696 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	430a      	orrs	r2, r1
 800c694:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c69a:	f003 0320 	and.w	r3, r3, #32
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00a      	beq.n	800c6b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	430a      	orrs	r2, r1
 800c6b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d01a      	beq.n	800c6fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	430a      	orrs	r2, r1
 800c6d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c6e2:	d10a      	bne.n	800c6fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	430a      	orrs	r2, r1
 800c6f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c702:	2b00      	cmp	r3, #0
 800c704:	d00a      	beq.n	800c71c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	430a      	orrs	r2, r1
 800c71a:	605a      	str	r2, [r3, #4]
  }
}
 800c71c:	bf00      	nop
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b098      	sub	sp, #96	@ 0x60
 800c72c:	af02      	add	r7, sp, #8
 800c72e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c738:	f7f6 f9d6 	bl	8002ae8 <HAL_GetTick>
 800c73c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f003 0308 	and.w	r3, r3, #8
 800c748:	2b08      	cmp	r3, #8
 800c74a:	d12f      	bne.n	800c7ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c74c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c750:	9300      	str	r3, [sp, #0]
 800c752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c754:	2200      	movs	r2, #0
 800c756:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f88e 	bl	800c87c <UART_WaitOnFlagUntilTimeout>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d022      	beq.n	800c7ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76e:	e853 3f00 	ldrex	r3, [r3]
 800c772:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c776:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c77a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	461a      	mov	r2, r3
 800c782:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c784:	647b      	str	r3, [r7, #68]	@ 0x44
 800c786:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c788:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c78a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c78c:	e841 2300 	strex	r3, r2, [r1]
 800c790:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c794:	2b00      	cmp	r3, #0
 800c796:	d1e6      	bne.n	800c766 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2220      	movs	r2, #32
 800c79c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c7a8:	2303      	movs	r3, #3
 800c7aa:	e063      	b.n	800c874 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f003 0304 	and.w	r3, r3, #4
 800c7b6:	2b04      	cmp	r3, #4
 800c7b8:	d149      	bne.n	800c84e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 f857 	bl	800c87c <UART_WaitOnFlagUntilTimeout>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d03c      	beq.n	800c84e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7dc:	e853 3f00 	ldrex	r3, [r3]
 800c7e0:	623b      	str	r3, [r7, #32]
   return(result);
 800c7e2:	6a3b      	ldr	r3, [r7, #32]
 800c7e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c7e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c7f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7fa:	e841 2300 	strex	r3, r2, [r1]
 800c7fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1e6      	bne.n	800c7d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	3308      	adds	r3, #8
 800c80c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	e853 3f00 	ldrex	r3, [r3]
 800c814:	60fb      	str	r3, [r7, #12]
   return(result);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f023 0301 	bic.w	r3, r3, #1
 800c81c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	3308      	adds	r3, #8
 800c824:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c826:	61fa      	str	r2, [r7, #28]
 800c828:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82a:	69b9      	ldr	r1, [r7, #24]
 800c82c:	69fa      	ldr	r2, [r7, #28]
 800c82e:	e841 2300 	strex	r3, r2, [r1]
 800c832:	617b      	str	r3, [r7, #20]
   return(result);
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1e5      	bne.n	800c806 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2220      	movs	r2, #32
 800c83e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c84a:	2303      	movs	r3, #3
 800c84c:	e012      	b.n	800c874 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2220      	movs	r2, #32
 800c852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2220      	movs	r2, #32
 800c85a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2200      	movs	r2, #0
 800c86e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c872:	2300      	movs	r3, #0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3758      	adds	r7, #88	@ 0x58
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	603b      	str	r3, [r7, #0]
 800c888:	4613      	mov	r3, r2
 800c88a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c88c:	e04f      	b.n	800c92e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c88e:	69bb      	ldr	r3, [r7, #24]
 800c890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c894:	d04b      	beq.n	800c92e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c896:	f7f6 f927 	bl	8002ae8 <HAL_GetTick>
 800c89a:	4602      	mov	r2, r0
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	69ba      	ldr	r2, [r7, #24]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d302      	bcc.n	800c8ac <UART_WaitOnFlagUntilTimeout+0x30>
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d101      	bne.n	800c8b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c8ac:	2303      	movs	r3, #3
 800c8ae:	e04e      	b.n	800c94e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f003 0304 	and.w	r3, r3, #4
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d037      	beq.n	800c92e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	2b80      	cmp	r3, #128	@ 0x80
 800c8c2:	d034      	beq.n	800c92e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	2b40      	cmp	r3, #64	@ 0x40
 800c8c8:	d031      	beq.n	800c92e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	69db      	ldr	r3, [r3, #28]
 800c8d0:	f003 0308 	and.w	r3, r3, #8
 800c8d4:	2b08      	cmp	r3, #8
 800c8d6:	d110      	bne.n	800c8fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2208      	movs	r2, #8
 800c8de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c8e0:	68f8      	ldr	r0, [r7, #12]
 800c8e2:	f000 f95b 	bl	800cb9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2208      	movs	r2, #8
 800c8ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e029      	b.n	800c94e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	69db      	ldr	r3, [r3, #28]
 800c900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c908:	d111      	bne.n	800c92e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f000 f941 	bl	800cb9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2220      	movs	r2, #32
 800c91e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2200      	movs	r2, #0
 800c926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c92a:	2303      	movs	r3, #3
 800c92c:	e00f      	b.n	800c94e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	69da      	ldr	r2, [r3, #28]
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	4013      	ands	r3, r2
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	bf0c      	ite	eq
 800c93e:	2301      	moveq	r3, #1
 800c940:	2300      	movne	r3, #0
 800c942:	b2db      	uxtb	r3, r3
 800c944:	461a      	mov	r2, r3
 800c946:	79fb      	ldrb	r3, [r7, #7]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d0a0      	beq.n	800c88e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c94c:	2300      	movs	r3, #0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
	...

0800c958 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c958:	b480      	push	{r7}
 800c95a:	b0a3      	sub	sp, #140	@ 0x8c
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	4613      	mov	r3, r2
 800c964:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	68ba      	ldr	r2, [r7, #8]
 800c96a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	88fa      	ldrh	r2, [r7, #6]
 800c970:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	88fa      	ldrh	r2, [r7, #6]
 800c978:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2200      	movs	r2, #0
 800c980:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c98a:	d10e      	bne.n	800c9aa <UART_Start_Receive_IT+0x52>
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	691b      	ldr	r3, [r3, #16]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d105      	bne.n	800c9a0 <UART_Start_Receive_IT+0x48>
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c99a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c99e:	e02d      	b.n	800c9fc <UART_Start_Receive_IT+0xa4>
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	22ff      	movs	r2, #255	@ 0xff
 800c9a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c9a8:	e028      	b.n	800c9fc <UART_Start_Receive_IT+0xa4>
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d10d      	bne.n	800c9ce <UART_Start_Receive_IT+0x76>
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d104      	bne.n	800c9c4 <UART_Start_Receive_IT+0x6c>
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	22ff      	movs	r2, #255	@ 0xff
 800c9be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c9c2:	e01b      	b.n	800c9fc <UART_Start_Receive_IT+0xa4>
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	227f      	movs	r2, #127	@ 0x7f
 800c9c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c9cc:	e016      	b.n	800c9fc <UART_Start_Receive_IT+0xa4>
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9d6:	d10d      	bne.n	800c9f4 <UART_Start_Receive_IT+0x9c>
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	691b      	ldr	r3, [r3, #16]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d104      	bne.n	800c9ea <UART_Start_Receive_IT+0x92>
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	227f      	movs	r2, #127	@ 0x7f
 800c9e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c9e8:	e008      	b.n	800c9fc <UART_Start_Receive_IT+0xa4>
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	223f      	movs	r2, #63	@ 0x3f
 800c9ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c9f2:	e003      	b.n	800c9fc <UART_Start_Receive_IT+0xa4>
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2222      	movs	r2, #34	@ 0x22
 800ca08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	3308      	adds	r3, #8
 800ca12:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca16:	e853 3f00 	ldrex	r3, [r3]
 800ca1a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ca1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca1e:	f043 0301 	orr.w	r3, r3, #1
 800ca22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	3308      	adds	r3, #8
 800ca2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ca30:	673a      	str	r2, [r7, #112]	@ 0x70
 800ca32:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca34:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca36:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ca38:	e841 2300 	strex	r3, r2, [r1]
 800ca3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ca3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1e3      	bne.n	800ca0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca4c:	d14f      	bne.n	800caee <UART_Start_Receive_IT+0x196>
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ca54:	88fa      	ldrh	r2, [r7, #6]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d349      	bcc.n	800caee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca62:	d107      	bne.n	800ca74 <UART_Start_Receive_IT+0x11c>
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	691b      	ldr	r3, [r3, #16]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d103      	bne.n	800ca74 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	4a47      	ldr	r2, [pc, #284]	@ (800cb8c <UART_Start_Receive_IT+0x234>)
 800ca70:	675a      	str	r2, [r3, #116]	@ 0x74
 800ca72:	e002      	b.n	800ca7a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	4a46      	ldr	r2, [pc, #280]	@ (800cb90 <UART_Start_Receive_IT+0x238>)
 800ca78:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	691b      	ldr	r3, [r3, #16]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d01a      	beq.n	800cab8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca8a:	e853 3f00 	ldrex	r3, [r3]
 800ca8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ca90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ca96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	461a      	mov	r2, r3
 800caa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800caa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800caa6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800caaa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800caac:	e841 2300 	strex	r3, r2, [r1]
 800cab0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800cab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d1e4      	bne.n	800ca82 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	3308      	adds	r3, #8
 800cabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cac2:	e853 3f00 	ldrex	r3, [r3]
 800cac6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cace:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	3308      	adds	r3, #8
 800cad6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cad8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800cada:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cadc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cae0:	e841 2300 	strex	r3, r2, [r1]
 800cae4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800cae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d1e5      	bne.n	800cab8 <UART_Start_Receive_IT+0x160>
 800caec:	e046      	b.n	800cb7c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800caf6:	d107      	bne.n	800cb08 <UART_Start_Receive_IT+0x1b0>
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d103      	bne.n	800cb08 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	4a24      	ldr	r2, [pc, #144]	@ (800cb94 <UART_Start_Receive_IT+0x23c>)
 800cb04:	675a      	str	r2, [r3, #116]	@ 0x74
 800cb06:	e002      	b.n	800cb0e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	4a23      	ldr	r2, [pc, #140]	@ (800cb98 <UART_Start_Receive_IT+0x240>)
 800cb0c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	691b      	ldr	r3, [r3, #16]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d019      	beq.n	800cb4a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb1e:	e853 3f00 	ldrex	r3, [r3]
 800cb22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb26:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800cb2a:	677b      	str	r3, [r7, #116]	@ 0x74
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	461a      	mov	r2, r3
 800cb32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb34:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb36:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cb3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb3c:	e841 2300 	strex	r3, r2, [r1]
 800cb40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cb42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d1e6      	bne.n	800cb16 <UART_Start_Receive_IT+0x1be>
 800cb48:	e018      	b.n	800cb7c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	e853 3f00 	ldrex	r3, [r3]
 800cb56:	613b      	str	r3, [r7, #16]
   return(result);
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	f043 0320 	orr.w	r3, r3, #32
 800cb5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	461a      	mov	r2, r3
 800cb66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb68:	623b      	str	r3, [r7, #32]
 800cb6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb6c:	69f9      	ldr	r1, [r7, #28]
 800cb6e:	6a3a      	ldr	r2, [r7, #32]
 800cb70:	e841 2300 	strex	r3, r2, [r1]
 800cb74:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb76:	69bb      	ldr	r3, [r7, #24]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1e6      	bne.n	800cb4a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	378c      	adds	r7, #140	@ 0x8c
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop
 800cb8c:	0800d3bd 	.word	0x0800d3bd
 800cb90:	0800d05d 	.word	0x0800d05d
 800cb94:	0800cea5 	.word	0x0800cea5
 800cb98:	0800cced 	.word	0x0800cced

0800cb9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b095      	sub	sp, #84	@ 0x54
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbac:	e853 3f00 	ldrex	r3, [r3]
 800cbb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cbb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbc2:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cbc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cbca:	e841 2300 	strex	r3, r2, [r1]
 800cbce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1e6      	bne.n	800cba4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	3308      	adds	r3, #8
 800cbdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbde:	6a3b      	ldr	r3, [r7, #32]
 800cbe0:	e853 3f00 	ldrex	r3, [r3]
 800cbe4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbe6:	69fa      	ldr	r2, [r7, #28]
 800cbe8:	4b1e      	ldr	r3, [pc, #120]	@ (800cc64 <UART_EndRxTransfer+0xc8>)
 800cbea:	4013      	ands	r3, r2
 800cbec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	3308      	adds	r3, #8
 800cbf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cbf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cbf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cbfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbfe:	e841 2300 	strex	r3, r2, [r1]
 800cc02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d1e5      	bne.n	800cbd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d118      	bne.n	800cc44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	e853 3f00 	ldrex	r3, [r3]
 800cc1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	f023 0310 	bic.w	r3, r3, #16
 800cc26:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc30:	61bb      	str	r3, [r7, #24]
 800cc32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc34:	6979      	ldr	r1, [r7, #20]
 800cc36:	69ba      	ldr	r2, [r7, #24]
 800cc38:	e841 2300 	strex	r3, r2, [r1]
 800cc3c:	613b      	str	r3, [r7, #16]
   return(result);
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d1e6      	bne.n	800cc12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2220      	movs	r2, #32
 800cc48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2200      	movs	r2, #0
 800cc56:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cc58:	bf00      	nop
 800cc5a:	3754      	adds	r7, #84	@ 0x54
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr
 800cc64:	effffffe 	.word	0xeffffffe

0800cc68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2200      	movs	r2, #0
 800cc82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f7fe fe36 	bl	800b8f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc8c:	bf00      	nop
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b088      	sub	sp, #32
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	e853 3f00 	ldrex	r3, [r3]
 800cca8:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccb0:	61fb      	str	r3, [r7, #28]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	61bb      	str	r3, [r7, #24]
 800ccbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccbe:	6979      	ldr	r1, [r7, #20]
 800ccc0:	69ba      	ldr	r2, [r7, #24]
 800ccc2:	e841 2300 	strex	r3, r2, [r1]
 800ccc6:	613b      	str	r3, [r7, #16]
   return(result);
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d1e6      	bne.n	800cc9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2220      	movs	r2, #32
 800ccd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7fe fdf7 	bl	800b8d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cce2:	bf00      	nop
 800cce4:	3720      	adds	r7, #32
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
	...

0800ccec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b09c      	sub	sp, #112	@ 0x70
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ccfa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd04:	2b22      	cmp	r3, #34	@ 0x22
 800cd06:	f040 80be 	bne.w	800ce86 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd10:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cd14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800cd18:	b2d9      	uxtb	r1, r3
 800cd1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd24:	400a      	ands	r2, r1
 800cd26:	b2d2      	uxtb	r2, r2
 800cd28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd2e:	1c5a      	adds	r2, r3, #1
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f040 80a1 	bne.w	800ce96 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd5c:	e853 3f00 	ldrex	r3, [r3]
 800cd60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cd62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd68:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	461a      	mov	r2, r3
 800cd70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cd72:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cd74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cd78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cd7a:	e841 2300 	strex	r3, r2, [r1]
 800cd7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cd80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1e6      	bne.n	800cd54 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	3308      	adds	r3, #8
 800cd8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd90:	e853 3f00 	ldrex	r3, [r3]
 800cd94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cd96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd98:	f023 0301 	bic.w	r3, r3, #1
 800cd9c:	667b      	str	r3, [r7, #100]	@ 0x64
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	3308      	adds	r3, #8
 800cda4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cda6:	647a      	str	r2, [r7, #68]	@ 0x44
 800cda8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cdac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdae:	e841 2300 	strex	r3, r2, [r1]
 800cdb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cdb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d1e5      	bne.n	800cd86 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2220      	movs	r2, #32
 800cdbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a33      	ldr	r2, [pc, #204]	@ (800cea0 <UART_RxISR_8BIT+0x1b4>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d01f      	beq.n	800ce18 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d018      	beq.n	800ce18 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdee:	e853 3f00 	ldrex	r3, [r3]
 800cdf2:	623b      	str	r3, [r7, #32]
   return(result);
 800cdf4:	6a3b      	ldr	r3, [r7, #32]
 800cdf6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cdfa:	663b      	str	r3, [r7, #96]	@ 0x60
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	461a      	mov	r2, r3
 800ce02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ce04:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce0c:	e841 2300 	strex	r3, r2, [r1]
 800ce10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d1e6      	bne.n	800cde6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d12e      	bne.n	800ce7e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	e853 3f00 	ldrex	r3, [r3]
 800ce32:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f023 0310 	bic.w	r3, r3, #16
 800ce3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	461a      	mov	r2, r3
 800ce42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce44:	61fb      	str	r3, [r7, #28]
 800ce46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce48:	69b9      	ldr	r1, [r7, #24]
 800ce4a:	69fa      	ldr	r2, [r7, #28]
 800ce4c:	e841 2300 	strex	r3, r2, [r1]
 800ce50:	617b      	str	r3, [r7, #20]
   return(result);
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d1e6      	bne.n	800ce26 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	69db      	ldr	r3, [r3, #28]
 800ce5e:	f003 0310 	and.w	r3, r3, #16
 800ce62:	2b10      	cmp	r3, #16
 800ce64:	d103      	bne.n	800ce6e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	2210      	movs	r2, #16
 800ce6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ce74:	4619      	mov	r1, r3
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f7f4 fe18 	bl	8001aac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ce7c:	e00b      	b.n	800ce96 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f7fe fd30 	bl	800b8e4 <HAL_UART_RxCpltCallback>
}
 800ce84:	e007      	b.n	800ce96 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	699a      	ldr	r2, [r3, #24]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f042 0208 	orr.w	r2, r2, #8
 800ce94:	619a      	str	r2, [r3, #24]
}
 800ce96:	bf00      	nop
 800ce98:	3770      	adds	r7, #112	@ 0x70
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	58000c00 	.word	0x58000c00

0800cea4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b09c      	sub	sp, #112	@ 0x70
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ceb2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cebc:	2b22      	cmp	r3, #34	@ 0x22
 800cebe:	f040 80be 	bne.w	800d03e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cec8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ced0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ced2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ced6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ceda:	4013      	ands	r3, r2
 800cedc:	b29a      	uxth	r2, r3
 800cede:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cee0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cee6:	1c9a      	adds	r2, r3, #2
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	3b01      	subs	r3, #1
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	f040 80a1 	bne.w	800d04e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf14:	e853 3f00 	ldrex	r3, [r3]
 800cf18:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cf1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cf20:	667b      	str	r3, [r7, #100]	@ 0x64
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	461a      	mov	r2, r3
 800cf28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf2a:	657b      	str	r3, [r7, #84]	@ 0x54
 800cf2c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cf30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cf32:	e841 2300 	strex	r3, r2, [r1]
 800cf36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cf38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d1e6      	bne.n	800cf0c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	3308      	adds	r3, #8
 800cf44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf48:	e853 3f00 	ldrex	r3, [r3]
 800cf4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cf4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf50:	f023 0301 	bic.w	r3, r3, #1
 800cf54:	663b      	str	r3, [r7, #96]	@ 0x60
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	3308      	adds	r3, #8
 800cf5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cf5e:	643a      	str	r2, [r7, #64]	@ 0x40
 800cf60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cf64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf66:	e841 2300 	strex	r3, r2, [r1]
 800cf6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cf6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d1e5      	bne.n	800cf3e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2220      	movs	r2, #32
 800cf76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4a33      	ldr	r2, [pc, #204]	@ (800d058 <UART_RxISR_16BIT+0x1b4>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d01f      	beq.n	800cfd0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d018      	beq.n	800cfd0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa4:	6a3b      	ldr	r3, [r7, #32]
 800cfa6:	e853 3f00 	ldrex	r3, [r3]
 800cfaa:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cfb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	461a      	mov	r2, r3
 800cfba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cfbe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cfc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfc4:	e841 2300 	strex	r3, r2, [r1]
 800cfc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1e6      	bne.n	800cf9e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d12e      	bne.n	800d036 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	e853 3f00 	ldrex	r3, [r3]
 800cfea:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	f023 0310 	bic.w	r3, r3, #16
 800cff2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	461a      	mov	r2, r3
 800cffa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cffc:	61bb      	str	r3, [r7, #24]
 800cffe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d000:	6979      	ldr	r1, [r7, #20]
 800d002:	69ba      	ldr	r2, [r7, #24]
 800d004:	e841 2300 	strex	r3, r2, [r1]
 800d008:	613b      	str	r3, [r7, #16]
   return(result);
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d1e6      	bne.n	800cfde <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	69db      	ldr	r3, [r3, #28]
 800d016:	f003 0310 	and.w	r3, r3, #16
 800d01a:	2b10      	cmp	r3, #16
 800d01c:	d103      	bne.n	800d026 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	2210      	movs	r2, #16
 800d024:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d02c:	4619      	mov	r1, r3
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f7f4 fd3c 	bl	8001aac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d034:	e00b      	b.n	800d04e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f7fe fc54 	bl	800b8e4 <HAL_UART_RxCpltCallback>
}
 800d03c:	e007      	b.n	800d04e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	699a      	ldr	r2, [r3, #24]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f042 0208 	orr.w	r2, r2, #8
 800d04c:	619a      	str	r2, [r3, #24]
}
 800d04e:	bf00      	nop
 800d050:	3770      	adds	r7, #112	@ 0x70
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	58000c00 	.word	0x58000c00

0800d05c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b0ac      	sub	sp, #176	@ 0xb0
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d06a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	69db      	ldr	r3, [r3, #28]
 800d074:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d092:	2b22      	cmp	r3, #34	@ 0x22
 800d094:	f040 8180 	bne.w	800d398 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d09e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d0a2:	e123      	b.n	800d2ec <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0aa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d0ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d0b2:	b2d9      	uxtb	r1, r3
 800d0b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800d0b8:	b2da      	uxtb	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0be:	400a      	ands	r2, r1
 800d0c0:	b2d2      	uxtb	r2, r2
 800d0c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0c8:	1c5a      	adds	r2, r3, #1
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	b29a      	uxth	r2, r3
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	69db      	ldr	r3, [r3, #28]
 800d0e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d0ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0ee:	f003 0307 	and.w	r3, r3, #7
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d053      	beq.n	800d19e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d0f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0fa:	f003 0301 	and.w	r3, r3, #1
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d011      	beq.n	800d126 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d102:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d00b      	beq.n	800d126 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2201      	movs	r2, #1
 800d114:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d11c:	f043 0201 	orr.w	r2, r3, #1
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d12a:	f003 0302 	and.w	r3, r3, #2
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d011      	beq.n	800d156 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d136:	f003 0301 	and.w	r3, r3, #1
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00b      	beq.n	800d156 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	2202      	movs	r2, #2
 800d144:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d14c:	f043 0204 	orr.w	r2, r3, #4
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d15a:	f003 0304 	and.w	r3, r3, #4
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d011      	beq.n	800d186 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d166:	f003 0301 	and.w	r3, r3, #1
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00b      	beq.n	800d186 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	2204      	movs	r2, #4
 800d174:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d17c:	f043 0202 	orr.w	r2, r3, #2
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d006      	beq.n	800d19e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7fe fbb1 	bl	800b8f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2200      	movs	r2, #0
 800d19a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	f040 80a0 	bne.w	800d2ec <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d1b4:	e853 3f00 	ldrex	r3, [r3]
 800d1b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800d1ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d1bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d1c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d1ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d1d0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d1d4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d1d6:	e841 2300 	strex	r3, r2, [r1]
 800d1da:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800d1dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d1e4      	bne.n	800d1ac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	3308      	adds	r3, #8
 800d1e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1ec:	e853 3f00 	ldrex	r3, [r3]
 800d1f0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800d1f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d1f4:	4b6e      	ldr	r3, [pc, #440]	@ (800d3b0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800d1f6:	4013      	ands	r3, r2
 800d1f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	3308      	adds	r3, #8
 800d202:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d206:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d208:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d20a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d20c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d20e:	e841 2300 	strex	r3, r2, [r1]
 800d212:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d214:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d216:	2b00      	cmp	r3, #0
 800d218:	d1e3      	bne.n	800d1e2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2220      	movs	r2, #32
 800d21e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	4a60      	ldr	r2, [pc, #384]	@ (800d3b4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d021      	beq.n	800d27c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d242:	2b00      	cmp	r3, #0
 800d244:	d01a      	beq.n	800d27c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d24c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d24e:	e853 3f00 	ldrex	r3, [r3]
 800d252:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d256:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d25a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	461a      	mov	r2, r3
 800d264:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d268:	657b      	str	r3, [r7, #84]	@ 0x54
 800d26a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d26c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d26e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d270:	e841 2300 	strex	r3, r2, [r1]
 800d274:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d1e4      	bne.n	800d246 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d280:	2b01      	cmp	r3, #1
 800d282:	d130      	bne.n	800d2e6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2200      	movs	r2, #0
 800d288:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d292:	e853 3f00 	ldrex	r3, [r3]
 800d296:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29a:	f023 0310 	bic.w	r3, r3, #16
 800d29e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d2ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800d2ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d2b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d2b4:	e841 2300 	strex	r3, r2, [r1]
 800d2b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1e4      	bne.n	800d28a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	69db      	ldr	r3, [r3, #28]
 800d2c6:	f003 0310 	and.w	r3, r3, #16
 800d2ca:	2b10      	cmp	r3, #16
 800d2cc:	d103      	bne.n	800d2d6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2210      	movs	r2, #16
 800d2d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d2dc:	4619      	mov	r1, r3
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f7f4 fbe4 	bl	8001aac <HAL_UARTEx_RxEventCallback>
 800d2e4:	e002      	b.n	800d2ec <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f7fe fafc 	bl	800b8e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d2ec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d006      	beq.n	800d302 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800d2f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2f8:	f003 0320 	and.w	r3, r3, #32
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f47f aed1 	bne.w	800d0a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d308:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d30c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d310:	2b00      	cmp	r3, #0
 800d312:	d049      	beq.n	800d3a8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d31a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d31e:	429a      	cmp	r2, r3
 800d320:	d242      	bcs.n	800d3a8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	3308      	adds	r3, #8
 800d328:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d32a:	6a3b      	ldr	r3, [r7, #32]
 800d32c:	e853 3f00 	ldrex	r3, [r3]
 800d330:	61fb      	str	r3, [r7, #28]
   return(result);
 800d332:	69fb      	ldr	r3, [r7, #28]
 800d334:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d338:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	3308      	adds	r3, #8
 800d342:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d346:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d348:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d34c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d34e:	e841 2300 	strex	r3, r2, [r1]
 800d352:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d356:	2b00      	cmp	r3, #0
 800d358:	d1e3      	bne.n	800d322 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4a16      	ldr	r2, [pc, #88]	@ (800d3b8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d35e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	e853 3f00 	ldrex	r3, [r3]
 800d36c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	f043 0320 	orr.w	r3, r3, #32
 800d374:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	461a      	mov	r2, r3
 800d37e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d382:	61bb      	str	r3, [r7, #24]
 800d384:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d386:	6979      	ldr	r1, [r7, #20]
 800d388:	69ba      	ldr	r2, [r7, #24]
 800d38a:	e841 2300 	strex	r3, r2, [r1]
 800d38e:	613b      	str	r3, [r7, #16]
   return(result);
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1e4      	bne.n	800d360 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d396:	e007      	b.n	800d3a8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	699a      	ldr	r2, [r3, #24]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f042 0208 	orr.w	r2, r2, #8
 800d3a6:	619a      	str	r2, [r3, #24]
}
 800d3a8:	bf00      	nop
 800d3aa:	37b0      	adds	r7, #176	@ 0xb0
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	effffffe 	.word	0xeffffffe
 800d3b4:	58000c00 	.word	0x58000c00
 800d3b8:	0800cced 	.word	0x0800cced

0800d3bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b0ae      	sub	sp, #184	@ 0xb8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d3ca:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	69db      	ldr	r3, [r3, #28]
 800d3d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d3f2:	2b22      	cmp	r3, #34	@ 0x22
 800d3f4:	f040 8184 	bne.w	800d700 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d3fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d402:	e127      	b.n	800d654 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d40a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d412:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d416:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800d41a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d41e:	4013      	ands	r3, r2
 800d420:	b29a      	uxth	r2, r3
 800d422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d426:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d42c:	1c9a      	adds	r2, r3, #2
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d438:	b29b      	uxth	r3, r3
 800d43a:	3b01      	subs	r3, #1
 800d43c:	b29a      	uxth	r2, r3
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	69db      	ldr	r3, [r3, #28]
 800d44a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d44e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d452:	f003 0307 	and.w	r3, r3, #7
 800d456:	2b00      	cmp	r3, #0
 800d458:	d053      	beq.n	800d502 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d45a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d45e:	f003 0301 	and.w	r3, r3, #1
 800d462:	2b00      	cmp	r3, #0
 800d464:	d011      	beq.n	800d48a <UART_RxISR_16BIT_FIFOEN+0xce>
 800d466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d46a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d00b      	beq.n	800d48a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2201      	movs	r2, #1
 800d478:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d480:	f043 0201 	orr.w	r2, r3, #1
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d48a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d48e:	f003 0302 	and.w	r3, r3, #2
 800d492:	2b00      	cmp	r3, #0
 800d494:	d011      	beq.n	800d4ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d49a:	f003 0301 	and.w	r3, r3, #1
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d00b      	beq.n	800d4ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	2202      	movs	r2, #2
 800d4a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4b0:	f043 0204 	orr.w	r2, r3, #4
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d4be:	f003 0304 	and.w	r3, r3, #4
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d011      	beq.n	800d4ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d4c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d4ca:	f003 0301 	and.w	r3, r3, #1
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d00b      	beq.n	800d4ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2204      	movs	r2, #4
 800d4d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4e0:	f043 0202 	orr.w	r2, r3, #2
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d006      	beq.n	800d502 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f7fe f9ff 	bl	800b8f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d508:	b29b      	uxth	r3, r3
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	f040 80a2 	bne.w	800d654 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d516:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d518:	e853 3f00 	ldrex	r3, [r3]
 800d51c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d51e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d524:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	461a      	mov	r2, r3
 800d52e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d532:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d536:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d538:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d53a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d53e:	e841 2300 	strex	r3, r2, [r1]
 800d542:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d544:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1e2      	bne.n	800d510 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	3308      	adds	r3, #8
 800d550:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d552:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d554:	e853 3f00 	ldrex	r3, [r3]
 800d558:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d55a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d55c:	4b6e      	ldr	r3, [pc, #440]	@ (800d718 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800d55e:	4013      	ands	r3, r2
 800d560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	3308      	adds	r3, #8
 800d56a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d56e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d570:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d572:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d574:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d576:	e841 2300 	strex	r3, r2, [r1]
 800d57a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d57c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1e3      	bne.n	800d54a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2220      	movs	r2, #32
 800d586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4a60      	ldr	r2, [pc, #384]	@ (800d71c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d021      	beq.n	800d5e4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d01a      	beq.n	800d5e4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5b6:	e853 3f00 	ldrex	r3, [r3]
 800d5ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d5bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d5c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d5d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d5d2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d5d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d5d8:	e841 2300 	strex	r3, r2, [r1]
 800d5dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d5de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d1e4      	bne.n	800d5ae <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d130      	bne.n	800d64e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5fa:	e853 3f00 	ldrex	r3, [r3]
 800d5fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d602:	f023 0310 	bic.w	r3, r3, #16
 800d606:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	461a      	mov	r2, r3
 800d610:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d614:	647b      	str	r3, [r7, #68]	@ 0x44
 800d616:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d618:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d61a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d61c:	e841 2300 	strex	r3, r2, [r1]
 800d620:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d624:	2b00      	cmp	r3, #0
 800d626:	d1e4      	bne.n	800d5f2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	69db      	ldr	r3, [r3, #28]
 800d62e:	f003 0310 	and.w	r3, r3, #16
 800d632:	2b10      	cmp	r3, #16
 800d634:	d103      	bne.n	800d63e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2210      	movs	r2, #16
 800d63c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d644:	4619      	mov	r1, r3
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f7f4 fa30 	bl	8001aac <HAL_UARTEx_RxEventCallback>
 800d64c:	e002      	b.n	800d654 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f7fe f948 	bl	800b8e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d654:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d006      	beq.n	800d66a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d65c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d660:	f003 0320 	and.w	r3, r3, #32
 800d664:	2b00      	cmp	r3, #0
 800d666:	f47f aecd 	bne.w	800d404 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d670:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d674:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d049      	beq.n	800d710 <UART_RxISR_16BIT_FIFOEN+0x354>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d682:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800d686:	429a      	cmp	r2, r3
 800d688:	d242      	bcs.n	800d710 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	3308      	adds	r3, #8
 800d690:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d694:	e853 3f00 	ldrex	r3, [r3]
 800d698:	623b      	str	r3, [r7, #32]
   return(result);
 800d69a:	6a3b      	ldr	r3, [r7, #32]
 800d69c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d6a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	3308      	adds	r3, #8
 800d6aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d6ae:	633a      	str	r2, [r7, #48]	@ 0x30
 800d6b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6b6:	e841 2300 	strex	r3, r2, [r1]
 800d6ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d1e3      	bne.n	800d68a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4a16      	ldr	r2, [pc, #88]	@ (800d720 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d6c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	e853 3f00 	ldrex	r3, [r3]
 800d6d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f043 0320 	orr.w	r3, r3, #32
 800d6dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d6ea:	61fb      	str	r3, [r7, #28]
 800d6ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ee:	69b9      	ldr	r1, [r7, #24]
 800d6f0:	69fa      	ldr	r2, [r7, #28]
 800d6f2:	e841 2300 	strex	r3, r2, [r1]
 800d6f6:	617b      	str	r3, [r7, #20]
   return(result);
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d1e4      	bne.n	800d6c8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d6fe:	e007      	b.n	800d710 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	699a      	ldr	r2, [r3, #24]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f042 0208 	orr.w	r2, r2, #8
 800d70e:	619a      	str	r2, [r3, #24]
}
 800d710:	bf00      	nop
 800d712:	37b8      	adds	r7, #184	@ 0xb8
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}
 800d718:	effffffe 	.word	0xeffffffe
 800d71c:	58000c00 	.word	0x58000c00
 800d720:	0800cea5 	.word	0x0800cea5

0800d724 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d724:	b480      	push	{r7}
 800d726:	b083      	sub	sp, #12
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d72c:	bf00      	nop
 800d72e:	370c      	adds	r7, #12
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr

0800d738 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d738:	b480      	push	{r7}
 800d73a:	b083      	sub	sp, #12
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d740:	bf00      	nop
 800d742:	370c      	adds	r7, #12
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr

0800d74c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d754:	bf00      	nop
 800d756:	370c      	adds	r7, #12
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr

0800d760 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d760:	b480      	push	{r7}
 800d762:	b085      	sub	sp, #20
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d76e:	2b01      	cmp	r3, #1
 800d770:	d101      	bne.n	800d776 <HAL_UARTEx_DisableFifoMode+0x16>
 800d772:	2302      	movs	r3, #2
 800d774:	e027      	b.n	800d7c6 <HAL_UARTEx_DisableFifoMode+0x66>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2201      	movs	r2, #1
 800d77a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2224      	movs	r2, #36	@ 0x24
 800d782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f022 0201 	bic.w	r2, r2, #1
 800d79c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d7a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2220      	movs	r2, #32
 800d7b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3714      	adds	r7, #20
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr

0800d7d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b084      	sub	sp, #16
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
 800d7da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d101      	bne.n	800d7ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d7e6:	2302      	movs	r3, #2
 800d7e8:	e02d      	b.n	800d846 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2224      	movs	r2, #36	@ 0x24
 800d7f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f022 0201 	bic.w	r2, r2, #1
 800d810:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	689b      	ldr	r3, [r3, #8]
 800d818:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	683a      	ldr	r2, [r7, #0]
 800d822:	430a      	orrs	r2, r1
 800d824:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f8a0 	bl	800d96c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	68fa      	ldr	r2, [r7, #12]
 800d832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2220      	movs	r2, #32
 800d838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2200      	movs	r2, #0
 800d840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d844:	2300      	movs	r3, #0
}
 800d846:	4618      	mov	r0, r3
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}

0800d84e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d84e:	b580      	push	{r7, lr}
 800d850:	b084      	sub	sp, #16
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
 800d856:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d101      	bne.n	800d866 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d862:	2302      	movs	r3, #2
 800d864:	e02d      	b.n	800d8c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2201      	movs	r2, #1
 800d86a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2224      	movs	r2, #36	@ 0x24
 800d872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f022 0201 	bic.w	r2, r2, #1
 800d88c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	683a      	ldr	r2, [r7, #0]
 800d89e:	430a      	orrs	r2, r1
 800d8a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 f862 	bl	800d96c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	68fa      	ldr	r2, [r7, #12]
 800d8ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2220      	movs	r2, #32
 800d8b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d8c0:	2300      	movs	r3, #0
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3710      	adds	r7, #16
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b08c      	sub	sp, #48	@ 0x30
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	60f8      	str	r0, [r7, #12]
 800d8d2:	60b9      	str	r1, [r7, #8]
 800d8d4:	4613      	mov	r3, r2
 800d8d6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d8e4:	2b20      	cmp	r3, #32
 800d8e6:	d13b      	bne.n	800d960 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d002      	beq.n	800d8f4 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800d8ee:	88fb      	ldrh	r3, [r7, #6]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d101      	bne.n	800d8f8 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	e034      	b.n	800d962 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2200      	movs	r2, #0
 800d902:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800d904:	88fb      	ldrh	r3, [r7, #6]
 800d906:	461a      	mov	r2, r3
 800d908:	68b9      	ldr	r1, [r7, #8]
 800d90a:	68f8      	ldr	r0, [r7, #12]
 800d90c:	f7ff f824 	bl	800c958 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d914:	2b01      	cmp	r3, #1
 800d916:	d11d      	bne.n	800d954 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	2210      	movs	r2, #16
 800d91e:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d926:	69bb      	ldr	r3, [r7, #24]
 800d928:	e853 3f00 	ldrex	r3, [r3]
 800d92c:	617b      	str	r3, [r7, #20]
   return(result);
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	f043 0310 	orr.w	r3, r3, #16
 800d934:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	461a      	mov	r2, r3
 800d93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d93e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d940:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d942:	6a39      	ldr	r1, [r7, #32]
 800d944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d946:	e841 2300 	strex	r3, r2, [r1]
 800d94a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1e6      	bne.n	800d920 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800d952:	e002      	b.n	800d95a <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800d954:	2301      	movs	r3, #1
 800d956:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800d95a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d95e:	e000      	b.n	800d962 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800d960:	2302      	movs	r3, #2
  }
}
 800d962:	4618      	mov	r0, r3
 800d964:	3730      	adds	r7, #48	@ 0x30
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
	...

0800d96c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b085      	sub	sp, #20
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d108      	bne.n	800d98e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2201      	movs	r2, #1
 800d980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2201      	movs	r2, #1
 800d988:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d98c:	e031      	b.n	800d9f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d98e:	2310      	movs	r3, #16
 800d990:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d992:	2310      	movs	r3, #16
 800d994:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	0e5b      	lsrs	r3, r3, #25
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	f003 0307 	and.w	r3, r3, #7
 800d9a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	689b      	ldr	r3, [r3, #8]
 800d9ac:	0f5b      	lsrs	r3, r3, #29
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	f003 0307 	and.w	r3, r3, #7
 800d9b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d9b6:	7bbb      	ldrb	r3, [r7, #14]
 800d9b8:	7b3a      	ldrb	r2, [r7, #12]
 800d9ba:	4911      	ldr	r1, [pc, #68]	@ (800da00 <UARTEx_SetNbDataToProcess+0x94>)
 800d9bc:	5c8a      	ldrb	r2, [r1, r2]
 800d9be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d9c2:	7b3a      	ldrb	r2, [r7, #12]
 800d9c4:	490f      	ldr	r1, [pc, #60]	@ (800da04 <UARTEx_SetNbDataToProcess+0x98>)
 800d9c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d9c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9cc:	b29a      	uxth	r2, r3
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d9d4:	7bfb      	ldrb	r3, [r7, #15]
 800d9d6:	7b7a      	ldrb	r2, [r7, #13]
 800d9d8:	4909      	ldr	r1, [pc, #36]	@ (800da00 <UARTEx_SetNbDataToProcess+0x94>)
 800d9da:	5c8a      	ldrb	r2, [r1, r2]
 800d9dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d9e0:	7b7a      	ldrb	r2, [r7, #13]
 800d9e2:	4908      	ldr	r1, [pc, #32]	@ (800da04 <UARTEx_SetNbDataToProcess+0x98>)
 800d9e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d9e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9ea:	b29a      	uxth	r2, r3
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d9f2:	bf00      	nop
 800d9f4:	3714      	adds	r7, #20
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr
 800d9fe:	bf00      	nop
 800da00:	08016cf0 	.word	0x08016cf0
 800da04:	08016cf8 	.word	0x08016cf8

0800da08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800da08:	b084      	sub	sp, #16
 800da0a:	b580      	push	{r7, lr}
 800da0c:	b084      	sub	sp, #16
 800da0e:	af00      	add	r7, sp, #0
 800da10:	6078      	str	r0, [r7, #4]
 800da12:	f107 001c 	add.w	r0, r7, #28
 800da16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800da1a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d121      	bne.n	800da66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	68da      	ldr	r2, [r3, #12]
 800da32:	4b2c      	ldr	r3, [pc, #176]	@ (800dae4 <USB_CoreInit+0xdc>)
 800da34:	4013      	ands	r3, r2
 800da36:	687a      	ldr	r2, [r7, #4]
 800da38:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800da46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	d105      	bne.n	800da5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	68db      	ldr	r3, [r3, #12]
 800da52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f001 faf6 	bl	800f04c <USB_CoreReset>
 800da60:	4603      	mov	r3, r0
 800da62:	73fb      	strb	r3, [r7, #15]
 800da64:	e01b      	b.n	800da9e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f001 faea 	bl	800f04c <USB_CoreReset>
 800da78:	4603      	mov	r3, r0
 800da7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800da7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800da80:	2b00      	cmp	r3, #0
 800da82:	d106      	bne.n	800da92 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	639a      	str	r2, [r3, #56]	@ 0x38
 800da90:	e005      	b.n	800da9e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800da9e:	7fbb      	ldrb	r3, [r7, #30]
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d116      	bne.n	800dad2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dab2:	4b0d      	ldr	r3, [pc, #52]	@ (800dae8 <USB_CoreInit+0xe0>)
 800dab4:	4313      	orrs	r3, r2
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	689b      	ldr	r3, [r3, #8]
 800dabe:	f043 0206 	orr.w	r2, r3, #6
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	689b      	ldr	r3, [r3, #8]
 800daca:	f043 0220 	orr.w	r2, r3, #32
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3710      	adds	r7, #16
 800dad8:	46bd      	mov	sp, r7
 800dada:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dade:	b004      	add	sp, #16
 800dae0:	4770      	bx	lr
 800dae2:	bf00      	nop
 800dae4:	ffbdffbf 	.word	0xffbdffbf
 800dae8:	03ee0000 	.word	0x03ee0000

0800daec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800daec:	b480      	push	{r7}
 800daee:	b087      	sub	sp, #28
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	60f8      	str	r0, [r7, #12]
 800daf4:	60b9      	str	r1, [r7, #8]
 800daf6:	4613      	mov	r3, r2
 800daf8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800dafa:	79fb      	ldrb	r3, [r7, #7]
 800dafc:	2b02      	cmp	r3, #2
 800dafe:	d165      	bne.n	800dbcc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	4a41      	ldr	r2, [pc, #260]	@ (800dc08 <USB_SetTurnaroundTime+0x11c>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d906      	bls.n	800db16 <USB_SetTurnaroundTime+0x2a>
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	4a40      	ldr	r2, [pc, #256]	@ (800dc0c <USB_SetTurnaroundTime+0x120>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d202      	bcs.n	800db16 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800db10:	230f      	movs	r3, #15
 800db12:	617b      	str	r3, [r7, #20]
 800db14:	e062      	b.n	800dbdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	4a3c      	ldr	r2, [pc, #240]	@ (800dc0c <USB_SetTurnaroundTime+0x120>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d306      	bcc.n	800db2c <USB_SetTurnaroundTime+0x40>
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	4a3b      	ldr	r2, [pc, #236]	@ (800dc10 <USB_SetTurnaroundTime+0x124>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d202      	bcs.n	800db2c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800db26:	230e      	movs	r3, #14
 800db28:	617b      	str	r3, [r7, #20]
 800db2a:	e057      	b.n	800dbdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	4a38      	ldr	r2, [pc, #224]	@ (800dc10 <USB_SetTurnaroundTime+0x124>)
 800db30:	4293      	cmp	r3, r2
 800db32:	d306      	bcc.n	800db42 <USB_SetTurnaroundTime+0x56>
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	4a37      	ldr	r2, [pc, #220]	@ (800dc14 <USB_SetTurnaroundTime+0x128>)
 800db38:	4293      	cmp	r3, r2
 800db3a:	d202      	bcs.n	800db42 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800db3c:	230d      	movs	r3, #13
 800db3e:	617b      	str	r3, [r7, #20]
 800db40:	e04c      	b.n	800dbdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	4a33      	ldr	r2, [pc, #204]	@ (800dc14 <USB_SetTurnaroundTime+0x128>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d306      	bcc.n	800db58 <USB_SetTurnaroundTime+0x6c>
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	4a32      	ldr	r2, [pc, #200]	@ (800dc18 <USB_SetTurnaroundTime+0x12c>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d802      	bhi.n	800db58 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800db52:	230c      	movs	r3, #12
 800db54:	617b      	str	r3, [r7, #20]
 800db56:	e041      	b.n	800dbdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	4a2f      	ldr	r2, [pc, #188]	@ (800dc18 <USB_SetTurnaroundTime+0x12c>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d906      	bls.n	800db6e <USB_SetTurnaroundTime+0x82>
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	4a2e      	ldr	r2, [pc, #184]	@ (800dc1c <USB_SetTurnaroundTime+0x130>)
 800db64:	4293      	cmp	r3, r2
 800db66:	d802      	bhi.n	800db6e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800db68:	230b      	movs	r3, #11
 800db6a:	617b      	str	r3, [r7, #20]
 800db6c:	e036      	b.n	800dbdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	4a2a      	ldr	r2, [pc, #168]	@ (800dc1c <USB_SetTurnaroundTime+0x130>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d906      	bls.n	800db84 <USB_SetTurnaroundTime+0x98>
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	4a29      	ldr	r2, [pc, #164]	@ (800dc20 <USB_SetTurnaroundTime+0x134>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d802      	bhi.n	800db84 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800db7e:	230a      	movs	r3, #10
 800db80:	617b      	str	r3, [r7, #20]
 800db82:	e02b      	b.n	800dbdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	4a26      	ldr	r2, [pc, #152]	@ (800dc20 <USB_SetTurnaroundTime+0x134>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d906      	bls.n	800db9a <USB_SetTurnaroundTime+0xae>
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	4a25      	ldr	r2, [pc, #148]	@ (800dc24 <USB_SetTurnaroundTime+0x138>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d202      	bcs.n	800db9a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800db94:	2309      	movs	r3, #9
 800db96:	617b      	str	r3, [r7, #20]
 800db98:	e020      	b.n	800dbdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	4a21      	ldr	r2, [pc, #132]	@ (800dc24 <USB_SetTurnaroundTime+0x138>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d306      	bcc.n	800dbb0 <USB_SetTurnaroundTime+0xc4>
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	4a20      	ldr	r2, [pc, #128]	@ (800dc28 <USB_SetTurnaroundTime+0x13c>)
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d802      	bhi.n	800dbb0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dbaa:	2308      	movs	r3, #8
 800dbac:	617b      	str	r3, [r7, #20]
 800dbae:	e015      	b.n	800dbdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	4a1d      	ldr	r2, [pc, #116]	@ (800dc28 <USB_SetTurnaroundTime+0x13c>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d906      	bls.n	800dbc6 <USB_SetTurnaroundTime+0xda>
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	4a1c      	ldr	r2, [pc, #112]	@ (800dc2c <USB_SetTurnaroundTime+0x140>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d202      	bcs.n	800dbc6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800dbc0:	2307      	movs	r3, #7
 800dbc2:	617b      	str	r3, [r7, #20]
 800dbc4:	e00a      	b.n	800dbdc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800dbc6:	2306      	movs	r3, #6
 800dbc8:	617b      	str	r3, [r7, #20]
 800dbca:	e007      	b.n	800dbdc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800dbcc:	79fb      	ldrb	r3, [r7, #7]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d102      	bne.n	800dbd8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800dbd2:	2309      	movs	r3, #9
 800dbd4:	617b      	str	r3, [r7, #20]
 800dbd6:	e001      	b.n	800dbdc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800dbd8:	2309      	movs	r3, #9
 800dbda:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	68da      	ldr	r2, [r3, #12]
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	029b      	lsls	r3, r3, #10
 800dbf0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800dbf4:	431a      	orrs	r2, r3
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dbfa:	2300      	movs	r3, #0
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	371c      	adds	r7, #28
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr
 800dc08:	00d8acbf 	.word	0x00d8acbf
 800dc0c:	00e4e1c0 	.word	0x00e4e1c0
 800dc10:	00f42400 	.word	0x00f42400
 800dc14:	01067380 	.word	0x01067380
 800dc18:	011a499f 	.word	0x011a499f
 800dc1c:	01312cff 	.word	0x01312cff
 800dc20:	014ca43f 	.word	0x014ca43f
 800dc24:	016e3600 	.word	0x016e3600
 800dc28:	01a6ab1f 	.word	0x01a6ab1f
 800dc2c:	01e84800 	.word	0x01e84800

0800dc30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	689b      	ldr	r3, [r3, #8]
 800dc3c:	f043 0201 	orr.w	r2, r3, #1
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dc44:	2300      	movs	r3, #0
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	370c      	adds	r7, #12
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr

0800dc52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dc52:	b480      	push	{r7}
 800dc54:	b083      	sub	sp, #12
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	689b      	ldr	r3, [r3, #8]
 800dc5e:	f023 0201 	bic.w	r2, r3, #1
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dc66:	2300      	movs	r3, #0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	370c      	adds	r7, #12
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr

0800dc74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dc80:	2300      	movs	r3, #0
 800dc82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dc90:	78fb      	ldrb	r3, [r7, #3]
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d115      	bne.n	800dcc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dca2:	200a      	movs	r0, #10
 800dca4:	f7f4 ff2c 	bl	8002b00 <HAL_Delay>
      ms += 10U;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	330a      	adds	r3, #10
 800dcac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f001 f93b 	bl	800ef2a <USB_GetMode>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d01e      	beq.n	800dcf8 <USB_SetCurrentMode+0x84>
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2bc7      	cmp	r3, #199	@ 0xc7
 800dcbe:	d9f0      	bls.n	800dca2 <USB_SetCurrentMode+0x2e>
 800dcc0:	e01a      	b.n	800dcf8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dcc2:	78fb      	ldrb	r3, [r7, #3]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d115      	bne.n	800dcf4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	68db      	ldr	r3, [r3, #12]
 800dccc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dcd4:	200a      	movs	r0, #10
 800dcd6:	f7f4 ff13 	bl	8002b00 <HAL_Delay>
      ms += 10U;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	330a      	adds	r3, #10
 800dcde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f001 f922 	bl	800ef2a <USB_GetMode>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d005      	beq.n	800dcf8 <USB_SetCurrentMode+0x84>
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2bc7      	cmp	r3, #199	@ 0xc7
 800dcf0:	d9f0      	bls.n	800dcd4 <USB_SetCurrentMode+0x60>
 800dcf2:	e001      	b.n	800dcf8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	e005      	b.n	800dd04 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2bc8      	cmp	r3, #200	@ 0xc8
 800dcfc:	d101      	bne.n	800dd02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e000      	b.n	800dd04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3710      	adds	r7, #16
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dd0c:	b084      	sub	sp, #16
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b086      	sub	sp, #24
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
 800dd16:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800dd1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dd26:	2300      	movs	r3, #0
 800dd28:	613b      	str	r3, [r7, #16]
 800dd2a:	e009      	b.n	800dd40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dd2c:	687a      	ldr	r2, [r7, #4]
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	3340      	adds	r3, #64	@ 0x40
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	4413      	add	r3, r2
 800dd36:	2200      	movs	r2, #0
 800dd38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	613b      	str	r3, [r7, #16]
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	2b0e      	cmp	r3, #14
 800dd44:	d9f2      	bls.n	800dd2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dd46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d11c      	bne.n	800dd88 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dd5c:	f043 0302 	orr.w	r3, r3, #2
 800dd60:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd66:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	601a      	str	r2, [r3, #0]
 800dd86:	e005      	b.n	800dd94 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd8c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dda0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d10d      	bne.n	800ddc4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dda8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d104      	bne.n	800ddba <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ddb0:	2100      	movs	r1, #0
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f000 f968 	bl	800e088 <USB_SetDevSpeed>
 800ddb8:	e008      	b.n	800ddcc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ddba:	2101      	movs	r1, #1
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f000 f963 	bl	800e088 <USB_SetDevSpeed>
 800ddc2:	e003      	b.n	800ddcc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ddc4:	2103      	movs	r1, #3
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 f95e 	bl	800e088 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ddcc:	2110      	movs	r1, #16
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f000 f8fa 	bl	800dfc8 <USB_FlushTxFifo>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d001      	beq.n	800ddde <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800ddda:	2301      	movs	r3, #1
 800dddc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 f924 	bl	800e02c <USB_FlushRxFifo>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d001      	beq.n	800ddee <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800ddea:	2301      	movs	r3, #1
 800ddec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de00:	461a      	mov	r2, r3
 800de02:	2300      	movs	r3, #0
 800de04:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de0c:	461a      	mov	r2, r3
 800de0e:	2300      	movs	r3, #0
 800de10:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de12:	2300      	movs	r3, #0
 800de14:	613b      	str	r3, [r7, #16]
 800de16:	e043      	b.n	800dea0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	015a      	lsls	r2, r3, #5
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	4413      	add	r3, r2
 800de20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800de2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800de2e:	d118      	bne.n	800de62 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10a      	bne.n	800de4c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	015a      	lsls	r2, r3, #5
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	4413      	add	r3, r2
 800de3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de42:	461a      	mov	r2, r3
 800de44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800de48:	6013      	str	r3, [r2, #0]
 800de4a:	e013      	b.n	800de74 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	015a      	lsls	r2, r3, #5
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	4413      	add	r3, r2
 800de54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de58:	461a      	mov	r2, r3
 800de5a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800de5e:	6013      	str	r3, [r2, #0]
 800de60:	e008      	b.n	800de74 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	015a      	lsls	r2, r3, #5
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	4413      	add	r3, r2
 800de6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de6e:	461a      	mov	r2, r3
 800de70:	2300      	movs	r3, #0
 800de72:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	015a      	lsls	r2, r3, #5
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	4413      	add	r3, r2
 800de7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de80:	461a      	mov	r2, r3
 800de82:	2300      	movs	r3, #0
 800de84:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	015a      	lsls	r2, r3, #5
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	4413      	add	r3, r2
 800de8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de92:	461a      	mov	r2, r3
 800de94:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800de98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	3301      	adds	r3, #1
 800de9e:	613b      	str	r3, [r7, #16]
 800dea0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dea4:	461a      	mov	r2, r3
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d3b5      	bcc.n	800de18 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800deac:	2300      	movs	r3, #0
 800deae:	613b      	str	r3, [r7, #16]
 800deb0:	e043      	b.n	800df3a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	015a      	lsls	r2, r3, #5
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	4413      	add	r3, r2
 800deba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dec4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dec8:	d118      	bne.n	800defc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d10a      	bne.n	800dee6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	015a      	lsls	r2, r3, #5
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	4413      	add	r3, r2
 800ded8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dedc:	461a      	mov	r2, r3
 800dede:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dee2:	6013      	str	r3, [r2, #0]
 800dee4:	e013      	b.n	800df0e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	015a      	lsls	r2, r3, #5
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	4413      	add	r3, r2
 800deee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800def2:	461a      	mov	r2, r3
 800def4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800def8:	6013      	str	r3, [r2, #0]
 800defa:	e008      	b.n	800df0e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	015a      	lsls	r2, r3, #5
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	4413      	add	r3, r2
 800df04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df08:	461a      	mov	r2, r3
 800df0a:	2300      	movs	r3, #0
 800df0c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	015a      	lsls	r2, r3, #5
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	4413      	add	r3, r2
 800df16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df1a:	461a      	mov	r2, r3
 800df1c:	2300      	movs	r3, #0
 800df1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	015a      	lsls	r2, r3, #5
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	4413      	add	r3, r2
 800df28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df2c:	461a      	mov	r2, r3
 800df2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800df32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	3301      	adds	r3, #1
 800df38:	613b      	str	r3, [r7, #16]
 800df3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800df3e:	461a      	mov	r2, r3
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	4293      	cmp	r3, r2
 800df44:	d3b5      	bcc.n	800deb2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	68fa      	ldr	r2, [r7, #12]
 800df50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800df54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800df58:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2200      	movs	r2, #0
 800df5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800df66:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800df68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d105      	bne.n	800df7c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	699b      	ldr	r3, [r3, #24]
 800df74:	f043 0210 	orr.w	r2, r3, #16
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	699a      	ldr	r2, [r3, #24]
 800df80:	4b0f      	ldr	r3, [pc, #60]	@ (800dfc0 <USB_DevInit+0x2b4>)
 800df82:	4313      	orrs	r3, r2
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800df88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d005      	beq.n	800df9c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	699b      	ldr	r3, [r3, #24]
 800df94:	f043 0208 	orr.w	r2, r3, #8
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800df9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d105      	bne.n	800dfb0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	699a      	ldr	r2, [r3, #24]
 800dfa8:	4b06      	ldr	r3, [pc, #24]	@ (800dfc4 <USB_DevInit+0x2b8>)
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	687a      	ldr	r2, [r7, #4]
 800dfae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dfb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3718      	adds	r7, #24
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dfbc:	b004      	add	sp, #16
 800dfbe:	4770      	bx	lr
 800dfc0:	803c3800 	.word	0x803c3800
 800dfc4:	40000004 	.word	0x40000004

0800dfc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b085      	sub	sp, #20
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	3301      	adds	r3, #1
 800dfda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dfe2:	d901      	bls.n	800dfe8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dfe4:	2303      	movs	r3, #3
 800dfe6:	e01b      	b.n	800e020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	691b      	ldr	r3, [r3, #16]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	daf2      	bge.n	800dfd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dff0:	2300      	movs	r3, #0
 800dff2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	019b      	lsls	r3, r3, #6
 800dff8:	f043 0220 	orr.w	r2, r3, #32
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	3301      	adds	r3, #1
 800e004:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e00c:	d901      	bls.n	800e012 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e00e:	2303      	movs	r3, #3
 800e010:	e006      	b.n	800e020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	691b      	ldr	r3, [r3, #16]
 800e016:	f003 0320 	and.w	r3, r3, #32
 800e01a:	2b20      	cmp	r3, #32
 800e01c:	d0f0      	beq.n	800e000 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e01e:	2300      	movs	r3, #0
}
 800e020:	4618      	mov	r0, r3
 800e022:	3714      	adds	r7, #20
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr

0800e02c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e034:	2300      	movs	r3, #0
 800e036:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	3301      	adds	r3, #1
 800e03c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e044:	d901      	bls.n	800e04a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e046:	2303      	movs	r3, #3
 800e048:	e018      	b.n	800e07c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	691b      	ldr	r3, [r3, #16]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	daf2      	bge.n	800e038 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e052:	2300      	movs	r3, #0
 800e054:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2210      	movs	r2, #16
 800e05a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	3301      	adds	r3, #1
 800e060:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e068:	d901      	bls.n	800e06e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e06a:	2303      	movs	r3, #3
 800e06c:	e006      	b.n	800e07c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	691b      	ldr	r3, [r3, #16]
 800e072:	f003 0310 	and.w	r3, r3, #16
 800e076:	2b10      	cmp	r3, #16
 800e078:	d0f0      	beq.n	800e05c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3714      	adds	r7, #20
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e088:	b480      	push	{r7}
 800e08a:	b085      	sub	sp, #20
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	460b      	mov	r3, r1
 800e092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	78fb      	ldrb	r3, [r7, #3]
 800e0a2:	68f9      	ldr	r1, [r7, #12]
 800e0a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e0a8:	4313      	orrs	r3, r2
 800e0aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3714      	adds	r7, #20
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr

0800e0ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e0ba:	b480      	push	{r7}
 800e0bc:	b087      	sub	sp, #28
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0cc:	689b      	ldr	r3, [r3, #8]
 800e0ce:	f003 0306 	and.w	r3, r3, #6
 800e0d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d102      	bne.n	800e0e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	75fb      	strb	r3, [r7, #23]
 800e0de:	e00a      	b.n	800e0f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2b02      	cmp	r3, #2
 800e0e4:	d002      	beq.n	800e0ec <USB_GetDevSpeed+0x32>
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2b06      	cmp	r3, #6
 800e0ea:	d102      	bne.n	800e0f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e0ec:	2302      	movs	r3, #2
 800e0ee:	75fb      	strb	r3, [r7, #23]
 800e0f0:	e001      	b.n	800e0f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e0f2:	230f      	movs	r3, #15
 800e0f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e0f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	371c      	adds	r7, #28
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr

0800e104 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e104:	b480      	push	{r7}
 800e106:	b085      	sub	sp, #20
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	785b      	ldrb	r3, [r3, #1]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d139      	bne.n	800e194 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e126:	69da      	ldr	r2, [r3, #28]
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	f003 030f 	and.w	r3, r3, #15
 800e130:	2101      	movs	r1, #1
 800e132:	fa01 f303 	lsl.w	r3, r1, r3
 800e136:	b29b      	uxth	r3, r3
 800e138:	68f9      	ldr	r1, [r7, #12]
 800e13a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e13e:	4313      	orrs	r3, r2
 800e140:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	015a      	lsls	r2, r3, #5
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	4413      	add	r3, r2
 800e14a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e154:	2b00      	cmp	r3, #0
 800e156:	d153      	bne.n	800e200 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	015a      	lsls	r2, r3, #5
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	4413      	add	r3, r2
 800e160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e164:	681a      	ldr	r2, [r3, #0]
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	791b      	ldrb	r3, [r3, #4]
 800e172:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e174:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	059b      	lsls	r3, r3, #22
 800e17a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e17c:	431a      	orrs	r2, r3
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	0159      	lsls	r1, r3, #5
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	440b      	add	r3, r1
 800e186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e18a:	4619      	mov	r1, r3
 800e18c:	4b20      	ldr	r3, [pc, #128]	@ (800e210 <USB_ActivateEndpoint+0x10c>)
 800e18e:	4313      	orrs	r3, r2
 800e190:	600b      	str	r3, [r1, #0]
 800e192:	e035      	b.n	800e200 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e19a:	69da      	ldr	r2, [r3, #28]
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	f003 030f 	and.w	r3, r3, #15
 800e1a4:	2101      	movs	r1, #1
 800e1a6:	fa01 f303 	lsl.w	r3, r1, r3
 800e1aa:	041b      	lsls	r3, r3, #16
 800e1ac:	68f9      	ldr	r1, [r7, #12]
 800e1ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	015a      	lsls	r2, r3, #5
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	4413      	add	r3, r2
 800e1be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d119      	bne.n	800e200 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	015a      	lsls	r2, r3, #5
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	4413      	add	r3, r2
 800e1d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	689b      	ldr	r3, [r3, #8]
 800e1de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	791b      	ldrb	r3, [r3, #4]
 800e1e6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e1e8:	430b      	orrs	r3, r1
 800e1ea:	431a      	orrs	r2, r3
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	0159      	lsls	r1, r3, #5
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	440b      	add	r3, r1
 800e1f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	4b05      	ldr	r3, [pc, #20]	@ (800e210 <USB_ActivateEndpoint+0x10c>)
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e200:	2300      	movs	r3, #0
}
 800e202:	4618      	mov	r0, r3
 800e204:	3714      	adds	r7, #20
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr
 800e20e:	bf00      	nop
 800e210:	10008000 	.word	0x10008000

0800e214 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e214:	b480      	push	{r7}
 800e216:	b085      	sub	sp, #20
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	785b      	ldrb	r3, [r3, #1]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d161      	bne.n	800e2f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	015a      	lsls	r2, r3, #5
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	4413      	add	r3, r2
 800e238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e242:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e246:	d11f      	bne.n	800e288 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	015a      	lsls	r2, r3, #5
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	4413      	add	r3, r2
 800e250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	68ba      	ldr	r2, [r7, #8]
 800e258:	0151      	lsls	r1, r2, #5
 800e25a:	68fa      	ldr	r2, [r7, #12]
 800e25c:	440a      	add	r2, r1
 800e25e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e262:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e266:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	015a      	lsls	r2, r3, #5
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	4413      	add	r3, r2
 800e270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	68ba      	ldr	r2, [r7, #8]
 800e278:	0151      	lsls	r1, r2, #5
 800e27a:	68fa      	ldr	r2, [r7, #12]
 800e27c:	440a      	add	r2, r1
 800e27e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e282:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e286:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e28e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	781b      	ldrb	r3, [r3, #0]
 800e294:	f003 030f 	and.w	r3, r3, #15
 800e298:	2101      	movs	r1, #1
 800e29a:	fa01 f303 	lsl.w	r3, r1, r3
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	43db      	mvns	r3, r3
 800e2a2:	68f9      	ldr	r1, [r7, #12]
 800e2a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e2a8:	4013      	ands	r3, r2
 800e2aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e2b2:	69da      	ldr	r2, [r3, #28]
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	f003 030f 	and.w	r3, r3, #15
 800e2bc:	2101      	movs	r1, #1
 800e2be:	fa01 f303 	lsl.w	r3, r1, r3
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	43db      	mvns	r3, r3
 800e2c6:	68f9      	ldr	r1, [r7, #12]
 800e2c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e2cc:	4013      	ands	r3, r2
 800e2ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	015a      	lsls	r2, r3, #5
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2dc:	681a      	ldr	r2, [r3, #0]
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	0159      	lsls	r1, r3, #5
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	440b      	add	r3, r1
 800e2e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	4b35      	ldr	r3, [pc, #212]	@ (800e3c4 <USB_DeactivateEndpoint+0x1b0>)
 800e2ee:	4013      	ands	r3, r2
 800e2f0:	600b      	str	r3, [r1, #0]
 800e2f2:	e060      	b.n	800e3b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	015a      	lsls	r2, r3, #5
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e306:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e30a:	d11f      	bne.n	800e34c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	015a      	lsls	r2, r3, #5
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	4413      	add	r3, r2
 800e314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	68ba      	ldr	r2, [r7, #8]
 800e31c:	0151      	lsls	r1, r2, #5
 800e31e:	68fa      	ldr	r2, [r7, #12]
 800e320:	440a      	add	r2, r1
 800e322:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e326:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e32a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	015a      	lsls	r2, r3, #5
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	4413      	add	r3, r2
 800e334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	68ba      	ldr	r2, [r7, #8]
 800e33c:	0151      	lsls	r1, r2, #5
 800e33e:	68fa      	ldr	r2, [r7, #12]
 800e340:	440a      	add	r2, r1
 800e342:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e346:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e34a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e352:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	f003 030f 	and.w	r3, r3, #15
 800e35c:	2101      	movs	r1, #1
 800e35e:	fa01 f303 	lsl.w	r3, r1, r3
 800e362:	041b      	lsls	r3, r3, #16
 800e364:	43db      	mvns	r3, r3
 800e366:	68f9      	ldr	r1, [r7, #12]
 800e368:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e36c:	4013      	ands	r3, r2
 800e36e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e376:	69da      	ldr	r2, [r3, #28]
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	f003 030f 	and.w	r3, r3, #15
 800e380:	2101      	movs	r1, #1
 800e382:	fa01 f303 	lsl.w	r3, r1, r3
 800e386:	041b      	lsls	r3, r3, #16
 800e388:	43db      	mvns	r3, r3
 800e38a:	68f9      	ldr	r1, [r7, #12]
 800e38c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e390:	4013      	ands	r3, r2
 800e392:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	015a      	lsls	r2, r3, #5
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	4413      	add	r3, r2
 800e39c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	0159      	lsls	r1, r3, #5
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	440b      	add	r3, r1
 800e3aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	4b05      	ldr	r3, [pc, #20]	@ (800e3c8 <USB_DeactivateEndpoint+0x1b4>)
 800e3b2:	4013      	ands	r3, r2
 800e3b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e3b6:	2300      	movs	r3, #0
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3714      	adds	r7, #20
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr
 800e3c4:	ec337800 	.word	0xec337800
 800e3c8:	eff37800 	.word	0xeff37800

0800e3cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b08a      	sub	sp, #40	@ 0x28
 800e3d0:	af02      	add	r7, sp, #8
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	785b      	ldrb	r3, [r3, #1]
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	f040 8181 	bne.w	800e6f0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	691b      	ldr	r3, [r3, #16]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d132      	bne.n	800e45c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e3f6:	69bb      	ldr	r3, [r7, #24]
 800e3f8:	015a      	lsls	r2, r3, #5
 800e3fa:	69fb      	ldr	r3, [r7, #28]
 800e3fc:	4413      	add	r3, r2
 800e3fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e402:	691a      	ldr	r2, [r3, #16]
 800e404:	69bb      	ldr	r3, [r7, #24]
 800e406:	0159      	lsls	r1, r3, #5
 800e408:	69fb      	ldr	r3, [r7, #28]
 800e40a:	440b      	add	r3, r1
 800e40c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e410:	4619      	mov	r1, r3
 800e412:	4ba5      	ldr	r3, [pc, #660]	@ (800e6a8 <USB_EPStartXfer+0x2dc>)
 800e414:	4013      	ands	r3, r2
 800e416:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	015a      	lsls	r2, r3, #5
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	4413      	add	r3, r2
 800e420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e424:	691b      	ldr	r3, [r3, #16]
 800e426:	69ba      	ldr	r2, [r7, #24]
 800e428:	0151      	lsls	r1, r2, #5
 800e42a:	69fa      	ldr	r2, [r7, #28]
 800e42c:	440a      	add	r2, r1
 800e42e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e432:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e436:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e438:	69bb      	ldr	r3, [r7, #24]
 800e43a:	015a      	lsls	r2, r3, #5
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	4413      	add	r3, r2
 800e440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e444:	691a      	ldr	r2, [r3, #16]
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	0159      	lsls	r1, r3, #5
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	440b      	add	r3, r1
 800e44e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e452:	4619      	mov	r1, r3
 800e454:	4b95      	ldr	r3, [pc, #596]	@ (800e6ac <USB_EPStartXfer+0x2e0>)
 800e456:	4013      	ands	r3, r2
 800e458:	610b      	str	r3, [r1, #16]
 800e45a:	e092      	b.n	800e582 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e45c:	69bb      	ldr	r3, [r7, #24]
 800e45e:	015a      	lsls	r2, r3, #5
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	4413      	add	r3, r2
 800e464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e468:	691a      	ldr	r2, [r3, #16]
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	0159      	lsls	r1, r3, #5
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	440b      	add	r3, r1
 800e472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e476:	4619      	mov	r1, r3
 800e478:	4b8c      	ldr	r3, [pc, #560]	@ (800e6ac <USB_EPStartXfer+0x2e0>)
 800e47a:	4013      	ands	r3, r2
 800e47c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e47e:	69bb      	ldr	r3, [r7, #24]
 800e480:	015a      	lsls	r2, r3, #5
 800e482:	69fb      	ldr	r3, [r7, #28]
 800e484:	4413      	add	r3, r2
 800e486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e48a:	691a      	ldr	r2, [r3, #16]
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	0159      	lsls	r1, r3, #5
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	440b      	add	r3, r1
 800e494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e498:	4619      	mov	r1, r3
 800e49a:	4b83      	ldr	r3, [pc, #524]	@ (800e6a8 <USB_EPStartXfer+0x2dc>)
 800e49c:	4013      	ands	r3, r2
 800e49e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e4a0:	69bb      	ldr	r3, [r7, #24]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d11a      	bne.n	800e4dc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	691a      	ldr	r2, [r3, #16]
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	689b      	ldr	r3, [r3, #8]
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d903      	bls.n	800e4ba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	689a      	ldr	r2, [r3, #8]
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e4ba:	69bb      	ldr	r3, [r7, #24]
 800e4bc:	015a      	lsls	r2, r3, #5
 800e4be:	69fb      	ldr	r3, [r7, #28]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4c6:	691b      	ldr	r3, [r3, #16]
 800e4c8:	69ba      	ldr	r2, [r7, #24]
 800e4ca:	0151      	lsls	r1, r2, #5
 800e4cc:	69fa      	ldr	r2, [r7, #28]
 800e4ce:	440a      	add	r2, r1
 800e4d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e4d8:	6113      	str	r3, [r2, #16]
 800e4da:	e01b      	b.n	800e514 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e4dc:	69bb      	ldr	r3, [r7, #24]
 800e4de:	015a      	lsls	r2, r3, #5
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	4413      	add	r3, r2
 800e4e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4e8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	6919      	ldr	r1, [r3, #16]
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	689b      	ldr	r3, [r3, #8]
 800e4f2:	440b      	add	r3, r1
 800e4f4:	1e59      	subs	r1, r3, #1
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	689b      	ldr	r3, [r3, #8]
 800e4fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800e4fe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e500:	4b6b      	ldr	r3, [pc, #428]	@ (800e6b0 <USB_EPStartXfer+0x2e4>)
 800e502:	400b      	ands	r3, r1
 800e504:	69b9      	ldr	r1, [r7, #24]
 800e506:	0148      	lsls	r0, r1, #5
 800e508:	69f9      	ldr	r1, [r7, #28]
 800e50a:	4401      	add	r1, r0
 800e50c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e510:	4313      	orrs	r3, r2
 800e512:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e514:	69bb      	ldr	r3, [r7, #24]
 800e516:	015a      	lsls	r2, r3, #5
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	4413      	add	r3, r2
 800e51c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e520:	691a      	ldr	r2, [r3, #16]
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	691b      	ldr	r3, [r3, #16]
 800e526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e52a:	69b9      	ldr	r1, [r7, #24]
 800e52c:	0148      	lsls	r0, r1, #5
 800e52e:	69f9      	ldr	r1, [r7, #28]
 800e530:	4401      	add	r1, r0
 800e532:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e536:	4313      	orrs	r3, r2
 800e538:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	791b      	ldrb	r3, [r3, #4]
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d11f      	bne.n	800e582 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e542:	69bb      	ldr	r3, [r7, #24]
 800e544:	015a      	lsls	r2, r3, #5
 800e546:	69fb      	ldr	r3, [r7, #28]
 800e548:	4413      	add	r3, r2
 800e54a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e54e:	691b      	ldr	r3, [r3, #16]
 800e550:	69ba      	ldr	r2, [r7, #24]
 800e552:	0151      	lsls	r1, r2, #5
 800e554:	69fa      	ldr	r2, [r7, #28]
 800e556:	440a      	add	r2, r1
 800e558:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e55c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e560:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e562:	69bb      	ldr	r3, [r7, #24]
 800e564:	015a      	lsls	r2, r3, #5
 800e566:	69fb      	ldr	r3, [r7, #28]
 800e568:	4413      	add	r3, r2
 800e56a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e56e:	691b      	ldr	r3, [r3, #16]
 800e570:	69ba      	ldr	r2, [r7, #24]
 800e572:	0151      	lsls	r1, r2, #5
 800e574:	69fa      	ldr	r2, [r7, #28]
 800e576:	440a      	add	r2, r1
 800e578:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e57c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e580:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e582:	79fb      	ldrb	r3, [r7, #7]
 800e584:	2b01      	cmp	r3, #1
 800e586:	d14b      	bne.n	800e620 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	69db      	ldr	r3, [r3, #28]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d009      	beq.n	800e5a4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	015a      	lsls	r2, r3, #5
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	4413      	add	r3, r2
 800e598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e59c:	461a      	mov	r2, r3
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	69db      	ldr	r3, [r3, #28]
 800e5a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	791b      	ldrb	r3, [r3, #4]
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d128      	bne.n	800e5fe <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5b2:	689b      	ldr	r3, [r3, #8]
 800e5b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d110      	bne.n	800e5de <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e5bc:	69bb      	ldr	r3, [r7, #24]
 800e5be:	015a      	lsls	r2, r3, #5
 800e5c0:	69fb      	ldr	r3, [r7, #28]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	69ba      	ldr	r2, [r7, #24]
 800e5cc:	0151      	lsls	r1, r2, #5
 800e5ce:	69fa      	ldr	r2, [r7, #28]
 800e5d0:	440a      	add	r2, r1
 800e5d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e5da:	6013      	str	r3, [r2, #0]
 800e5dc:	e00f      	b.n	800e5fe <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e5de:	69bb      	ldr	r3, [r7, #24]
 800e5e0:	015a      	lsls	r2, r3, #5
 800e5e2:	69fb      	ldr	r3, [r7, #28]
 800e5e4:	4413      	add	r3, r2
 800e5e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	69ba      	ldr	r2, [r7, #24]
 800e5ee:	0151      	lsls	r1, r2, #5
 800e5f0:	69fa      	ldr	r2, [r7, #28]
 800e5f2:	440a      	add	r2, r1
 800e5f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e5fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	015a      	lsls	r2, r3, #5
 800e602:	69fb      	ldr	r3, [r7, #28]
 800e604:	4413      	add	r3, r2
 800e606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	69ba      	ldr	r2, [r7, #24]
 800e60e:	0151      	lsls	r1, r2, #5
 800e610:	69fa      	ldr	r2, [r7, #28]
 800e612:	440a      	add	r2, r1
 800e614:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e618:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e61c:	6013      	str	r3, [r2, #0]
 800e61e:	e16a      	b.n	800e8f6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	015a      	lsls	r2, r3, #5
 800e624:	69fb      	ldr	r3, [r7, #28]
 800e626:	4413      	add	r3, r2
 800e628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	69ba      	ldr	r2, [r7, #24]
 800e630:	0151      	lsls	r1, r2, #5
 800e632:	69fa      	ldr	r2, [r7, #28]
 800e634:	440a      	add	r2, r1
 800e636:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e63a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e63e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	791b      	ldrb	r3, [r3, #4]
 800e644:	2b01      	cmp	r3, #1
 800e646:	d015      	beq.n	800e674 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	691b      	ldr	r3, [r3, #16]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f000 8152 	beq.w	800e8f6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e652:	69fb      	ldr	r3, [r7, #28]
 800e654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e658:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	f003 030f 	and.w	r3, r3, #15
 800e662:	2101      	movs	r1, #1
 800e664:	fa01 f303 	lsl.w	r3, r1, r3
 800e668:	69f9      	ldr	r1, [r7, #28]
 800e66a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e66e:	4313      	orrs	r3, r2
 800e670:	634b      	str	r3, [r1, #52]	@ 0x34
 800e672:	e140      	b.n	800e8f6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e67a:	689b      	ldr	r3, [r3, #8]
 800e67c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e680:	2b00      	cmp	r3, #0
 800e682:	d117      	bne.n	800e6b4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e684:	69bb      	ldr	r3, [r7, #24]
 800e686:	015a      	lsls	r2, r3, #5
 800e688:	69fb      	ldr	r3, [r7, #28]
 800e68a:	4413      	add	r3, r2
 800e68c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	69ba      	ldr	r2, [r7, #24]
 800e694:	0151      	lsls	r1, r2, #5
 800e696:	69fa      	ldr	r2, [r7, #28]
 800e698:	440a      	add	r2, r1
 800e69a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e69e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e6a2:	6013      	str	r3, [r2, #0]
 800e6a4:	e016      	b.n	800e6d4 <USB_EPStartXfer+0x308>
 800e6a6:	bf00      	nop
 800e6a8:	e007ffff 	.word	0xe007ffff
 800e6ac:	fff80000 	.word	0xfff80000
 800e6b0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e6b4:	69bb      	ldr	r3, [r7, #24]
 800e6b6:	015a      	lsls	r2, r3, #5
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	4413      	add	r3, r2
 800e6bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	69ba      	ldr	r2, [r7, #24]
 800e6c4:	0151      	lsls	r1, r2, #5
 800e6c6:	69fa      	ldr	r2, [r7, #28]
 800e6c8:	440a      	add	r2, r1
 800e6ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e6ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e6d2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	68d9      	ldr	r1, [r3, #12]
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	781a      	ldrb	r2, [r3, #0]
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	691b      	ldr	r3, [r3, #16]
 800e6e0:	b298      	uxth	r0, r3
 800e6e2:	79fb      	ldrb	r3, [r7, #7]
 800e6e4:	9300      	str	r3, [sp, #0]
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	68f8      	ldr	r0, [r7, #12]
 800e6ea:	f000 f9b9 	bl	800ea60 <USB_WritePacket>
 800e6ee:	e102      	b.n	800e8f6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e6f0:	69bb      	ldr	r3, [r7, #24]
 800e6f2:	015a      	lsls	r2, r3, #5
 800e6f4:	69fb      	ldr	r3, [r7, #28]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6fc:	691a      	ldr	r2, [r3, #16]
 800e6fe:	69bb      	ldr	r3, [r7, #24]
 800e700:	0159      	lsls	r1, r3, #5
 800e702:	69fb      	ldr	r3, [r7, #28]
 800e704:	440b      	add	r3, r1
 800e706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e70a:	4619      	mov	r1, r3
 800e70c:	4b7c      	ldr	r3, [pc, #496]	@ (800e900 <USB_EPStartXfer+0x534>)
 800e70e:	4013      	ands	r3, r2
 800e710:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e712:	69bb      	ldr	r3, [r7, #24]
 800e714:	015a      	lsls	r2, r3, #5
 800e716:	69fb      	ldr	r3, [r7, #28]
 800e718:	4413      	add	r3, r2
 800e71a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e71e:	691a      	ldr	r2, [r3, #16]
 800e720:	69bb      	ldr	r3, [r7, #24]
 800e722:	0159      	lsls	r1, r3, #5
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	440b      	add	r3, r1
 800e728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e72c:	4619      	mov	r1, r3
 800e72e:	4b75      	ldr	r3, [pc, #468]	@ (800e904 <USB_EPStartXfer+0x538>)
 800e730:	4013      	ands	r3, r2
 800e732:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d12f      	bne.n	800e79a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	691b      	ldr	r3, [r3, #16]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d003      	beq.n	800e74a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	689a      	ldr	r2, [r3, #8]
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	689a      	ldr	r2, [r3, #8]
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	015a      	lsls	r2, r3, #5
 800e756:	69fb      	ldr	r3, [r7, #28]
 800e758:	4413      	add	r3, r2
 800e75a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e75e:	691a      	ldr	r2, [r3, #16]
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	6a1b      	ldr	r3, [r3, #32]
 800e764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e768:	69b9      	ldr	r1, [r7, #24]
 800e76a:	0148      	lsls	r0, r1, #5
 800e76c:	69f9      	ldr	r1, [r7, #28]
 800e76e:	4401      	add	r1, r0
 800e770:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e774:	4313      	orrs	r3, r2
 800e776:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e778:	69bb      	ldr	r3, [r7, #24]
 800e77a:	015a      	lsls	r2, r3, #5
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	4413      	add	r3, r2
 800e780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e784:	691b      	ldr	r3, [r3, #16]
 800e786:	69ba      	ldr	r2, [r7, #24]
 800e788:	0151      	lsls	r1, r2, #5
 800e78a:	69fa      	ldr	r2, [r7, #28]
 800e78c:	440a      	add	r2, r1
 800e78e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e792:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e796:	6113      	str	r3, [r2, #16]
 800e798:	e05f      	b.n	800e85a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	691b      	ldr	r3, [r3, #16]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d123      	bne.n	800e7ea <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	015a      	lsls	r2, r3, #5
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	4413      	add	r3, r2
 800e7aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7ae:	691a      	ldr	r2, [r3, #16]
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	689b      	ldr	r3, [r3, #8]
 800e7b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e7b8:	69b9      	ldr	r1, [r7, #24]
 800e7ba:	0148      	lsls	r0, r1, #5
 800e7bc:	69f9      	ldr	r1, [r7, #28]
 800e7be:	4401      	add	r1, r0
 800e7c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	015a      	lsls	r2, r3, #5
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	4413      	add	r3, r2
 800e7d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7d4:	691b      	ldr	r3, [r3, #16]
 800e7d6:	69ba      	ldr	r2, [r7, #24]
 800e7d8:	0151      	lsls	r1, r2, #5
 800e7da:	69fa      	ldr	r2, [r7, #28]
 800e7dc:	440a      	add	r2, r1
 800e7de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e7e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e7e6:	6113      	str	r3, [r2, #16]
 800e7e8:	e037      	b.n	800e85a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	691a      	ldr	r2, [r3, #16]
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	1e5a      	subs	r2, r3, #1
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	689b      	ldr	r3, [r3, #8]
 800e7fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7fe:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	689b      	ldr	r3, [r3, #8]
 800e804:	8afa      	ldrh	r2, [r7, #22]
 800e806:	fb03 f202 	mul.w	r2, r3, r2
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e80e:	69bb      	ldr	r3, [r7, #24]
 800e810:	015a      	lsls	r2, r3, #5
 800e812:	69fb      	ldr	r3, [r7, #28]
 800e814:	4413      	add	r3, r2
 800e816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e81a:	691a      	ldr	r2, [r3, #16]
 800e81c:	8afb      	ldrh	r3, [r7, #22]
 800e81e:	04d9      	lsls	r1, r3, #19
 800e820:	4b39      	ldr	r3, [pc, #228]	@ (800e908 <USB_EPStartXfer+0x53c>)
 800e822:	400b      	ands	r3, r1
 800e824:	69b9      	ldr	r1, [r7, #24]
 800e826:	0148      	lsls	r0, r1, #5
 800e828:	69f9      	ldr	r1, [r7, #28]
 800e82a:	4401      	add	r1, r0
 800e82c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e830:	4313      	orrs	r3, r2
 800e832:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	015a      	lsls	r2, r3, #5
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	4413      	add	r3, r2
 800e83c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e840:	691a      	ldr	r2, [r3, #16]
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	6a1b      	ldr	r3, [r3, #32]
 800e846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e84a:	69b9      	ldr	r1, [r7, #24]
 800e84c:	0148      	lsls	r0, r1, #5
 800e84e:	69f9      	ldr	r1, [r7, #28]
 800e850:	4401      	add	r1, r0
 800e852:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e856:	4313      	orrs	r3, r2
 800e858:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800e85a:	79fb      	ldrb	r3, [r7, #7]
 800e85c:	2b01      	cmp	r3, #1
 800e85e:	d10d      	bne.n	800e87c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	68db      	ldr	r3, [r3, #12]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d009      	beq.n	800e87c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	68d9      	ldr	r1, [r3, #12]
 800e86c:	69bb      	ldr	r3, [r7, #24]
 800e86e:	015a      	lsls	r2, r3, #5
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	4413      	add	r3, r2
 800e874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e878:	460a      	mov	r2, r1
 800e87a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	791b      	ldrb	r3, [r3, #4]
 800e880:	2b01      	cmp	r3, #1
 800e882:	d128      	bne.n	800e8d6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e88a:	689b      	ldr	r3, [r3, #8]
 800e88c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e890:	2b00      	cmp	r3, #0
 800e892:	d110      	bne.n	800e8b6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e894:	69bb      	ldr	r3, [r7, #24]
 800e896:	015a      	lsls	r2, r3, #5
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	4413      	add	r3, r2
 800e89c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	69ba      	ldr	r2, [r7, #24]
 800e8a4:	0151      	lsls	r1, r2, #5
 800e8a6:	69fa      	ldr	r2, [r7, #28]
 800e8a8:	440a      	add	r2, r1
 800e8aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e8ae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e8b2:	6013      	str	r3, [r2, #0]
 800e8b4:	e00f      	b.n	800e8d6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e8b6:	69bb      	ldr	r3, [r7, #24]
 800e8b8:	015a      	lsls	r2, r3, #5
 800e8ba:	69fb      	ldr	r3, [r7, #28]
 800e8bc:	4413      	add	r3, r2
 800e8be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	69ba      	ldr	r2, [r7, #24]
 800e8c6:	0151      	lsls	r1, r2, #5
 800e8c8:	69fa      	ldr	r2, [r7, #28]
 800e8ca:	440a      	add	r2, r1
 800e8cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e8d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e8d4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e8d6:	69bb      	ldr	r3, [r7, #24]
 800e8d8:	015a      	lsls	r2, r3, #5
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	4413      	add	r3, r2
 800e8de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	69ba      	ldr	r2, [r7, #24]
 800e8e6:	0151      	lsls	r1, r2, #5
 800e8e8:	69fa      	ldr	r2, [r7, #28]
 800e8ea:	440a      	add	r2, r1
 800e8ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e8f0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e8f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e8f6:	2300      	movs	r3, #0
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3720      	adds	r7, #32
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}
 800e900:	fff80000 	.word	0xfff80000
 800e904:	e007ffff 	.word	0xe007ffff
 800e908:	1ff80000 	.word	0x1ff80000

0800e90c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b087      	sub	sp, #28
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e916:	2300      	movs	r3, #0
 800e918:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e91a:	2300      	movs	r3, #0
 800e91c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	785b      	ldrb	r3, [r3, #1]
 800e926:	2b01      	cmp	r3, #1
 800e928:	d14a      	bne.n	800e9c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	015a      	lsls	r2, r3, #5
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	4413      	add	r3, r2
 800e934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e93e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e942:	f040 8086 	bne.w	800ea52 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	015a      	lsls	r2, r3, #5
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	4413      	add	r3, r2
 800e950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	683a      	ldr	r2, [r7, #0]
 800e958:	7812      	ldrb	r2, [r2, #0]
 800e95a:	0151      	lsls	r1, r2, #5
 800e95c:	693a      	ldr	r2, [r7, #16]
 800e95e:	440a      	add	r2, r1
 800e960:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e964:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e968:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	015a      	lsls	r2, r3, #5
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	4413      	add	r3, r2
 800e974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	683a      	ldr	r2, [r7, #0]
 800e97c:	7812      	ldrb	r2, [r2, #0]
 800e97e:	0151      	lsls	r1, r2, #5
 800e980:	693a      	ldr	r2, [r7, #16]
 800e982:	440a      	add	r2, r1
 800e984:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e988:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e98c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	3301      	adds	r3, #1
 800e992:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d902      	bls.n	800e9a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e99e:	2301      	movs	r3, #1
 800e9a0:	75fb      	strb	r3, [r7, #23]
          break;
 800e9a2:	e056      	b.n	800ea52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	015a      	lsls	r2, r3, #5
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	4413      	add	r3, r2
 800e9ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e9b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e9bc:	d0e7      	beq.n	800e98e <USB_EPStopXfer+0x82>
 800e9be:	e048      	b.n	800ea52 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	015a      	lsls	r2, r3, #5
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	4413      	add	r3, r2
 800e9ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e9d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e9d8:	d13b      	bne.n	800ea52 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	015a      	lsls	r2, r3, #5
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	4413      	add	r3, r2
 800e9e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	683a      	ldr	r2, [r7, #0]
 800e9ec:	7812      	ldrb	r2, [r2, #0]
 800e9ee:	0151      	lsls	r1, r2, #5
 800e9f0:	693a      	ldr	r2, [r7, #16]
 800e9f2:	440a      	add	r2, r1
 800e9f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e9fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	015a      	lsls	r2, r3, #5
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	4413      	add	r3, r2
 800ea08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	683a      	ldr	r2, [r7, #0]
 800ea10:	7812      	ldrb	r2, [r2, #0]
 800ea12:	0151      	lsls	r1, r2, #5
 800ea14:	693a      	ldr	r2, [r7, #16]
 800ea16:	440a      	add	r2, r1
 800ea18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ea20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	3301      	adds	r3, #1
 800ea26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d902      	bls.n	800ea38 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ea32:	2301      	movs	r3, #1
 800ea34:	75fb      	strb	r3, [r7, #23]
          break;
 800ea36:	e00c      	b.n	800ea52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	015a      	lsls	r2, r3, #5
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	4413      	add	r3, r2
 800ea42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ea4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ea50:	d0e7      	beq.n	800ea22 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ea52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	371c      	adds	r7, #28
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr

0800ea60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b089      	sub	sp, #36	@ 0x24
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	60b9      	str	r1, [r7, #8]
 800ea6a:	4611      	mov	r1, r2
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	460b      	mov	r3, r1
 800ea70:	71fb      	strb	r3, [r7, #7]
 800ea72:	4613      	mov	r3, r2
 800ea74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ea7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d123      	bne.n	800eace <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ea86:	88bb      	ldrh	r3, [r7, #4]
 800ea88:	3303      	adds	r3, #3
 800ea8a:	089b      	lsrs	r3, r3, #2
 800ea8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ea8e:	2300      	movs	r3, #0
 800ea90:	61bb      	str	r3, [r7, #24]
 800ea92:	e018      	b.n	800eac6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ea94:	79fb      	ldrb	r3, [r7, #7]
 800ea96:	031a      	lsls	r2, r3, #12
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	3301      	adds	r3, #1
 800eaac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	3301      	adds	r3, #1
 800eab2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	3301      	adds	r3, #1
 800eab8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	3301      	adds	r3, #1
 800eabe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800eac0:	69bb      	ldr	r3, [r7, #24]
 800eac2:	3301      	adds	r3, #1
 800eac4:	61bb      	str	r3, [r7, #24]
 800eac6:	69ba      	ldr	r2, [r7, #24]
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d3e2      	bcc.n	800ea94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800eace:	2300      	movs	r3, #0
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3724      	adds	r7, #36	@ 0x24
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800eadc:	b480      	push	{r7}
 800eade:	b08b      	sub	sp, #44	@ 0x2c
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	60b9      	str	r1, [r7, #8]
 800eae6:	4613      	mov	r3, r2
 800eae8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800eaf2:	88fb      	ldrh	r3, [r7, #6]
 800eaf4:	089b      	lsrs	r3, r3, #2
 800eaf6:	b29b      	uxth	r3, r3
 800eaf8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800eafa:	88fb      	ldrh	r3, [r7, #6]
 800eafc:	f003 0303 	and.w	r3, r3, #3
 800eb00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800eb02:	2300      	movs	r3, #0
 800eb04:	623b      	str	r3, [r7, #32]
 800eb06:	e014      	b.n	800eb32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800eb08:	69bb      	ldr	r3, [r7, #24]
 800eb0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb12:	601a      	str	r2, [r3, #0]
    pDest++;
 800eb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb16:	3301      	adds	r3, #1
 800eb18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800eb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800eb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb22:	3301      	adds	r3, #1
 800eb24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800eb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb28:	3301      	adds	r3, #1
 800eb2a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800eb2c:	6a3b      	ldr	r3, [r7, #32]
 800eb2e:	3301      	adds	r3, #1
 800eb30:	623b      	str	r3, [r7, #32]
 800eb32:	6a3a      	ldr	r2, [r7, #32]
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d3e6      	bcc.n	800eb08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800eb3a:	8bfb      	ldrh	r3, [r7, #30]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d01e      	beq.n	800eb7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800eb40:	2300      	movs	r3, #0
 800eb42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	f107 0310 	add.w	r3, r7, #16
 800eb50:	6812      	ldr	r2, [r2, #0]
 800eb52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800eb54:	693a      	ldr	r2, [r7, #16]
 800eb56:	6a3b      	ldr	r3, [r7, #32]
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	00db      	lsls	r3, r3, #3
 800eb5c:	fa22 f303 	lsr.w	r3, r2, r3
 800eb60:	b2da      	uxtb	r2, r3
 800eb62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb64:	701a      	strb	r2, [r3, #0]
      i++;
 800eb66:	6a3b      	ldr	r3, [r7, #32]
 800eb68:	3301      	adds	r3, #1
 800eb6a:	623b      	str	r3, [r7, #32]
      pDest++;
 800eb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb6e:	3301      	adds	r3, #1
 800eb70:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800eb72:	8bfb      	ldrh	r3, [r7, #30]
 800eb74:	3b01      	subs	r3, #1
 800eb76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800eb78:	8bfb      	ldrh	r3, [r7, #30]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d1ea      	bne.n	800eb54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800eb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	372c      	adds	r7, #44	@ 0x2c
 800eb84:	46bd      	mov	sp, r7
 800eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8a:	4770      	bx	lr

0800eb8c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	785b      	ldrb	r3, [r3, #1]
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d12c      	bne.n	800ec02 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	015a      	lsls	r2, r3, #5
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	4413      	add	r3, r2
 800ebb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	db12      	blt.n	800ebe0 <USB_EPSetStall+0x54>
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d00f      	beq.n	800ebe0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	015a      	lsls	r2, r3, #5
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	4413      	add	r3, r2
 800ebc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	68ba      	ldr	r2, [r7, #8]
 800ebd0:	0151      	lsls	r1, r2, #5
 800ebd2:	68fa      	ldr	r2, [r7, #12]
 800ebd4:	440a      	add	r2, r1
 800ebd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ebda:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ebde:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	015a      	lsls	r2, r3, #5
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	4413      	add	r3, r2
 800ebe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	68ba      	ldr	r2, [r7, #8]
 800ebf0:	0151      	lsls	r1, r2, #5
 800ebf2:	68fa      	ldr	r2, [r7, #12]
 800ebf4:	440a      	add	r2, r1
 800ebf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ebfa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ebfe:	6013      	str	r3, [r2, #0]
 800ec00:	e02b      	b.n	800ec5a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	015a      	lsls	r2, r3, #5
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	4413      	add	r3, r2
 800ec0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	db12      	blt.n	800ec3a <USB_EPSetStall+0xae>
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d00f      	beq.n	800ec3a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	015a      	lsls	r2, r3, #5
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	4413      	add	r3, r2
 800ec22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	68ba      	ldr	r2, [r7, #8]
 800ec2a:	0151      	lsls	r1, r2, #5
 800ec2c:	68fa      	ldr	r2, [r7, #12]
 800ec2e:	440a      	add	r2, r1
 800ec30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec34:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ec38:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	015a      	lsls	r2, r3, #5
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	4413      	add	r3, r2
 800ec42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	68ba      	ldr	r2, [r7, #8]
 800ec4a:	0151      	lsls	r1, r2, #5
 800ec4c:	68fa      	ldr	r2, [r7, #12]
 800ec4e:	440a      	add	r2, r1
 800ec50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ec58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3714      	adds	r7, #20
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr

0800ec68 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b085      	sub	sp, #20
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	785b      	ldrb	r3, [r3, #1]
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d128      	bne.n	800ecd6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	015a      	lsls	r2, r3, #5
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	4413      	add	r3, r2
 800ec8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	68ba      	ldr	r2, [r7, #8]
 800ec94:	0151      	lsls	r1, r2, #5
 800ec96:	68fa      	ldr	r2, [r7, #12]
 800ec98:	440a      	add	r2, r1
 800ec9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eca2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	791b      	ldrb	r3, [r3, #4]
 800eca8:	2b03      	cmp	r3, #3
 800ecaa:	d003      	beq.n	800ecb4 <USB_EPClearStall+0x4c>
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	791b      	ldrb	r3, [r3, #4]
 800ecb0:	2b02      	cmp	r3, #2
 800ecb2:	d138      	bne.n	800ed26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	015a      	lsls	r2, r3, #5
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	4413      	add	r3, r2
 800ecbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	68ba      	ldr	r2, [r7, #8]
 800ecc4:	0151      	lsls	r1, r2, #5
 800ecc6:	68fa      	ldr	r2, [r7, #12]
 800ecc8:	440a      	add	r2, r1
 800ecca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ecce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ecd2:	6013      	str	r3, [r2, #0]
 800ecd4:	e027      	b.n	800ed26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	015a      	lsls	r2, r3, #5
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	4413      	add	r3, r2
 800ecde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	68ba      	ldr	r2, [r7, #8]
 800ece6:	0151      	lsls	r1, r2, #5
 800ece8:	68fa      	ldr	r2, [r7, #12]
 800ecea:	440a      	add	r2, r1
 800ecec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecf0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ecf4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	791b      	ldrb	r3, [r3, #4]
 800ecfa:	2b03      	cmp	r3, #3
 800ecfc:	d003      	beq.n	800ed06 <USB_EPClearStall+0x9e>
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	791b      	ldrb	r3, [r3, #4]
 800ed02:	2b02      	cmp	r3, #2
 800ed04:	d10f      	bne.n	800ed26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	015a      	lsls	r2, r3, #5
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	68ba      	ldr	r2, [r7, #8]
 800ed16:	0151      	lsls	r1, r2, #5
 800ed18:	68fa      	ldr	r2, [r7, #12]
 800ed1a:	440a      	add	r2, r1
 800ed1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ed24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ed26:	2300      	movs	r3, #0
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3714      	adds	r7, #20
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr

0800ed34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ed34:	b480      	push	{r7}
 800ed36:	b085      	sub	sp, #20
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	68fa      	ldr	r2, [r7, #12]
 800ed4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ed52:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ed56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	78fb      	ldrb	r3, [r7, #3]
 800ed62:	011b      	lsls	r3, r3, #4
 800ed64:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ed68:	68f9      	ldr	r1, [r7, #12]
 800ed6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ed6e:	4313      	orrs	r3, r2
 800ed70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ed72:	2300      	movs	r3, #0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3714      	adds	r7, #20
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr

0800ed80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ed80:	b480      	push	{r7}
 800ed82:	b085      	sub	sp, #20
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	68fa      	ldr	r2, [r7, #12]
 800ed96:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ed9a:	f023 0303 	bic.w	r3, r3, #3
 800ed9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	68fa      	ldr	r2, [r7, #12]
 800edaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800edae:	f023 0302 	bic.w	r3, r3, #2
 800edb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800edb4:	2300      	movs	r3, #0
}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3714      	adds	r7, #20
 800edba:	46bd      	mov	sp, r7
 800edbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc0:	4770      	bx	lr

0800edc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800edc2:	b480      	push	{r7}
 800edc4:	b085      	sub	sp, #20
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	68fa      	ldr	r2, [r7, #12]
 800edd8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800eddc:	f023 0303 	bic.w	r3, r3, #3
 800ede0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ede8:	685b      	ldr	r3, [r3, #4]
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800edf0:	f043 0302 	orr.w	r3, r3, #2
 800edf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800edf6:	2300      	movs	r3, #0
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3714      	adds	r7, #20
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b085      	sub	sp, #20
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	695b      	ldr	r3, [r3, #20]
 800ee10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	699b      	ldr	r3, [r3, #24]
 800ee16:	68fa      	ldr	r2, [r7, #12]
 800ee18:	4013      	ands	r3, r2
 800ee1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3714      	adds	r7, #20
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr

0800ee2a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ee2a:	b480      	push	{r7}
 800ee2c:	b085      	sub	sp, #20
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee3c:	699b      	ldr	r3, [r3, #24]
 800ee3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee46:	69db      	ldr	r3, [r3, #28]
 800ee48:	68ba      	ldr	r2, [r7, #8]
 800ee4a:	4013      	ands	r3, r2
 800ee4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	0c1b      	lsrs	r3, r3, #16
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3714      	adds	r7, #20
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr

0800ee5e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ee5e:	b480      	push	{r7}
 800ee60:	b085      	sub	sp, #20
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee70:	699b      	ldr	r3, [r3, #24]
 800ee72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee7a:	69db      	ldr	r3, [r3, #28]
 800ee7c:	68ba      	ldr	r2, [r7, #8]
 800ee7e:	4013      	ands	r3, r2
 800ee80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	b29b      	uxth	r3, r3
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3714      	adds	r7, #20
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr

0800ee92 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ee92:	b480      	push	{r7}
 800ee94:	b085      	sub	sp, #20
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
 800ee9a:	460b      	mov	r3, r1
 800ee9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800eea2:	78fb      	ldrb	r3, [r7, #3]
 800eea4:	015a      	lsls	r2, r3, #5
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	4413      	add	r3, r2
 800eeaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eeae:	689b      	ldr	r3, [r3, #8]
 800eeb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eeb8:	695b      	ldr	r3, [r3, #20]
 800eeba:	68ba      	ldr	r2, [r7, #8]
 800eebc:	4013      	ands	r3, r2
 800eebe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eec0:	68bb      	ldr	r3, [r7, #8]
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3714      	adds	r7, #20
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr

0800eece <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eece:	b480      	push	{r7}
 800eed0:	b087      	sub	sp, #28
 800eed2:	af00      	add	r7, sp, #0
 800eed4:	6078      	str	r0, [r7, #4]
 800eed6:	460b      	mov	r3, r1
 800eed8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eee4:	691b      	ldr	r3, [r3, #16]
 800eee6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eeee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eef0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800eef2:	78fb      	ldrb	r3, [r7, #3]
 800eef4:	f003 030f 	and.w	r3, r3, #15
 800eef8:	68fa      	ldr	r2, [r7, #12]
 800eefa:	fa22 f303 	lsr.w	r3, r2, r3
 800eefe:	01db      	lsls	r3, r3, #7
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	693a      	ldr	r2, [r7, #16]
 800ef04:	4313      	orrs	r3, r2
 800ef06:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ef08:	78fb      	ldrb	r3, [r7, #3]
 800ef0a:	015a      	lsls	r2, r3, #5
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	4413      	add	r3, r2
 800ef10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef14:	689b      	ldr	r3, [r3, #8]
 800ef16:	693a      	ldr	r2, [r7, #16]
 800ef18:	4013      	ands	r3, r2
 800ef1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ef1c:	68bb      	ldr	r3, [r7, #8]
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	371c      	adds	r7, #28
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr

0800ef2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ef2a:	b480      	push	{r7}
 800ef2c:	b083      	sub	sp, #12
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	695b      	ldr	r3, [r3, #20]
 800ef36:	f003 0301 	and.w	r3, r3, #1
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	370c      	adds	r7, #12
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef44:	4770      	bx	lr
	...

0800ef48 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b085      	sub	sp, #20
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef62:	4619      	mov	r1, r3
 800ef64:	4b09      	ldr	r3, [pc, #36]	@ (800ef8c <USB_ActivateSetup+0x44>)
 800ef66:	4013      	ands	r3, r2
 800ef68:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ef70:	685b      	ldr	r3, [r3, #4]
 800ef72:	68fa      	ldr	r2, [r7, #12]
 800ef74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ef78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ef7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ef7e:	2300      	movs	r3, #0
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3714      	adds	r7, #20
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr
 800ef8c:	fffff800 	.word	0xfffff800

0800ef90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b087      	sub	sp, #28
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	460b      	mov	r3, r1
 800ef9a:	607a      	str	r2, [r7, #4]
 800ef9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	333c      	adds	r3, #60	@ 0x3c
 800efa6:	3304      	adds	r3, #4
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	4a26      	ldr	r2, [pc, #152]	@ (800f048 <USB_EP0_OutStart+0xb8>)
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d90a      	bls.n	800efca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800efc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800efc4:	d101      	bne.n	800efca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800efc6:	2300      	movs	r3, #0
 800efc8:	e037      	b.n	800f03a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efd0:	461a      	mov	r2, r3
 800efd2:	2300      	movs	r3, #0
 800efd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efdc:	691b      	ldr	r3, [r3, #16]
 800efde:	697a      	ldr	r2, [r7, #20]
 800efe0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efe4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800efe8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eff0:	691b      	ldr	r3, [r3, #16]
 800eff2:	697a      	ldr	r2, [r7, #20]
 800eff4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eff8:	f043 0318 	orr.w	r3, r3, #24
 800effc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f004:	691b      	ldr	r3, [r3, #16]
 800f006:	697a      	ldr	r2, [r7, #20]
 800f008:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f00c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f010:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f012:	7afb      	ldrb	r3, [r7, #11]
 800f014:	2b01      	cmp	r3, #1
 800f016:	d10f      	bne.n	800f038 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f01e:	461a      	mov	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	697a      	ldr	r2, [r7, #20]
 800f02e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f032:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f036:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f038:	2300      	movs	r3, #0
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	371c      	adds	r7, #28
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr
 800f046:	bf00      	nop
 800f048:	4f54300a 	.word	0x4f54300a

0800f04c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f04c:	b480      	push	{r7}
 800f04e:	b085      	sub	sp, #20
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f054:	2300      	movs	r3, #0
 800f056:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	3301      	adds	r3, #1
 800f05c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f064:	d901      	bls.n	800f06a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f066:	2303      	movs	r3, #3
 800f068:	e01b      	b.n	800f0a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	691b      	ldr	r3, [r3, #16]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	daf2      	bge.n	800f058 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f072:	2300      	movs	r3, #0
 800f074:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	691b      	ldr	r3, [r3, #16]
 800f07a:	f043 0201 	orr.w	r2, r3, #1
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	3301      	adds	r3, #1
 800f086:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f08e:	d901      	bls.n	800f094 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f090:	2303      	movs	r3, #3
 800f092:	e006      	b.n	800f0a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	691b      	ldr	r3, [r3, #16]
 800f098:	f003 0301 	and.w	r3, r3, #1
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d0f0      	beq.n	800f082 <USB_CoreReset+0x36>

  return HAL_OK;
 800f0a0:	2300      	movs	r3, #0
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3714      	adds	r7, #20
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ac:	4770      	bx	lr
	...

0800f0b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f0b4:	4904      	ldr	r1, [pc, #16]	@ (800f0c8 <MX_FATFS_Init+0x18>)
 800f0b6:	4805      	ldr	r0, [pc, #20]	@ (800f0cc <MX_FATFS_Init+0x1c>)
 800f0b8:	f005 f824 	bl	8014104 <FATFS_LinkDriver>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	461a      	mov	r2, r3
 800f0c0:	4b03      	ldr	r3, [pc, #12]	@ (800f0d0 <MX_FATFS_Init+0x20>)
 800f0c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f0c4:	bf00      	nop
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	2400290c 	.word	0x2400290c
 800f0cc:	2400010c 	.word	0x2400010c
 800f0d0:	24002908 	.word	0x24002908

0800f0d4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f0d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr

0800f0e4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT; // mod. AC 10/04/2024
    //return Stat; // mod. AC 10/04/2024
	return SD_disk_initialize(pdrv); // Aggiunto AC 10/04/2024
 800f0ee:	79fb      	ldrb	r3, [r7, #7]
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7f1 fc95 	bl	8000a20 <SD_disk_initialize>
 800f0f6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3708      	adds	r7, #8
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0
 800f106:	4603      	mov	r3, r0
 800f108:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT; // mod. AC 10/04/2024
    //return Stat; // mod. AC 10/04/2024
	return SD_disk_status(pdrv);   // Aggiunto AC 10/04/2024
 800f10a:	79fb      	ldrb	r3, [r7, #7]
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7f1 fd6d 	bl	8000bec <SD_disk_status>
 800f112:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800f114:	4618      	mov	r0, r3
 800f116:	3708      	adds	r7, #8
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}

0800f11c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	60b9      	str	r1, [r7, #8]
 800f124:	607a      	str	r2, [r7, #4]
 800f126:	603b      	str	r3, [r7, #0]
 800f128:	4603      	mov	r3, r0
 800f12a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK; // mod. AC 10/04/2024
	return SD_disk_read(pdrv, buff, sector, count); // Aggiunto AC 10/04/2024
 800f12c:	7bf8      	ldrb	r0, [r7, #15]
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	687a      	ldr	r2, [r7, #4]
 800f132:	68b9      	ldr	r1, [r7, #8]
 800f134:	f7f1 fd70 	bl	8000c18 <SD_disk_read>
 800f138:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3710      	adds	r7, #16
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}

0800f142 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800f142:	b580      	push	{r7, lr}
 800f144:	b084      	sub	sp, #16
 800f146:	af00      	add	r7, sp, #0
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	607a      	str	r2, [r7, #4]
 800f14c:	603b      	str	r3, [r7, #0]
 800f14e:	4603      	mov	r3, r0
 800f150:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK; // mod. AC 10/04/2024
	return SD_disk_write(pdrv, buff, sector, count); // Aggiunto AC 10/04/2024
 800f152:	7bf8      	ldrb	r0, [r7, #15]
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	687a      	ldr	r2, [r7, #4]
 800f158:	68b9      	ldr	r1, [r7, #8]
 800f15a:	f7f1 fdc7 	bl	8000cec <SD_disk_write>
 800f15e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800f160:	4618      	mov	r0, r3
 800f162:	3710      	adds	r7, #16
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b082      	sub	sp, #8
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	4603      	mov	r3, r0
 800f170:	603a      	str	r2, [r7, #0]
 800f172:	71fb      	strb	r3, [r7, #7]
 800f174:	460b      	mov	r3, r1
 800f176:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR; // mod. AC 10/04/2024
    //return res; // mod. AC 10/04/2024
	return SD_disk_ioctl(pdrv, cmd, buff); // Aggiunto AC 10/04/2024
 800f178:	79b9      	ldrb	r1, [r7, #6]
 800f17a:	79fb      	ldrb	r3, [r7, #7]
 800f17c:	683a      	ldr	r2, [r7, #0]
 800f17e:	4618      	mov	r0, r3
 800f180:	f7f1 fe38 	bl	8000df4 <SD_disk_ioctl>
 800f184:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800f186:	4618      	mov	r0, r3
 800f188:	3708      	adds	r7, #8
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
	...

0800f190 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b084      	sub	sp, #16
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	460b      	mov	r3, r1
 800f19a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f19c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f1a0:	f005 fdcc 	bl	8014d3c <USBD_static_malloc>
 800f1a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d109      	bne.n	800f1c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	32b0      	adds	r2, #176	@ 0xb0
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f1bc:	2302      	movs	r3, #2
 800f1be:	e0d4      	b.n	800f36a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f1c0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f1c4:	2100      	movs	r1, #0
 800f1c6:	68f8      	ldr	r0, [r7, #12]
 800f1c8:	f006 f852 	bl	8015270 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	32b0      	adds	r2, #176	@ 0xb0
 800f1d6:	68f9      	ldr	r1, [r7, #12]
 800f1d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	32b0      	adds	r2, #176	@ 0xb0
 800f1e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	7c1b      	ldrb	r3, [r3, #16]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d138      	bne.n	800f26a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f1f8:	4b5e      	ldr	r3, [pc, #376]	@ (800f374 <USBD_CDC_Init+0x1e4>)
 800f1fa:	7819      	ldrb	r1, [r3, #0]
 800f1fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f200:	2202      	movs	r2, #2
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f005 fc77 	bl	8014af6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f208:	4b5a      	ldr	r3, [pc, #360]	@ (800f374 <USBD_CDC_Init+0x1e4>)
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	f003 020f 	and.w	r2, r3, #15
 800f210:	6879      	ldr	r1, [r7, #4]
 800f212:	4613      	mov	r3, r2
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	4413      	add	r3, r2
 800f218:	009b      	lsls	r3, r3, #2
 800f21a:	440b      	add	r3, r1
 800f21c:	3324      	adds	r3, #36	@ 0x24
 800f21e:	2201      	movs	r2, #1
 800f220:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f222:	4b55      	ldr	r3, [pc, #340]	@ (800f378 <USBD_CDC_Init+0x1e8>)
 800f224:	7819      	ldrb	r1, [r3, #0]
 800f226:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f22a:	2202      	movs	r2, #2
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f005 fc62 	bl	8014af6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f232:	4b51      	ldr	r3, [pc, #324]	@ (800f378 <USBD_CDC_Init+0x1e8>)
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	f003 020f 	and.w	r2, r3, #15
 800f23a:	6879      	ldr	r1, [r7, #4]
 800f23c:	4613      	mov	r3, r2
 800f23e:	009b      	lsls	r3, r3, #2
 800f240:	4413      	add	r3, r2
 800f242:	009b      	lsls	r3, r3, #2
 800f244:	440b      	add	r3, r1
 800f246:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f24a:	2201      	movs	r2, #1
 800f24c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f24e:	4b4b      	ldr	r3, [pc, #300]	@ (800f37c <USBD_CDC_Init+0x1ec>)
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	f003 020f 	and.w	r2, r3, #15
 800f256:	6879      	ldr	r1, [r7, #4]
 800f258:	4613      	mov	r3, r2
 800f25a:	009b      	lsls	r3, r3, #2
 800f25c:	4413      	add	r3, r2
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	440b      	add	r3, r1
 800f262:	3326      	adds	r3, #38	@ 0x26
 800f264:	2210      	movs	r2, #16
 800f266:	801a      	strh	r2, [r3, #0]
 800f268:	e035      	b.n	800f2d6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f26a:	4b42      	ldr	r3, [pc, #264]	@ (800f374 <USBD_CDC_Init+0x1e4>)
 800f26c:	7819      	ldrb	r1, [r3, #0]
 800f26e:	2340      	movs	r3, #64	@ 0x40
 800f270:	2202      	movs	r2, #2
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f005 fc3f 	bl	8014af6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f278:	4b3e      	ldr	r3, [pc, #248]	@ (800f374 <USBD_CDC_Init+0x1e4>)
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	f003 020f 	and.w	r2, r3, #15
 800f280:	6879      	ldr	r1, [r7, #4]
 800f282:	4613      	mov	r3, r2
 800f284:	009b      	lsls	r3, r3, #2
 800f286:	4413      	add	r3, r2
 800f288:	009b      	lsls	r3, r3, #2
 800f28a:	440b      	add	r3, r1
 800f28c:	3324      	adds	r3, #36	@ 0x24
 800f28e:	2201      	movs	r2, #1
 800f290:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f292:	4b39      	ldr	r3, [pc, #228]	@ (800f378 <USBD_CDC_Init+0x1e8>)
 800f294:	7819      	ldrb	r1, [r3, #0]
 800f296:	2340      	movs	r3, #64	@ 0x40
 800f298:	2202      	movs	r2, #2
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f005 fc2b 	bl	8014af6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f2a0:	4b35      	ldr	r3, [pc, #212]	@ (800f378 <USBD_CDC_Init+0x1e8>)
 800f2a2:	781b      	ldrb	r3, [r3, #0]
 800f2a4:	f003 020f 	and.w	r2, r3, #15
 800f2a8:	6879      	ldr	r1, [r7, #4]
 800f2aa:	4613      	mov	r3, r2
 800f2ac:	009b      	lsls	r3, r3, #2
 800f2ae:	4413      	add	r3, r2
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	440b      	add	r3, r1
 800f2b4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f2b8:	2201      	movs	r2, #1
 800f2ba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f2bc:	4b2f      	ldr	r3, [pc, #188]	@ (800f37c <USBD_CDC_Init+0x1ec>)
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	f003 020f 	and.w	r2, r3, #15
 800f2c4:	6879      	ldr	r1, [r7, #4]
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	4413      	add	r3, r2
 800f2cc:	009b      	lsls	r3, r3, #2
 800f2ce:	440b      	add	r3, r1
 800f2d0:	3326      	adds	r3, #38	@ 0x26
 800f2d2:	2210      	movs	r2, #16
 800f2d4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f2d6:	4b29      	ldr	r3, [pc, #164]	@ (800f37c <USBD_CDC_Init+0x1ec>)
 800f2d8:	7819      	ldrb	r1, [r3, #0]
 800f2da:	2308      	movs	r3, #8
 800f2dc:	2203      	movs	r2, #3
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f005 fc09 	bl	8014af6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f2e4:	4b25      	ldr	r3, [pc, #148]	@ (800f37c <USBD_CDC_Init+0x1ec>)
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	f003 020f 	and.w	r2, r3, #15
 800f2ec:	6879      	ldr	r1, [r7, #4]
 800f2ee:	4613      	mov	r3, r2
 800f2f0:	009b      	lsls	r3, r3, #2
 800f2f2:	4413      	add	r3, r2
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	440b      	add	r3, r1
 800f2f8:	3324      	adds	r3, #36	@ 0x24
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2200      	movs	r2, #0
 800f302:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f30c:	687a      	ldr	r2, [r7, #4]
 800f30e:	33b0      	adds	r3, #176	@ 0xb0
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	4413      	add	r3, r2
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2200      	movs	r2, #0
 800f31e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2200      	movs	r2, #0
 800f326:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f330:	2b00      	cmp	r3, #0
 800f332:	d101      	bne.n	800f338 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f334:	2302      	movs	r3, #2
 800f336:	e018      	b.n	800f36a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	7c1b      	ldrb	r3, [r3, #16]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d10a      	bne.n	800f356 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f340:	4b0d      	ldr	r3, [pc, #52]	@ (800f378 <USBD_CDC_Init+0x1e8>)
 800f342:	7819      	ldrb	r1, [r3, #0]
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f34a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f005 fcc0 	bl	8014cd4 <USBD_LL_PrepareReceive>
 800f354:	e008      	b.n	800f368 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f356:	4b08      	ldr	r3, [pc, #32]	@ (800f378 <USBD_CDC_Init+0x1e8>)
 800f358:	7819      	ldrb	r1, [r3, #0]
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f360:	2340      	movs	r3, #64	@ 0x40
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f005 fcb6 	bl	8014cd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f368:	2300      	movs	r3, #0
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3710      	adds	r7, #16
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}
 800f372:	bf00      	nop
 800f374:	240001a7 	.word	0x240001a7
 800f378:	240001a8 	.word	0x240001a8
 800f37c:	240001a9 	.word	0x240001a9

0800f380 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	460b      	mov	r3, r1
 800f38a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f38c:	4b3a      	ldr	r3, [pc, #232]	@ (800f478 <USBD_CDC_DeInit+0xf8>)
 800f38e:	781b      	ldrb	r3, [r3, #0]
 800f390:	4619      	mov	r1, r3
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f005 fbd5 	bl	8014b42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f398:	4b37      	ldr	r3, [pc, #220]	@ (800f478 <USBD_CDC_DeInit+0xf8>)
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	f003 020f 	and.w	r2, r3, #15
 800f3a0:	6879      	ldr	r1, [r7, #4]
 800f3a2:	4613      	mov	r3, r2
 800f3a4:	009b      	lsls	r3, r3, #2
 800f3a6:	4413      	add	r3, r2
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	440b      	add	r3, r1
 800f3ac:	3324      	adds	r3, #36	@ 0x24
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f3b2:	4b32      	ldr	r3, [pc, #200]	@ (800f47c <USBD_CDC_DeInit+0xfc>)
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f005 fbc2 	bl	8014b42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f3be:	4b2f      	ldr	r3, [pc, #188]	@ (800f47c <USBD_CDC_DeInit+0xfc>)
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	f003 020f 	and.w	r2, r3, #15
 800f3c6:	6879      	ldr	r1, [r7, #4]
 800f3c8:	4613      	mov	r3, r2
 800f3ca:	009b      	lsls	r3, r3, #2
 800f3cc:	4413      	add	r3, r2
 800f3ce:	009b      	lsls	r3, r3, #2
 800f3d0:	440b      	add	r3, r1
 800f3d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f3da:	4b29      	ldr	r3, [pc, #164]	@ (800f480 <USBD_CDC_DeInit+0x100>)
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	4619      	mov	r1, r3
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f005 fbae 	bl	8014b42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f3e6:	4b26      	ldr	r3, [pc, #152]	@ (800f480 <USBD_CDC_DeInit+0x100>)
 800f3e8:	781b      	ldrb	r3, [r3, #0]
 800f3ea:	f003 020f 	and.w	r2, r3, #15
 800f3ee:	6879      	ldr	r1, [r7, #4]
 800f3f0:	4613      	mov	r3, r2
 800f3f2:	009b      	lsls	r3, r3, #2
 800f3f4:	4413      	add	r3, r2
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	440b      	add	r3, r1
 800f3fa:	3324      	adds	r3, #36	@ 0x24
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f400:	4b1f      	ldr	r3, [pc, #124]	@ (800f480 <USBD_CDC_DeInit+0x100>)
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	f003 020f 	and.w	r2, r3, #15
 800f408:	6879      	ldr	r1, [r7, #4]
 800f40a:	4613      	mov	r3, r2
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	4413      	add	r3, r2
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	440b      	add	r3, r1
 800f414:	3326      	adds	r3, #38	@ 0x26
 800f416:	2200      	movs	r2, #0
 800f418:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	32b0      	adds	r2, #176	@ 0xb0
 800f424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d01f      	beq.n	800f46c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f432:	687a      	ldr	r2, [r7, #4]
 800f434:	33b0      	adds	r3, #176	@ 0xb0
 800f436:	009b      	lsls	r3, r3, #2
 800f438:	4413      	add	r3, r2
 800f43a:	685b      	ldr	r3, [r3, #4]
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	32b0      	adds	r2, #176	@ 0xb0
 800f44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f44e:	4618      	mov	r0, r3
 800f450:	f005 fc82 	bl	8014d58 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	32b0      	adds	r2, #176	@ 0xb0
 800f45e:	2100      	movs	r1, #0
 800f460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2200      	movs	r2, #0
 800f468:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3708      	adds	r7, #8
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	240001a7 	.word	0x240001a7
 800f47c:	240001a8 	.word	0x240001a8
 800f480:	240001a9 	.word	0x240001a9

0800f484 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b086      	sub	sp, #24
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	32b0      	adds	r2, #176	@ 0xb0
 800f498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f49c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d101      	bne.n	800f4b4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f4b0:	2303      	movs	r3, #3
 800f4b2:	e0bf      	b.n	800f634 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d050      	beq.n	800f562 <USBD_CDC_Setup+0xde>
 800f4c0:	2b20      	cmp	r3, #32
 800f4c2:	f040 80af 	bne.w	800f624 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	88db      	ldrh	r3, [r3, #6]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d03a      	beq.n	800f544 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	b25b      	sxtb	r3, r3
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	da1b      	bge.n	800f510 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f4de:	687a      	ldr	r2, [r7, #4]
 800f4e0:	33b0      	adds	r3, #176	@ 0xb0
 800f4e2:	009b      	lsls	r3, r3, #2
 800f4e4:	4413      	add	r3, r2
 800f4e6:	685b      	ldr	r3, [r3, #4]
 800f4e8:	689b      	ldr	r3, [r3, #8]
 800f4ea:	683a      	ldr	r2, [r7, #0]
 800f4ec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f4ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f4f0:	683a      	ldr	r2, [r7, #0]
 800f4f2:	88d2      	ldrh	r2, [r2, #6]
 800f4f4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	88db      	ldrh	r3, [r3, #6]
 800f4fa:	2b07      	cmp	r3, #7
 800f4fc:	bf28      	it	cs
 800f4fe:	2307      	movcs	r3, #7
 800f500:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	89fa      	ldrh	r2, [r7, #14]
 800f506:	4619      	mov	r1, r3
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f001 fdbd 	bl	8011088 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f50e:	e090      	b.n	800f632 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	785a      	ldrb	r2, [r3, #1]
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	88db      	ldrh	r3, [r3, #6]
 800f51e:	2b3f      	cmp	r3, #63	@ 0x3f
 800f520:	d803      	bhi.n	800f52a <USBD_CDC_Setup+0xa6>
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	88db      	ldrh	r3, [r3, #6]
 800f526:	b2da      	uxtb	r2, r3
 800f528:	e000      	b.n	800f52c <USBD_CDC_Setup+0xa8>
 800f52a:	2240      	movs	r2, #64	@ 0x40
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f532:	6939      	ldr	r1, [r7, #16]
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f53a:	461a      	mov	r2, r3
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f001 fdcf 	bl	80110e0 <USBD_CtlPrepareRx>
      break;
 800f542:	e076      	b.n	800f632 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	33b0      	adds	r3, #176	@ 0xb0
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	4413      	add	r3, r2
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	689b      	ldr	r3, [r3, #8]
 800f556:	683a      	ldr	r2, [r7, #0]
 800f558:	7850      	ldrb	r0, [r2, #1]
 800f55a:	2200      	movs	r2, #0
 800f55c:	6839      	ldr	r1, [r7, #0]
 800f55e:	4798      	blx	r3
      break;
 800f560:	e067      	b.n	800f632 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	785b      	ldrb	r3, [r3, #1]
 800f566:	2b0b      	cmp	r3, #11
 800f568:	d851      	bhi.n	800f60e <USBD_CDC_Setup+0x18a>
 800f56a:	a201      	add	r2, pc, #4	@ (adr r2, 800f570 <USBD_CDC_Setup+0xec>)
 800f56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f570:	0800f5a1 	.word	0x0800f5a1
 800f574:	0800f61d 	.word	0x0800f61d
 800f578:	0800f60f 	.word	0x0800f60f
 800f57c:	0800f60f 	.word	0x0800f60f
 800f580:	0800f60f 	.word	0x0800f60f
 800f584:	0800f60f 	.word	0x0800f60f
 800f588:	0800f60f 	.word	0x0800f60f
 800f58c:	0800f60f 	.word	0x0800f60f
 800f590:	0800f60f 	.word	0x0800f60f
 800f594:	0800f60f 	.word	0x0800f60f
 800f598:	0800f5cb 	.word	0x0800f5cb
 800f59c:	0800f5f5 	.word	0x0800f5f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	2b03      	cmp	r3, #3
 800f5aa:	d107      	bne.n	800f5bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f5ac:	f107 030a 	add.w	r3, r7, #10
 800f5b0:	2202      	movs	r2, #2
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f001 fd67 	bl	8011088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f5ba:	e032      	b.n	800f622 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f5bc:	6839      	ldr	r1, [r7, #0]
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f001 fce5 	bl	8010f8e <USBD_CtlError>
            ret = USBD_FAIL;
 800f5c4:	2303      	movs	r3, #3
 800f5c6:	75fb      	strb	r3, [r7, #23]
          break;
 800f5c8:	e02b      	b.n	800f622 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5d0:	b2db      	uxtb	r3, r3
 800f5d2:	2b03      	cmp	r3, #3
 800f5d4:	d107      	bne.n	800f5e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f5d6:	f107 030d 	add.w	r3, r7, #13
 800f5da:	2201      	movs	r2, #1
 800f5dc:	4619      	mov	r1, r3
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f001 fd52 	bl	8011088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f5e4:	e01d      	b.n	800f622 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f5e6:	6839      	ldr	r1, [r7, #0]
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f001 fcd0 	bl	8010f8e <USBD_CtlError>
            ret = USBD_FAIL;
 800f5ee:	2303      	movs	r3, #3
 800f5f0:	75fb      	strb	r3, [r7, #23]
          break;
 800f5f2:	e016      	b.n	800f622 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	2b03      	cmp	r3, #3
 800f5fe:	d00f      	beq.n	800f620 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f600:	6839      	ldr	r1, [r7, #0]
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f001 fcc3 	bl	8010f8e <USBD_CtlError>
            ret = USBD_FAIL;
 800f608:	2303      	movs	r3, #3
 800f60a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f60c:	e008      	b.n	800f620 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f60e:	6839      	ldr	r1, [r7, #0]
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f001 fcbc 	bl	8010f8e <USBD_CtlError>
          ret = USBD_FAIL;
 800f616:	2303      	movs	r3, #3
 800f618:	75fb      	strb	r3, [r7, #23]
          break;
 800f61a:	e002      	b.n	800f622 <USBD_CDC_Setup+0x19e>
          break;
 800f61c:	bf00      	nop
 800f61e:	e008      	b.n	800f632 <USBD_CDC_Setup+0x1ae>
          break;
 800f620:	bf00      	nop
      }
      break;
 800f622:	e006      	b.n	800f632 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f624:	6839      	ldr	r1, [r7, #0]
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f001 fcb1 	bl	8010f8e <USBD_CtlError>
      ret = USBD_FAIL;
 800f62c:	2303      	movs	r3, #3
 800f62e:	75fb      	strb	r3, [r7, #23]
      break;
 800f630:	bf00      	nop
  }

  return (uint8_t)ret;
 800f632:	7dfb      	ldrb	r3, [r7, #23]
}
 800f634:	4618      	mov	r0, r3
 800f636:	3718      	adds	r7, #24
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b084      	sub	sp, #16
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	460b      	mov	r3, r1
 800f646:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f64e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	32b0      	adds	r2, #176	@ 0xb0
 800f65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d101      	bne.n	800f666 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f662:	2303      	movs	r3, #3
 800f664:	e065      	b.n	800f732 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	32b0      	adds	r2, #176	@ 0xb0
 800f670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f674:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f676:	78fb      	ldrb	r3, [r7, #3]
 800f678:	f003 020f 	and.w	r2, r3, #15
 800f67c:	6879      	ldr	r1, [r7, #4]
 800f67e:	4613      	mov	r3, r2
 800f680:	009b      	lsls	r3, r3, #2
 800f682:	4413      	add	r3, r2
 800f684:	009b      	lsls	r3, r3, #2
 800f686:	440b      	add	r3, r1
 800f688:	3318      	adds	r3, #24
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d02f      	beq.n	800f6f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f690:	78fb      	ldrb	r3, [r7, #3]
 800f692:	f003 020f 	and.w	r2, r3, #15
 800f696:	6879      	ldr	r1, [r7, #4]
 800f698:	4613      	mov	r3, r2
 800f69a:	009b      	lsls	r3, r3, #2
 800f69c:	4413      	add	r3, r2
 800f69e:	009b      	lsls	r3, r3, #2
 800f6a0:	440b      	add	r3, r1
 800f6a2:	3318      	adds	r3, #24
 800f6a4:	681a      	ldr	r2, [r3, #0]
 800f6a6:	78fb      	ldrb	r3, [r7, #3]
 800f6a8:	f003 010f 	and.w	r1, r3, #15
 800f6ac:	68f8      	ldr	r0, [r7, #12]
 800f6ae:	460b      	mov	r3, r1
 800f6b0:	00db      	lsls	r3, r3, #3
 800f6b2:	440b      	add	r3, r1
 800f6b4:	009b      	lsls	r3, r3, #2
 800f6b6:	4403      	add	r3, r0
 800f6b8:	331c      	adds	r3, #28
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	fbb2 f1f3 	udiv	r1, r2, r3
 800f6c0:	fb01 f303 	mul.w	r3, r1, r3
 800f6c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d112      	bne.n	800f6f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f6ca:	78fb      	ldrb	r3, [r7, #3]
 800f6cc:	f003 020f 	and.w	r2, r3, #15
 800f6d0:	6879      	ldr	r1, [r7, #4]
 800f6d2:	4613      	mov	r3, r2
 800f6d4:	009b      	lsls	r3, r3, #2
 800f6d6:	4413      	add	r3, r2
 800f6d8:	009b      	lsls	r3, r3, #2
 800f6da:	440b      	add	r3, r1
 800f6dc:	3318      	adds	r3, #24
 800f6de:	2200      	movs	r2, #0
 800f6e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f6e2:	78f9      	ldrb	r1, [r7, #3]
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f005 fad2 	bl	8014c92 <USBD_LL_Transmit>
 800f6ee:	e01f      	b.n	800f730 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f6fe:	687a      	ldr	r2, [r7, #4]
 800f700:	33b0      	adds	r3, #176	@ 0xb0
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	4413      	add	r3, r2
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	691b      	ldr	r3, [r3, #16]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d010      	beq.n	800f730 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f714:	687a      	ldr	r2, [r7, #4]
 800f716:	33b0      	adds	r3, #176	@ 0xb0
 800f718:	009b      	lsls	r3, r3, #2
 800f71a:	4413      	add	r3, r2
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	691b      	ldr	r3, [r3, #16]
 800f720:	68ba      	ldr	r2, [r7, #8]
 800f722:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f726:	68ba      	ldr	r2, [r7, #8]
 800f728:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f72c:	78fa      	ldrb	r2, [r7, #3]
 800f72e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f730:	2300      	movs	r3, #0
}
 800f732:	4618      	mov	r0, r3
 800f734:	3710      	adds	r7, #16
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}

0800f73a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f73a:	b580      	push	{r7, lr}
 800f73c:	b084      	sub	sp, #16
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
 800f742:	460b      	mov	r3, r1
 800f744:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	32b0      	adds	r2, #176	@ 0xb0
 800f750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f754:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	32b0      	adds	r2, #176	@ 0xb0
 800f760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d101      	bne.n	800f76c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f768:	2303      	movs	r3, #3
 800f76a:	e01a      	b.n	800f7a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f76c:	78fb      	ldrb	r3, [r7, #3]
 800f76e:	4619      	mov	r1, r3
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f005 fad0 	bl	8014d16 <USBD_LL_GetRxDataSize>
 800f776:	4602      	mov	r2, r0
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f784:	687a      	ldr	r2, [r7, #4]
 800f786:	33b0      	adds	r3, #176	@ 0xb0
 800f788:	009b      	lsls	r3, r3, #2
 800f78a:	4413      	add	r3, r2
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	68fa      	ldr	r2, [r7, #12]
 800f792:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f796:	68fa      	ldr	r2, [r7, #12]
 800f798:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f79c:	4611      	mov	r1, r2
 800f79e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f7a0:	2300      	movs	r3, #0
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3710      	adds	r7, #16
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}

0800f7aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f7aa:	b580      	push	{r7, lr}
 800f7ac:	b084      	sub	sp, #16
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	32b0      	adds	r2, #176	@ 0xb0
 800f7bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d101      	bne.n	800f7cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f7c8:	2303      	movs	r3, #3
 800f7ca:	e024      	b.n	800f816 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f7d2:	687a      	ldr	r2, [r7, #4]
 800f7d4:	33b0      	adds	r3, #176	@ 0xb0
 800f7d6:	009b      	lsls	r3, r3, #2
 800f7d8:	4413      	add	r3, r2
 800f7da:	685b      	ldr	r3, [r3, #4]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d019      	beq.n	800f814 <USBD_CDC_EP0_RxReady+0x6a>
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f7e6:	2bff      	cmp	r3, #255	@ 0xff
 800f7e8:	d014      	beq.n	800f814 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	33b0      	adds	r3, #176	@ 0xb0
 800f7f4:	009b      	lsls	r3, r3, #2
 800f7f6:	4413      	add	r3, r2
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	689b      	ldr	r3, [r3, #8]
 800f7fc:	68fa      	ldr	r2, [r7, #12]
 800f7fe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800f802:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f804:	68fa      	ldr	r2, [r7, #12]
 800f806:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f80a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	22ff      	movs	r2, #255	@ 0xff
 800f810:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f814:	2300      	movs	r3, #0
}
 800f816:	4618      	mov	r0, r3
 800f818:	3710      	adds	r7, #16
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}
	...

0800f820 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b086      	sub	sp, #24
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f828:	2182      	movs	r1, #130	@ 0x82
 800f82a:	4818      	ldr	r0, [pc, #96]	@ (800f88c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f82c:	f000 fd4f 	bl	80102ce <USBD_GetEpDesc>
 800f830:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f832:	2101      	movs	r1, #1
 800f834:	4815      	ldr	r0, [pc, #84]	@ (800f88c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f836:	f000 fd4a 	bl	80102ce <USBD_GetEpDesc>
 800f83a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f83c:	2181      	movs	r1, #129	@ 0x81
 800f83e:	4813      	ldr	r0, [pc, #76]	@ (800f88c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f840:	f000 fd45 	bl	80102ce <USBD_GetEpDesc>
 800f844:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d002      	beq.n	800f852 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	2210      	movs	r2, #16
 800f850:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d006      	beq.n	800f866 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	2200      	movs	r2, #0
 800f85c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f860:	711a      	strb	r2, [r3, #4]
 800f862:	2200      	movs	r2, #0
 800f864:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d006      	beq.n	800f87a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2200      	movs	r2, #0
 800f870:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f874:	711a      	strb	r2, [r3, #4]
 800f876:	2200      	movs	r2, #0
 800f878:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2243      	movs	r2, #67	@ 0x43
 800f87e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f880:	4b02      	ldr	r3, [pc, #8]	@ (800f88c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f882:	4618      	mov	r0, r3
 800f884:	3718      	adds	r7, #24
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	24000164 	.word	0x24000164

0800f890 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b086      	sub	sp, #24
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f898:	2182      	movs	r1, #130	@ 0x82
 800f89a:	4818      	ldr	r0, [pc, #96]	@ (800f8fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f89c:	f000 fd17 	bl	80102ce <USBD_GetEpDesc>
 800f8a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f8a2:	2101      	movs	r1, #1
 800f8a4:	4815      	ldr	r0, [pc, #84]	@ (800f8fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f8a6:	f000 fd12 	bl	80102ce <USBD_GetEpDesc>
 800f8aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f8ac:	2181      	movs	r1, #129	@ 0x81
 800f8ae:	4813      	ldr	r0, [pc, #76]	@ (800f8fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f8b0:	f000 fd0d 	bl	80102ce <USBD_GetEpDesc>
 800f8b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d002      	beq.n	800f8c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	2210      	movs	r2, #16
 800f8c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d006      	beq.n	800f8d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	711a      	strb	r2, [r3, #4]
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	f042 0202 	orr.w	r2, r2, #2
 800f8d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d006      	beq.n	800f8ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2200      	movs	r2, #0
 800f8e0:	711a      	strb	r2, [r3, #4]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	f042 0202 	orr.w	r2, r2, #2
 800f8e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2243      	movs	r2, #67	@ 0x43
 800f8ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f8f0:	4b02      	ldr	r3, [pc, #8]	@ (800f8fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3718      	adds	r7, #24
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	bf00      	nop
 800f8fc:	24000164 	.word	0x24000164

0800f900 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b086      	sub	sp, #24
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f908:	2182      	movs	r1, #130	@ 0x82
 800f90a:	4818      	ldr	r0, [pc, #96]	@ (800f96c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f90c:	f000 fcdf 	bl	80102ce <USBD_GetEpDesc>
 800f910:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f912:	2101      	movs	r1, #1
 800f914:	4815      	ldr	r0, [pc, #84]	@ (800f96c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f916:	f000 fcda 	bl	80102ce <USBD_GetEpDesc>
 800f91a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f91c:	2181      	movs	r1, #129	@ 0x81
 800f91e:	4813      	ldr	r0, [pc, #76]	@ (800f96c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f920:	f000 fcd5 	bl	80102ce <USBD_GetEpDesc>
 800f924:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d002      	beq.n	800f932 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	2210      	movs	r2, #16
 800f930:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d006      	beq.n	800f946 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	2200      	movs	r2, #0
 800f93c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f940:	711a      	strb	r2, [r3, #4]
 800f942:	2200      	movs	r2, #0
 800f944:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d006      	beq.n	800f95a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2200      	movs	r2, #0
 800f950:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f954:	711a      	strb	r2, [r3, #4]
 800f956:	2200      	movs	r2, #0
 800f958:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2243      	movs	r2, #67	@ 0x43
 800f95e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f960:	4b02      	ldr	r3, [pc, #8]	@ (800f96c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800f962:	4618      	mov	r0, r3
 800f964:	3718      	adds	r7, #24
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	24000164 	.word	0x24000164

0800f970 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f970:	b480      	push	{r7}
 800f972:	b083      	sub	sp, #12
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	220a      	movs	r2, #10
 800f97c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f97e:	4b03      	ldr	r3, [pc, #12]	@ (800f98c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f980:	4618      	mov	r0, r3
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr
 800f98c:	24000120 	.word	0x24000120

0800f990 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d101      	bne.n	800f9a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f9a0:	2303      	movs	r3, #3
 800f9a2:	e009      	b.n	800f9b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f9aa:	687a      	ldr	r2, [r7, #4]
 800f9ac:	33b0      	adds	r3, #176	@ 0xb0
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	4413      	add	r3, r2
 800f9b2:	683a      	ldr	r2, [r7, #0]
 800f9b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f9b6:	2300      	movs	r3, #0
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	370c      	adds	r7, #12
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c2:	4770      	bx	lr

0800f9c4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b087      	sub	sp, #28
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	60f8      	str	r0, [r7, #12]
 800f9cc:	60b9      	str	r1, [r7, #8]
 800f9ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	32b0      	adds	r2, #176	@ 0xb0
 800f9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9de:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d101      	bne.n	800f9ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f9e6:	2303      	movs	r3, #3
 800f9e8:	e008      	b.n	800f9fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	68ba      	ldr	r2, [r7, #8]
 800f9ee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f9fa:	2300      	movs	r3, #0
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	371c      	adds	r7, #28
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr

0800fa08 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b085      	sub	sp, #20
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	32b0      	adds	r2, #176	@ 0xb0
 800fa1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d101      	bne.n	800fa2c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800fa28:	2303      	movs	r3, #3
 800fa2a:	e004      	b.n	800fa36 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	683a      	ldr	r2, [r7, #0]
 800fa30:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800fa34:	2300      	movs	r3, #0
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3714      	adds	r7, #20
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr
	...

0800fa44 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b084      	sub	sp, #16
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	32b0      	adds	r2, #176	@ 0xb0
 800fa56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa5a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d101      	bne.n	800fa6a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fa66:	2303      	movs	r3, #3
 800fa68:	e025      	b.n	800fab6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d11f      	bne.n	800fab4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	2201      	movs	r2, #1
 800fa78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800fa7c:	4b10      	ldr	r3, [pc, #64]	@ (800fac0 <USBD_CDC_TransmitPacket+0x7c>)
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	f003 020f 	and.w	r2, r3, #15
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	4613      	mov	r3, r2
 800fa8e:	009b      	lsls	r3, r3, #2
 800fa90:	4413      	add	r3, r2
 800fa92:	009b      	lsls	r3, r3, #2
 800fa94:	4403      	add	r3, r0
 800fa96:	3318      	adds	r3, #24
 800fa98:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800fa9a:	4b09      	ldr	r3, [pc, #36]	@ (800fac0 <USBD_CDC_TransmitPacket+0x7c>)
 800fa9c:	7819      	ldrb	r1, [r3, #0]
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f005 f8f1 	bl	8014c92 <USBD_LL_Transmit>

    ret = USBD_OK;
 800fab0:	2300      	movs	r3, #0
 800fab2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800fab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	240001a7 	.word	0x240001a7

0800fac4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b084      	sub	sp, #16
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	32b0      	adds	r2, #176	@ 0xb0
 800fad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fada:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	32b0      	adds	r2, #176	@ 0xb0
 800fae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d101      	bne.n	800faf2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800faee:	2303      	movs	r3, #3
 800faf0:	e018      	b.n	800fb24 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	7c1b      	ldrb	r3, [r3, #16]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d10a      	bne.n	800fb10 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fafa:	4b0c      	ldr	r3, [pc, #48]	@ (800fb2c <USBD_CDC_ReceivePacket+0x68>)
 800fafc:	7819      	ldrb	r1, [r3, #0]
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fb04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f005 f8e3 	bl	8014cd4 <USBD_LL_PrepareReceive>
 800fb0e:	e008      	b.n	800fb22 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fb10:	4b06      	ldr	r3, [pc, #24]	@ (800fb2c <USBD_CDC_ReceivePacket+0x68>)
 800fb12:	7819      	ldrb	r1, [r3, #0]
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fb1a:	2340      	movs	r3, #64	@ 0x40
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f005 f8d9 	bl	8014cd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fb22:	2300      	movs	r3, #0
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3710      	adds	r7, #16
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}
 800fb2c:	240001a8 	.word	0x240001a8

0800fb30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b086      	sub	sp, #24
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	4613      	mov	r3, r2
 800fb3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d101      	bne.n	800fb48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fb44:	2303      	movs	r3, #3
 800fb46:	e01f      	b.n	800fb88 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	2200      	movs	r2, #0
 800fb54:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d003      	beq.n	800fb6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	68ba      	ldr	r2, [r7, #8]
 800fb6a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2201      	movs	r2, #1
 800fb72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	79fa      	ldrb	r2, [r7, #7]
 800fb7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	f004 ff4d 	bl	8014a1c <USBD_LL_Init>
 800fb82:	4603      	mov	r3, r0
 800fb84:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fb86:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3718      	adds	r7, #24
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d101      	bne.n	800fba8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fba4:	2303      	movs	r3, #3
 800fba6:	e025      	b.n	800fbf4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	683a      	ldr	r2, [r7, #0]
 800fbac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	32ae      	adds	r2, #174	@ 0xae
 800fbba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d00f      	beq.n	800fbe4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	32ae      	adds	r2, #174	@ 0xae
 800fbce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbd4:	f107 020e 	add.w	r2, r7, #14
 800fbd8:	4610      	mov	r0, r2
 800fbda:	4798      	blx	r3
 800fbdc:	4602      	mov	r2, r0
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fbea:	1c5a      	adds	r2, r3, #1
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800fbf2:	2300      	movs	r3, #0
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3710      	adds	r7, #16
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b082      	sub	sp, #8
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f004 ff5b 	bl	8014ac0 <USBD_LL_Start>
 800fc0a:	4603      	mov	r3, r0
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3708      	adds	r7, #8
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fc1c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	370c      	adds	r7, #12
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr

0800fc2a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fc2a:	b580      	push	{r7, lr}
 800fc2c:	b084      	sub	sp, #16
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	6078      	str	r0, [r7, #4]
 800fc32:	460b      	mov	r3, r1
 800fc34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc36:	2300      	movs	r3, #0
 800fc38:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d009      	beq.n	800fc58 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	78fa      	ldrb	r2, [r7, #3]
 800fc4e:	4611      	mov	r1, r2
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	4798      	blx	r3
 800fc54:	4603      	mov	r3, r0
 800fc56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3710      	adds	r7, #16
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}

0800fc62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fc62:	b580      	push	{r7, lr}
 800fc64:	b084      	sub	sp, #16
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	6078      	str	r0, [r7, #4]
 800fc6a:	460b      	mov	r3, r1
 800fc6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc78:	685b      	ldr	r3, [r3, #4]
 800fc7a:	78fa      	ldrb	r2, [r7, #3]
 800fc7c:	4611      	mov	r1, r2
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	4798      	blx	r3
 800fc82:	4603      	mov	r3, r0
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d001      	beq.n	800fc8c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fc88:	2303      	movs	r3, #3
 800fc8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fc8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3710      	adds	r7, #16
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}

0800fc96 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fc96:	b580      	push	{r7, lr}
 800fc98:	b084      	sub	sp, #16
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	6078      	str	r0, [r7, #4]
 800fc9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fca6:	6839      	ldr	r1, [r7, #0]
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f001 f936 	bl	8010f1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fcca:	f003 031f 	and.w	r3, r3, #31
 800fcce:	2b02      	cmp	r3, #2
 800fcd0:	d01a      	beq.n	800fd08 <USBD_LL_SetupStage+0x72>
 800fcd2:	2b02      	cmp	r3, #2
 800fcd4:	d822      	bhi.n	800fd1c <USBD_LL_SetupStage+0x86>
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d002      	beq.n	800fce0 <USBD_LL_SetupStage+0x4a>
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d00a      	beq.n	800fcf4 <USBD_LL_SetupStage+0x5e>
 800fcde:	e01d      	b.n	800fd1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fce6:	4619      	mov	r1, r3
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f000 fb63 	bl	80103b4 <USBD_StdDevReq>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	73fb      	strb	r3, [r7, #15]
      break;
 800fcf2:	e020      	b.n	800fd36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f000 fbcb 	bl	8010498 <USBD_StdItfReq>
 800fd02:	4603      	mov	r3, r0
 800fd04:	73fb      	strb	r3, [r7, #15]
      break;
 800fd06:	e016      	b.n	800fd36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fd0e:	4619      	mov	r1, r3
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f000 fc2d 	bl	8010570 <USBD_StdEPReq>
 800fd16:	4603      	mov	r3, r0
 800fd18:	73fb      	strb	r3, [r7, #15]
      break;
 800fd1a:	e00c      	b.n	800fd36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fd22:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	4619      	mov	r1, r3
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f004 ff28 	bl	8014b80 <USBD_LL_StallEP>
 800fd30:	4603      	mov	r3, r0
 800fd32:	73fb      	strb	r3, [r7, #15]
      break;
 800fd34:	bf00      	nop
  }

  return ret;
 800fd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3710      	adds	r7, #16
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}

0800fd40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b086      	sub	sp, #24
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	460b      	mov	r3, r1
 800fd4a:	607a      	str	r2, [r7, #4]
 800fd4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800fd52:	7afb      	ldrb	r3, [r7, #11]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d16e      	bne.n	800fe36 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800fd5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fd66:	2b03      	cmp	r3, #3
 800fd68:	f040 8098 	bne.w	800fe9c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	689a      	ldr	r2, [r3, #8]
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	68db      	ldr	r3, [r3, #12]
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d913      	bls.n	800fda0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	689a      	ldr	r2, [r3, #8]
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	68db      	ldr	r3, [r3, #12]
 800fd80:	1ad2      	subs	r2, r2, r3
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	68da      	ldr	r2, [r3, #12]
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	689b      	ldr	r3, [r3, #8]
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	bf28      	it	cs
 800fd92:	4613      	movcs	r3, r2
 800fd94:	461a      	mov	r2, r3
 800fd96:	6879      	ldr	r1, [r7, #4]
 800fd98:	68f8      	ldr	r0, [r7, #12]
 800fd9a:	f001 f9be 	bl	801111a <USBD_CtlContinueRx>
 800fd9e:	e07d      	b.n	800fe9c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fda6:	f003 031f 	and.w	r3, r3, #31
 800fdaa:	2b02      	cmp	r3, #2
 800fdac:	d014      	beq.n	800fdd8 <USBD_LL_DataOutStage+0x98>
 800fdae:	2b02      	cmp	r3, #2
 800fdb0:	d81d      	bhi.n	800fdee <USBD_LL_DataOutStage+0xae>
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d002      	beq.n	800fdbc <USBD_LL_DataOutStage+0x7c>
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d003      	beq.n	800fdc2 <USBD_LL_DataOutStage+0x82>
 800fdba:	e018      	b.n	800fdee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	75bb      	strb	r3, [r7, #22]
            break;
 800fdc0:	e018      	b.n	800fdf4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fdc8:	b2db      	uxtb	r3, r3
 800fdca:	4619      	mov	r1, r3
 800fdcc:	68f8      	ldr	r0, [r7, #12]
 800fdce:	f000 fa64 	bl	801029a <USBD_CoreFindIF>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	75bb      	strb	r3, [r7, #22]
            break;
 800fdd6:	e00d      	b.n	800fdf4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fdde:	b2db      	uxtb	r3, r3
 800fde0:	4619      	mov	r1, r3
 800fde2:	68f8      	ldr	r0, [r7, #12]
 800fde4:	f000 fa66 	bl	80102b4 <USBD_CoreFindEP>
 800fde8:	4603      	mov	r3, r0
 800fdea:	75bb      	strb	r3, [r7, #22]
            break;
 800fdec:	e002      	b.n	800fdf4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	75bb      	strb	r3, [r7, #22]
            break;
 800fdf2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800fdf4:	7dbb      	ldrb	r3, [r7, #22]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d119      	bne.n	800fe2e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe00:	b2db      	uxtb	r3, r3
 800fe02:	2b03      	cmp	r3, #3
 800fe04:	d113      	bne.n	800fe2e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800fe06:	7dba      	ldrb	r2, [r7, #22]
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	32ae      	adds	r2, #174	@ 0xae
 800fe0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe10:	691b      	ldr	r3, [r3, #16]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d00b      	beq.n	800fe2e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800fe16:	7dba      	ldrb	r2, [r7, #22]
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800fe1e:	7dba      	ldrb	r2, [r7, #22]
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	32ae      	adds	r2, #174	@ 0xae
 800fe24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe28:	691b      	ldr	r3, [r3, #16]
 800fe2a:	68f8      	ldr	r0, [r7, #12]
 800fe2c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fe2e:	68f8      	ldr	r0, [r7, #12]
 800fe30:	f001 f984 	bl	801113c <USBD_CtlSendStatus>
 800fe34:	e032      	b.n	800fe9c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800fe36:	7afb      	ldrb	r3, [r7, #11]
 800fe38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	4619      	mov	r1, r3
 800fe40:	68f8      	ldr	r0, [r7, #12]
 800fe42:	f000 fa37 	bl	80102b4 <USBD_CoreFindEP>
 800fe46:	4603      	mov	r3, r0
 800fe48:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fe4a:	7dbb      	ldrb	r3, [r7, #22]
 800fe4c:	2bff      	cmp	r3, #255	@ 0xff
 800fe4e:	d025      	beq.n	800fe9c <USBD_LL_DataOutStage+0x15c>
 800fe50:	7dbb      	ldrb	r3, [r7, #22]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d122      	bne.n	800fe9c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe5c:	b2db      	uxtb	r3, r3
 800fe5e:	2b03      	cmp	r3, #3
 800fe60:	d117      	bne.n	800fe92 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800fe62:	7dba      	ldrb	r2, [r7, #22]
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	32ae      	adds	r2, #174	@ 0xae
 800fe68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe6c:	699b      	ldr	r3, [r3, #24]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d00f      	beq.n	800fe92 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800fe72:	7dba      	ldrb	r2, [r7, #22]
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800fe7a:	7dba      	ldrb	r2, [r7, #22]
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	32ae      	adds	r2, #174	@ 0xae
 800fe80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe84:	699b      	ldr	r3, [r3, #24]
 800fe86:	7afa      	ldrb	r2, [r7, #11]
 800fe88:	4611      	mov	r1, r2
 800fe8a:	68f8      	ldr	r0, [r7, #12]
 800fe8c:	4798      	blx	r3
 800fe8e:	4603      	mov	r3, r0
 800fe90:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800fe92:	7dfb      	ldrb	r3, [r7, #23]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d001      	beq.n	800fe9c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800fe98:	7dfb      	ldrb	r3, [r7, #23]
 800fe9a:	e000      	b.n	800fe9e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800fe9c:	2300      	movs	r3, #0
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3718      	adds	r7, #24
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}

0800fea6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fea6:	b580      	push	{r7, lr}
 800fea8:	b086      	sub	sp, #24
 800feaa:	af00      	add	r7, sp, #0
 800feac:	60f8      	str	r0, [r7, #12]
 800feae:	460b      	mov	r3, r1
 800feb0:	607a      	str	r2, [r7, #4]
 800feb2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800feb4:	7afb      	ldrb	r3, [r7, #11]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d16f      	bne.n	800ff9a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	3314      	adds	r3, #20
 800febe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fec6:	2b02      	cmp	r3, #2
 800fec8:	d15a      	bne.n	800ff80 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	689a      	ldr	r2, [r3, #8]
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	68db      	ldr	r3, [r3, #12]
 800fed2:	429a      	cmp	r2, r3
 800fed4:	d914      	bls.n	800ff00 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	689a      	ldr	r2, [r3, #8]
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	68db      	ldr	r3, [r3, #12]
 800fede:	1ad2      	subs	r2, r2, r3
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	689b      	ldr	r3, [r3, #8]
 800fee8:	461a      	mov	r2, r3
 800feea:	6879      	ldr	r1, [r7, #4]
 800feec:	68f8      	ldr	r0, [r7, #12]
 800feee:	f001 f8e6 	bl	80110be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fef2:	2300      	movs	r3, #0
 800fef4:	2200      	movs	r2, #0
 800fef6:	2100      	movs	r1, #0
 800fef8:	68f8      	ldr	r0, [r7, #12]
 800fefa:	f004 feeb 	bl	8014cd4 <USBD_LL_PrepareReceive>
 800fefe:	e03f      	b.n	800ff80 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	68da      	ldr	r2, [r3, #12]
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	689b      	ldr	r3, [r3, #8]
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d11c      	bne.n	800ff46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	685a      	ldr	r2, [r3, #4]
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ff14:	429a      	cmp	r2, r3
 800ff16:	d316      	bcc.n	800ff46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	685a      	ldr	r2, [r3, #4]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d20f      	bcs.n	800ff46 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ff26:	2200      	movs	r2, #0
 800ff28:	2100      	movs	r1, #0
 800ff2a:	68f8      	ldr	r0, [r7, #12]
 800ff2c:	f001 f8c7 	bl	80110be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2200      	movs	r2, #0
 800ff34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ff38:	2300      	movs	r3, #0
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	2100      	movs	r1, #0
 800ff3e:	68f8      	ldr	r0, [r7, #12]
 800ff40:	f004 fec8 	bl	8014cd4 <USBD_LL_PrepareReceive>
 800ff44:	e01c      	b.n	800ff80 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff4c:	b2db      	uxtb	r3, r3
 800ff4e:	2b03      	cmp	r3, #3
 800ff50:	d10f      	bne.n	800ff72 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff58:	68db      	ldr	r3, [r3, #12]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d009      	beq.n	800ff72 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2200      	movs	r2, #0
 800ff62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff6c:	68db      	ldr	r3, [r3, #12]
 800ff6e:	68f8      	ldr	r0, [r7, #12]
 800ff70:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff72:	2180      	movs	r1, #128	@ 0x80
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f004 fe03 	bl	8014b80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ff7a:	68f8      	ldr	r0, [r7, #12]
 800ff7c:	f001 f8f1 	bl	8011162 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d03a      	beq.n	8010000 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ff8a:	68f8      	ldr	r0, [r7, #12]
 800ff8c:	f7ff fe42 	bl	800fc14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	2200      	movs	r2, #0
 800ff94:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ff98:	e032      	b.n	8010000 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ff9a:	7afb      	ldrb	r3, [r7, #11]
 800ff9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ffa0:	b2db      	uxtb	r3, r3
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	68f8      	ldr	r0, [r7, #12]
 800ffa6:	f000 f985 	bl	80102b4 <USBD_CoreFindEP>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ffae:	7dfb      	ldrb	r3, [r7, #23]
 800ffb0:	2bff      	cmp	r3, #255	@ 0xff
 800ffb2:	d025      	beq.n	8010000 <USBD_LL_DataInStage+0x15a>
 800ffb4:	7dfb      	ldrb	r3, [r7, #23]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d122      	bne.n	8010000 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffc0:	b2db      	uxtb	r3, r3
 800ffc2:	2b03      	cmp	r3, #3
 800ffc4:	d11c      	bne.n	8010000 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ffc6:	7dfa      	ldrb	r2, [r7, #23]
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	32ae      	adds	r2, #174	@ 0xae
 800ffcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffd0:	695b      	ldr	r3, [r3, #20]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d014      	beq.n	8010000 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ffd6:	7dfa      	ldrb	r2, [r7, #23]
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ffde:	7dfa      	ldrb	r2, [r7, #23]
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	32ae      	adds	r2, #174	@ 0xae
 800ffe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffe8:	695b      	ldr	r3, [r3, #20]
 800ffea:	7afa      	ldrb	r2, [r7, #11]
 800ffec:	4611      	mov	r1, r2
 800ffee:	68f8      	ldr	r0, [r7, #12]
 800fff0:	4798      	blx	r3
 800fff2:	4603      	mov	r3, r0
 800fff4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800fff6:	7dbb      	ldrb	r3, [r7, #22]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d001      	beq.n	8010000 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800fffc:	7dbb      	ldrb	r3, [r7, #22]
 800fffe:	e000      	b.n	8010002 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010000:	2300      	movs	r3, #0
}
 8010002:	4618      	mov	r0, r3
 8010004:	3718      	adds	r7, #24
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}

0801000a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801000a:	b580      	push	{r7, lr}
 801000c:	b084      	sub	sp, #16
 801000e:	af00      	add	r7, sp, #0
 8010010:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010012:	2300      	movs	r3, #0
 8010014:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2201      	movs	r2, #1
 801001a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2200      	movs	r2, #0
 8010022:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2200      	movs	r2, #0
 8010030:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2200      	movs	r2, #0
 8010038:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010042:	2b00      	cmp	r3, #0
 8010044:	d014      	beq.n	8010070 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d00e      	beq.n	8010070 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	6852      	ldr	r2, [r2, #4]
 801005e:	b2d2      	uxtb	r2, r2
 8010060:	4611      	mov	r1, r2
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	4798      	blx	r3
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d001      	beq.n	8010070 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801006c:	2303      	movs	r3, #3
 801006e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010070:	2340      	movs	r3, #64	@ 0x40
 8010072:	2200      	movs	r2, #0
 8010074:	2100      	movs	r1, #0
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f004 fd3d 	bl	8014af6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2201      	movs	r2, #1
 8010080:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2240      	movs	r2, #64	@ 0x40
 8010088:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801008c:	2340      	movs	r3, #64	@ 0x40
 801008e:	2200      	movs	r2, #0
 8010090:	2180      	movs	r1, #128	@ 0x80
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f004 fd2f 	bl	8014af6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2201      	movs	r2, #1
 801009c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2240      	movs	r2, #64	@ 0x40
 80100a2:	621a      	str	r2, [r3, #32]

  return ret;
 80100a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3710      	adds	r7, #16
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}

080100ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80100ae:	b480      	push	{r7}
 80100b0:	b083      	sub	sp, #12
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	6078      	str	r0, [r7, #4]
 80100b6:	460b      	mov	r3, r1
 80100b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	78fa      	ldrb	r2, [r7, #3]
 80100be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80100c0:	2300      	movs	r3, #0
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	370c      	adds	r7, #12
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr

080100ce <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80100ce:	b480      	push	{r7}
 80100d0:	b083      	sub	sp, #12
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100dc:	b2db      	uxtb	r3, r3
 80100de:	2b04      	cmp	r3, #4
 80100e0:	d006      	beq.n	80100f0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100e8:	b2da      	uxtb	r2, r3
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2204      	movs	r2, #4
 80100f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80100f8:	2300      	movs	r3, #0
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	370c      	adds	r7, #12
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr

08010106 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010106:	b480      	push	{r7}
 8010108:	b083      	sub	sp, #12
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010114:	b2db      	uxtb	r3, r3
 8010116:	2b04      	cmp	r3, #4
 8010118:	d106      	bne.n	8010128 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010120:	b2da      	uxtb	r2, r3
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010128:	2300      	movs	r3, #0
}
 801012a:	4618      	mov	r0, r3
 801012c:	370c      	adds	r7, #12
 801012e:	46bd      	mov	sp, r7
 8010130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010134:	4770      	bx	lr

08010136 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010136:	b580      	push	{r7, lr}
 8010138:	b082      	sub	sp, #8
 801013a:	af00      	add	r7, sp, #0
 801013c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010144:	b2db      	uxtb	r3, r3
 8010146:	2b03      	cmp	r3, #3
 8010148:	d110      	bne.n	801016c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010150:	2b00      	cmp	r3, #0
 8010152:	d00b      	beq.n	801016c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801015a:	69db      	ldr	r3, [r3, #28]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d005      	beq.n	801016c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010166:	69db      	ldr	r3, [r3, #28]
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801016c:	2300      	movs	r3, #0
}
 801016e:	4618      	mov	r0, r3
 8010170:	3708      	adds	r7, #8
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}

08010176 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010176:	b580      	push	{r7, lr}
 8010178:	b082      	sub	sp, #8
 801017a:	af00      	add	r7, sp, #0
 801017c:	6078      	str	r0, [r7, #4]
 801017e:	460b      	mov	r3, r1
 8010180:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	32ae      	adds	r2, #174	@ 0xae
 801018c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d101      	bne.n	8010198 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010194:	2303      	movs	r3, #3
 8010196:	e01c      	b.n	80101d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801019e:	b2db      	uxtb	r3, r3
 80101a0:	2b03      	cmp	r3, #3
 80101a2:	d115      	bne.n	80101d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	32ae      	adds	r2, #174	@ 0xae
 80101ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101b2:	6a1b      	ldr	r3, [r3, #32]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d00b      	beq.n	80101d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	32ae      	adds	r2, #174	@ 0xae
 80101c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101c6:	6a1b      	ldr	r3, [r3, #32]
 80101c8:	78fa      	ldrb	r2, [r7, #3]
 80101ca:	4611      	mov	r1, r2
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80101d0:	2300      	movs	r3, #0
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3708      	adds	r7, #8
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}

080101da <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80101da:	b580      	push	{r7, lr}
 80101dc:	b082      	sub	sp, #8
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
 80101e2:	460b      	mov	r3, r1
 80101e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	32ae      	adds	r2, #174	@ 0xae
 80101f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d101      	bne.n	80101fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80101f8:	2303      	movs	r3, #3
 80101fa:	e01c      	b.n	8010236 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010202:	b2db      	uxtb	r3, r3
 8010204:	2b03      	cmp	r3, #3
 8010206:	d115      	bne.n	8010234 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	32ae      	adds	r2, #174	@ 0xae
 8010212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010218:	2b00      	cmp	r3, #0
 801021a:	d00b      	beq.n	8010234 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	32ae      	adds	r2, #174	@ 0xae
 8010226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801022a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801022c:	78fa      	ldrb	r2, [r7, #3]
 801022e:	4611      	mov	r1, r2
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010234:	2300      	movs	r3, #0
}
 8010236:	4618      	mov	r0, r3
 8010238:	3708      	adds	r7, #8
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}

0801023e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801023e:	b480      	push	{r7}
 8010240:	b083      	sub	sp, #12
 8010242:	af00      	add	r7, sp, #0
 8010244:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010246:	2300      	movs	r3, #0
}
 8010248:	4618      	mov	r0, r3
 801024a:	370c      	adds	r7, #12
 801024c:	46bd      	mov	sp, r7
 801024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010252:	4770      	bx	lr

08010254 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b084      	sub	sp, #16
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801025c:	2300      	movs	r3, #0
 801025e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2201      	movs	r2, #1
 8010264:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801026e:	2b00      	cmp	r3, #0
 8010270:	d00e      	beq.n	8010290 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	687a      	ldr	r2, [r7, #4]
 801027c:	6852      	ldr	r2, [r2, #4]
 801027e:	b2d2      	uxtb	r2, r2
 8010280:	4611      	mov	r1, r2
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	4798      	blx	r3
 8010286:	4603      	mov	r3, r0
 8010288:	2b00      	cmp	r3, #0
 801028a:	d001      	beq.n	8010290 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801028c:	2303      	movs	r3, #3
 801028e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010290:	7bfb      	ldrb	r3, [r7, #15]
}
 8010292:	4618      	mov	r0, r3
 8010294:	3710      	adds	r7, #16
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}

0801029a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801029a:	b480      	push	{r7}
 801029c:	b083      	sub	sp, #12
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
 80102a2:	460b      	mov	r3, r1
 80102a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80102a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	370c      	adds	r7, #12
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr

080102b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80102b4:	b480      	push	{r7}
 80102b6:	b083      	sub	sp, #12
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	460b      	mov	r3, r1
 80102be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80102c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	370c      	adds	r7, #12
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr

080102ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80102ce:	b580      	push	{r7, lr}
 80102d0:	b086      	sub	sp, #24
 80102d2:	af00      	add	r7, sp, #0
 80102d4:	6078      	str	r0, [r7, #4]
 80102d6:	460b      	mov	r3, r1
 80102d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80102e2:	2300      	movs	r3, #0
 80102e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	885b      	ldrh	r3, [r3, #2]
 80102ea:	b29b      	uxth	r3, r3
 80102ec:	68fa      	ldr	r2, [r7, #12]
 80102ee:	7812      	ldrb	r2, [r2, #0]
 80102f0:	4293      	cmp	r3, r2
 80102f2:	d91f      	bls.n	8010334 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80102fa:	e013      	b.n	8010324 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80102fc:	f107 030a 	add.w	r3, r7, #10
 8010300:	4619      	mov	r1, r3
 8010302:	6978      	ldr	r0, [r7, #20]
 8010304:	f000 f81b 	bl	801033e <USBD_GetNextDesc>
 8010308:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	785b      	ldrb	r3, [r3, #1]
 801030e:	2b05      	cmp	r3, #5
 8010310:	d108      	bne.n	8010324 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	789b      	ldrb	r3, [r3, #2]
 801031a:	78fa      	ldrb	r2, [r7, #3]
 801031c:	429a      	cmp	r2, r3
 801031e:	d008      	beq.n	8010332 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010320:	2300      	movs	r3, #0
 8010322:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	885b      	ldrh	r3, [r3, #2]
 8010328:	b29a      	uxth	r2, r3
 801032a:	897b      	ldrh	r3, [r7, #10]
 801032c:	429a      	cmp	r2, r3
 801032e:	d8e5      	bhi.n	80102fc <USBD_GetEpDesc+0x2e>
 8010330:	e000      	b.n	8010334 <USBD_GetEpDesc+0x66>
          break;
 8010332:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010334:	693b      	ldr	r3, [r7, #16]
}
 8010336:	4618      	mov	r0, r3
 8010338:	3718      	adds	r7, #24
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}

0801033e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801033e:	b480      	push	{r7}
 8010340:	b085      	sub	sp, #20
 8010342:	af00      	add	r7, sp, #0
 8010344:	6078      	str	r0, [r7, #4]
 8010346:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	881b      	ldrh	r3, [r3, #0]
 8010350:	68fa      	ldr	r2, [r7, #12]
 8010352:	7812      	ldrb	r2, [r2, #0]
 8010354:	4413      	add	r3, r2
 8010356:	b29a      	uxth	r2, r3
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	461a      	mov	r2, r3
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	4413      	add	r3, r2
 8010366:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010368:	68fb      	ldr	r3, [r7, #12]
}
 801036a:	4618      	mov	r0, r3
 801036c:	3714      	adds	r7, #20
 801036e:	46bd      	mov	sp, r7
 8010370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010374:	4770      	bx	lr

08010376 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010376:	b480      	push	{r7}
 8010378:	b087      	sub	sp, #28
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	781b      	ldrb	r3, [r3, #0]
 8010386:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	3301      	adds	r3, #1
 801038c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010394:	8a3b      	ldrh	r3, [r7, #16]
 8010396:	021b      	lsls	r3, r3, #8
 8010398:	b21a      	sxth	r2, r3
 801039a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801039e:	4313      	orrs	r3, r2
 80103a0:	b21b      	sxth	r3, r3
 80103a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80103a4:	89fb      	ldrh	r3, [r7, #14]
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	371c      	adds	r7, #28
 80103aa:	46bd      	mov	sp, r7
 80103ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b0:	4770      	bx	lr
	...

080103b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b084      	sub	sp, #16
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80103be:	2300      	movs	r3, #0
 80103c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80103ca:	2b40      	cmp	r3, #64	@ 0x40
 80103cc:	d005      	beq.n	80103da <USBD_StdDevReq+0x26>
 80103ce:	2b40      	cmp	r3, #64	@ 0x40
 80103d0:	d857      	bhi.n	8010482 <USBD_StdDevReq+0xce>
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d00f      	beq.n	80103f6 <USBD_StdDevReq+0x42>
 80103d6:	2b20      	cmp	r3, #32
 80103d8:	d153      	bne.n	8010482 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	32ae      	adds	r2, #174	@ 0xae
 80103e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103e8:	689b      	ldr	r3, [r3, #8]
 80103ea:	6839      	ldr	r1, [r7, #0]
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	4798      	blx	r3
 80103f0:	4603      	mov	r3, r0
 80103f2:	73fb      	strb	r3, [r7, #15]
      break;
 80103f4:	e04a      	b.n	801048c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	785b      	ldrb	r3, [r3, #1]
 80103fa:	2b09      	cmp	r3, #9
 80103fc:	d83b      	bhi.n	8010476 <USBD_StdDevReq+0xc2>
 80103fe:	a201      	add	r2, pc, #4	@ (adr r2, 8010404 <USBD_StdDevReq+0x50>)
 8010400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010404:	08010459 	.word	0x08010459
 8010408:	0801046d 	.word	0x0801046d
 801040c:	08010477 	.word	0x08010477
 8010410:	08010463 	.word	0x08010463
 8010414:	08010477 	.word	0x08010477
 8010418:	08010437 	.word	0x08010437
 801041c:	0801042d 	.word	0x0801042d
 8010420:	08010477 	.word	0x08010477
 8010424:	0801044f 	.word	0x0801044f
 8010428:	08010441 	.word	0x08010441
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801042c:	6839      	ldr	r1, [r7, #0]
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f000 fa3c 	bl	80108ac <USBD_GetDescriptor>
          break;
 8010434:	e024      	b.n	8010480 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010436:	6839      	ldr	r1, [r7, #0]
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f000 fbcb 	bl	8010bd4 <USBD_SetAddress>
          break;
 801043e:	e01f      	b.n	8010480 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010440:	6839      	ldr	r1, [r7, #0]
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f000 fc0a 	bl	8010c5c <USBD_SetConfig>
 8010448:	4603      	mov	r3, r0
 801044a:	73fb      	strb	r3, [r7, #15]
          break;
 801044c:	e018      	b.n	8010480 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801044e:	6839      	ldr	r1, [r7, #0]
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f000 fcad 	bl	8010db0 <USBD_GetConfig>
          break;
 8010456:	e013      	b.n	8010480 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010458:	6839      	ldr	r1, [r7, #0]
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f000 fcde 	bl	8010e1c <USBD_GetStatus>
          break;
 8010460:	e00e      	b.n	8010480 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010462:	6839      	ldr	r1, [r7, #0]
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f000 fd0d 	bl	8010e84 <USBD_SetFeature>
          break;
 801046a:	e009      	b.n	8010480 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801046c:	6839      	ldr	r1, [r7, #0]
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f000 fd31 	bl	8010ed6 <USBD_ClrFeature>
          break;
 8010474:	e004      	b.n	8010480 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010476:	6839      	ldr	r1, [r7, #0]
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f000 fd88 	bl	8010f8e <USBD_CtlError>
          break;
 801047e:	bf00      	nop
      }
      break;
 8010480:	e004      	b.n	801048c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010482:	6839      	ldr	r1, [r7, #0]
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f000 fd82 	bl	8010f8e <USBD_CtlError>
      break;
 801048a:	bf00      	nop
  }

  return ret;
 801048c:	7bfb      	ldrb	r3, [r7, #15]
}
 801048e:	4618      	mov	r0, r3
 8010490:	3710      	adds	r7, #16
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}
 8010496:	bf00      	nop

08010498 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b084      	sub	sp, #16
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
 80104a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80104a2:	2300      	movs	r3, #0
 80104a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	781b      	ldrb	r3, [r3, #0]
 80104aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80104ae:	2b40      	cmp	r3, #64	@ 0x40
 80104b0:	d005      	beq.n	80104be <USBD_StdItfReq+0x26>
 80104b2:	2b40      	cmp	r3, #64	@ 0x40
 80104b4:	d852      	bhi.n	801055c <USBD_StdItfReq+0xc4>
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d001      	beq.n	80104be <USBD_StdItfReq+0x26>
 80104ba:	2b20      	cmp	r3, #32
 80104bc:	d14e      	bne.n	801055c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104c4:	b2db      	uxtb	r3, r3
 80104c6:	3b01      	subs	r3, #1
 80104c8:	2b02      	cmp	r3, #2
 80104ca:	d840      	bhi.n	801054e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	889b      	ldrh	r3, [r3, #4]
 80104d0:	b2db      	uxtb	r3, r3
 80104d2:	2b01      	cmp	r3, #1
 80104d4:	d836      	bhi.n	8010544 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	889b      	ldrh	r3, [r3, #4]
 80104da:	b2db      	uxtb	r3, r3
 80104dc:	4619      	mov	r1, r3
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f7ff fedb 	bl	801029a <USBD_CoreFindIF>
 80104e4:	4603      	mov	r3, r0
 80104e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80104e8:	7bbb      	ldrb	r3, [r7, #14]
 80104ea:	2bff      	cmp	r3, #255	@ 0xff
 80104ec:	d01d      	beq.n	801052a <USBD_StdItfReq+0x92>
 80104ee:	7bbb      	ldrb	r3, [r7, #14]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d11a      	bne.n	801052a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80104f4:	7bba      	ldrb	r2, [r7, #14]
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	32ae      	adds	r2, #174	@ 0xae
 80104fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104fe:	689b      	ldr	r3, [r3, #8]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d00f      	beq.n	8010524 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010504:	7bba      	ldrb	r2, [r7, #14]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801050c:	7bba      	ldrb	r2, [r7, #14]
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	32ae      	adds	r2, #174	@ 0xae
 8010512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010516:	689b      	ldr	r3, [r3, #8]
 8010518:	6839      	ldr	r1, [r7, #0]
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	4798      	blx	r3
 801051e:	4603      	mov	r3, r0
 8010520:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010522:	e004      	b.n	801052e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010524:	2303      	movs	r3, #3
 8010526:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010528:	e001      	b.n	801052e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801052a:	2303      	movs	r3, #3
 801052c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	88db      	ldrh	r3, [r3, #6]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d110      	bne.n	8010558 <USBD_StdItfReq+0xc0>
 8010536:	7bfb      	ldrb	r3, [r7, #15]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d10d      	bne.n	8010558 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f000 fdfd 	bl	801113c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010542:	e009      	b.n	8010558 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010544:	6839      	ldr	r1, [r7, #0]
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f000 fd21 	bl	8010f8e <USBD_CtlError>
          break;
 801054c:	e004      	b.n	8010558 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801054e:	6839      	ldr	r1, [r7, #0]
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f000 fd1c 	bl	8010f8e <USBD_CtlError>
          break;
 8010556:	e000      	b.n	801055a <USBD_StdItfReq+0xc2>
          break;
 8010558:	bf00      	nop
      }
      break;
 801055a:	e004      	b.n	8010566 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801055c:	6839      	ldr	r1, [r7, #0]
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f000 fd15 	bl	8010f8e <USBD_CtlError>
      break;
 8010564:	bf00      	nop
  }

  return ret;
 8010566:	7bfb      	ldrb	r3, [r7, #15]
}
 8010568:	4618      	mov	r0, r3
 801056a:	3710      	adds	r7, #16
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}

08010570 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b084      	sub	sp, #16
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801057a:	2300      	movs	r3, #0
 801057c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	889b      	ldrh	r3, [r3, #4]
 8010582:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801058c:	2b40      	cmp	r3, #64	@ 0x40
 801058e:	d007      	beq.n	80105a0 <USBD_StdEPReq+0x30>
 8010590:	2b40      	cmp	r3, #64	@ 0x40
 8010592:	f200 817f 	bhi.w	8010894 <USBD_StdEPReq+0x324>
 8010596:	2b00      	cmp	r3, #0
 8010598:	d02a      	beq.n	80105f0 <USBD_StdEPReq+0x80>
 801059a:	2b20      	cmp	r3, #32
 801059c:	f040 817a 	bne.w	8010894 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80105a0:	7bbb      	ldrb	r3, [r7, #14]
 80105a2:	4619      	mov	r1, r3
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f7ff fe85 	bl	80102b4 <USBD_CoreFindEP>
 80105aa:	4603      	mov	r3, r0
 80105ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80105ae:	7b7b      	ldrb	r3, [r7, #13]
 80105b0:	2bff      	cmp	r3, #255	@ 0xff
 80105b2:	f000 8174 	beq.w	801089e <USBD_StdEPReq+0x32e>
 80105b6:	7b7b      	ldrb	r3, [r7, #13]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	f040 8170 	bne.w	801089e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80105be:	7b7a      	ldrb	r2, [r7, #13]
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80105c6:	7b7a      	ldrb	r2, [r7, #13]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	32ae      	adds	r2, #174	@ 0xae
 80105cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105d0:	689b      	ldr	r3, [r3, #8]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	f000 8163 	beq.w	801089e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80105d8:	7b7a      	ldrb	r2, [r7, #13]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	32ae      	adds	r2, #174	@ 0xae
 80105de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105e2:	689b      	ldr	r3, [r3, #8]
 80105e4:	6839      	ldr	r1, [r7, #0]
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	4798      	blx	r3
 80105ea:	4603      	mov	r3, r0
 80105ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80105ee:	e156      	b.n	801089e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	785b      	ldrb	r3, [r3, #1]
 80105f4:	2b03      	cmp	r3, #3
 80105f6:	d008      	beq.n	801060a <USBD_StdEPReq+0x9a>
 80105f8:	2b03      	cmp	r3, #3
 80105fa:	f300 8145 	bgt.w	8010888 <USBD_StdEPReq+0x318>
 80105fe:	2b00      	cmp	r3, #0
 8010600:	f000 809b 	beq.w	801073a <USBD_StdEPReq+0x1ca>
 8010604:	2b01      	cmp	r3, #1
 8010606:	d03c      	beq.n	8010682 <USBD_StdEPReq+0x112>
 8010608:	e13e      	b.n	8010888 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010610:	b2db      	uxtb	r3, r3
 8010612:	2b02      	cmp	r3, #2
 8010614:	d002      	beq.n	801061c <USBD_StdEPReq+0xac>
 8010616:	2b03      	cmp	r3, #3
 8010618:	d016      	beq.n	8010648 <USBD_StdEPReq+0xd8>
 801061a:	e02c      	b.n	8010676 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801061c:	7bbb      	ldrb	r3, [r7, #14]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00d      	beq.n	801063e <USBD_StdEPReq+0xce>
 8010622:	7bbb      	ldrb	r3, [r7, #14]
 8010624:	2b80      	cmp	r3, #128	@ 0x80
 8010626:	d00a      	beq.n	801063e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010628:	7bbb      	ldrb	r3, [r7, #14]
 801062a:	4619      	mov	r1, r3
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f004 faa7 	bl	8014b80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010632:	2180      	movs	r1, #128	@ 0x80
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f004 faa3 	bl	8014b80 <USBD_LL_StallEP>
 801063a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801063c:	e020      	b.n	8010680 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801063e:	6839      	ldr	r1, [r7, #0]
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f000 fca4 	bl	8010f8e <USBD_CtlError>
              break;
 8010646:	e01b      	b.n	8010680 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	885b      	ldrh	r3, [r3, #2]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d10e      	bne.n	801066e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010650:	7bbb      	ldrb	r3, [r7, #14]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d00b      	beq.n	801066e <USBD_StdEPReq+0xfe>
 8010656:	7bbb      	ldrb	r3, [r7, #14]
 8010658:	2b80      	cmp	r3, #128	@ 0x80
 801065a:	d008      	beq.n	801066e <USBD_StdEPReq+0xfe>
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	88db      	ldrh	r3, [r3, #6]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d104      	bne.n	801066e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010664:	7bbb      	ldrb	r3, [r7, #14]
 8010666:	4619      	mov	r1, r3
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f004 fa89 	bl	8014b80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f000 fd64 	bl	801113c <USBD_CtlSendStatus>

              break;
 8010674:	e004      	b.n	8010680 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010676:	6839      	ldr	r1, [r7, #0]
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f000 fc88 	bl	8010f8e <USBD_CtlError>
              break;
 801067e:	bf00      	nop
          }
          break;
 8010680:	e107      	b.n	8010892 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010688:	b2db      	uxtb	r3, r3
 801068a:	2b02      	cmp	r3, #2
 801068c:	d002      	beq.n	8010694 <USBD_StdEPReq+0x124>
 801068e:	2b03      	cmp	r3, #3
 8010690:	d016      	beq.n	80106c0 <USBD_StdEPReq+0x150>
 8010692:	e04b      	b.n	801072c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010694:	7bbb      	ldrb	r3, [r7, #14]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d00d      	beq.n	80106b6 <USBD_StdEPReq+0x146>
 801069a:	7bbb      	ldrb	r3, [r7, #14]
 801069c:	2b80      	cmp	r3, #128	@ 0x80
 801069e:	d00a      	beq.n	80106b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80106a0:	7bbb      	ldrb	r3, [r7, #14]
 80106a2:	4619      	mov	r1, r3
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f004 fa6b 	bl	8014b80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80106aa:	2180      	movs	r1, #128	@ 0x80
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f004 fa67 	bl	8014b80 <USBD_LL_StallEP>
 80106b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80106b4:	e040      	b.n	8010738 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80106b6:	6839      	ldr	r1, [r7, #0]
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f000 fc68 	bl	8010f8e <USBD_CtlError>
              break;
 80106be:	e03b      	b.n	8010738 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	885b      	ldrh	r3, [r3, #2]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d136      	bne.n	8010736 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80106c8:	7bbb      	ldrb	r3, [r7, #14]
 80106ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d004      	beq.n	80106dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80106d2:	7bbb      	ldrb	r3, [r7, #14]
 80106d4:	4619      	mov	r1, r3
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f004 fa71 	bl	8014bbe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f000 fd2d 	bl	801113c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80106e2:	7bbb      	ldrb	r3, [r7, #14]
 80106e4:	4619      	mov	r1, r3
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f7ff fde4 	bl	80102b4 <USBD_CoreFindEP>
 80106ec:	4603      	mov	r3, r0
 80106ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80106f0:	7b7b      	ldrb	r3, [r7, #13]
 80106f2:	2bff      	cmp	r3, #255	@ 0xff
 80106f4:	d01f      	beq.n	8010736 <USBD_StdEPReq+0x1c6>
 80106f6:	7b7b      	ldrb	r3, [r7, #13]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d11c      	bne.n	8010736 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80106fc:	7b7a      	ldrb	r2, [r7, #13]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010704:	7b7a      	ldrb	r2, [r7, #13]
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	32ae      	adds	r2, #174	@ 0xae
 801070a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801070e:	689b      	ldr	r3, [r3, #8]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d010      	beq.n	8010736 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010714:	7b7a      	ldrb	r2, [r7, #13]
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	32ae      	adds	r2, #174	@ 0xae
 801071a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801071e:	689b      	ldr	r3, [r3, #8]
 8010720:	6839      	ldr	r1, [r7, #0]
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	4798      	blx	r3
 8010726:	4603      	mov	r3, r0
 8010728:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801072a:	e004      	b.n	8010736 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801072c:	6839      	ldr	r1, [r7, #0]
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f000 fc2d 	bl	8010f8e <USBD_CtlError>
              break;
 8010734:	e000      	b.n	8010738 <USBD_StdEPReq+0x1c8>
              break;
 8010736:	bf00      	nop
          }
          break;
 8010738:	e0ab      	b.n	8010892 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010740:	b2db      	uxtb	r3, r3
 8010742:	2b02      	cmp	r3, #2
 8010744:	d002      	beq.n	801074c <USBD_StdEPReq+0x1dc>
 8010746:	2b03      	cmp	r3, #3
 8010748:	d032      	beq.n	80107b0 <USBD_StdEPReq+0x240>
 801074a:	e097      	b.n	801087c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801074c:	7bbb      	ldrb	r3, [r7, #14]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d007      	beq.n	8010762 <USBD_StdEPReq+0x1f2>
 8010752:	7bbb      	ldrb	r3, [r7, #14]
 8010754:	2b80      	cmp	r3, #128	@ 0x80
 8010756:	d004      	beq.n	8010762 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010758:	6839      	ldr	r1, [r7, #0]
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f000 fc17 	bl	8010f8e <USBD_CtlError>
                break;
 8010760:	e091      	b.n	8010886 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010762:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010766:	2b00      	cmp	r3, #0
 8010768:	da0b      	bge.n	8010782 <USBD_StdEPReq+0x212>
 801076a:	7bbb      	ldrb	r3, [r7, #14]
 801076c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010770:	4613      	mov	r3, r2
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	4413      	add	r3, r2
 8010776:	009b      	lsls	r3, r3, #2
 8010778:	3310      	adds	r3, #16
 801077a:	687a      	ldr	r2, [r7, #4]
 801077c:	4413      	add	r3, r2
 801077e:	3304      	adds	r3, #4
 8010780:	e00b      	b.n	801079a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010782:	7bbb      	ldrb	r3, [r7, #14]
 8010784:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010788:	4613      	mov	r3, r2
 801078a:	009b      	lsls	r3, r3, #2
 801078c:	4413      	add	r3, r2
 801078e:	009b      	lsls	r3, r3, #2
 8010790:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	4413      	add	r3, r2
 8010798:	3304      	adds	r3, #4
 801079a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	2200      	movs	r2, #0
 80107a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	2202      	movs	r2, #2
 80107a6:	4619      	mov	r1, r3
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f000 fc6d 	bl	8011088 <USBD_CtlSendData>
              break;
 80107ae:	e06a      	b.n	8010886 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80107b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	da11      	bge.n	80107dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80107b8:	7bbb      	ldrb	r3, [r7, #14]
 80107ba:	f003 020f 	and.w	r2, r3, #15
 80107be:	6879      	ldr	r1, [r7, #4]
 80107c0:	4613      	mov	r3, r2
 80107c2:	009b      	lsls	r3, r3, #2
 80107c4:	4413      	add	r3, r2
 80107c6:	009b      	lsls	r3, r3, #2
 80107c8:	440b      	add	r3, r1
 80107ca:	3324      	adds	r3, #36	@ 0x24
 80107cc:	881b      	ldrh	r3, [r3, #0]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d117      	bne.n	8010802 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80107d2:	6839      	ldr	r1, [r7, #0]
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 fbda 	bl	8010f8e <USBD_CtlError>
                  break;
 80107da:	e054      	b.n	8010886 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80107dc:	7bbb      	ldrb	r3, [r7, #14]
 80107de:	f003 020f 	and.w	r2, r3, #15
 80107e2:	6879      	ldr	r1, [r7, #4]
 80107e4:	4613      	mov	r3, r2
 80107e6:	009b      	lsls	r3, r3, #2
 80107e8:	4413      	add	r3, r2
 80107ea:	009b      	lsls	r3, r3, #2
 80107ec:	440b      	add	r3, r1
 80107ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80107f2:	881b      	ldrh	r3, [r3, #0]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d104      	bne.n	8010802 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80107f8:	6839      	ldr	r1, [r7, #0]
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f000 fbc7 	bl	8010f8e <USBD_CtlError>
                  break;
 8010800:	e041      	b.n	8010886 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010802:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010806:	2b00      	cmp	r3, #0
 8010808:	da0b      	bge.n	8010822 <USBD_StdEPReq+0x2b2>
 801080a:	7bbb      	ldrb	r3, [r7, #14]
 801080c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010810:	4613      	mov	r3, r2
 8010812:	009b      	lsls	r3, r3, #2
 8010814:	4413      	add	r3, r2
 8010816:	009b      	lsls	r3, r3, #2
 8010818:	3310      	adds	r3, #16
 801081a:	687a      	ldr	r2, [r7, #4]
 801081c:	4413      	add	r3, r2
 801081e:	3304      	adds	r3, #4
 8010820:	e00b      	b.n	801083a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010822:	7bbb      	ldrb	r3, [r7, #14]
 8010824:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010828:	4613      	mov	r3, r2
 801082a:	009b      	lsls	r3, r3, #2
 801082c:	4413      	add	r3, r2
 801082e:	009b      	lsls	r3, r3, #2
 8010830:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010834:	687a      	ldr	r2, [r7, #4]
 8010836:	4413      	add	r3, r2
 8010838:	3304      	adds	r3, #4
 801083a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801083c:	7bbb      	ldrb	r3, [r7, #14]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d002      	beq.n	8010848 <USBD_StdEPReq+0x2d8>
 8010842:	7bbb      	ldrb	r3, [r7, #14]
 8010844:	2b80      	cmp	r3, #128	@ 0x80
 8010846:	d103      	bne.n	8010850 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	2200      	movs	r2, #0
 801084c:	601a      	str	r2, [r3, #0]
 801084e:	e00e      	b.n	801086e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010850:	7bbb      	ldrb	r3, [r7, #14]
 8010852:	4619      	mov	r1, r3
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f004 f9d1 	bl	8014bfc <USBD_LL_IsStallEP>
 801085a:	4603      	mov	r3, r0
 801085c:	2b00      	cmp	r3, #0
 801085e:	d003      	beq.n	8010868 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	2201      	movs	r2, #1
 8010864:	601a      	str	r2, [r3, #0]
 8010866:	e002      	b.n	801086e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	2200      	movs	r2, #0
 801086c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	2202      	movs	r2, #2
 8010872:	4619      	mov	r1, r3
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f000 fc07 	bl	8011088 <USBD_CtlSendData>
              break;
 801087a:	e004      	b.n	8010886 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801087c:	6839      	ldr	r1, [r7, #0]
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	f000 fb85 	bl	8010f8e <USBD_CtlError>
              break;
 8010884:	bf00      	nop
          }
          break;
 8010886:	e004      	b.n	8010892 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010888:	6839      	ldr	r1, [r7, #0]
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f000 fb7f 	bl	8010f8e <USBD_CtlError>
          break;
 8010890:	bf00      	nop
      }
      break;
 8010892:	e005      	b.n	80108a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010894:	6839      	ldr	r1, [r7, #0]
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f000 fb79 	bl	8010f8e <USBD_CtlError>
      break;
 801089c:	e000      	b.n	80108a0 <USBD_StdEPReq+0x330>
      break;
 801089e:	bf00      	nop
  }

  return ret;
 80108a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3710      	adds	r7, #16
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}
	...

080108ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b084      	sub	sp, #16
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80108b6:	2300      	movs	r3, #0
 80108b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80108ba:	2300      	movs	r3, #0
 80108bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80108be:	2300      	movs	r3, #0
 80108c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	885b      	ldrh	r3, [r3, #2]
 80108c6:	0a1b      	lsrs	r3, r3, #8
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	3b01      	subs	r3, #1
 80108cc:	2b0e      	cmp	r3, #14
 80108ce:	f200 8152 	bhi.w	8010b76 <USBD_GetDescriptor+0x2ca>
 80108d2:	a201      	add	r2, pc, #4	@ (adr r2, 80108d8 <USBD_GetDescriptor+0x2c>)
 80108d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108d8:	08010949 	.word	0x08010949
 80108dc:	08010961 	.word	0x08010961
 80108e0:	080109a1 	.word	0x080109a1
 80108e4:	08010b77 	.word	0x08010b77
 80108e8:	08010b77 	.word	0x08010b77
 80108ec:	08010b17 	.word	0x08010b17
 80108f0:	08010b43 	.word	0x08010b43
 80108f4:	08010b77 	.word	0x08010b77
 80108f8:	08010b77 	.word	0x08010b77
 80108fc:	08010b77 	.word	0x08010b77
 8010900:	08010b77 	.word	0x08010b77
 8010904:	08010b77 	.word	0x08010b77
 8010908:	08010b77 	.word	0x08010b77
 801090c:	08010b77 	.word	0x08010b77
 8010910:	08010915 	.word	0x08010915
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801091a:	69db      	ldr	r3, [r3, #28]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d00b      	beq.n	8010938 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010926:	69db      	ldr	r3, [r3, #28]
 8010928:	687a      	ldr	r2, [r7, #4]
 801092a:	7c12      	ldrb	r2, [r2, #16]
 801092c:	f107 0108 	add.w	r1, r7, #8
 8010930:	4610      	mov	r0, r2
 8010932:	4798      	blx	r3
 8010934:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010936:	e126      	b.n	8010b86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010938:	6839      	ldr	r1, [r7, #0]
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f000 fb27 	bl	8010f8e <USBD_CtlError>
        err++;
 8010940:	7afb      	ldrb	r3, [r7, #11]
 8010942:	3301      	adds	r3, #1
 8010944:	72fb      	strb	r3, [r7, #11]
      break;
 8010946:	e11e      	b.n	8010b86 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	687a      	ldr	r2, [r7, #4]
 8010952:	7c12      	ldrb	r2, [r2, #16]
 8010954:	f107 0108 	add.w	r1, r7, #8
 8010958:	4610      	mov	r0, r2
 801095a:	4798      	blx	r3
 801095c:	60f8      	str	r0, [r7, #12]
      break;
 801095e:	e112      	b.n	8010b86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	7c1b      	ldrb	r3, [r3, #16]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d10d      	bne.n	8010984 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801096e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010970:	f107 0208 	add.w	r2, r7, #8
 8010974:	4610      	mov	r0, r2
 8010976:	4798      	blx	r3
 8010978:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	3301      	adds	r3, #1
 801097e:	2202      	movs	r2, #2
 8010980:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010982:	e100      	b.n	8010b86 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801098a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801098c:	f107 0208 	add.w	r2, r7, #8
 8010990:	4610      	mov	r0, r2
 8010992:	4798      	blx	r3
 8010994:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	3301      	adds	r3, #1
 801099a:	2202      	movs	r2, #2
 801099c:	701a      	strb	r2, [r3, #0]
      break;
 801099e:	e0f2      	b.n	8010b86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	885b      	ldrh	r3, [r3, #2]
 80109a4:	b2db      	uxtb	r3, r3
 80109a6:	2b05      	cmp	r3, #5
 80109a8:	f200 80ac 	bhi.w	8010b04 <USBD_GetDescriptor+0x258>
 80109ac:	a201      	add	r2, pc, #4	@ (adr r2, 80109b4 <USBD_GetDescriptor+0x108>)
 80109ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109b2:	bf00      	nop
 80109b4:	080109cd 	.word	0x080109cd
 80109b8:	08010a01 	.word	0x08010a01
 80109bc:	08010a35 	.word	0x08010a35
 80109c0:	08010a69 	.word	0x08010a69
 80109c4:	08010a9d 	.word	0x08010a9d
 80109c8:	08010ad1 	.word	0x08010ad1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d00b      	beq.n	80109f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109de:	685b      	ldr	r3, [r3, #4]
 80109e0:	687a      	ldr	r2, [r7, #4]
 80109e2:	7c12      	ldrb	r2, [r2, #16]
 80109e4:	f107 0108 	add.w	r1, r7, #8
 80109e8:	4610      	mov	r0, r2
 80109ea:	4798      	blx	r3
 80109ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80109ee:	e091      	b.n	8010b14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80109f0:	6839      	ldr	r1, [r7, #0]
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 facb 	bl	8010f8e <USBD_CtlError>
            err++;
 80109f8:	7afb      	ldrb	r3, [r7, #11]
 80109fa:	3301      	adds	r3, #1
 80109fc:	72fb      	strb	r3, [r7, #11]
          break;
 80109fe:	e089      	b.n	8010b14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a06:	689b      	ldr	r3, [r3, #8]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d00b      	beq.n	8010a24 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a12:	689b      	ldr	r3, [r3, #8]
 8010a14:	687a      	ldr	r2, [r7, #4]
 8010a16:	7c12      	ldrb	r2, [r2, #16]
 8010a18:	f107 0108 	add.w	r1, r7, #8
 8010a1c:	4610      	mov	r0, r2
 8010a1e:	4798      	blx	r3
 8010a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010a22:	e077      	b.n	8010b14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010a24:	6839      	ldr	r1, [r7, #0]
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f000 fab1 	bl	8010f8e <USBD_CtlError>
            err++;
 8010a2c:	7afb      	ldrb	r3, [r7, #11]
 8010a2e:	3301      	adds	r3, #1
 8010a30:	72fb      	strb	r3, [r7, #11]
          break;
 8010a32:	e06f      	b.n	8010b14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a3a:	68db      	ldr	r3, [r3, #12]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d00b      	beq.n	8010a58 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a46:	68db      	ldr	r3, [r3, #12]
 8010a48:	687a      	ldr	r2, [r7, #4]
 8010a4a:	7c12      	ldrb	r2, [r2, #16]
 8010a4c:	f107 0108 	add.w	r1, r7, #8
 8010a50:	4610      	mov	r0, r2
 8010a52:	4798      	blx	r3
 8010a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010a56:	e05d      	b.n	8010b14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010a58:	6839      	ldr	r1, [r7, #0]
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f000 fa97 	bl	8010f8e <USBD_CtlError>
            err++;
 8010a60:	7afb      	ldrb	r3, [r7, #11]
 8010a62:	3301      	adds	r3, #1
 8010a64:	72fb      	strb	r3, [r7, #11]
          break;
 8010a66:	e055      	b.n	8010b14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a6e:	691b      	ldr	r3, [r3, #16]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d00b      	beq.n	8010a8c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010a7a:	691b      	ldr	r3, [r3, #16]
 8010a7c:	687a      	ldr	r2, [r7, #4]
 8010a7e:	7c12      	ldrb	r2, [r2, #16]
 8010a80:	f107 0108 	add.w	r1, r7, #8
 8010a84:	4610      	mov	r0, r2
 8010a86:	4798      	blx	r3
 8010a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010a8a:	e043      	b.n	8010b14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010a8c:	6839      	ldr	r1, [r7, #0]
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f000 fa7d 	bl	8010f8e <USBD_CtlError>
            err++;
 8010a94:	7afb      	ldrb	r3, [r7, #11]
 8010a96:	3301      	adds	r3, #1
 8010a98:	72fb      	strb	r3, [r7, #11]
          break;
 8010a9a:	e03b      	b.n	8010b14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010aa2:	695b      	ldr	r3, [r3, #20]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d00b      	beq.n	8010ac0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010aae:	695b      	ldr	r3, [r3, #20]
 8010ab0:	687a      	ldr	r2, [r7, #4]
 8010ab2:	7c12      	ldrb	r2, [r2, #16]
 8010ab4:	f107 0108 	add.w	r1, r7, #8
 8010ab8:	4610      	mov	r0, r2
 8010aba:	4798      	blx	r3
 8010abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010abe:	e029      	b.n	8010b14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010ac0:	6839      	ldr	r1, [r7, #0]
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f000 fa63 	bl	8010f8e <USBD_CtlError>
            err++;
 8010ac8:	7afb      	ldrb	r3, [r7, #11]
 8010aca:	3301      	adds	r3, #1
 8010acc:	72fb      	strb	r3, [r7, #11]
          break;
 8010ace:	e021      	b.n	8010b14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ad6:	699b      	ldr	r3, [r3, #24]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d00b      	beq.n	8010af4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ae2:	699b      	ldr	r3, [r3, #24]
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	7c12      	ldrb	r2, [r2, #16]
 8010ae8:	f107 0108 	add.w	r1, r7, #8
 8010aec:	4610      	mov	r0, r2
 8010aee:	4798      	blx	r3
 8010af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010af2:	e00f      	b.n	8010b14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010af4:	6839      	ldr	r1, [r7, #0]
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f000 fa49 	bl	8010f8e <USBD_CtlError>
            err++;
 8010afc:	7afb      	ldrb	r3, [r7, #11]
 8010afe:	3301      	adds	r3, #1
 8010b00:	72fb      	strb	r3, [r7, #11]
          break;
 8010b02:	e007      	b.n	8010b14 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010b04:	6839      	ldr	r1, [r7, #0]
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f000 fa41 	bl	8010f8e <USBD_CtlError>
          err++;
 8010b0c:	7afb      	ldrb	r3, [r7, #11]
 8010b0e:	3301      	adds	r3, #1
 8010b10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010b12:	bf00      	nop
      }
      break;
 8010b14:	e037      	b.n	8010b86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	7c1b      	ldrb	r3, [r3, #16]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d109      	bne.n	8010b32 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b26:	f107 0208 	add.w	r2, r7, #8
 8010b2a:	4610      	mov	r0, r2
 8010b2c:	4798      	blx	r3
 8010b2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010b30:	e029      	b.n	8010b86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010b32:	6839      	ldr	r1, [r7, #0]
 8010b34:	6878      	ldr	r0, [r7, #4]
 8010b36:	f000 fa2a 	bl	8010f8e <USBD_CtlError>
        err++;
 8010b3a:	7afb      	ldrb	r3, [r7, #11]
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	72fb      	strb	r3, [r7, #11]
      break;
 8010b40:	e021      	b.n	8010b86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	7c1b      	ldrb	r3, [r3, #16]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d10d      	bne.n	8010b66 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b52:	f107 0208 	add.w	r2, r7, #8
 8010b56:	4610      	mov	r0, r2
 8010b58:	4798      	blx	r3
 8010b5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	3301      	adds	r3, #1
 8010b60:	2207      	movs	r2, #7
 8010b62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010b64:	e00f      	b.n	8010b86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010b66:	6839      	ldr	r1, [r7, #0]
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f000 fa10 	bl	8010f8e <USBD_CtlError>
        err++;
 8010b6e:	7afb      	ldrb	r3, [r7, #11]
 8010b70:	3301      	adds	r3, #1
 8010b72:	72fb      	strb	r3, [r7, #11]
      break;
 8010b74:	e007      	b.n	8010b86 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010b76:	6839      	ldr	r1, [r7, #0]
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f000 fa08 	bl	8010f8e <USBD_CtlError>
      err++;
 8010b7e:	7afb      	ldrb	r3, [r7, #11]
 8010b80:	3301      	adds	r3, #1
 8010b82:	72fb      	strb	r3, [r7, #11]
      break;
 8010b84:	bf00      	nop
  }

  if (err != 0U)
 8010b86:	7afb      	ldrb	r3, [r7, #11]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d11e      	bne.n	8010bca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	88db      	ldrh	r3, [r3, #6]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d016      	beq.n	8010bc2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010b94:	893b      	ldrh	r3, [r7, #8]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d00e      	beq.n	8010bb8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	88da      	ldrh	r2, [r3, #6]
 8010b9e:	893b      	ldrh	r3, [r7, #8]
 8010ba0:	4293      	cmp	r3, r2
 8010ba2:	bf28      	it	cs
 8010ba4:	4613      	movcs	r3, r2
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010baa:	893b      	ldrh	r3, [r7, #8]
 8010bac:	461a      	mov	r2, r3
 8010bae:	68f9      	ldr	r1, [r7, #12]
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f000 fa69 	bl	8011088 <USBD_CtlSendData>
 8010bb6:	e009      	b.n	8010bcc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010bb8:	6839      	ldr	r1, [r7, #0]
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f000 f9e7 	bl	8010f8e <USBD_CtlError>
 8010bc0:	e004      	b.n	8010bcc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f000 faba 	bl	801113c <USBD_CtlSendStatus>
 8010bc8:	e000      	b.n	8010bcc <USBD_GetDescriptor+0x320>
    return;
 8010bca:	bf00      	nop
  }
}
 8010bcc:	3710      	adds	r7, #16
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop

08010bd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b084      	sub	sp, #16
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	889b      	ldrh	r3, [r3, #4]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d131      	bne.n	8010c4a <USBD_SetAddress+0x76>
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	88db      	ldrh	r3, [r3, #6]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d12d      	bne.n	8010c4a <USBD_SetAddress+0x76>
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	885b      	ldrh	r3, [r3, #2]
 8010bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8010bf4:	d829      	bhi.n	8010c4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	885b      	ldrh	r3, [r3, #2]
 8010bfa:	b2db      	uxtb	r3, r3
 8010bfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010c00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c08:	b2db      	uxtb	r3, r3
 8010c0a:	2b03      	cmp	r3, #3
 8010c0c:	d104      	bne.n	8010c18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010c0e:	6839      	ldr	r1, [r7, #0]
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f000 f9bc 	bl	8010f8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c16:	e01d      	b.n	8010c54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	7bfa      	ldrb	r2, [r7, #15]
 8010c1c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010c20:	7bfb      	ldrb	r3, [r7, #15]
 8010c22:	4619      	mov	r1, r3
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f004 f815 	bl	8014c54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f000 fa86 	bl	801113c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010c30:	7bfb      	ldrb	r3, [r7, #15]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d004      	beq.n	8010c40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	2202      	movs	r2, #2
 8010c3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c3e:	e009      	b.n	8010c54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2201      	movs	r2, #1
 8010c44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c48:	e004      	b.n	8010c54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010c4a:	6839      	ldr	r1, [r7, #0]
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f000 f99e 	bl	8010f8e <USBD_CtlError>
  }
}
 8010c52:	bf00      	nop
 8010c54:	bf00      	nop
 8010c56:	3710      	adds	r7, #16
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}

08010c5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010c66:	2300      	movs	r3, #0
 8010c68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	885b      	ldrh	r3, [r3, #2]
 8010c6e:	b2da      	uxtb	r2, r3
 8010c70:	4b4e      	ldr	r3, [pc, #312]	@ (8010dac <USBD_SetConfig+0x150>)
 8010c72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010c74:	4b4d      	ldr	r3, [pc, #308]	@ (8010dac <USBD_SetConfig+0x150>)
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	d905      	bls.n	8010c88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010c7c:	6839      	ldr	r1, [r7, #0]
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	f000 f985 	bl	8010f8e <USBD_CtlError>
    return USBD_FAIL;
 8010c84:	2303      	movs	r3, #3
 8010c86:	e08c      	b.n	8010da2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	2b02      	cmp	r3, #2
 8010c92:	d002      	beq.n	8010c9a <USBD_SetConfig+0x3e>
 8010c94:	2b03      	cmp	r3, #3
 8010c96:	d029      	beq.n	8010cec <USBD_SetConfig+0x90>
 8010c98:	e075      	b.n	8010d86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010c9a:	4b44      	ldr	r3, [pc, #272]	@ (8010dac <USBD_SetConfig+0x150>)
 8010c9c:	781b      	ldrb	r3, [r3, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d020      	beq.n	8010ce4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010ca2:	4b42      	ldr	r3, [pc, #264]	@ (8010dac <USBD_SetConfig+0x150>)
 8010ca4:	781b      	ldrb	r3, [r3, #0]
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010cac:	4b3f      	ldr	r3, [pc, #252]	@ (8010dac <USBD_SetConfig+0x150>)
 8010cae:	781b      	ldrb	r3, [r3, #0]
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f7fe ffb9 	bl	800fc2a <USBD_SetClassConfig>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010cbc:	7bfb      	ldrb	r3, [r7, #15]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d008      	beq.n	8010cd4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010cc2:	6839      	ldr	r1, [r7, #0]
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f000 f962 	bl	8010f8e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2202      	movs	r2, #2
 8010cce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010cd2:	e065      	b.n	8010da0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f000 fa31 	bl	801113c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2203      	movs	r2, #3
 8010cde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010ce2:	e05d      	b.n	8010da0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f000 fa29 	bl	801113c <USBD_CtlSendStatus>
      break;
 8010cea:	e059      	b.n	8010da0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010cec:	4b2f      	ldr	r3, [pc, #188]	@ (8010dac <USBD_SetConfig+0x150>)
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d112      	bne.n	8010d1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2202      	movs	r2, #2
 8010cf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8010dac <USBD_SetConfig+0x150>)
 8010cfe:	781b      	ldrb	r3, [r3, #0]
 8010d00:	461a      	mov	r2, r3
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010d06:	4b29      	ldr	r3, [pc, #164]	@ (8010dac <USBD_SetConfig+0x150>)
 8010d08:	781b      	ldrb	r3, [r3, #0]
 8010d0a:	4619      	mov	r1, r3
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f7fe ffa8 	bl	800fc62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f000 fa12 	bl	801113c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010d18:	e042      	b.n	8010da0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010d1a:	4b24      	ldr	r3, [pc, #144]	@ (8010dac <USBD_SetConfig+0x150>)
 8010d1c:	781b      	ldrb	r3, [r3, #0]
 8010d1e:	461a      	mov	r2, r3
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d02a      	beq.n	8010d7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	685b      	ldr	r3, [r3, #4]
 8010d2c:	b2db      	uxtb	r3, r3
 8010d2e:	4619      	mov	r1, r3
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f7fe ff96 	bl	800fc62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010d36:	4b1d      	ldr	r3, [pc, #116]	@ (8010dac <USBD_SetConfig+0x150>)
 8010d38:	781b      	ldrb	r3, [r3, #0]
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010d40:	4b1a      	ldr	r3, [pc, #104]	@ (8010dac <USBD_SetConfig+0x150>)
 8010d42:	781b      	ldrb	r3, [r3, #0]
 8010d44:	4619      	mov	r1, r3
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f7fe ff6f 	bl	800fc2a <USBD_SetClassConfig>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010d50:	7bfb      	ldrb	r3, [r7, #15]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d00f      	beq.n	8010d76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010d56:	6839      	ldr	r1, [r7, #0]
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f000 f918 	bl	8010f8e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	685b      	ldr	r3, [r3, #4]
 8010d62:	b2db      	uxtb	r3, r3
 8010d64:	4619      	mov	r1, r3
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f7fe ff7b 	bl	800fc62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2202      	movs	r2, #2
 8010d70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010d74:	e014      	b.n	8010da0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	f000 f9e0 	bl	801113c <USBD_CtlSendStatus>
      break;
 8010d7c:	e010      	b.n	8010da0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f000 f9dc 	bl	801113c <USBD_CtlSendStatus>
      break;
 8010d84:	e00c      	b.n	8010da0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010d86:	6839      	ldr	r1, [r7, #0]
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f000 f900 	bl	8010f8e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010d8e:	4b07      	ldr	r3, [pc, #28]	@ (8010dac <USBD_SetConfig+0x150>)
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	4619      	mov	r1, r3
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f7fe ff64 	bl	800fc62 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010d9a:	2303      	movs	r3, #3
 8010d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8010d9e:	bf00      	nop
  }

  return ret;
 8010da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3710      	adds	r7, #16
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}
 8010daa:	bf00      	nop
 8010dac:	24002910 	.word	0x24002910

08010db0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b082      	sub	sp, #8
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	88db      	ldrh	r3, [r3, #6]
 8010dbe:	2b01      	cmp	r3, #1
 8010dc0:	d004      	beq.n	8010dcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010dc2:	6839      	ldr	r1, [r7, #0]
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f000 f8e2 	bl	8010f8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010dca:	e023      	b.n	8010e14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010dd2:	b2db      	uxtb	r3, r3
 8010dd4:	2b02      	cmp	r3, #2
 8010dd6:	dc02      	bgt.n	8010dde <USBD_GetConfig+0x2e>
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	dc03      	bgt.n	8010de4 <USBD_GetConfig+0x34>
 8010ddc:	e015      	b.n	8010e0a <USBD_GetConfig+0x5a>
 8010dde:	2b03      	cmp	r3, #3
 8010de0:	d00b      	beq.n	8010dfa <USBD_GetConfig+0x4a>
 8010de2:	e012      	b.n	8010e0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2200      	movs	r2, #0
 8010de8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	3308      	adds	r3, #8
 8010dee:	2201      	movs	r2, #1
 8010df0:	4619      	mov	r1, r3
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f000 f948 	bl	8011088 <USBD_CtlSendData>
        break;
 8010df8:	e00c      	b.n	8010e14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	3304      	adds	r3, #4
 8010dfe:	2201      	movs	r2, #1
 8010e00:	4619      	mov	r1, r3
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f000 f940 	bl	8011088 <USBD_CtlSendData>
        break;
 8010e08:	e004      	b.n	8010e14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010e0a:	6839      	ldr	r1, [r7, #0]
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f000 f8be 	bl	8010f8e <USBD_CtlError>
        break;
 8010e12:	bf00      	nop
}
 8010e14:	bf00      	nop
 8010e16:	3708      	adds	r7, #8
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}

08010e1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b082      	sub	sp, #8
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e2c:	b2db      	uxtb	r3, r3
 8010e2e:	3b01      	subs	r3, #1
 8010e30:	2b02      	cmp	r3, #2
 8010e32:	d81e      	bhi.n	8010e72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	88db      	ldrh	r3, [r3, #6]
 8010e38:	2b02      	cmp	r3, #2
 8010e3a:	d004      	beq.n	8010e46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010e3c:	6839      	ldr	r1, [r7, #0]
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f000 f8a5 	bl	8010f8e <USBD_CtlError>
        break;
 8010e44:	e01a      	b.n	8010e7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2201      	movs	r2, #1
 8010e4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d005      	beq.n	8010e62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	68db      	ldr	r3, [r3, #12]
 8010e5a:	f043 0202 	orr.w	r2, r3, #2
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	330c      	adds	r3, #12
 8010e66:	2202      	movs	r2, #2
 8010e68:	4619      	mov	r1, r3
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f000 f90c 	bl	8011088 <USBD_CtlSendData>
      break;
 8010e70:	e004      	b.n	8010e7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010e72:	6839      	ldr	r1, [r7, #0]
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f000 f88a 	bl	8010f8e <USBD_CtlError>
      break;
 8010e7a:	bf00      	nop
  }
}
 8010e7c:	bf00      	nop
 8010e7e:	3708      	adds	r7, #8
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}

08010e84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b082      	sub	sp, #8
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	885b      	ldrh	r3, [r3, #2]
 8010e92:	2b01      	cmp	r3, #1
 8010e94:	d107      	bne.n	8010ea6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	2201      	movs	r2, #1
 8010e9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f000 f94c 	bl	801113c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010ea4:	e013      	b.n	8010ece <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	885b      	ldrh	r3, [r3, #2]
 8010eaa:	2b02      	cmp	r3, #2
 8010eac:	d10b      	bne.n	8010ec6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	889b      	ldrh	r3, [r3, #4]
 8010eb2:	0a1b      	lsrs	r3, r3, #8
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	b2da      	uxtb	r2, r3
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f000 f93c 	bl	801113c <USBD_CtlSendStatus>
}
 8010ec4:	e003      	b.n	8010ece <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010ec6:	6839      	ldr	r1, [r7, #0]
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f000 f860 	bl	8010f8e <USBD_CtlError>
}
 8010ece:	bf00      	nop
 8010ed0:	3708      	adds	r7, #8
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}

08010ed6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ed6:	b580      	push	{r7, lr}
 8010ed8:	b082      	sub	sp, #8
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
 8010ede:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ee6:	b2db      	uxtb	r3, r3
 8010ee8:	3b01      	subs	r3, #1
 8010eea:	2b02      	cmp	r3, #2
 8010eec:	d80b      	bhi.n	8010f06 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	885b      	ldrh	r3, [r3, #2]
 8010ef2:	2b01      	cmp	r3, #1
 8010ef4:	d10c      	bne.n	8010f10 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 f91c 	bl	801113c <USBD_CtlSendStatus>
      }
      break;
 8010f04:	e004      	b.n	8010f10 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010f06:	6839      	ldr	r1, [r7, #0]
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f000 f840 	bl	8010f8e <USBD_CtlError>
      break;
 8010f0e:	e000      	b.n	8010f12 <USBD_ClrFeature+0x3c>
      break;
 8010f10:	bf00      	nop
  }
}
 8010f12:	bf00      	nop
 8010f14:	3708      	adds	r7, #8
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}

08010f1a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010f1a:	b580      	push	{r7, lr}
 8010f1c:	b084      	sub	sp, #16
 8010f1e:	af00      	add	r7, sp, #0
 8010f20:	6078      	str	r0, [r7, #4]
 8010f22:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	781a      	ldrb	r2, [r3, #0]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	3301      	adds	r3, #1
 8010f34:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	781a      	ldrb	r2, [r3, #0]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	3301      	adds	r3, #1
 8010f42:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010f44:	68f8      	ldr	r0, [r7, #12]
 8010f46:	f7ff fa16 	bl	8010376 <SWAPBYTE>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	461a      	mov	r2, r3
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	3301      	adds	r3, #1
 8010f56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	3301      	adds	r3, #1
 8010f5c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010f5e:	68f8      	ldr	r0, [r7, #12]
 8010f60:	f7ff fa09 	bl	8010376 <SWAPBYTE>
 8010f64:	4603      	mov	r3, r0
 8010f66:	461a      	mov	r2, r3
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	3301      	adds	r3, #1
 8010f70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	3301      	adds	r3, #1
 8010f76:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010f78:	68f8      	ldr	r0, [r7, #12]
 8010f7a:	f7ff f9fc 	bl	8010376 <SWAPBYTE>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	461a      	mov	r2, r3
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	80da      	strh	r2, [r3, #6]
}
 8010f86:	bf00      	nop
 8010f88:	3710      	adds	r7, #16
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}

08010f8e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f8e:	b580      	push	{r7, lr}
 8010f90:	b082      	sub	sp, #8
 8010f92:	af00      	add	r7, sp, #0
 8010f94:	6078      	str	r0, [r7, #4]
 8010f96:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010f98:	2180      	movs	r1, #128	@ 0x80
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f003 fdf0 	bl	8014b80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010fa0:	2100      	movs	r1, #0
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f003 fdec 	bl	8014b80 <USBD_LL_StallEP>
}
 8010fa8:	bf00      	nop
 8010faa:	3708      	adds	r7, #8
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}

08010fb0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b086      	sub	sp, #24
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	60f8      	str	r0, [r7, #12]
 8010fb8:	60b9      	str	r1, [r7, #8]
 8010fba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d042      	beq.n	801104c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8010fca:	6938      	ldr	r0, [r7, #16]
 8010fcc:	f000 f842 	bl	8011054 <USBD_GetLen>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	005b      	lsls	r3, r3, #1
 8010fd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010fda:	d808      	bhi.n	8010fee <USBD_GetString+0x3e>
 8010fdc:	6938      	ldr	r0, [r7, #16]
 8010fde:	f000 f839 	bl	8011054 <USBD_GetLen>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	3301      	adds	r3, #1
 8010fe6:	b29b      	uxth	r3, r3
 8010fe8:	005b      	lsls	r3, r3, #1
 8010fea:	b29a      	uxth	r2, r3
 8010fec:	e001      	b.n	8010ff2 <USBD_GetString+0x42>
 8010fee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010ff6:	7dfb      	ldrb	r3, [r7, #23]
 8010ff8:	68ba      	ldr	r2, [r7, #8]
 8010ffa:	4413      	add	r3, r2
 8010ffc:	687a      	ldr	r2, [r7, #4]
 8010ffe:	7812      	ldrb	r2, [r2, #0]
 8011000:	701a      	strb	r2, [r3, #0]
  idx++;
 8011002:	7dfb      	ldrb	r3, [r7, #23]
 8011004:	3301      	adds	r3, #1
 8011006:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011008:	7dfb      	ldrb	r3, [r7, #23]
 801100a:	68ba      	ldr	r2, [r7, #8]
 801100c:	4413      	add	r3, r2
 801100e:	2203      	movs	r2, #3
 8011010:	701a      	strb	r2, [r3, #0]
  idx++;
 8011012:	7dfb      	ldrb	r3, [r7, #23]
 8011014:	3301      	adds	r3, #1
 8011016:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011018:	e013      	b.n	8011042 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801101a:	7dfb      	ldrb	r3, [r7, #23]
 801101c:	68ba      	ldr	r2, [r7, #8]
 801101e:	4413      	add	r3, r2
 8011020:	693a      	ldr	r2, [r7, #16]
 8011022:	7812      	ldrb	r2, [r2, #0]
 8011024:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	3301      	adds	r3, #1
 801102a:	613b      	str	r3, [r7, #16]
    idx++;
 801102c:	7dfb      	ldrb	r3, [r7, #23]
 801102e:	3301      	adds	r3, #1
 8011030:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011032:	7dfb      	ldrb	r3, [r7, #23]
 8011034:	68ba      	ldr	r2, [r7, #8]
 8011036:	4413      	add	r3, r2
 8011038:	2200      	movs	r2, #0
 801103a:	701a      	strb	r2, [r3, #0]
    idx++;
 801103c:	7dfb      	ldrb	r3, [r7, #23]
 801103e:	3301      	adds	r3, #1
 8011040:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d1e7      	bne.n	801101a <USBD_GetString+0x6a>
 801104a:	e000      	b.n	801104e <USBD_GetString+0x9e>
    return;
 801104c:	bf00      	nop
  }
}
 801104e:	3718      	adds	r7, #24
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011054:	b480      	push	{r7}
 8011056:	b085      	sub	sp, #20
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801105c:	2300      	movs	r3, #0
 801105e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011064:	e005      	b.n	8011072 <USBD_GetLen+0x1e>
  {
    len++;
 8011066:	7bfb      	ldrb	r3, [r7, #15]
 8011068:	3301      	adds	r3, #1
 801106a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	3301      	adds	r3, #1
 8011070:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	781b      	ldrb	r3, [r3, #0]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d1f5      	bne.n	8011066 <USBD_GetLen+0x12>
  }

  return len;
 801107a:	7bfb      	ldrb	r3, [r7, #15]
}
 801107c:	4618      	mov	r0, r3
 801107e:	3714      	adds	r7, #20
 8011080:	46bd      	mov	sp, r7
 8011082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011086:	4770      	bx	lr

08011088 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b084      	sub	sp, #16
 801108c:	af00      	add	r7, sp, #0
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2202      	movs	r2, #2
 8011098:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	687a      	ldr	r2, [r7, #4]
 80110a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	68ba      	ldr	r2, [r7, #8]
 80110ac:	2100      	movs	r1, #0
 80110ae:	68f8      	ldr	r0, [r7, #12]
 80110b0:	f003 fdef 	bl	8014c92 <USBD_LL_Transmit>

  return USBD_OK;
 80110b4:	2300      	movs	r3, #0
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3710      	adds	r7, #16
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}

080110be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80110be:	b580      	push	{r7, lr}
 80110c0:	b084      	sub	sp, #16
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	60f8      	str	r0, [r7, #12]
 80110c6:	60b9      	str	r1, [r7, #8]
 80110c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	68ba      	ldr	r2, [r7, #8]
 80110ce:	2100      	movs	r1, #0
 80110d0:	68f8      	ldr	r0, [r7, #12]
 80110d2:	f003 fdde 	bl	8014c92 <USBD_LL_Transmit>

  return USBD_OK;
 80110d6:	2300      	movs	r3, #0
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3710      	adds	r7, #16
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}

080110e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b084      	sub	sp, #16
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	60f8      	str	r0, [r7, #12]
 80110e8:	60b9      	str	r1, [r7, #8]
 80110ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	2203      	movs	r2, #3
 80110f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	687a      	ldr	r2, [r7, #4]
 80110f8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	687a      	ldr	r2, [r7, #4]
 8011100:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	68ba      	ldr	r2, [r7, #8]
 8011108:	2100      	movs	r1, #0
 801110a:	68f8      	ldr	r0, [r7, #12]
 801110c:	f003 fde2 	bl	8014cd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011110:	2300      	movs	r3, #0
}
 8011112:	4618      	mov	r0, r3
 8011114:	3710      	adds	r7, #16
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}

0801111a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801111a:	b580      	push	{r7, lr}
 801111c:	b084      	sub	sp, #16
 801111e:	af00      	add	r7, sp, #0
 8011120:	60f8      	str	r0, [r7, #12]
 8011122:	60b9      	str	r1, [r7, #8]
 8011124:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	68ba      	ldr	r2, [r7, #8]
 801112a:	2100      	movs	r1, #0
 801112c:	68f8      	ldr	r0, [r7, #12]
 801112e:	f003 fdd1 	bl	8014cd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011132:	2300      	movs	r3, #0
}
 8011134:	4618      	mov	r0, r3
 8011136:	3710      	adds	r7, #16
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2204      	movs	r2, #4
 8011148:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801114c:	2300      	movs	r3, #0
 801114e:	2200      	movs	r2, #0
 8011150:	2100      	movs	r1, #0
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f003 fd9d 	bl	8014c92 <USBD_LL_Transmit>

  return USBD_OK;
 8011158:	2300      	movs	r3, #0
}
 801115a:	4618      	mov	r0, r3
 801115c:	3708      	adds	r7, #8
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}

08011162 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011162:	b580      	push	{r7, lr}
 8011164:	b082      	sub	sp, #8
 8011166:	af00      	add	r7, sp, #0
 8011168:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	2205      	movs	r2, #5
 801116e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011172:	2300      	movs	r3, #0
 8011174:	2200      	movs	r2, #0
 8011176:	2100      	movs	r1, #0
 8011178:	6878      	ldr	r0, [r7, #4]
 801117a:	f003 fdab 	bl	8014cd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801117e:	2300      	movs	r3, #0
}
 8011180:	4618      	mov	r0, r3
 8011182:	3708      	adds	r7, #8
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}

08011188 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b084      	sub	sp, #16
 801118c:	af00      	add	r7, sp, #0
 801118e:	4603      	mov	r3, r0
 8011190:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011192:	79fb      	ldrb	r3, [r7, #7]
 8011194:	4a08      	ldr	r2, [pc, #32]	@ (80111b8 <disk_status+0x30>)
 8011196:	009b      	lsls	r3, r3, #2
 8011198:	4413      	add	r3, r2
 801119a:	685b      	ldr	r3, [r3, #4]
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	79fa      	ldrb	r2, [r7, #7]
 80111a0:	4905      	ldr	r1, [pc, #20]	@ (80111b8 <disk_status+0x30>)
 80111a2:	440a      	add	r2, r1
 80111a4:	7a12      	ldrb	r2, [r2, #8]
 80111a6:	4610      	mov	r0, r2
 80111a8:	4798      	blx	r3
 80111aa:	4603      	mov	r3, r0
 80111ac:	73fb      	strb	r3, [r7, #15]
  return stat;
 80111ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3710      	adds	r7, #16
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	24002b3c 	.word	0x24002b3c

080111bc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b084      	sub	sp, #16
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	4603      	mov	r3, r0
 80111c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80111c6:	2300      	movs	r3, #0
 80111c8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80111ca:	79fb      	ldrb	r3, [r7, #7]
 80111cc:	4a0e      	ldr	r2, [pc, #56]	@ (8011208 <disk_initialize+0x4c>)
 80111ce:	5cd3      	ldrb	r3, [r2, r3]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d114      	bne.n	80111fe <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80111d4:	79fb      	ldrb	r3, [r7, #7]
 80111d6:	4a0c      	ldr	r2, [pc, #48]	@ (8011208 <disk_initialize+0x4c>)
 80111d8:	009b      	lsls	r3, r3, #2
 80111da:	4413      	add	r3, r2
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	79fa      	ldrb	r2, [r7, #7]
 80111e2:	4909      	ldr	r1, [pc, #36]	@ (8011208 <disk_initialize+0x4c>)
 80111e4:	440a      	add	r2, r1
 80111e6:	7a12      	ldrb	r2, [r2, #8]
 80111e8:	4610      	mov	r0, r2
 80111ea:	4798      	blx	r3
 80111ec:	4603      	mov	r3, r0
 80111ee:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80111f0:	7bfb      	ldrb	r3, [r7, #15]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d103      	bne.n	80111fe <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80111f6:	79fb      	ldrb	r3, [r7, #7]
 80111f8:	4a03      	ldr	r2, [pc, #12]	@ (8011208 <disk_initialize+0x4c>)
 80111fa:	2101      	movs	r1, #1
 80111fc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80111fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011200:	4618      	mov	r0, r3
 8011202:	3710      	adds	r7, #16
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}
 8011208:	24002b3c 	.word	0x24002b3c

0801120c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801120c:	b590      	push	{r4, r7, lr}
 801120e:	b087      	sub	sp, #28
 8011210:	af00      	add	r7, sp, #0
 8011212:	60b9      	str	r1, [r7, #8]
 8011214:	607a      	str	r2, [r7, #4]
 8011216:	603b      	str	r3, [r7, #0]
 8011218:	4603      	mov	r3, r0
 801121a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801121c:	7bfb      	ldrb	r3, [r7, #15]
 801121e:	4a0a      	ldr	r2, [pc, #40]	@ (8011248 <disk_read+0x3c>)
 8011220:	009b      	lsls	r3, r3, #2
 8011222:	4413      	add	r3, r2
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	689c      	ldr	r4, [r3, #8]
 8011228:	7bfb      	ldrb	r3, [r7, #15]
 801122a:	4a07      	ldr	r2, [pc, #28]	@ (8011248 <disk_read+0x3c>)
 801122c:	4413      	add	r3, r2
 801122e:	7a18      	ldrb	r0, [r3, #8]
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	687a      	ldr	r2, [r7, #4]
 8011234:	68b9      	ldr	r1, [r7, #8]
 8011236:	47a0      	blx	r4
 8011238:	4603      	mov	r3, r0
 801123a:	75fb      	strb	r3, [r7, #23]
  return res;
 801123c:	7dfb      	ldrb	r3, [r7, #23]
}
 801123e:	4618      	mov	r0, r3
 8011240:	371c      	adds	r7, #28
 8011242:	46bd      	mov	sp, r7
 8011244:	bd90      	pop	{r4, r7, pc}
 8011246:	bf00      	nop
 8011248:	24002b3c 	.word	0x24002b3c

0801124c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801124c:	b590      	push	{r4, r7, lr}
 801124e:	b087      	sub	sp, #28
 8011250:	af00      	add	r7, sp, #0
 8011252:	60b9      	str	r1, [r7, #8]
 8011254:	607a      	str	r2, [r7, #4]
 8011256:	603b      	str	r3, [r7, #0]
 8011258:	4603      	mov	r3, r0
 801125a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801125c:	7bfb      	ldrb	r3, [r7, #15]
 801125e:	4a0a      	ldr	r2, [pc, #40]	@ (8011288 <disk_write+0x3c>)
 8011260:	009b      	lsls	r3, r3, #2
 8011262:	4413      	add	r3, r2
 8011264:	685b      	ldr	r3, [r3, #4]
 8011266:	68dc      	ldr	r4, [r3, #12]
 8011268:	7bfb      	ldrb	r3, [r7, #15]
 801126a:	4a07      	ldr	r2, [pc, #28]	@ (8011288 <disk_write+0x3c>)
 801126c:	4413      	add	r3, r2
 801126e:	7a18      	ldrb	r0, [r3, #8]
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	687a      	ldr	r2, [r7, #4]
 8011274:	68b9      	ldr	r1, [r7, #8]
 8011276:	47a0      	blx	r4
 8011278:	4603      	mov	r3, r0
 801127a:	75fb      	strb	r3, [r7, #23]
  return res;
 801127c:	7dfb      	ldrb	r3, [r7, #23]
}
 801127e:	4618      	mov	r0, r3
 8011280:	371c      	adds	r7, #28
 8011282:	46bd      	mov	sp, r7
 8011284:	bd90      	pop	{r4, r7, pc}
 8011286:	bf00      	nop
 8011288:	24002b3c 	.word	0x24002b3c

0801128c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	4603      	mov	r3, r0
 8011294:	603a      	str	r2, [r7, #0]
 8011296:	71fb      	strb	r3, [r7, #7]
 8011298:	460b      	mov	r3, r1
 801129a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801129c:	79fb      	ldrb	r3, [r7, #7]
 801129e:	4a09      	ldr	r2, [pc, #36]	@ (80112c4 <disk_ioctl+0x38>)
 80112a0:	009b      	lsls	r3, r3, #2
 80112a2:	4413      	add	r3, r2
 80112a4:	685b      	ldr	r3, [r3, #4]
 80112a6:	691b      	ldr	r3, [r3, #16]
 80112a8:	79fa      	ldrb	r2, [r7, #7]
 80112aa:	4906      	ldr	r1, [pc, #24]	@ (80112c4 <disk_ioctl+0x38>)
 80112ac:	440a      	add	r2, r1
 80112ae:	7a10      	ldrb	r0, [r2, #8]
 80112b0:	79b9      	ldrb	r1, [r7, #6]
 80112b2:	683a      	ldr	r2, [r7, #0]
 80112b4:	4798      	blx	r3
 80112b6:	4603      	mov	r3, r0
 80112b8:	73fb      	strb	r3, [r7, #15]
  return res;
 80112ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80112bc:	4618      	mov	r0, r3
 80112be:	3710      	adds	r7, #16
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	24002b3c 	.word	0x24002b3c

080112c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80112c8:	b480      	push	{r7}
 80112ca:	b085      	sub	sp, #20
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	3301      	adds	r3, #1
 80112d4:	781b      	ldrb	r3, [r3, #0]
 80112d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80112d8:	89fb      	ldrh	r3, [r7, #14]
 80112da:	021b      	lsls	r3, r3, #8
 80112dc:	b21a      	sxth	r2, r3
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	781b      	ldrb	r3, [r3, #0]
 80112e2:	b21b      	sxth	r3, r3
 80112e4:	4313      	orrs	r3, r2
 80112e6:	b21b      	sxth	r3, r3
 80112e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80112ea:	89fb      	ldrh	r3, [r7, #14]
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3714      	adds	r7, #20
 80112f0:	46bd      	mov	sp, r7
 80112f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f6:	4770      	bx	lr

080112f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80112f8:	b480      	push	{r7}
 80112fa:	b085      	sub	sp, #20
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	3303      	adds	r3, #3
 8011304:	781b      	ldrb	r3, [r3, #0]
 8011306:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	021b      	lsls	r3, r3, #8
 801130c:	687a      	ldr	r2, [r7, #4]
 801130e:	3202      	adds	r2, #2
 8011310:	7812      	ldrb	r2, [r2, #0]
 8011312:	4313      	orrs	r3, r2
 8011314:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	021b      	lsls	r3, r3, #8
 801131a:	687a      	ldr	r2, [r7, #4]
 801131c:	3201      	adds	r2, #1
 801131e:	7812      	ldrb	r2, [r2, #0]
 8011320:	4313      	orrs	r3, r2
 8011322:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	021b      	lsls	r3, r3, #8
 8011328:	687a      	ldr	r2, [r7, #4]
 801132a:	7812      	ldrb	r2, [r2, #0]
 801132c:	4313      	orrs	r3, r2
 801132e:	60fb      	str	r3, [r7, #12]
	return rv;
 8011330:	68fb      	ldr	r3, [r7, #12]
}
 8011332:	4618      	mov	r0, r3
 8011334:	3714      	adds	r7, #20
 8011336:	46bd      	mov	sp, r7
 8011338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133c:	4770      	bx	lr

0801133e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801133e:	b480      	push	{r7}
 8011340:	b083      	sub	sp, #12
 8011342:	af00      	add	r7, sp, #0
 8011344:	6078      	str	r0, [r7, #4]
 8011346:	460b      	mov	r3, r1
 8011348:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	1c5a      	adds	r2, r3, #1
 801134e:	607a      	str	r2, [r7, #4]
 8011350:	887a      	ldrh	r2, [r7, #2]
 8011352:	b2d2      	uxtb	r2, r2
 8011354:	701a      	strb	r2, [r3, #0]
 8011356:	887b      	ldrh	r3, [r7, #2]
 8011358:	0a1b      	lsrs	r3, r3, #8
 801135a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	1c5a      	adds	r2, r3, #1
 8011360:	607a      	str	r2, [r7, #4]
 8011362:	887a      	ldrh	r2, [r7, #2]
 8011364:	b2d2      	uxtb	r2, r2
 8011366:	701a      	strb	r2, [r3, #0]
}
 8011368:	bf00      	nop
 801136a:	370c      	adds	r7, #12
 801136c:	46bd      	mov	sp, r7
 801136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011372:	4770      	bx	lr

08011374 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011374:	b480      	push	{r7}
 8011376:	b083      	sub	sp, #12
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	1c5a      	adds	r2, r3, #1
 8011382:	607a      	str	r2, [r7, #4]
 8011384:	683a      	ldr	r2, [r7, #0]
 8011386:	b2d2      	uxtb	r2, r2
 8011388:	701a      	strb	r2, [r3, #0]
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	0a1b      	lsrs	r3, r3, #8
 801138e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	1c5a      	adds	r2, r3, #1
 8011394:	607a      	str	r2, [r7, #4]
 8011396:	683a      	ldr	r2, [r7, #0]
 8011398:	b2d2      	uxtb	r2, r2
 801139a:	701a      	strb	r2, [r3, #0]
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	0a1b      	lsrs	r3, r3, #8
 80113a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	1c5a      	adds	r2, r3, #1
 80113a6:	607a      	str	r2, [r7, #4]
 80113a8:	683a      	ldr	r2, [r7, #0]
 80113aa:	b2d2      	uxtb	r2, r2
 80113ac:	701a      	strb	r2, [r3, #0]
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	0a1b      	lsrs	r3, r3, #8
 80113b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	1c5a      	adds	r2, r3, #1
 80113b8:	607a      	str	r2, [r7, #4]
 80113ba:	683a      	ldr	r2, [r7, #0]
 80113bc:	b2d2      	uxtb	r2, r2
 80113be:	701a      	strb	r2, [r3, #0]
}
 80113c0:	bf00      	nop
 80113c2:	370c      	adds	r7, #12
 80113c4:	46bd      	mov	sp, r7
 80113c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ca:	4770      	bx	lr

080113cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80113cc:	b480      	push	{r7}
 80113ce:	b087      	sub	sp, #28
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	60f8      	str	r0, [r7, #12]
 80113d4:	60b9      	str	r1, [r7, #8]
 80113d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d00d      	beq.n	8011402 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80113e6:	693a      	ldr	r2, [r7, #16]
 80113e8:	1c53      	adds	r3, r2, #1
 80113ea:	613b      	str	r3, [r7, #16]
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	1c59      	adds	r1, r3, #1
 80113f0:	6179      	str	r1, [r7, #20]
 80113f2:	7812      	ldrb	r2, [r2, #0]
 80113f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	3b01      	subs	r3, #1
 80113fa:	607b      	str	r3, [r7, #4]
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d1f1      	bne.n	80113e6 <mem_cpy+0x1a>
	}
}
 8011402:	bf00      	nop
 8011404:	371c      	adds	r7, #28
 8011406:	46bd      	mov	sp, r7
 8011408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140c:	4770      	bx	lr

0801140e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801140e:	b480      	push	{r7}
 8011410:	b087      	sub	sp, #28
 8011412:	af00      	add	r7, sp, #0
 8011414:	60f8      	str	r0, [r7, #12]
 8011416:	60b9      	str	r1, [r7, #8]
 8011418:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	1c5a      	adds	r2, r3, #1
 8011422:	617a      	str	r2, [r7, #20]
 8011424:	68ba      	ldr	r2, [r7, #8]
 8011426:	b2d2      	uxtb	r2, r2
 8011428:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	3b01      	subs	r3, #1
 801142e:	607b      	str	r3, [r7, #4]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d1f3      	bne.n	801141e <mem_set+0x10>
}
 8011436:	bf00      	nop
 8011438:	bf00      	nop
 801143a:	371c      	adds	r7, #28
 801143c:	46bd      	mov	sp, r7
 801143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011442:	4770      	bx	lr

08011444 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011444:	b480      	push	{r7}
 8011446:	b089      	sub	sp, #36	@ 0x24
 8011448:	af00      	add	r7, sp, #0
 801144a:	60f8      	str	r0, [r7, #12]
 801144c:	60b9      	str	r1, [r7, #8]
 801144e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	61fb      	str	r3, [r7, #28]
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011458:	2300      	movs	r3, #0
 801145a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801145c:	69fb      	ldr	r3, [r7, #28]
 801145e:	1c5a      	adds	r2, r3, #1
 8011460:	61fa      	str	r2, [r7, #28]
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	4619      	mov	r1, r3
 8011466:	69bb      	ldr	r3, [r7, #24]
 8011468:	1c5a      	adds	r2, r3, #1
 801146a:	61ba      	str	r2, [r7, #24]
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	1acb      	subs	r3, r1, r3
 8011470:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	3b01      	subs	r3, #1
 8011476:	607b      	str	r3, [r7, #4]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d002      	beq.n	8011484 <mem_cmp+0x40>
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d0eb      	beq.n	801145c <mem_cmp+0x18>

	return r;
 8011484:	697b      	ldr	r3, [r7, #20]
}
 8011486:	4618      	mov	r0, r3
 8011488:	3724      	adds	r7, #36	@ 0x24
 801148a:	46bd      	mov	sp, r7
 801148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011490:	4770      	bx	lr

08011492 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011492:	b480      	push	{r7}
 8011494:	b083      	sub	sp, #12
 8011496:	af00      	add	r7, sp, #0
 8011498:	6078      	str	r0, [r7, #4]
 801149a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801149c:	e002      	b.n	80114a4 <chk_chr+0x12>
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	3301      	adds	r3, #1
 80114a2:	607b      	str	r3, [r7, #4]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	781b      	ldrb	r3, [r3, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d005      	beq.n	80114b8 <chk_chr+0x26>
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	461a      	mov	r2, r3
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	4293      	cmp	r3, r2
 80114b6:	d1f2      	bne.n	801149e <chk_chr+0xc>
	return *str;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	781b      	ldrb	r3, [r3, #0]
}
 80114bc:	4618      	mov	r0, r3
 80114be:	370c      	adds	r7, #12
 80114c0:	46bd      	mov	sp, r7
 80114c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c6:	4770      	bx	lr

080114c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b085      	sub	sp, #20
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80114d2:	2300      	movs	r3, #0
 80114d4:	60bb      	str	r3, [r7, #8]
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	60fb      	str	r3, [r7, #12]
 80114da:	e029      	b.n	8011530 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80114dc:	4a27      	ldr	r2, [pc, #156]	@ (801157c <chk_lock+0xb4>)
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	011b      	lsls	r3, r3, #4
 80114e2:	4413      	add	r3, r2
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d01d      	beq.n	8011526 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80114ea:	4a24      	ldr	r2, [pc, #144]	@ (801157c <chk_lock+0xb4>)
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	011b      	lsls	r3, r3, #4
 80114f0:	4413      	add	r3, r2
 80114f2:	681a      	ldr	r2, [r3, #0]
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	429a      	cmp	r2, r3
 80114fa:	d116      	bne.n	801152a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80114fc:	4a1f      	ldr	r2, [pc, #124]	@ (801157c <chk_lock+0xb4>)
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	011b      	lsls	r3, r3, #4
 8011502:	4413      	add	r3, r2
 8011504:	3304      	adds	r3, #4
 8011506:	681a      	ldr	r2, [r3, #0]
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801150c:	429a      	cmp	r2, r3
 801150e:	d10c      	bne.n	801152a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011510:	4a1a      	ldr	r2, [pc, #104]	@ (801157c <chk_lock+0xb4>)
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	011b      	lsls	r3, r3, #4
 8011516:	4413      	add	r3, r2
 8011518:	3308      	adds	r3, #8
 801151a:	681a      	ldr	r2, [r3, #0]
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011520:	429a      	cmp	r2, r3
 8011522:	d102      	bne.n	801152a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011524:	e007      	b.n	8011536 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011526:	2301      	movs	r3, #1
 8011528:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	3301      	adds	r3, #1
 801152e:	60fb      	str	r3, [r7, #12]
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	2b01      	cmp	r3, #1
 8011534:	d9d2      	bls.n	80114dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2b02      	cmp	r3, #2
 801153a:	d109      	bne.n	8011550 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d102      	bne.n	8011548 <chk_lock+0x80>
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	2b02      	cmp	r3, #2
 8011546:	d101      	bne.n	801154c <chk_lock+0x84>
 8011548:	2300      	movs	r3, #0
 801154a:	e010      	b.n	801156e <chk_lock+0xa6>
 801154c:	2312      	movs	r3, #18
 801154e:	e00e      	b.n	801156e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d108      	bne.n	8011568 <chk_lock+0xa0>
 8011556:	4a09      	ldr	r2, [pc, #36]	@ (801157c <chk_lock+0xb4>)
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	011b      	lsls	r3, r3, #4
 801155c:	4413      	add	r3, r2
 801155e:	330c      	adds	r3, #12
 8011560:	881b      	ldrh	r3, [r3, #0]
 8011562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011566:	d101      	bne.n	801156c <chk_lock+0xa4>
 8011568:	2310      	movs	r3, #16
 801156a:	e000      	b.n	801156e <chk_lock+0xa6>
 801156c:	2300      	movs	r3, #0
}
 801156e:	4618      	mov	r0, r3
 8011570:	3714      	adds	r7, #20
 8011572:	46bd      	mov	sp, r7
 8011574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011578:	4770      	bx	lr
 801157a:	bf00      	nop
 801157c:	2400291c 	.word	0x2400291c

08011580 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011586:	2300      	movs	r3, #0
 8011588:	607b      	str	r3, [r7, #4]
 801158a:	e002      	b.n	8011592 <enq_lock+0x12>
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	3301      	adds	r3, #1
 8011590:	607b      	str	r3, [r7, #4]
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2b01      	cmp	r3, #1
 8011596:	d806      	bhi.n	80115a6 <enq_lock+0x26>
 8011598:	4a09      	ldr	r2, [pc, #36]	@ (80115c0 <enq_lock+0x40>)
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	011b      	lsls	r3, r3, #4
 801159e:	4413      	add	r3, r2
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d1f2      	bne.n	801158c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2b02      	cmp	r3, #2
 80115aa:	bf14      	ite	ne
 80115ac:	2301      	movne	r3, #1
 80115ae:	2300      	moveq	r3, #0
 80115b0:	b2db      	uxtb	r3, r3
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	370c      	adds	r7, #12
 80115b6:	46bd      	mov	sp, r7
 80115b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115bc:	4770      	bx	lr
 80115be:	bf00      	nop
 80115c0:	2400291c 	.word	0x2400291c

080115c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80115c4:	b480      	push	{r7}
 80115c6:	b085      	sub	sp, #20
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80115ce:	2300      	movs	r3, #0
 80115d0:	60fb      	str	r3, [r7, #12]
 80115d2:	e01f      	b.n	8011614 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80115d4:	4a41      	ldr	r2, [pc, #260]	@ (80116dc <inc_lock+0x118>)
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	011b      	lsls	r3, r3, #4
 80115da:	4413      	add	r3, r2
 80115dc:	681a      	ldr	r2, [r3, #0]
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	429a      	cmp	r2, r3
 80115e4:	d113      	bne.n	801160e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80115e6:	4a3d      	ldr	r2, [pc, #244]	@ (80116dc <inc_lock+0x118>)
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	011b      	lsls	r3, r3, #4
 80115ec:	4413      	add	r3, r2
 80115ee:	3304      	adds	r3, #4
 80115f0:	681a      	ldr	r2, [r3, #0]
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d109      	bne.n	801160e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80115fa:	4a38      	ldr	r2, [pc, #224]	@ (80116dc <inc_lock+0x118>)
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	011b      	lsls	r3, r3, #4
 8011600:	4413      	add	r3, r2
 8011602:	3308      	adds	r3, #8
 8011604:	681a      	ldr	r2, [r3, #0]
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801160a:	429a      	cmp	r2, r3
 801160c:	d006      	beq.n	801161c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	3301      	adds	r3, #1
 8011612:	60fb      	str	r3, [r7, #12]
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	2b01      	cmp	r3, #1
 8011618:	d9dc      	bls.n	80115d4 <inc_lock+0x10>
 801161a:	e000      	b.n	801161e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801161c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	2b02      	cmp	r3, #2
 8011622:	d132      	bne.n	801168a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011624:	2300      	movs	r3, #0
 8011626:	60fb      	str	r3, [r7, #12]
 8011628:	e002      	b.n	8011630 <inc_lock+0x6c>
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	3301      	adds	r3, #1
 801162e:	60fb      	str	r3, [r7, #12]
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	2b01      	cmp	r3, #1
 8011634:	d806      	bhi.n	8011644 <inc_lock+0x80>
 8011636:	4a29      	ldr	r2, [pc, #164]	@ (80116dc <inc_lock+0x118>)
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	011b      	lsls	r3, r3, #4
 801163c:	4413      	add	r3, r2
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d1f2      	bne.n	801162a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	2b02      	cmp	r3, #2
 8011648:	d101      	bne.n	801164e <inc_lock+0x8a>
 801164a:	2300      	movs	r3, #0
 801164c:	e040      	b.n	80116d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	681a      	ldr	r2, [r3, #0]
 8011652:	4922      	ldr	r1, [pc, #136]	@ (80116dc <inc_lock+0x118>)
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	011b      	lsls	r3, r3, #4
 8011658:	440b      	add	r3, r1
 801165a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	689a      	ldr	r2, [r3, #8]
 8011660:	491e      	ldr	r1, [pc, #120]	@ (80116dc <inc_lock+0x118>)
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	011b      	lsls	r3, r3, #4
 8011666:	440b      	add	r3, r1
 8011668:	3304      	adds	r3, #4
 801166a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	695a      	ldr	r2, [r3, #20]
 8011670:	491a      	ldr	r1, [pc, #104]	@ (80116dc <inc_lock+0x118>)
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	011b      	lsls	r3, r3, #4
 8011676:	440b      	add	r3, r1
 8011678:	3308      	adds	r3, #8
 801167a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801167c:	4a17      	ldr	r2, [pc, #92]	@ (80116dc <inc_lock+0x118>)
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	011b      	lsls	r3, r3, #4
 8011682:	4413      	add	r3, r2
 8011684:	330c      	adds	r3, #12
 8011686:	2200      	movs	r2, #0
 8011688:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d009      	beq.n	80116a4 <inc_lock+0xe0>
 8011690:	4a12      	ldr	r2, [pc, #72]	@ (80116dc <inc_lock+0x118>)
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	011b      	lsls	r3, r3, #4
 8011696:	4413      	add	r3, r2
 8011698:	330c      	adds	r3, #12
 801169a:	881b      	ldrh	r3, [r3, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d001      	beq.n	80116a4 <inc_lock+0xe0>
 80116a0:	2300      	movs	r3, #0
 80116a2:	e015      	b.n	80116d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d108      	bne.n	80116bc <inc_lock+0xf8>
 80116aa:	4a0c      	ldr	r2, [pc, #48]	@ (80116dc <inc_lock+0x118>)
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	011b      	lsls	r3, r3, #4
 80116b0:	4413      	add	r3, r2
 80116b2:	330c      	adds	r3, #12
 80116b4:	881b      	ldrh	r3, [r3, #0]
 80116b6:	3301      	adds	r3, #1
 80116b8:	b29a      	uxth	r2, r3
 80116ba:	e001      	b.n	80116c0 <inc_lock+0xfc>
 80116bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80116c0:	4906      	ldr	r1, [pc, #24]	@ (80116dc <inc_lock+0x118>)
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	011b      	lsls	r3, r3, #4
 80116c6:	440b      	add	r3, r1
 80116c8:	330c      	adds	r3, #12
 80116ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	3301      	adds	r3, #1
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	3714      	adds	r7, #20
 80116d4:	46bd      	mov	sp, r7
 80116d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116da:	4770      	bx	lr
 80116dc:	2400291c 	.word	0x2400291c

080116e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80116e0:	b480      	push	{r7}
 80116e2:	b085      	sub	sp, #20
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	3b01      	subs	r3, #1
 80116ec:	607b      	str	r3, [r7, #4]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	2b01      	cmp	r3, #1
 80116f2:	d825      	bhi.n	8011740 <dec_lock+0x60>
		n = Files[i].ctr;
 80116f4:	4a17      	ldr	r2, [pc, #92]	@ (8011754 <dec_lock+0x74>)
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	011b      	lsls	r3, r3, #4
 80116fa:	4413      	add	r3, r2
 80116fc:	330c      	adds	r3, #12
 80116fe:	881b      	ldrh	r3, [r3, #0]
 8011700:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011702:	89fb      	ldrh	r3, [r7, #14]
 8011704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011708:	d101      	bne.n	801170e <dec_lock+0x2e>
 801170a:	2300      	movs	r3, #0
 801170c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801170e:	89fb      	ldrh	r3, [r7, #14]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d002      	beq.n	801171a <dec_lock+0x3a>
 8011714:	89fb      	ldrh	r3, [r7, #14]
 8011716:	3b01      	subs	r3, #1
 8011718:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801171a:	4a0e      	ldr	r2, [pc, #56]	@ (8011754 <dec_lock+0x74>)
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	011b      	lsls	r3, r3, #4
 8011720:	4413      	add	r3, r2
 8011722:	330c      	adds	r3, #12
 8011724:	89fa      	ldrh	r2, [r7, #14]
 8011726:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011728:	89fb      	ldrh	r3, [r7, #14]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d105      	bne.n	801173a <dec_lock+0x5a>
 801172e:	4a09      	ldr	r2, [pc, #36]	@ (8011754 <dec_lock+0x74>)
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	011b      	lsls	r3, r3, #4
 8011734:	4413      	add	r3, r2
 8011736:	2200      	movs	r2, #0
 8011738:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801173a:	2300      	movs	r3, #0
 801173c:	737b      	strb	r3, [r7, #13]
 801173e:	e001      	b.n	8011744 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011740:	2302      	movs	r3, #2
 8011742:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011744:	7b7b      	ldrb	r3, [r7, #13]
}
 8011746:	4618      	mov	r0, r3
 8011748:	3714      	adds	r7, #20
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr
 8011752:	bf00      	nop
 8011754:	2400291c 	.word	0x2400291c

08011758 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011758:	b480      	push	{r7}
 801175a:	b085      	sub	sp, #20
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011760:	2300      	movs	r3, #0
 8011762:	60fb      	str	r3, [r7, #12]
 8011764:	e010      	b.n	8011788 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011766:	4a0d      	ldr	r2, [pc, #52]	@ (801179c <clear_lock+0x44>)
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	011b      	lsls	r3, r3, #4
 801176c:	4413      	add	r3, r2
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	429a      	cmp	r2, r3
 8011774:	d105      	bne.n	8011782 <clear_lock+0x2a>
 8011776:	4a09      	ldr	r2, [pc, #36]	@ (801179c <clear_lock+0x44>)
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	011b      	lsls	r3, r3, #4
 801177c:	4413      	add	r3, r2
 801177e:	2200      	movs	r2, #0
 8011780:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	3301      	adds	r3, #1
 8011786:	60fb      	str	r3, [r7, #12]
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	2b01      	cmp	r3, #1
 801178c:	d9eb      	bls.n	8011766 <clear_lock+0xe>
	}
}
 801178e:	bf00      	nop
 8011790:	bf00      	nop
 8011792:	3714      	adds	r7, #20
 8011794:	46bd      	mov	sp, r7
 8011796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179a:	4770      	bx	lr
 801179c:	2400291c 	.word	0x2400291c

080117a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b086      	sub	sp, #24
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80117a8:	2300      	movs	r3, #0
 80117aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	78db      	ldrb	r3, [r3, #3]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d034      	beq.n	801181e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	7858      	ldrb	r0, [r3, #1]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80117c4:	2301      	movs	r3, #1
 80117c6:	697a      	ldr	r2, [r7, #20]
 80117c8:	f7ff fd40 	bl	801124c <disk_write>
 80117cc:	4603      	mov	r3, r0
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d002      	beq.n	80117d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80117d2:	2301      	movs	r3, #1
 80117d4:	73fb      	strb	r3, [r7, #15]
 80117d6:	e022      	b.n	801181e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2200      	movs	r2, #0
 80117dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117e2:	697a      	ldr	r2, [r7, #20]
 80117e4:	1ad2      	subs	r2, r2, r3
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6a1b      	ldr	r3, [r3, #32]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d217      	bcs.n	801181e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	789b      	ldrb	r3, [r3, #2]
 80117f2:	613b      	str	r3, [r7, #16]
 80117f4:	e010      	b.n	8011818 <sync_window+0x78>
					wsect += fs->fsize;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6a1b      	ldr	r3, [r3, #32]
 80117fa:	697a      	ldr	r2, [r7, #20]
 80117fc:	4413      	add	r3, r2
 80117fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	7858      	ldrb	r0, [r3, #1]
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801180a:	2301      	movs	r3, #1
 801180c:	697a      	ldr	r2, [r7, #20]
 801180e:	f7ff fd1d 	bl	801124c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011812:	693b      	ldr	r3, [r7, #16]
 8011814:	3b01      	subs	r3, #1
 8011816:	613b      	str	r3, [r7, #16]
 8011818:	693b      	ldr	r3, [r7, #16]
 801181a:	2b01      	cmp	r3, #1
 801181c:	d8eb      	bhi.n	80117f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011820:	4618      	mov	r0, r3
 8011822:	3718      	adds	r7, #24
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}

08011828 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b084      	sub	sp, #16
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011832:	2300      	movs	r3, #0
 8011834:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801183a:	683a      	ldr	r2, [r7, #0]
 801183c:	429a      	cmp	r2, r3
 801183e:	d01b      	beq.n	8011878 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f7ff ffad 	bl	80117a0 <sync_window>
 8011846:	4603      	mov	r3, r0
 8011848:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801184a:	7bfb      	ldrb	r3, [r7, #15]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d113      	bne.n	8011878 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	7858      	ldrb	r0, [r3, #1]
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801185a:	2301      	movs	r3, #1
 801185c:	683a      	ldr	r2, [r7, #0]
 801185e:	f7ff fcd5 	bl	801120c <disk_read>
 8011862:	4603      	mov	r3, r0
 8011864:	2b00      	cmp	r3, #0
 8011866:	d004      	beq.n	8011872 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011868:	f04f 33ff 	mov.w	r3, #4294967295
 801186c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801186e:	2301      	movs	r3, #1
 8011870:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	683a      	ldr	r2, [r7, #0]
 8011876:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8011878:	7bfb      	ldrb	r3, [r7, #15]
}
 801187a:	4618      	mov	r0, r3
 801187c:	3710      	adds	r7, #16
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}
	...

08011884 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b084      	sub	sp, #16
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f7ff ff87 	bl	80117a0 <sync_window>
 8011892:	4603      	mov	r3, r0
 8011894:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011896:	7bfb      	ldrb	r3, [r7, #15]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d159      	bne.n	8011950 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	781b      	ldrb	r3, [r3, #0]
 80118a0:	2b03      	cmp	r3, #3
 80118a2:	d149      	bne.n	8011938 <sync_fs+0xb4>
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	791b      	ldrb	r3, [r3, #4]
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d145      	bne.n	8011938 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	899b      	ldrh	r3, [r3, #12]
 80118b6:	461a      	mov	r2, r3
 80118b8:	2100      	movs	r1, #0
 80118ba:	f7ff fda8 	bl	801140e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	3338      	adds	r3, #56	@ 0x38
 80118c2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80118c6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80118ca:	4618      	mov	r0, r3
 80118cc:	f7ff fd37 	bl	801133e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	3338      	adds	r3, #56	@ 0x38
 80118d4:	4921      	ldr	r1, [pc, #132]	@ (801195c <sync_fs+0xd8>)
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7ff fd4c 	bl	8011374 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	3338      	adds	r3, #56	@ 0x38
 80118e0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80118e4:	491e      	ldr	r1, [pc, #120]	@ (8011960 <sync_fs+0xdc>)
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7ff fd44 	bl	8011374 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	3338      	adds	r3, #56	@ 0x38
 80118f0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	699b      	ldr	r3, [r3, #24]
 80118f8:	4619      	mov	r1, r3
 80118fa:	4610      	mov	r0, r2
 80118fc:	f7ff fd3a 	bl	8011374 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	3338      	adds	r3, #56	@ 0x38
 8011904:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	695b      	ldr	r3, [r3, #20]
 801190c:	4619      	mov	r1, r3
 801190e:	4610      	mov	r0, r2
 8011910:	f7ff fd30 	bl	8011374 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011918:	1c5a      	adds	r2, r3, #1
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	7858      	ldrb	r0, [r3, #1]
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801192c:	2301      	movs	r3, #1
 801192e:	f7ff fc8d 	bl	801124c <disk_write>
			fs->fsi_flag = 0;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2200      	movs	r2, #0
 8011936:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	785b      	ldrb	r3, [r3, #1]
 801193c:	2200      	movs	r2, #0
 801193e:	2100      	movs	r1, #0
 8011940:	4618      	mov	r0, r3
 8011942:	f7ff fca3 	bl	801128c <disk_ioctl>
 8011946:	4603      	mov	r3, r0
 8011948:	2b00      	cmp	r3, #0
 801194a:	d001      	beq.n	8011950 <sync_fs+0xcc>
 801194c:	2301      	movs	r3, #1
 801194e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011950:	7bfb      	ldrb	r3, [r7, #15]
}
 8011952:	4618      	mov	r0, r3
 8011954:	3710      	adds	r7, #16
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
 801195a:	bf00      	nop
 801195c:	41615252 	.word	0x41615252
 8011960:	61417272 	.word	0x61417272

08011964 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011964:	b480      	push	{r7}
 8011966:	b083      	sub	sp, #12
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	3b02      	subs	r3, #2
 8011972:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	69db      	ldr	r3, [r3, #28]
 8011978:	3b02      	subs	r3, #2
 801197a:	683a      	ldr	r2, [r7, #0]
 801197c:	429a      	cmp	r2, r3
 801197e:	d301      	bcc.n	8011984 <clust2sect+0x20>
 8011980:	2300      	movs	r3, #0
 8011982:	e008      	b.n	8011996 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	895b      	ldrh	r3, [r3, #10]
 8011988:	461a      	mov	r2, r3
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	fb03 f202 	mul.w	r2, r3, r2
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011994:	4413      	add	r3, r2
}
 8011996:	4618      	mov	r0, r3
 8011998:	370c      	adds	r7, #12
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr

080119a2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80119a2:	b580      	push	{r7, lr}
 80119a4:	b086      	sub	sp, #24
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	6078      	str	r0, [r7, #4]
 80119aa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	2b01      	cmp	r3, #1
 80119b6:	d904      	bls.n	80119c2 <get_fat+0x20>
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	69db      	ldr	r3, [r3, #28]
 80119bc:	683a      	ldr	r2, [r7, #0]
 80119be:	429a      	cmp	r2, r3
 80119c0:	d302      	bcc.n	80119c8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80119c2:	2301      	movs	r3, #1
 80119c4:	617b      	str	r3, [r7, #20]
 80119c6:	e0ba      	b.n	8011b3e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80119c8:	f04f 33ff 	mov.w	r3, #4294967295
 80119cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	781b      	ldrb	r3, [r3, #0]
 80119d2:	2b03      	cmp	r3, #3
 80119d4:	f000 8082 	beq.w	8011adc <get_fat+0x13a>
 80119d8:	2b03      	cmp	r3, #3
 80119da:	f300 80a6 	bgt.w	8011b2a <get_fat+0x188>
 80119de:	2b01      	cmp	r3, #1
 80119e0:	d002      	beq.n	80119e8 <get_fat+0x46>
 80119e2:	2b02      	cmp	r3, #2
 80119e4:	d055      	beq.n	8011a92 <get_fat+0xf0>
 80119e6:	e0a0      	b.n	8011b2a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	60fb      	str	r3, [r7, #12]
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	085b      	lsrs	r3, r3, #1
 80119f0:	68fa      	ldr	r2, [r7, #12]
 80119f2:	4413      	add	r3, r2
 80119f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	899b      	ldrh	r3, [r3, #12]
 80119fe:	4619      	mov	r1, r3
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a06:	4413      	add	r3, r2
 8011a08:	4619      	mov	r1, r3
 8011a0a:	6938      	ldr	r0, [r7, #16]
 8011a0c:	f7ff ff0c 	bl	8011828 <move_window>
 8011a10:	4603      	mov	r3, r0
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	f040 808c 	bne.w	8011b30 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	1c5a      	adds	r2, r3, #1
 8011a1c:	60fa      	str	r2, [r7, #12]
 8011a1e:	693a      	ldr	r2, [r7, #16]
 8011a20:	8992      	ldrh	r2, [r2, #12]
 8011a22:	fbb3 f1f2 	udiv	r1, r3, r2
 8011a26:	fb01 f202 	mul.w	r2, r1, r2
 8011a2a:	1a9b      	subs	r3, r3, r2
 8011a2c:	693a      	ldr	r2, [r7, #16]
 8011a2e:	4413      	add	r3, r2
 8011a30:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011a34:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	899b      	ldrh	r3, [r3, #12]
 8011a3e:	4619      	mov	r1, r3
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a46:	4413      	add	r3, r2
 8011a48:	4619      	mov	r1, r3
 8011a4a:	6938      	ldr	r0, [r7, #16]
 8011a4c:	f7ff feec 	bl	8011828 <move_window>
 8011a50:	4603      	mov	r3, r0
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d16e      	bne.n	8011b34 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	899b      	ldrh	r3, [r3, #12]
 8011a5a:	461a      	mov	r2, r3
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011a62:	fb01 f202 	mul.w	r2, r1, r2
 8011a66:	1a9b      	subs	r3, r3, r2
 8011a68:	693a      	ldr	r2, [r7, #16]
 8011a6a:	4413      	add	r3, r2
 8011a6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011a70:	021b      	lsls	r3, r3, #8
 8011a72:	68ba      	ldr	r2, [r7, #8]
 8011a74:	4313      	orrs	r3, r2
 8011a76:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	f003 0301 	and.w	r3, r3, #1
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d002      	beq.n	8011a88 <get_fat+0xe6>
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	091b      	lsrs	r3, r3, #4
 8011a86:	e002      	b.n	8011a8e <get_fat+0xec>
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011a8e:	617b      	str	r3, [r7, #20]
			break;
 8011a90:	e055      	b.n	8011b3e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011a96:	693b      	ldr	r3, [r7, #16]
 8011a98:	899b      	ldrh	r3, [r3, #12]
 8011a9a:	085b      	lsrs	r3, r3, #1
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	4619      	mov	r1, r3
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011aa6:	4413      	add	r3, r2
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	6938      	ldr	r0, [r7, #16]
 8011aac:	f7ff febc 	bl	8011828 <move_window>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d140      	bne.n	8011b38 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	005b      	lsls	r3, r3, #1
 8011ac0:	693a      	ldr	r2, [r7, #16]
 8011ac2:	8992      	ldrh	r2, [r2, #12]
 8011ac4:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ac8:	fb00 f202 	mul.w	r2, r0, r2
 8011acc:	1a9b      	subs	r3, r3, r2
 8011ace:	440b      	add	r3, r1
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f7ff fbf9 	bl	80112c8 <ld_word>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	617b      	str	r3, [r7, #20]
			break;
 8011ada:	e030      	b.n	8011b3e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	899b      	ldrh	r3, [r3, #12]
 8011ae4:	089b      	lsrs	r3, r3, #2
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	4619      	mov	r1, r3
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	fbb3 f3f1 	udiv	r3, r3, r1
 8011af0:	4413      	add	r3, r2
 8011af2:	4619      	mov	r1, r3
 8011af4:	6938      	ldr	r0, [r7, #16]
 8011af6:	f7ff fe97 	bl	8011828 <move_window>
 8011afa:	4603      	mov	r3, r0
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d11d      	bne.n	8011b3c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011b00:	693b      	ldr	r3, [r7, #16]
 8011b02:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	009b      	lsls	r3, r3, #2
 8011b0a:	693a      	ldr	r2, [r7, #16]
 8011b0c:	8992      	ldrh	r2, [r2, #12]
 8011b0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b12:	fb00 f202 	mul.w	r2, r0, r2
 8011b16:	1a9b      	subs	r3, r3, r2
 8011b18:	440b      	add	r3, r1
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7ff fbec 	bl	80112f8 <ld_dword>
 8011b20:	4603      	mov	r3, r0
 8011b22:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011b26:	617b      	str	r3, [r7, #20]
			break;
 8011b28:	e009      	b.n	8011b3e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	617b      	str	r3, [r7, #20]
 8011b2e:	e006      	b.n	8011b3e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011b30:	bf00      	nop
 8011b32:	e004      	b.n	8011b3e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011b34:	bf00      	nop
 8011b36:	e002      	b.n	8011b3e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011b38:	bf00      	nop
 8011b3a:	e000      	b.n	8011b3e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011b3c:	bf00      	nop
		}
	}

	return val;
 8011b3e:	697b      	ldr	r3, [r7, #20]
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3718      	adds	r7, #24
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011b48:	b590      	push	{r4, r7, lr}
 8011b4a:	b089      	sub	sp, #36	@ 0x24
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	60f8      	str	r0, [r7, #12]
 8011b50:	60b9      	str	r1, [r7, #8]
 8011b52:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011b54:	2302      	movs	r3, #2
 8011b56:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	2b01      	cmp	r3, #1
 8011b5c:	f240 8109 	bls.w	8011d72 <put_fat+0x22a>
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	69db      	ldr	r3, [r3, #28]
 8011b64:	68ba      	ldr	r2, [r7, #8]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	f080 8103 	bcs.w	8011d72 <put_fat+0x22a>
		switch (fs->fs_type) {
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	2b03      	cmp	r3, #3
 8011b72:	f000 80b6 	beq.w	8011ce2 <put_fat+0x19a>
 8011b76:	2b03      	cmp	r3, #3
 8011b78:	f300 80fb 	bgt.w	8011d72 <put_fat+0x22a>
 8011b7c:	2b01      	cmp	r3, #1
 8011b7e:	d003      	beq.n	8011b88 <put_fat+0x40>
 8011b80:	2b02      	cmp	r3, #2
 8011b82:	f000 8083 	beq.w	8011c8c <put_fat+0x144>
 8011b86:	e0f4      	b.n	8011d72 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	61bb      	str	r3, [r7, #24]
 8011b8c:	69bb      	ldr	r3, [r7, #24]
 8011b8e:	085b      	lsrs	r3, r3, #1
 8011b90:	69ba      	ldr	r2, [r7, #24]
 8011b92:	4413      	add	r3, r2
 8011b94:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	899b      	ldrh	r3, [r3, #12]
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	69bb      	ldr	r3, [r7, #24]
 8011ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ba6:	4413      	add	r3, r2
 8011ba8:	4619      	mov	r1, r3
 8011baa:	68f8      	ldr	r0, [r7, #12]
 8011bac:	f7ff fe3c 	bl	8011828 <move_window>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011bb4:	7ffb      	ldrb	r3, [r7, #31]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	f040 80d4 	bne.w	8011d64 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011bc2:	69bb      	ldr	r3, [r7, #24]
 8011bc4:	1c5a      	adds	r2, r3, #1
 8011bc6:	61ba      	str	r2, [r7, #24]
 8011bc8:	68fa      	ldr	r2, [r7, #12]
 8011bca:	8992      	ldrh	r2, [r2, #12]
 8011bcc:	fbb3 f0f2 	udiv	r0, r3, r2
 8011bd0:	fb00 f202 	mul.w	r2, r0, r2
 8011bd4:	1a9b      	subs	r3, r3, r2
 8011bd6:	440b      	add	r3, r1
 8011bd8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	f003 0301 	and.w	r3, r3, #1
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d00d      	beq.n	8011c00 <put_fat+0xb8>
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	b25b      	sxtb	r3, r3
 8011bea:	f003 030f 	and.w	r3, r3, #15
 8011bee:	b25a      	sxtb	r2, r3
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	b2db      	uxtb	r3, r3
 8011bf4:	011b      	lsls	r3, r3, #4
 8011bf6:	b25b      	sxtb	r3, r3
 8011bf8:	4313      	orrs	r3, r2
 8011bfa:	b25b      	sxtb	r3, r3
 8011bfc:	b2db      	uxtb	r3, r3
 8011bfe:	e001      	b.n	8011c04 <put_fat+0xbc>
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	b2db      	uxtb	r3, r3
 8011c04:	697a      	ldr	r2, [r7, #20]
 8011c06:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	2201      	movs	r2, #1
 8011c0c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	899b      	ldrh	r3, [r3, #12]
 8011c16:	4619      	mov	r1, r3
 8011c18:	69bb      	ldr	r3, [r7, #24]
 8011c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c1e:	4413      	add	r3, r2
 8011c20:	4619      	mov	r1, r3
 8011c22:	68f8      	ldr	r0, [r7, #12]
 8011c24:	f7ff fe00 	bl	8011828 <move_window>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011c2c:	7ffb      	ldrb	r3, [r7, #31]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	f040 809a 	bne.w	8011d68 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	899b      	ldrh	r3, [r3, #12]
 8011c3e:	461a      	mov	r2, r3
 8011c40:	69bb      	ldr	r3, [r7, #24]
 8011c42:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c46:	fb00 f202 	mul.w	r2, r0, r2
 8011c4a:	1a9b      	subs	r3, r3, r2
 8011c4c:	440b      	add	r3, r1
 8011c4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	f003 0301 	and.w	r3, r3, #1
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d003      	beq.n	8011c62 <put_fat+0x11a>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	091b      	lsrs	r3, r3, #4
 8011c5e:	b2db      	uxtb	r3, r3
 8011c60:	e00e      	b.n	8011c80 <put_fat+0x138>
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	b25b      	sxtb	r3, r3
 8011c68:	f023 030f 	bic.w	r3, r3, #15
 8011c6c:	b25a      	sxtb	r2, r3
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	0a1b      	lsrs	r3, r3, #8
 8011c72:	b25b      	sxtb	r3, r3
 8011c74:	f003 030f 	and.w	r3, r3, #15
 8011c78:	b25b      	sxtb	r3, r3
 8011c7a:	4313      	orrs	r3, r2
 8011c7c:	b25b      	sxtb	r3, r3
 8011c7e:	b2db      	uxtb	r3, r3
 8011c80:	697a      	ldr	r2, [r7, #20]
 8011c82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	2201      	movs	r2, #1
 8011c88:	70da      	strb	r2, [r3, #3]
			break;
 8011c8a:	e072      	b.n	8011d72 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	899b      	ldrh	r3, [r3, #12]
 8011c94:	085b      	lsrs	r3, r3, #1
 8011c96:	b29b      	uxth	r3, r3
 8011c98:	4619      	mov	r1, r3
 8011c9a:	68bb      	ldr	r3, [r7, #8]
 8011c9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ca0:	4413      	add	r3, r2
 8011ca2:	4619      	mov	r1, r3
 8011ca4:	68f8      	ldr	r0, [r7, #12]
 8011ca6:	f7ff fdbf 	bl	8011828 <move_window>
 8011caa:	4603      	mov	r3, r0
 8011cac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011cae:	7ffb      	ldrb	r3, [r7, #31]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d15b      	bne.n	8011d6c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	005b      	lsls	r3, r3, #1
 8011cbe:	68fa      	ldr	r2, [r7, #12]
 8011cc0:	8992      	ldrh	r2, [r2, #12]
 8011cc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8011cc6:	fb00 f202 	mul.w	r2, r0, r2
 8011cca:	1a9b      	subs	r3, r3, r2
 8011ccc:	440b      	add	r3, r1
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	b292      	uxth	r2, r2
 8011cd2:	4611      	mov	r1, r2
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7ff fb32 	bl	801133e <st_word>
			fs->wflag = 1;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	2201      	movs	r2, #1
 8011cde:	70da      	strb	r2, [r3, #3]
			break;
 8011ce0:	e047      	b.n	8011d72 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	899b      	ldrh	r3, [r3, #12]
 8011cea:	089b      	lsrs	r3, r3, #2
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	4619      	mov	r1, r3
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011cf6:	4413      	add	r3, r2
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	68f8      	ldr	r0, [r7, #12]
 8011cfc:	f7ff fd94 	bl	8011828 <move_window>
 8011d00:	4603      	mov	r3, r0
 8011d02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011d04:	7ffb      	ldrb	r3, [r7, #31]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d132      	bne.n	8011d70 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	009b      	lsls	r3, r3, #2
 8011d1a:	68fa      	ldr	r2, [r7, #12]
 8011d1c:	8992      	ldrh	r2, [r2, #12]
 8011d1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d22:	fb00 f202 	mul.w	r2, r0, r2
 8011d26:	1a9b      	subs	r3, r3, r2
 8011d28:	440b      	add	r3, r1
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f7ff fae4 	bl	80112f8 <ld_dword>
 8011d30:	4603      	mov	r3, r0
 8011d32:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8011d36:	4323      	orrs	r3, r4
 8011d38:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	009b      	lsls	r3, r3, #2
 8011d44:	68fa      	ldr	r2, [r7, #12]
 8011d46:	8992      	ldrh	r2, [r2, #12]
 8011d48:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d4c:	fb00 f202 	mul.w	r2, r0, r2
 8011d50:	1a9b      	subs	r3, r3, r2
 8011d52:	440b      	add	r3, r1
 8011d54:	6879      	ldr	r1, [r7, #4]
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7ff fb0c 	bl	8011374 <st_dword>
			fs->wflag = 1;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	2201      	movs	r2, #1
 8011d60:	70da      	strb	r2, [r3, #3]
			break;
 8011d62:	e006      	b.n	8011d72 <put_fat+0x22a>
			if (res != FR_OK) break;
 8011d64:	bf00      	nop
 8011d66:	e004      	b.n	8011d72 <put_fat+0x22a>
			if (res != FR_OK) break;
 8011d68:	bf00      	nop
 8011d6a:	e002      	b.n	8011d72 <put_fat+0x22a>
			if (res != FR_OK) break;
 8011d6c:	bf00      	nop
 8011d6e:	e000      	b.n	8011d72 <put_fat+0x22a>
			if (res != FR_OK) break;
 8011d70:	bf00      	nop
		}
	}
	return res;
 8011d72:	7ffb      	ldrb	r3, [r7, #31]
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	3724      	adds	r7, #36	@ 0x24
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd90      	pop	{r4, r7, pc}

08011d7c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b088      	sub	sp, #32
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	60f8      	str	r0, [r7, #12]
 8011d84:	60b9      	str	r1, [r7, #8]
 8011d86:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	2b01      	cmp	r3, #1
 8011d96:	d904      	bls.n	8011da2 <remove_chain+0x26>
 8011d98:	69bb      	ldr	r3, [r7, #24]
 8011d9a:	69db      	ldr	r3, [r3, #28]
 8011d9c:	68ba      	ldr	r2, [r7, #8]
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	d301      	bcc.n	8011da6 <remove_chain+0x2a>
 8011da2:	2302      	movs	r3, #2
 8011da4:	e04b      	b.n	8011e3e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d00c      	beq.n	8011dc6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011dac:	f04f 32ff 	mov.w	r2, #4294967295
 8011db0:	6879      	ldr	r1, [r7, #4]
 8011db2:	69b8      	ldr	r0, [r7, #24]
 8011db4:	f7ff fec8 	bl	8011b48 <put_fat>
 8011db8:	4603      	mov	r3, r0
 8011dba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011dbc:	7ffb      	ldrb	r3, [r7, #31]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d001      	beq.n	8011dc6 <remove_chain+0x4a>
 8011dc2:	7ffb      	ldrb	r3, [r7, #31]
 8011dc4:	e03b      	b.n	8011e3e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011dc6:	68b9      	ldr	r1, [r7, #8]
 8011dc8:	68f8      	ldr	r0, [r7, #12]
 8011dca:	f7ff fdea 	bl	80119a2 <get_fat>
 8011dce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d031      	beq.n	8011e3a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	2b01      	cmp	r3, #1
 8011dda:	d101      	bne.n	8011de0 <remove_chain+0x64>
 8011ddc:	2302      	movs	r3, #2
 8011dde:	e02e      	b.n	8011e3e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011de6:	d101      	bne.n	8011dec <remove_chain+0x70>
 8011de8:	2301      	movs	r3, #1
 8011dea:	e028      	b.n	8011e3e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011dec:	2200      	movs	r2, #0
 8011dee:	68b9      	ldr	r1, [r7, #8]
 8011df0:	69b8      	ldr	r0, [r7, #24]
 8011df2:	f7ff fea9 	bl	8011b48 <put_fat>
 8011df6:	4603      	mov	r3, r0
 8011df8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011dfa:	7ffb      	ldrb	r3, [r7, #31]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d001      	beq.n	8011e04 <remove_chain+0x88>
 8011e00:	7ffb      	ldrb	r3, [r7, #31]
 8011e02:	e01c      	b.n	8011e3e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011e04:	69bb      	ldr	r3, [r7, #24]
 8011e06:	699a      	ldr	r2, [r3, #24]
 8011e08:	69bb      	ldr	r3, [r7, #24]
 8011e0a:	69db      	ldr	r3, [r3, #28]
 8011e0c:	3b02      	subs	r3, #2
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d20b      	bcs.n	8011e2a <remove_chain+0xae>
			fs->free_clst++;
 8011e12:	69bb      	ldr	r3, [r7, #24]
 8011e14:	699b      	ldr	r3, [r3, #24]
 8011e16:	1c5a      	adds	r2, r3, #1
 8011e18:	69bb      	ldr	r3, [r7, #24]
 8011e1a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8011e1c:	69bb      	ldr	r3, [r7, #24]
 8011e1e:	791b      	ldrb	r3, [r3, #4]
 8011e20:	f043 0301 	orr.w	r3, r3, #1
 8011e24:	b2da      	uxtb	r2, r3
 8011e26:	69bb      	ldr	r3, [r7, #24]
 8011e28:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011e2a:	697b      	ldr	r3, [r7, #20]
 8011e2c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011e2e:	69bb      	ldr	r3, [r7, #24]
 8011e30:	69db      	ldr	r3, [r3, #28]
 8011e32:	68ba      	ldr	r2, [r7, #8]
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d3c6      	bcc.n	8011dc6 <remove_chain+0x4a>
 8011e38:	e000      	b.n	8011e3c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011e3a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011e3c:	2300      	movs	r3, #0
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3720      	adds	r7, #32
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}

08011e46 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011e46:	b580      	push	{r7, lr}
 8011e48:	b088      	sub	sp, #32
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	6078      	str	r0, [r7, #4]
 8011e4e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d10d      	bne.n	8011e78 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	695b      	ldr	r3, [r3, #20]
 8011e60:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011e62:	69bb      	ldr	r3, [r7, #24]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d004      	beq.n	8011e72 <create_chain+0x2c>
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	69db      	ldr	r3, [r3, #28]
 8011e6c:	69ba      	ldr	r2, [r7, #24]
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	d31b      	bcc.n	8011eaa <create_chain+0x64>
 8011e72:	2301      	movs	r3, #1
 8011e74:	61bb      	str	r3, [r7, #24]
 8011e76:	e018      	b.n	8011eaa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011e78:	6839      	ldr	r1, [r7, #0]
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f7ff fd91 	bl	80119a2 <get_fat>
 8011e80:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	2b01      	cmp	r3, #1
 8011e86:	d801      	bhi.n	8011e8c <create_chain+0x46>
 8011e88:	2301      	movs	r3, #1
 8011e8a:	e070      	b.n	8011f6e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e92:	d101      	bne.n	8011e98 <create_chain+0x52>
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	e06a      	b.n	8011f6e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	69db      	ldr	r3, [r3, #28]
 8011e9c:	68fa      	ldr	r2, [r7, #12]
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	d201      	bcs.n	8011ea6 <create_chain+0x60>
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	e063      	b.n	8011f6e <create_chain+0x128>
		scl = clst;
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011eaa:	69bb      	ldr	r3, [r7, #24]
 8011eac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011eae:	69fb      	ldr	r3, [r7, #28]
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	69db      	ldr	r3, [r3, #28]
 8011eb8:	69fa      	ldr	r2, [r7, #28]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d307      	bcc.n	8011ece <create_chain+0x88>
				ncl = 2;
 8011ebe:	2302      	movs	r3, #2
 8011ec0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011ec2:	69fa      	ldr	r2, [r7, #28]
 8011ec4:	69bb      	ldr	r3, [r7, #24]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d901      	bls.n	8011ece <create_chain+0x88>
 8011eca:	2300      	movs	r3, #0
 8011ecc:	e04f      	b.n	8011f6e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011ece:	69f9      	ldr	r1, [r7, #28]
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f7ff fd66 	bl	80119a2 <get_fat>
 8011ed6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d00e      	beq.n	8011efc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	2b01      	cmp	r3, #1
 8011ee2:	d003      	beq.n	8011eec <create_chain+0xa6>
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eea:	d101      	bne.n	8011ef0 <create_chain+0xaa>
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	e03e      	b.n	8011f6e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011ef0:	69fa      	ldr	r2, [r7, #28]
 8011ef2:	69bb      	ldr	r3, [r7, #24]
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	d1da      	bne.n	8011eae <create_chain+0x68>
 8011ef8:	2300      	movs	r3, #0
 8011efa:	e038      	b.n	8011f6e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011efc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011efe:	f04f 32ff 	mov.w	r2, #4294967295
 8011f02:	69f9      	ldr	r1, [r7, #28]
 8011f04:	6938      	ldr	r0, [r7, #16]
 8011f06:	f7ff fe1f 	bl	8011b48 <put_fat>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011f0e:	7dfb      	ldrb	r3, [r7, #23]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d109      	bne.n	8011f28 <create_chain+0xe2>
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d006      	beq.n	8011f28 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011f1a:	69fa      	ldr	r2, [r7, #28]
 8011f1c:	6839      	ldr	r1, [r7, #0]
 8011f1e:	6938      	ldr	r0, [r7, #16]
 8011f20:	f7ff fe12 	bl	8011b48 <put_fat>
 8011f24:	4603      	mov	r3, r0
 8011f26:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011f28:	7dfb      	ldrb	r3, [r7, #23]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d116      	bne.n	8011f5c <create_chain+0x116>
		fs->last_clst = ncl;
 8011f2e:	693b      	ldr	r3, [r7, #16]
 8011f30:	69fa      	ldr	r2, [r7, #28]
 8011f32:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	699a      	ldr	r2, [r3, #24]
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	69db      	ldr	r3, [r3, #28]
 8011f3c:	3b02      	subs	r3, #2
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	d804      	bhi.n	8011f4c <create_chain+0x106>
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	699b      	ldr	r3, [r3, #24]
 8011f46:	1e5a      	subs	r2, r3, #1
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	791b      	ldrb	r3, [r3, #4]
 8011f50:	f043 0301 	orr.w	r3, r3, #1
 8011f54:	b2da      	uxtb	r2, r3
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	711a      	strb	r2, [r3, #4]
 8011f5a:	e007      	b.n	8011f6c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011f5c:	7dfb      	ldrb	r3, [r7, #23]
 8011f5e:	2b01      	cmp	r3, #1
 8011f60:	d102      	bne.n	8011f68 <create_chain+0x122>
 8011f62:	f04f 33ff 	mov.w	r3, #4294967295
 8011f66:	e000      	b.n	8011f6a <create_chain+0x124>
 8011f68:	2301      	movs	r3, #1
 8011f6a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011f6c:	69fb      	ldr	r3, [r7, #28]
}
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3720      	adds	r7, #32
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}

08011f76 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011f76:	b480      	push	{r7}
 8011f78:	b087      	sub	sp, #28
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	6078      	str	r0, [r7, #4]
 8011f7e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f8a:	3304      	adds	r3, #4
 8011f8c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	899b      	ldrh	r3, [r3, #12]
 8011f92:	461a      	mov	r2, r3
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f9a:	68fa      	ldr	r2, [r7, #12]
 8011f9c:	8952      	ldrh	r2, [r2, #10]
 8011f9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011fa2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	1d1a      	adds	r2, r3, #4
 8011fa8:	613a      	str	r2, [r7, #16]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d101      	bne.n	8011fb8 <clmt_clust+0x42>
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	e010      	b.n	8011fda <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011fb8:	697a      	ldr	r2, [r7, #20]
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d307      	bcc.n	8011fd0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011fc0:	697a      	ldr	r2, [r7, #20]
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	1ad3      	subs	r3, r2, r3
 8011fc6:	617b      	str	r3, [r7, #20]
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	3304      	adds	r3, #4
 8011fcc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011fce:	e7e9      	b.n	8011fa4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011fd0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011fd2:	693b      	ldr	r3, [r7, #16]
 8011fd4:	681a      	ldr	r2, [r3, #0]
 8011fd6:	697b      	ldr	r3, [r7, #20]
 8011fd8:	4413      	add	r3, r2
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	371c      	adds	r7, #28
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe4:	4770      	bx	lr

08011fe6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011fe6:	b580      	push	{r7, lr}
 8011fe8:	b086      	sub	sp, #24
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	6078      	str	r0, [r7, #4]
 8011fee:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011ffc:	d204      	bcs.n	8012008 <dir_sdi+0x22>
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	f003 031f 	and.w	r3, r3, #31
 8012004:	2b00      	cmp	r3, #0
 8012006:	d001      	beq.n	801200c <dir_sdi+0x26>
		return FR_INT_ERR;
 8012008:	2302      	movs	r3, #2
 801200a:	e071      	b.n	80120f0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	683a      	ldr	r2, [r7, #0]
 8012010:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	689b      	ldr	r3, [r3, #8]
 8012016:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d106      	bne.n	801202c <dir_sdi+0x46>
 801201e:	693b      	ldr	r3, [r7, #16]
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	2b02      	cmp	r3, #2
 8012024:	d902      	bls.n	801202c <dir_sdi+0x46>
		clst = fs->dirbase;
 8012026:	693b      	ldr	r3, [r7, #16]
 8012028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801202a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801202c:	697b      	ldr	r3, [r7, #20]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d10c      	bne.n	801204c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	095b      	lsrs	r3, r3, #5
 8012036:	693a      	ldr	r2, [r7, #16]
 8012038:	8912      	ldrh	r2, [r2, #8]
 801203a:	4293      	cmp	r3, r2
 801203c:	d301      	bcc.n	8012042 <dir_sdi+0x5c>
 801203e:	2302      	movs	r3, #2
 8012040:	e056      	b.n	80120f0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	61da      	str	r2, [r3, #28]
 801204a:	e02d      	b.n	80120a8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	895b      	ldrh	r3, [r3, #10]
 8012050:	461a      	mov	r2, r3
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	899b      	ldrh	r3, [r3, #12]
 8012056:	fb02 f303 	mul.w	r3, r2, r3
 801205a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801205c:	e019      	b.n	8012092 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6979      	ldr	r1, [r7, #20]
 8012062:	4618      	mov	r0, r3
 8012064:	f7ff fc9d 	bl	80119a2 <get_fat>
 8012068:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012070:	d101      	bne.n	8012076 <dir_sdi+0x90>
 8012072:	2301      	movs	r3, #1
 8012074:	e03c      	b.n	80120f0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	2b01      	cmp	r3, #1
 801207a:	d904      	bls.n	8012086 <dir_sdi+0xa0>
 801207c:	693b      	ldr	r3, [r7, #16]
 801207e:	69db      	ldr	r3, [r3, #28]
 8012080:	697a      	ldr	r2, [r7, #20]
 8012082:	429a      	cmp	r2, r3
 8012084:	d301      	bcc.n	801208a <dir_sdi+0xa4>
 8012086:	2302      	movs	r3, #2
 8012088:	e032      	b.n	80120f0 <dir_sdi+0x10a>
			ofs -= csz;
 801208a:	683a      	ldr	r2, [r7, #0]
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	1ad3      	subs	r3, r2, r3
 8012090:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012092:	683a      	ldr	r2, [r7, #0]
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	429a      	cmp	r2, r3
 8012098:	d2e1      	bcs.n	801205e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801209a:	6979      	ldr	r1, [r7, #20]
 801209c:	6938      	ldr	r0, [r7, #16]
 801209e:	f7ff fc61 	bl	8011964 <clust2sect>
 80120a2:	4602      	mov	r2, r0
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	697a      	ldr	r2, [r7, #20]
 80120ac:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	69db      	ldr	r3, [r3, #28]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d101      	bne.n	80120ba <dir_sdi+0xd4>
 80120b6:	2302      	movs	r3, #2
 80120b8:	e01a      	b.n	80120f0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	69da      	ldr	r2, [r3, #28]
 80120be:	693b      	ldr	r3, [r7, #16]
 80120c0:	899b      	ldrh	r3, [r3, #12]
 80120c2:	4619      	mov	r1, r3
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80120ca:	441a      	add	r2, r3
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80120d0:	693b      	ldr	r3, [r7, #16]
 80120d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80120d6:	693b      	ldr	r3, [r7, #16]
 80120d8:	899b      	ldrh	r3, [r3, #12]
 80120da:	461a      	mov	r2, r3
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	fbb3 f0f2 	udiv	r0, r3, r2
 80120e2:	fb00 f202 	mul.w	r2, r0, r2
 80120e6:	1a9b      	subs	r3, r3, r2
 80120e8:	18ca      	adds	r2, r1, r3
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80120ee:	2300      	movs	r3, #0
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3718      	adds	r7, #24
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b086      	sub	sp, #24
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	695b      	ldr	r3, [r3, #20]
 801210c:	3320      	adds	r3, #32
 801210e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	69db      	ldr	r3, [r3, #28]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d003      	beq.n	8012120 <dir_next+0x28>
 8012118:	68bb      	ldr	r3, [r7, #8]
 801211a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801211e:	d301      	bcc.n	8012124 <dir_next+0x2c>
 8012120:	2304      	movs	r3, #4
 8012122:	e0bb      	b.n	801229c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	899b      	ldrh	r3, [r3, #12]
 8012128:	461a      	mov	r2, r3
 801212a:	68bb      	ldr	r3, [r7, #8]
 801212c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012130:	fb01 f202 	mul.w	r2, r1, r2
 8012134:	1a9b      	subs	r3, r3, r2
 8012136:	2b00      	cmp	r3, #0
 8012138:	f040 809d 	bne.w	8012276 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	69db      	ldr	r3, [r3, #28]
 8012140:	1c5a      	adds	r2, r3, #1
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	699b      	ldr	r3, [r3, #24]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d10b      	bne.n	8012166 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	095b      	lsrs	r3, r3, #5
 8012152:	68fa      	ldr	r2, [r7, #12]
 8012154:	8912      	ldrh	r2, [r2, #8]
 8012156:	4293      	cmp	r3, r2
 8012158:	f0c0 808d 	bcc.w	8012276 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2200      	movs	r2, #0
 8012160:	61da      	str	r2, [r3, #28]
 8012162:	2304      	movs	r3, #4
 8012164:	e09a      	b.n	801229c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	899b      	ldrh	r3, [r3, #12]
 801216a:	461a      	mov	r2, r3
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012172:	68fa      	ldr	r2, [r7, #12]
 8012174:	8952      	ldrh	r2, [r2, #10]
 8012176:	3a01      	subs	r2, #1
 8012178:	4013      	ands	r3, r2
 801217a:	2b00      	cmp	r3, #0
 801217c:	d17b      	bne.n	8012276 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801217e:	687a      	ldr	r2, [r7, #4]
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	699b      	ldr	r3, [r3, #24]
 8012184:	4619      	mov	r1, r3
 8012186:	4610      	mov	r0, r2
 8012188:	f7ff fc0b 	bl	80119a2 <get_fat>
 801218c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	2b01      	cmp	r3, #1
 8012192:	d801      	bhi.n	8012198 <dir_next+0xa0>
 8012194:	2302      	movs	r3, #2
 8012196:	e081      	b.n	801229c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012198:	697b      	ldr	r3, [r7, #20]
 801219a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801219e:	d101      	bne.n	80121a4 <dir_next+0xac>
 80121a0:	2301      	movs	r3, #1
 80121a2:	e07b      	b.n	801229c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	69db      	ldr	r3, [r3, #28]
 80121a8:	697a      	ldr	r2, [r7, #20]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d359      	bcc.n	8012262 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d104      	bne.n	80121be <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2200      	movs	r2, #0
 80121b8:	61da      	str	r2, [r3, #28]
 80121ba:	2304      	movs	r3, #4
 80121bc:	e06e      	b.n	801229c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80121be:	687a      	ldr	r2, [r7, #4]
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	699b      	ldr	r3, [r3, #24]
 80121c4:	4619      	mov	r1, r3
 80121c6:	4610      	mov	r0, r2
 80121c8:	f7ff fe3d 	bl	8011e46 <create_chain>
 80121cc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80121ce:	697b      	ldr	r3, [r7, #20]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d101      	bne.n	80121d8 <dir_next+0xe0>
 80121d4:	2307      	movs	r3, #7
 80121d6:	e061      	b.n	801229c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	2b01      	cmp	r3, #1
 80121dc:	d101      	bne.n	80121e2 <dir_next+0xea>
 80121de:	2302      	movs	r3, #2
 80121e0:	e05c      	b.n	801229c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80121e2:	697b      	ldr	r3, [r7, #20]
 80121e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121e8:	d101      	bne.n	80121ee <dir_next+0xf6>
 80121ea:	2301      	movs	r3, #1
 80121ec:	e056      	b.n	801229c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80121ee:	68f8      	ldr	r0, [r7, #12]
 80121f0:	f7ff fad6 	bl	80117a0 <sync_window>
 80121f4:	4603      	mov	r3, r0
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d001      	beq.n	80121fe <dir_next+0x106>
 80121fa:	2301      	movs	r3, #1
 80121fc:	e04e      	b.n	801229c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	899b      	ldrh	r3, [r3, #12]
 8012208:	461a      	mov	r2, r3
 801220a:	2100      	movs	r1, #0
 801220c:	f7ff f8ff 	bl	801140e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012210:	2300      	movs	r3, #0
 8012212:	613b      	str	r3, [r7, #16]
 8012214:	6979      	ldr	r1, [r7, #20]
 8012216:	68f8      	ldr	r0, [r7, #12]
 8012218:	f7ff fba4 	bl	8011964 <clust2sect>
 801221c:	4602      	mov	r2, r0
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	635a      	str	r2, [r3, #52]	@ 0x34
 8012222:	e012      	b.n	801224a <dir_next+0x152>
						fs->wflag = 1;
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2201      	movs	r2, #1
 8012228:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801222a:	68f8      	ldr	r0, [r7, #12]
 801222c:	f7ff fab8 	bl	80117a0 <sync_window>
 8012230:	4603      	mov	r3, r0
 8012232:	2b00      	cmp	r3, #0
 8012234:	d001      	beq.n	801223a <dir_next+0x142>
 8012236:	2301      	movs	r3, #1
 8012238:	e030      	b.n	801229c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	3301      	adds	r3, #1
 801223e:	613b      	str	r3, [r7, #16]
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012244:	1c5a      	adds	r2, r3, #1
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	635a      	str	r2, [r3, #52]	@ 0x34
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	895b      	ldrh	r3, [r3, #10]
 801224e:	461a      	mov	r2, r3
 8012250:	693b      	ldr	r3, [r7, #16]
 8012252:	4293      	cmp	r3, r2
 8012254:	d3e6      	bcc.n	8012224 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801225a:	693b      	ldr	r3, [r7, #16]
 801225c:	1ad2      	subs	r2, r2, r3
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	697a      	ldr	r2, [r7, #20]
 8012266:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012268:	6979      	ldr	r1, [r7, #20]
 801226a:	68f8      	ldr	r0, [r7, #12]
 801226c:	f7ff fb7a 	bl	8011964 <clust2sect>
 8012270:	4602      	mov	r2, r0
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	68ba      	ldr	r2, [r7, #8]
 801227a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	899b      	ldrh	r3, [r3, #12]
 8012286:	461a      	mov	r2, r3
 8012288:	68bb      	ldr	r3, [r7, #8]
 801228a:	fbb3 f0f2 	udiv	r0, r3, r2
 801228e:	fb00 f202 	mul.w	r2, r0, r2
 8012292:	1a9b      	subs	r3, r3, r2
 8012294:	18ca      	adds	r2, r1, r3
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801229a:	2300      	movs	r3, #0
}
 801229c:	4618      	mov	r0, r3
 801229e:	3718      	adds	r7, #24
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}

080122a4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b086      	sub	sp, #24
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80122b4:	2100      	movs	r1, #0
 80122b6:	6878      	ldr	r0, [r7, #4]
 80122b8:	f7ff fe95 	bl	8011fe6 <dir_sdi>
 80122bc:	4603      	mov	r3, r0
 80122be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80122c0:	7dfb      	ldrb	r3, [r7, #23]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d12b      	bne.n	801231e <dir_alloc+0x7a>
		n = 0;
 80122c6:	2300      	movs	r3, #0
 80122c8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	69db      	ldr	r3, [r3, #28]
 80122ce:	4619      	mov	r1, r3
 80122d0:	68f8      	ldr	r0, [r7, #12]
 80122d2:	f7ff faa9 	bl	8011828 <move_window>
 80122d6:	4603      	mov	r3, r0
 80122d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80122da:	7dfb      	ldrb	r3, [r7, #23]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d11d      	bne.n	801231c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6a1b      	ldr	r3, [r3, #32]
 80122e4:	781b      	ldrb	r3, [r3, #0]
 80122e6:	2be5      	cmp	r3, #229	@ 0xe5
 80122e8:	d004      	beq.n	80122f4 <dir_alloc+0x50>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	6a1b      	ldr	r3, [r3, #32]
 80122ee:	781b      	ldrb	r3, [r3, #0]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d107      	bne.n	8012304 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	3301      	adds	r3, #1
 80122f8:	613b      	str	r3, [r7, #16]
 80122fa:	693a      	ldr	r2, [r7, #16]
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	429a      	cmp	r2, r3
 8012300:	d102      	bne.n	8012308 <dir_alloc+0x64>
 8012302:	e00c      	b.n	801231e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012304:	2300      	movs	r3, #0
 8012306:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012308:	2101      	movs	r1, #1
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f7ff fef4 	bl	80120f8 <dir_next>
 8012310:	4603      	mov	r3, r0
 8012312:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012314:	7dfb      	ldrb	r3, [r7, #23]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d0d7      	beq.n	80122ca <dir_alloc+0x26>
 801231a:	e000      	b.n	801231e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801231c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801231e:	7dfb      	ldrb	r3, [r7, #23]
 8012320:	2b04      	cmp	r3, #4
 8012322:	d101      	bne.n	8012328 <dir_alloc+0x84>
 8012324:	2307      	movs	r3, #7
 8012326:	75fb      	strb	r3, [r7, #23]
	return res;
 8012328:	7dfb      	ldrb	r3, [r7, #23]
}
 801232a:	4618      	mov	r0, r3
 801232c:	3718      	adds	r7, #24
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}

08012332 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012332:	b580      	push	{r7, lr}
 8012334:	b084      	sub	sp, #16
 8012336:	af00      	add	r7, sp, #0
 8012338:	6078      	str	r0, [r7, #4]
 801233a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	331a      	adds	r3, #26
 8012340:	4618      	mov	r0, r3
 8012342:	f7fe ffc1 	bl	80112c8 <ld_word>
 8012346:	4603      	mov	r3, r0
 8012348:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	781b      	ldrb	r3, [r3, #0]
 801234e:	2b03      	cmp	r3, #3
 8012350:	d109      	bne.n	8012366 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	3314      	adds	r3, #20
 8012356:	4618      	mov	r0, r3
 8012358:	f7fe ffb6 	bl	80112c8 <ld_word>
 801235c:	4603      	mov	r3, r0
 801235e:	041b      	lsls	r3, r3, #16
 8012360:	68fa      	ldr	r2, [r7, #12]
 8012362:	4313      	orrs	r3, r2
 8012364:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012366:	68fb      	ldr	r3, [r7, #12]
}
 8012368:	4618      	mov	r0, r3
 801236a:	3710      	adds	r7, #16
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}

08012370 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b084      	sub	sp, #16
 8012374:	af00      	add	r7, sp, #0
 8012376:	60f8      	str	r0, [r7, #12]
 8012378:	60b9      	str	r1, [r7, #8]
 801237a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	331a      	adds	r3, #26
 8012380:	687a      	ldr	r2, [r7, #4]
 8012382:	b292      	uxth	r2, r2
 8012384:	4611      	mov	r1, r2
 8012386:	4618      	mov	r0, r3
 8012388:	f7fe ffd9 	bl	801133e <st_word>
	if (fs->fs_type == FS_FAT32) {
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	781b      	ldrb	r3, [r3, #0]
 8012390:	2b03      	cmp	r3, #3
 8012392:	d109      	bne.n	80123a8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	f103 0214 	add.w	r2, r3, #20
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	0c1b      	lsrs	r3, r3, #16
 801239e:	b29b      	uxth	r3, r3
 80123a0:	4619      	mov	r1, r3
 80123a2:	4610      	mov	r0, r2
 80123a4:	f7fe ffcb 	bl	801133e <st_word>
	}
}
 80123a8:	bf00      	nop
 80123aa:	3710      	adds	r7, #16
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}

080123b0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80123b0:	b590      	push	{r4, r7, lr}
 80123b2:	b087      	sub	sp, #28
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	331a      	adds	r3, #26
 80123be:	4618      	mov	r0, r3
 80123c0:	f7fe ff82 	bl	80112c8 <ld_word>
 80123c4:	4603      	mov	r3, r0
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d001      	beq.n	80123ce <cmp_lfn+0x1e>
 80123ca:	2300      	movs	r3, #0
 80123cc:	e059      	b.n	8012482 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80123d6:	1e5a      	subs	r2, r3, #1
 80123d8:	4613      	mov	r3, r2
 80123da:	005b      	lsls	r3, r3, #1
 80123dc:	4413      	add	r3, r2
 80123de:	009b      	lsls	r3, r3, #2
 80123e0:	4413      	add	r3, r2
 80123e2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80123e4:	2301      	movs	r3, #1
 80123e6:	81fb      	strh	r3, [r7, #14]
 80123e8:	2300      	movs	r3, #0
 80123ea:	613b      	str	r3, [r7, #16]
 80123ec:	e033      	b.n	8012456 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80123ee:	4a27      	ldr	r2, [pc, #156]	@ (801248c <cmp_lfn+0xdc>)
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	4413      	add	r3, r2
 80123f4:	781b      	ldrb	r3, [r3, #0]
 80123f6:	461a      	mov	r2, r3
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	4413      	add	r3, r2
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7fe ff63 	bl	80112c8 <ld_word>
 8012402:	4603      	mov	r3, r0
 8012404:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012406:	89fb      	ldrh	r3, [r7, #14]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d01a      	beq.n	8012442 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	2bfe      	cmp	r3, #254	@ 0xfe
 8012410:	d812      	bhi.n	8012438 <cmp_lfn+0x88>
 8012412:	89bb      	ldrh	r3, [r7, #12]
 8012414:	4618      	mov	r0, r3
 8012416:	f001 fec1 	bl	801419c <ff_wtoupper>
 801241a:	4603      	mov	r3, r0
 801241c:	461c      	mov	r4, r3
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	1c5a      	adds	r2, r3, #1
 8012422:	617a      	str	r2, [r7, #20]
 8012424:	005b      	lsls	r3, r3, #1
 8012426:	687a      	ldr	r2, [r7, #4]
 8012428:	4413      	add	r3, r2
 801242a:	881b      	ldrh	r3, [r3, #0]
 801242c:	4618      	mov	r0, r3
 801242e:	f001 feb5 	bl	801419c <ff_wtoupper>
 8012432:	4603      	mov	r3, r0
 8012434:	429c      	cmp	r4, r3
 8012436:	d001      	beq.n	801243c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8012438:	2300      	movs	r3, #0
 801243a:	e022      	b.n	8012482 <cmp_lfn+0xd2>
			}
			wc = uc;
 801243c:	89bb      	ldrh	r3, [r7, #12]
 801243e:	81fb      	strh	r3, [r7, #14]
 8012440:	e006      	b.n	8012450 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012442:	89bb      	ldrh	r3, [r7, #12]
 8012444:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012448:	4293      	cmp	r3, r2
 801244a:	d001      	beq.n	8012450 <cmp_lfn+0xa0>
 801244c:	2300      	movs	r3, #0
 801244e:	e018      	b.n	8012482 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012450:	693b      	ldr	r3, [r7, #16]
 8012452:	3301      	adds	r3, #1
 8012454:	613b      	str	r3, [r7, #16]
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	2b0c      	cmp	r3, #12
 801245a:	d9c8      	bls.n	80123ee <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	781b      	ldrb	r3, [r3, #0]
 8012460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012464:	2b00      	cmp	r3, #0
 8012466:	d00b      	beq.n	8012480 <cmp_lfn+0xd0>
 8012468:	89fb      	ldrh	r3, [r7, #14]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d008      	beq.n	8012480 <cmp_lfn+0xd0>
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	005b      	lsls	r3, r3, #1
 8012472:	687a      	ldr	r2, [r7, #4]
 8012474:	4413      	add	r3, r2
 8012476:	881b      	ldrh	r3, [r3, #0]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d001      	beq.n	8012480 <cmp_lfn+0xd0>
 801247c:	2300      	movs	r3, #0
 801247e:	e000      	b.n	8012482 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8012480:	2301      	movs	r3, #1
}
 8012482:	4618      	mov	r0, r3
 8012484:	371c      	adds	r7, #28
 8012486:	46bd      	mov	sp, r7
 8012488:	bd90      	pop	{r4, r7, pc}
 801248a:	bf00      	nop
 801248c:	08016d80 	.word	0x08016d80

08012490 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b088      	sub	sp, #32
 8012494:	af00      	add	r7, sp, #0
 8012496:	60f8      	str	r0, [r7, #12]
 8012498:	60b9      	str	r1, [r7, #8]
 801249a:	4611      	mov	r1, r2
 801249c:	461a      	mov	r2, r3
 801249e:	460b      	mov	r3, r1
 80124a0:	71fb      	strb	r3, [r7, #7]
 80124a2:	4613      	mov	r3, r2
 80124a4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	330d      	adds	r3, #13
 80124aa:	79ba      	ldrb	r2, [r7, #6]
 80124ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	330b      	adds	r3, #11
 80124b2:	220f      	movs	r2, #15
 80124b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80124b6:	68bb      	ldr	r3, [r7, #8]
 80124b8:	330c      	adds	r3, #12
 80124ba:	2200      	movs	r2, #0
 80124bc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80124be:	68bb      	ldr	r3, [r7, #8]
 80124c0:	331a      	adds	r3, #26
 80124c2:	2100      	movs	r1, #0
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7fe ff3a 	bl	801133e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80124ca:	79fb      	ldrb	r3, [r7, #7]
 80124cc:	1e5a      	subs	r2, r3, #1
 80124ce:	4613      	mov	r3, r2
 80124d0:	005b      	lsls	r3, r3, #1
 80124d2:	4413      	add	r3, r2
 80124d4:	009b      	lsls	r3, r3, #2
 80124d6:	4413      	add	r3, r2
 80124d8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80124da:	2300      	movs	r3, #0
 80124dc:	82fb      	strh	r3, [r7, #22]
 80124de:	2300      	movs	r3, #0
 80124e0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80124e2:	8afb      	ldrh	r3, [r7, #22]
 80124e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80124e8:	4293      	cmp	r3, r2
 80124ea:	d007      	beq.n	80124fc <put_lfn+0x6c>
 80124ec:	69fb      	ldr	r3, [r7, #28]
 80124ee:	1c5a      	adds	r2, r3, #1
 80124f0:	61fa      	str	r2, [r7, #28]
 80124f2:	005b      	lsls	r3, r3, #1
 80124f4:	68fa      	ldr	r2, [r7, #12]
 80124f6:	4413      	add	r3, r2
 80124f8:	881b      	ldrh	r3, [r3, #0]
 80124fa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80124fc:	4a17      	ldr	r2, [pc, #92]	@ (801255c <put_lfn+0xcc>)
 80124fe:	69bb      	ldr	r3, [r7, #24]
 8012500:	4413      	add	r3, r2
 8012502:	781b      	ldrb	r3, [r3, #0]
 8012504:	461a      	mov	r2, r3
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	4413      	add	r3, r2
 801250a:	8afa      	ldrh	r2, [r7, #22]
 801250c:	4611      	mov	r1, r2
 801250e:	4618      	mov	r0, r3
 8012510:	f7fe ff15 	bl	801133e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012514:	8afb      	ldrh	r3, [r7, #22]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d102      	bne.n	8012520 <put_lfn+0x90>
 801251a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801251e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012520:	69bb      	ldr	r3, [r7, #24]
 8012522:	3301      	adds	r3, #1
 8012524:	61bb      	str	r3, [r7, #24]
 8012526:	69bb      	ldr	r3, [r7, #24]
 8012528:	2b0c      	cmp	r3, #12
 801252a:	d9da      	bls.n	80124e2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801252c:	8afb      	ldrh	r3, [r7, #22]
 801252e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012532:	4293      	cmp	r3, r2
 8012534:	d006      	beq.n	8012544 <put_lfn+0xb4>
 8012536:	69fb      	ldr	r3, [r7, #28]
 8012538:	005b      	lsls	r3, r3, #1
 801253a:	68fa      	ldr	r2, [r7, #12]
 801253c:	4413      	add	r3, r2
 801253e:	881b      	ldrh	r3, [r3, #0]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d103      	bne.n	801254c <put_lfn+0xbc>
 8012544:	79fb      	ldrb	r3, [r7, #7]
 8012546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801254a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	79fa      	ldrb	r2, [r7, #7]
 8012550:	701a      	strb	r2, [r3, #0]
}
 8012552:	bf00      	nop
 8012554:	3720      	adds	r7, #32
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}
 801255a:	bf00      	nop
 801255c:	08016d80 	.word	0x08016d80

08012560 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b08c      	sub	sp, #48	@ 0x30
 8012564:	af00      	add	r7, sp, #0
 8012566:	60f8      	str	r0, [r7, #12]
 8012568:	60b9      	str	r1, [r7, #8]
 801256a:	607a      	str	r2, [r7, #4]
 801256c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801256e:	220b      	movs	r2, #11
 8012570:	68b9      	ldr	r1, [r7, #8]
 8012572:	68f8      	ldr	r0, [r7, #12]
 8012574:	f7fe ff2a 	bl	80113cc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	2b05      	cmp	r3, #5
 801257c:	d929      	bls.n	80125d2 <gen_numname+0x72>
		sr = seq;
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8012582:	e020      	b.n	80125c6 <gen_numname+0x66>
			wc = *lfn++;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	1c9a      	adds	r2, r3, #2
 8012588:	607a      	str	r2, [r7, #4]
 801258a:	881b      	ldrh	r3, [r3, #0]
 801258c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801258e:	2300      	movs	r3, #0
 8012590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012592:	e015      	b.n	80125c0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8012594:	69fb      	ldr	r3, [r7, #28]
 8012596:	005a      	lsls	r2, r3, #1
 8012598:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801259a:	f003 0301 	and.w	r3, r3, #1
 801259e:	4413      	add	r3, r2
 80125a0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80125a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80125a4:	085b      	lsrs	r3, r3, #1
 80125a6:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80125a8:	69fb      	ldr	r3, [r7, #28]
 80125aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d003      	beq.n	80125ba <gen_numname+0x5a>
 80125b2:	69fa      	ldr	r2, [r7, #28]
 80125b4:	4b30      	ldr	r3, [pc, #192]	@ (8012678 <gen_numname+0x118>)
 80125b6:	4053      	eors	r3, r2
 80125b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80125ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125bc:	3301      	adds	r3, #1
 80125be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80125c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125c2:	2b0f      	cmp	r3, #15
 80125c4:	d9e6      	bls.n	8012594 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	881b      	ldrh	r3, [r3, #0]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d1da      	bne.n	8012584 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80125ce:	69fb      	ldr	r3, [r7, #28]
 80125d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80125d2:	2307      	movs	r3, #7
 80125d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80125d6:	683b      	ldr	r3, [r7, #0]
 80125d8:	b2db      	uxtb	r3, r3
 80125da:	f003 030f 	and.w	r3, r3, #15
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	3330      	adds	r3, #48	@ 0x30
 80125e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80125e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80125ea:	2b39      	cmp	r3, #57	@ 0x39
 80125ec:	d904      	bls.n	80125f8 <gen_numname+0x98>
 80125ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80125f2:	3307      	adds	r3, #7
 80125f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80125f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125fa:	1e5a      	subs	r2, r3, #1
 80125fc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80125fe:	3330      	adds	r3, #48	@ 0x30
 8012600:	443b      	add	r3, r7
 8012602:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8012606:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	091b      	lsrs	r3, r3, #4
 801260e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d1df      	bne.n	80125d6 <gen_numname+0x76>
	ns[i] = '~';
 8012616:	f107 0214 	add.w	r2, r7, #20
 801261a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801261c:	4413      	add	r3, r2
 801261e:	227e      	movs	r2, #126	@ 0x7e
 8012620:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012622:	2300      	movs	r3, #0
 8012624:	627b      	str	r3, [r7, #36]	@ 0x24
 8012626:	e002      	b.n	801262e <gen_numname+0xce>
 8012628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801262a:	3301      	adds	r3, #1
 801262c:	627b      	str	r3, [r7, #36]	@ 0x24
 801262e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012632:	429a      	cmp	r2, r3
 8012634:	d205      	bcs.n	8012642 <gen_numname+0xe2>
 8012636:	68fa      	ldr	r2, [r7, #12]
 8012638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801263a:	4413      	add	r3, r2
 801263c:	781b      	ldrb	r3, [r3, #0]
 801263e:	2b20      	cmp	r3, #32
 8012640:	d1f2      	bne.n	8012628 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012644:	2b07      	cmp	r3, #7
 8012646:	d807      	bhi.n	8012658 <gen_numname+0xf8>
 8012648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801264a:	1c5a      	adds	r2, r3, #1
 801264c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801264e:	3330      	adds	r3, #48	@ 0x30
 8012650:	443b      	add	r3, r7
 8012652:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8012656:	e000      	b.n	801265a <gen_numname+0xfa>
 8012658:	2120      	movs	r1, #32
 801265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801265c:	1c5a      	adds	r2, r3, #1
 801265e:	627a      	str	r2, [r7, #36]	@ 0x24
 8012660:	68fa      	ldr	r2, [r7, #12]
 8012662:	4413      	add	r3, r2
 8012664:	460a      	mov	r2, r1
 8012666:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8012668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801266a:	2b07      	cmp	r3, #7
 801266c:	d9e9      	bls.n	8012642 <gen_numname+0xe2>
}
 801266e:	bf00      	nop
 8012670:	bf00      	nop
 8012672:	3730      	adds	r7, #48	@ 0x30
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}
 8012678:	00011021 	.word	0x00011021

0801267c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801267c:	b480      	push	{r7}
 801267e:	b085      	sub	sp, #20
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8012684:	2300      	movs	r3, #0
 8012686:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8012688:	230b      	movs	r3, #11
 801268a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801268c:	7bfb      	ldrb	r3, [r7, #15]
 801268e:	b2da      	uxtb	r2, r3
 8012690:	0852      	lsrs	r2, r2, #1
 8012692:	01db      	lsls	r3, r3, #7
 8012694:	4313      	orrs	r3, r2
 8012696:	b2da      	uxtb	r2, r3
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	1c59      	adds	r1, r3, #1
 801269c:	6079      	str	r1, [r7, #4]
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	4413      	add	r3, r2
 80126a2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	3b01      	subs	r3, #1
 80126a8:	60bb      	str	r3, [r7, #8]
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d1ed      	bne.n	801268c <sum_sfn+0x10>
	return sum;
 80126b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3714      	adds	r7, #20
 80126b6:	46bd      	mov	sp, r7
 80126b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126bc:	4770      	bx	lr

080126be <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80126be:	b580      	push	{r7, lr}
 80126c0:	b086      	sub	sp, #24
 80126c2:	af00      	add	r7, sp, #0
 80126c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80126cc:	2100      	movs	r1, #0
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f7ff fc89 	bl	8011fe6 <dir_sdi>
 80126d4:	4603      	mov	r3, r0
 80126d6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80126d8:	7dfb      	ldrb	r3, [r7, #23]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d001      	beq.n	80126e2 <dir_find+0x24>
 80126de:	7dfb      	ldrb	r3, [r7, #23]
 80126e0:	e0a9      	b.n	8012836 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80126e2:	23ff      	movs	r3, #255	@ 0xff
 80126e4:	753b      	strb	r3, [r7, #20]
 80126e6:	7d3b      	ldrb	r3, [r7, #20]
 80126e8:	757b      	strb	r3, [r7, #21]
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f04f 32ff 	mov.w	r2, #4294967295
 80126f0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	69db      	ldr	r3, [r3, #28]
 80126f6:	4619      	mov	r1, r3
 80126f8:	6938      	ldr	r0, [r7, #16]
 80126fa:	f7ff f895 	bl	8011828 <move_window>
 80126fe:	4603      	mov	r3, r0
 8012700:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012702:	7dfb      	ldrb	r3, [r7, #23]
 8012704:	2b00      	cmp	r3, #0
 8012706:	f040 8090 	bne.w	801282a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6a1b      	ldr	r3, [r3, #32]
 801270e:	781b      	ldrb	r3, [r3, #0]
 8012710:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012712:	7dbb      	ldrb	r3, [r7, #22]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d102      	bne.n	801271e <dir_find+0x60>
 8012718:	2304      	movs	r3, #4
 801271a:	75fb      	strb	r3, [r7, #23]
 801271c:	e08a      	b.n	8012834 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6a1b      	ldr	r3, [r3, #32]
 8012722:	330b      	adds	r3, #11
 8012724:	781b      	ldrb	r3, [r3, #0]
 8012726:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801272a:	73fb      	strb	r3, [r7, #15]
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	7bfa      	ldrb	r2, [r7, #15]
 8012730:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8012732:	7dbb      	ldrb	r3, [r7, #22]
 8012734:	2be5      	cmp	r3, #229	@ 0xe5
 8012736:	d007      	beq.n	8012748 <dir_find+0x8a>
 8012738:	7bfb      	ldrb	r3, [r7, #15]
 801273a:	f003 0308 	and.w	r3, r3, #8
 801273e:	2b00      	cmp	r3, #0
 8012740:	d009      	beq.n	8012756 <dir_find+0x98>
 8012742:	7bfb      	ldrb	r3, [r7, #15]
 8012744:	2b0f      	cmp	r3, #15
 8012746:	d006      	beq.n	8012756 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012748:	23ff      	movs	r3, #255	@ 0xff
 801274a:	757b      	strb	r3, [r7, #21]
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f04f 32ff 	mov.w	r2, #4294967295
 8012752:	631a      	str	r2, [r3, #48]	@ 0x30
 8012754:	e05e      	b.n	8012814 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012756:	7bfb      	ldrb	r3, [r7, #15]
 8012758:	2b0f      	cmp	r3, #15
 801275a:	d136      	bne.n	80127ca <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012766:	2b00      	cmp	r3, #0
 8012768:	d154      	bne.n	8012814 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801276a:	7dbb      	ldrb	r3, [r7, #22]
 801276c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012770:	2b00      	cmp	r3, #0
 8012772:	d00d      	beq.n	8012790 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	6a1b      	ldr	r3, [r3, #32]
 8012778:	7b5b      	ldrb	r3, [r3, #13]
 801277a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801277c:	7dbb      	ldrb	r3, [r7, #22]
 801277e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012782:	75bb      	strb	r3, [r7, #22]
 8012784:	7dbb      	ldrb	r3, [r7, #22]
 8012786:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	695a      	ldr	r2, [r3, #20]
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012790:	7dba      	ldrb	r2, [r7, #22]
 8012792:	7d7b      	ldrb	r3, [r7, #21]
 8012794:	429a      	cmp	r2, r3
 8012796:	d115      	bne.n	80127c4 <dir_find+0x106>
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	6a1b      	ldr	r3, [r3, #32]
 801279c:	330d      	adds	r3, #13
 801279e:	781b      	ldrb	r3, [r3, #0]
 80127a0:	7d3a      	ldrb	r2, [r7, #20]
 80127a2:	429a      	cmp	r2, r3
 80127a4:	d10e      	bne.n	80127c4 <dir_find+0x106>
 80127a6:	693b      	ldr	r3, [r7, #16]
 80127a8:	691a      	ldr	r2, [r3, #16]
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	6a1b      	ldr	r3, [r3, #32]
 80127ae:	4619      	mov	r1, r3
 80127b0:	4610      	mov	r0, r2
 80127b2:	f7ff fdfd 	bl	80123b0 <cmp_lfn>
 80127b6:	4603      	mov	r3, r0
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d003      	beq.n	80127c4 <dir_find+0x106>
 80127bc:	7d7b      	ldrb	r3, [r7, #21]
 80127be:	3b01      	subs	r3, #1
 80127c0:	b2db      	uxtb	r3, r3
 80127c2:	e000      	b.n	80127c6 <dir_find+0x108>
 80127c4:	23ff      	movs	r3, #255	@ 0xff
 80127c6:	757b      	strb	r3, [r7, #21]
 80127c8:	e024      	b.n	8012814 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80127ca:	7d7b      	ldrb	r3, [r7, #21]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d109      	bne.n	80127e4 <dir_find+0x126>
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6a1b      	ldr	r3, [r3, #32]
 80127d4:	4618      	mov	r0, r3
 80127d6:	f7ff ff51 	bl	801267c <sum_sfn>
 80127da:	4603      	mov	r3, r0
 80127dc:	461a      	mov	r2, r3
 80127de:	7d3b      	ldrb	r3, [r7, #20]
 80127e0:	4293      	cmp	r3, r2
 80127e2:	d024      	beq.n	801282e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80127ea:	f003 0301 	and.w	r3, r3, #1
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d10a      	bne.n	8012808 <dir_find+0x14a>
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	6a18      	ldr	r0, [r3, #32]
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	3324      	adds	r3, #36	@ 0x24
 80127fa:	220b      	movs	r2, #11
 80127fc:	4619      	mov	r1, r3
 80127fe:	f7fe fe21 	bl	8011444 <mem_cmp>
 8012802:	4603      	mov	r3, r0
 8012804:	2b00      	cmp	r3, #0
 8012806:	d014      	beq.n	8012832 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012808:	23ff      	movs	r3, #255	@ 0xff
 801280a:	757b      	strb	r3, [r7, #21]
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f04f 32ff 	mov.w	r2, #4294967295
 8012812:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012814:	2100      	movs	r1, #0
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f7ff fc6e 	bl	80120f8 <dir_next>
 801281c:	4603      	mov	r3, r0
 801281e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012820:	7dfb      	ldrb	r3, [r7, #23]
 8012822:	2b00      	cmp	r3, #0
 8012824:	f43f af65 	beq.w	80126f2 <dir_find+0x34>
 8012828:	e004      	b.n	8012834 <dir_find+0x176>
		if (res != FR_OK) break;
 801282a:	bf00      	nop
 801282c:	e002      	b.n	8012834 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801282e:	bf00      	nop
 8012830:	e000      	b.n	8012834 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012832:	bf00      	nop

	return res;
 8012834:	7dfb      	ldrb	r3, [r7, #23]
}
 8012836:	4618      	mov	r0, r3
 8012838:	3718      	adds	r7, #24
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}
	...

08012840 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b08c      	sub	sp, #48	@ 0x30
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012854:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8012858:	2b00      	cmp	r3, #0
 801285a:	d001      	beq.n	8012860 <dir_register+0x20>
 801285c:	2306      	movs	r3, #6
 801285e:	e0e0      	b.n	8012a22 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012860:	2300      	movs	r3, #0
 8012862:	627b      	str	r3, [r7, #36]	@ 0x24
 8012864:	e002      	b.n	801286c <dir_register+0x2c>
 8012866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012868:	3301      	adds	r3, #1
 801286a:	627b      	str	r3, [r7, #36]	@ 0x24
 801286c:	69fb      	ldr	r3, [r7, #28]
 801286e:	691a      	ldr	r2, [r3, #16]
 8012870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012872:	005b      	lsls	r3, r3, #1
 8012874:	4413      	add	r3, r2
 8012876:	881b      	ldrh	r3, [r3, #0]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d1f4      	bne.n	8012866 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8012882:	f107 030c 	add.w	r3, r7, #12
 8012886:	220c      	movs	r2, #12
 8012888:	4618      	mov	r0, r3
 801288a:	f7fe fd9f 	bl	80113cc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801288e:	7dfb      	ldrb	r3, [r7, #23]
 8012890:	f003 0301 	and.w	r3, r3, #1
 8012894:	2b00      	cmp	r3, #0
 8012896:	d032      	beq.n	80128fe <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2240      	movs	r2, #64	@ 0x40
 801289c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80128a0:	2301      	movs	r3, #1
 80128a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80128a4:	e016      	b.n	80128d4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80128ac:	69fb      	ldr	r3, [r7, #28]
 80128ae:	691a      	ldr	r2, [r3, #16]
 80128b0:	f107 010c 	add.w	r1, r7, #12
 80128b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128b6:	f7ff fe53 	bl	8012560 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f7ff feff 	bl	80126be <dir_find>
 80128c0:	4603      	mov	r3, r0
 80128c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80128c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d106      	bne.n	80128dc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80128ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128d0:	3301      	adds	r3, #1
 80128d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80128d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128d6:	2b63      	cmp	r3, #99	@ 0x63
 80128d8:	d9e5      	bls.n	80128a6 <dir_register+0x66>
 80128da:	e000      	b.n	80128de <dir_register+0x9e>
			if (res != FR_OK) break;
 80128dc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80128de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128e0:	2b64      	cmp	r3, #100	@ 0x64
 80128e2:	d101      	bne.n	80128e8 <dir_register+0xa8>
 80128e4:	2307      	movs	r3, #7
 80128e6:	e09c      	b.n	8012a22 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80128e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80128ec:	2b04      	cmp	r3, #4
 80128ee:	d002      	beq.n	80128f6 <dir_register+0xb6>
 80128f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80128f4:	e095      	b.n	8012a22 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80128f6:	7dfa      	ldrb	r2, [r7, #23]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80128fe:	7dfb      	ldrb	r3, [r7, #23]
 8012900:	f003 0302 	and.w	r3, r3, #2
 8012904:	2b00      	cmp	r3, #0
 8012906:	d007      	beq.n	8012918 <dir_register+0xd8>
 8012908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801290a:	330c      	adds	r3, #12
 801290c:	4a47      	ldr	r2, [pc, #284]	@ (8012a2c <dir_register+0x1ec>)
 801290e:	fba2 2303 	umull	r2, r3, r2, r3
 8012912:	089b      	lsrs	r3, r3, #2
 8012914:	3301      	adds	r3, #1
 8012916:	e000      	b.n	801291a <dir_register+0xda>
 8012918:	2301      	movs	r3, #1
 801291a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801291c:	6a39      	ldr	r1, [r7, #32]
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f7ff fcc0 	bl	80122a4 <dir_alloc>
 8012924:	4603      	mov	r3, r0
 8012926:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801292a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801292e:	2b00      	cmp	r3, #0
 8012930:	d148      	bne.n	80129c4 <dir_register+0x184>
 8012932:	6a3b      	ldr	r3, [r7, #32]
 8012934:	3b01      	subs	r3, #1
 8012936:	623b      	str	r3, [r7, #32]
 8012938:	6a3b      	ldr	r3, [r7, #32]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d042      	beq.n	80129c4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	695a      	ldr	r2, [r3, #20]
 8012942:	6a3b      	ldr	r3, [r7, #32]
 8012944:	015b      	lsls	r3, r3, #5
 8012946:	1ad3      	subs	r3, r2, r3
 8012948:	4619      	mov	r1, r3
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f7ff fb4b 	bl	8011fe6 <dir_sdi>
 8012950:	4603      	mov	r3, r0
 8012952:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8012956:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801295a:	2b00      	cmp	r3, #0
 801295c:	d132      	bne.n	80129c4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	3324      	adds	r3, #36	@ 0x24
 8012962:	4618      	mov	r0, r3
 8012964:	f7ff fe8a 	bl	801267c <sum_sfn>
 8012968:	4603      	mov	r3, r0
 801296a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	69db      	ldr	r3, [r3, #28]
 8012970:	4619      	mov	r1, r3
 8012972:	69f8      	ldr	r0, [r7, #28]
 8012974:	f7fe ff58 	bl	8011828 <move_window>
 8012978:	4603      	mov	r3, r0
 801297a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801297e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012982:	2b00      	cmp	r3, #0
 8012984:	d11d      	bne.n	80129c2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012986:	69fb      	ldr	r3, [r7, #28]
 8012988:	6918      	ldr	r0, [r3, #16]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	6a19      	ldr	r1, [r3, #32]
 801298e:	6a3b      	ldr	r3, [r7, #32]
 8012990:	b2da      	uxtb	r2, r3
 8012992:	7efb      	ldrb	r3, [r7, #27]
 8012994:	f7ff fd7c 	bl	8012490 <put_lfn>
				fs->wflag = 1;
 8012998:	69fb      	ldr	r3, [r7, #28]
 801299a:	2201      	movs	r2, #1
 801299c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801299e:	2100      	movs	r1, #0
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	f7ff fba9 	bl	80120f8 <dir_next>
 80129a6:	4603      	mov	r3, r0
 80129a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80129ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d107      	bne.n	80129c4 <dir_register+0x184>
 80129b4:	6a3b      	ldr	r3, [r7, #32]
 80129b6:	3b01      	subs	r3, #1
 80129b8:	623b      	str	r3, [r7, #32]
 80129ba:	6a3b      	ldr	r3, [r7, #32]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d1d5      	bne.n	801296c <dir_register+0x12c>
 80129c0:	e000      	b.n	80129c4 <dir_register+0x184>
				if (res != FR_OK) break;
 80129c2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80129c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d128      	bne.n	8012a1e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	69db      	ldr	r3, [r3, #28]
 80129d0:	4619      	mov	r1, r3
 80129d2:	69f8      	ldr	r0, [r7, #28]
 80129d4:	f7fe ff28 	bl	8011828 <move_window>
 80129d8:	4603      	mov	r3, r0
 80129da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80129de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d11b      	bne.n	8012a1e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	6a1b      	ldr	r3, [r3, #32]
 80129ea:	2220      	movs	r2, #32
 80129ec:	2100      	movs	r1, #0
 80129ee:	4618      	mov	r0, r3
 80129f0:	f7fe fd0d 	bl	801140e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	6a18      	ldr	r0, [r3, #32]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	3324      	adds	r3, #36	@ 0x24
 80129fc:	220b      	movs	r2, #11
 80129fe:	4619      	mov	r1, r3
 8012a00:	f7fe fce4 	bl	80113cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6a1b      	ldr	r3, [r3, #32]
 8012a0e:	330c      	adds	r3, #12
 8012a10:	f002 0218 	and.w	r2, r2, #24
 8012a14:	b2d2      	uxtb	r2, r2
 8012a16:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8012a18:	69fb      	ldr	r3, [r7, #28]
 8012a1a:	2201      	movs	r2, #1
 8012a1c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3730      	adds	r7, #48	@ 0x30
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}
 8012a2a:	bf00      	nop
 8012a2c:	4ec4ec4f 	.word	0x4ec4ec4f

08012a30 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b08a      	sub	sp, #40	@ 0x28
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
 8012a38:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	613b      	str	r3, [r7, #16]
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	691b      	ldr	r3, [r3, #16]
 8012a46:	60fb      	str	r3, [r7, #12]
 8012a48:	2300      	movs	r3, #0
 8012a4a:	617b      	str	r3, [r7, #20]
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8012a50:	69bb      	ldr	r3, [r7, #24]
 8012a52:	1c5a      	adds	r2, r3, #1
 8012a54:	61ba      	str	r2, [r7, #24]
 8012a56:	693a      	ldr	r2, [r7, #16]
 8012a58:	4413      	add	r3, r2
 8012a5a:	781b      	ldrb	r3, [r3, #0]
 8012a5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8012a5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a60:	2b1f      	cmp	r3, #31
 8012a62:	d940      	bls.n	8012ae6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012a64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a66:	2b2f      	cmp	r3, #47	@ 0x2f
 8012a68:	d006      	beq.n	8012a78 <create_name+0x48>
 8012a6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a6c:	2b5c      	cmp	r3, #92	@ 0x5c
 8012a6e:	d110      	bne.n	8012a92 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012a70:	e002      	b.n	8012a78 <create_name+0x48>
 8012a72:	69bb      	ldr	r3, [r7, #24]
 8012a74:	3301      	adds	r3, #1
 8012a76:	61bb      	str	r3, [r7, #24]
 8012a78:	693a      	ldr	r2, [r7, #16]
 8012a7a:	69bb      	ldr	r3, [r7, #24]
 8012a7c:	4413      	add	r3, r2
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	2b2f      	cmp	r3, #47	@ 0x2f
 8012a82:	d0f6      	beq.n	8012a72 <create_name+0x42>
 8012a84:	693a      	ldr	r2, [r7, #16]
 8012a86:	69bb      	ldr	r3, [r7, #24]
 8012a88:	4413      	add	r3, r2
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	2b5c      	cmp	r3, #92	@ 0x5c
 8012a8e:	d0f0      	beq.n	8012a72 <create_name+0x42>
			break;
 8012a90:	e02a      	b.n	8012ae8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	2bfe      	cmp	r3, #254	@ 0xfe
 8012a96:	d901      	bls.n	8012a9c <create_name+0x6c>
 8012a98:	2306      	movs	r3, #6
 8012a9a:	e17d      	b.n	8012d98 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012a9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a9e:	b2db      	uxtb	r3, r3
 8012aa0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8012aa2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012aa4:	2101      	movs	r1, #1
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f001 fb3c 	bl	8014124 <ff_convert>
 8012aac:	4603      	mov	r3, r0
 8012aae:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012ab0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d101      	bne.n	8012aba <create_name+0x8a>
 8012ab6:	2306      	movs	r3, #6
 8012ab8:	e16e      	b.n	8012d98 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012aba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012abc:	2b7f      	cmp	r3, #127	@ 0x7f
 8012abe:	d809      	bhi.n	8012ad4 <create_name+0xa4>
 8012ac0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ac2:	4619      	mov	r1, r3
 8012ac4:	488d      	ldr	r0, [pc, #564]	@ (8012cfc <create_name+0x2cc>)
 8012ac6:	f7fe fce4 	bl	8011492 <chk_chr>
 8012aca:	4603      	mov	r3, r0
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d001      	beq.n	8012ad4 <create_name+0xa4>
 8012ad0:	2306      	movs	r3, #6
 8012ad2:	e161      	b.n	8012d98 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	1c5a      	adds	r2, r3, #1
 8012ad8:	617a      	str	r2, [r7, #20]
 8012ada:	005b      	lsls	r3, r3, #1
 8012adc:	68fa      	ldr	r2, [r7, #12]
 8012ade:	4413      	add	r3, r2
 8012ae0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012ae2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8012ae4:	e7b4      	b.n	8012a50 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8012ae6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8012ae8:	693a      	ldr	r2, [r7, #16]
 8012aea:	69bb      	ldr	r3, [r7, #24]
 8012aec:	441a      	add	r2, r3
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012af2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012af4:	2b1f      	cmp	r3, #31
 8012af6:	d801      	bhi.n	8012afc <create_name+0xcc>
 8012af8:	2304      	movs	r3, #4
 8012afa:	e000      	b.n	8012afe <create_name+0xce>
 8012afc:	2300      	movs	r3, #0
 8012afe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012b02:	e011      	b.n	8012b28 <create_name+0xf8>
		w = lfn[di - 1];
 8012b04:	697a      	ldr	r2, [r7, #20]
 8012b06:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012b0a:	4413      	add	r3, r2
 8012b0c:	005b      	lsls	r3, r3, #1
 8012b0e:	68fa      	ldr	r2, [r7, #12]
 8012b10:	4413      	add	r3, r2
 8012b12:	881b      	ldrh	r3, [r3, #0]
 8012b14:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8012b16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b18:	2b20      	cmp	r3, #32
 8012b1a:	d002      	beq.n	8012b22 <create_name+0xf2>
 8012b1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012b20:	d106      	bne.n	8012b30 <create_name+0x100>
		di--;
 8012b22:	697b      	ldr	r3, [r7, #20]
 8012b24:	3b01      	subs	r3, #1
 8012b26:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d1ea      	bne.n	8012b04 <create_name+0xd4>
 8012b2e:	e000      	b.n	8012b32 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8012b30:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8012b32:	697b      	ldr	r3, [r7, #20]
 8012b34:	005b      	lsls	r3, r3, #1
 8012b36:	68fa      	ldr	r2, [r7, #12]
 8012b38:	4413      	add	r3, r2
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d101      	bne.n	8012b48 <create_name+0x118>
 8012b44:	2306      	movs	r3, #6
 8012b46:	e127      	b.n	8012d98 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	3324      	adds	r3, #36	@ 0x24
 8012b4c:	220b      	movs	r2, #11
 8012b4e:	2120      	movs	r1, #32
 8012b50:	4618      	mov	r0, r3
 8012b52:	f7fe fc5c 	bl	801140e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8012b56:	2300      	movs	r3, #0
 8012b58:	61bb      	str	r3, [r7, #24]
 8012b5a:	e002      	b.n	8012b62 <create_name+0x132>
 8012b5c:	69bb      	ldr	r3, [r7, #24]
 8012b5e:	3301      	adds	r3, #1
 8012b60:	61bb      	str	r3, [r7, #24]
 8012b62:	69bb      	ldr	r3, [r7, #24]
 8012b64:	005b      	lsls	r3, r3, #1
 8012b66:	68fa      	ldr	r2, [r7, #12]
 8012b68:	4413      	add	r3, r2
 8012b6a:	881b      	ldrh	r3, [r3, #0]
 8012b6c:	2b20      	cmp	r3, #32
 8012b6e:	d0f5      	beq.n	8012b5c <create_name+0x12c>
 8012b70:	69bb      	ldr	r3, [r7, #24]
 8012b72:	005b      	lsls	r3, r3, #1
 8012b74:	68fa      	ldr	r2, [r7, #12]
 8012b76:	4413      	add	r3, r2
 8012b78:	881b      	ldrh	r3, [r3, #0]
 8012b7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8012b7c:	d0ee      	beq.n	8012b5c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8012b7e:	69bb      	ldr	r3, [r7, #24]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d009      	beq.n	8012b98 <create_name+0x168>
 8012b84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b88:	f043 0303 	orr.w	r3, r3, #3
 8012b8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8012b90:	e002      	b.n	8012b98 <create_name+0x168>
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	3b01      	subs	r3, #1
 8012b96:	617b      	str	r3, [r7, #20]
 8012b98:	697b      	ldr	r3, [r7, #20]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d009      	beq.n	8012bb2 <create_name+0x182>
 8012b9e:	697a      	ldr	r2, [r7, #20]
 8012ba0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012ba4:	4413      	add	r3, r2
 8012ba6:	005b      	lsls	r3, r3, #1
 8012ba8:	68fa      	ldr	r2, [r7, #12]
 8012baa:	4413      	add	r3, r2
 8012bac:	881b      	ldrh	r3, [r3, #0]
 8012bae:	2b2e      	cmp	r3, #46	@ 0x2e
 8012bb0:	d1ef      	bne.n	8012b92 <create_name+0x162>

	i = b = 0; ni = 8;
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012bb8:	2300      	movs	r3, #0
 8012bba:	623b      	str	r3, [r7, #32]
 8012bbc:	2308      	movs	r3, #8
 8012bbe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012bc0:	69bb      	ldr	r3, [r7, #24]
 8012bc2:	1c5a      	adds	r2, r3, #1
 8012bc4:	61ba      	str	r2, [r7, #24]
 8012bc6:	005b      	lsls	r3, r3, #1
 8012bc8:	68fa      	ldr	r2, [r7, #12]
 8012bca:	4413      	add	r3, r2
 8012bcc:	881b      	ldrh	r3, [r3, #0]
 8012bce:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8012bd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	f000 8090 	beq.w	8012cf8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8012bd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bda:	2b20      	cmp	r3, #32
 8012bdc:	d006      	beq.n	8012bec <create_name+0x1bc>
 8012bde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012be0:	2b2e      	cmp	r3, #46	@ 0x2e
 8012be2:	d10a      	bne.n	8012bfa <create_name+0x1ca>
 8012be4:	69ba      	ldr	r2, [r7, #24]
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d006      	beq.n	8012bfa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8012bec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012bf0:	f043 0303 	orr.w	r3, r3, #3
 8012bf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012bf8:	e07d      	b.n	8012cf6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8012bfa:	6a3a      	ldr	r2, [r7, #32]
 8012bfc:	69fb      	ldr	r3, [r7, #28]
 8012bfe:	429a      	cmp	r2, r3
 8012c00:	d203      	bcs.n	8012c0a <create_name+0x1da>
 8012c02:	69ba      	ldr	r2, [r7, #24]
 8012c04:	697b      	ldr	r3, [r7, #20]
 8012c06:	429a      	cmp	r2, r3
 8012c08:	d123      	bne.n	8012c52 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8012c0a:	69fb      	ldr	r3, [r7, #28]
 8012c0c:	2b0b      	cmp	r3, #11
 8012c0e:	d106      	bne.n	8012c1e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8012c10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c14:	f043 0303 	orr.w	r3, r3, #3
 8012c18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012c1c:	e075      	b.n	8012d0a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8012c1e:	69ba      	ldr	r2, [r7, #24]
 8012c20:	697b      	ldr	r3, [r7, #20]
 8012c22:	429a      	cmp	r2, r3
 8012c24:	d005      	beq.n	8012c32 <create_name+0x202>
 8012c26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c2a:	f043 0303 	orr.w	r3, r3, #3
 8012c2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8012c32:	69ba      	ldr	r2, [r7, #24]
 8012c34:	697b      	ldr	r3, [r7, #20]
 8012c36:	429a      	cmp	r2, r3
 8012c38:	d866      	bhi.n	8012d08 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	61bb      	str	r3, [r7, #24]
 8012c3e:	2308      	movs	r3, #8
 8012c40:	623b      	str	r3, [r7, #32]
 8012c42:	230b      	movs	r3, #11
 8012c44:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8012c46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012c4a:	009b      	lsls	r3, r3, #2
 8012c4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012c50:	e051      	b.n	8012cf6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8012c52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c54:	2b7f      	cmp	r3, #127	@ 0x7f
 8012c56:	d914      	bls.n	8012c82 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012c58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c5a:	2100      	movs	r1, #0
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f001 fa61 	bl	8014124 <ff_convert>
 8012c62:	4603      	mov	r3, r0
 8012c64:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012c66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d004      	beq.n	8012c76 <create_name+0x246>
 8012c6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c6e:	3b80      	subs	r3, #128	@ 0x80
 8012c70:	4a23      	ldr	r2, [pc, #140]	@ (8012d00 <create_name+0x2d0>)
 8012c72:	5cd3      	ldrb	r3, [r2, r3]
 8012c74:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8012c76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c7a:	f043 0302 	orr.w	r3, r3, #2
 8012c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012c82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d007      	beq.n	8012c98 <create_name+0x268>
 8012c88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c8a:	4619      	mov	r1, r3
 8012c8c:	481d      	ldr	r0, [pc, #116]	@ (8012d04 <create_name+0x2d4>)
 8012c8e:	f7fe fc00 	bl	8011492 <chk_chr>
 8012c92:	4603      	mov	r3, r0
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d008      	beq.n	8012caa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012c98:	235f      	movs	r3, #95	@ 0x5f
 8012c9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8012c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012ca0:	f043 0303 	orr.w	r3, r3, #3
 8012ca4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012ca8:	e01b      	b.n	8012ce2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8012caa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012cac:	2b40      	cmp	r3, #64	@ 0x40
 8012cae:	d909      	bls.n	8012cc4 <create_name+0x294>
 8012cb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012cb2:	2b5a      	cmp	r3, #90	@ 0x5a
 8012cb4:	d806      	bhi.n	8012cc4 <create_name+0x294>
					b |= 2;
 8012cb6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012cba:	f043 0302 	orr.w	r3, r3, #2
 8012cbe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012cc2:	e00e      	b.n	8012ce2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012cc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012cc6:	2b60      	cmp	r3, #96	@ 0x60
 8012cc8:	d90b      	bls.n	8012ce2 <create_name+0x2b2>
 8012cca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ccc:	2b7a      	cmp	r3, #122	@ 0x7a
 8012cce:	d808      	bhi.n	8012ce2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8012cd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012cd4:	f043 0301 	orr.w	r3, r3, #1
 8012cd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012cdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012cde:	3b20      	subs	r3, #32
 8012ce0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8012ce2:	6a3b      	ldr	r3, [r7, #32]
 8012ce4:	1c5a      	adds	r2, r3, #1
 8012ce6:	623a      	str	r2, [r7, #32]
 8012ce8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012cea:	b2d1      	uxtb	r1, r2
 8012cec:	687a      	ldr	r2, [r7, #4]
 8012cee:	4413      	add	r3, r2
 8012cf0:	460a      	mov	r2, r1
 8012cf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8012cf6:	e763      	b.n	8012bc0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8012cf8:	bf00      	nop
 8012cfa:	e006      	b.n	8012d0a <create_name+0x2da>
 8012cfc:	08016c24 	.word	0x08016c24
 8012d00:	08016d00 	.word	0x08016d00
 8012d04:	08016c30 	.word	0x08016c30
			if (si > di) break;			/* No extension */
 8012d08:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012d10:	2be5      	cmp	r3, #229	@ 0xe5
 8012d12:	d103      	bne.n	8012d1c <create_name+0x2ec>
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2205      	movs	r2, #5
 8012d18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8012d1c:	69fb      	ldr	r3, [r7, #28]
 8012d1e:	2b08      	cmp	r3, #8
 8012d20:	d104      	bne.n	8012d2c <create_name+0x2fc>
 8012d22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d26:	009b      	lsls	r3, r3, #2
 8012d28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012d2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d30:	f003 030c 	and.w	r3, r3, #12
 8012d34:	2b0c      	cmp	r3, #12
 8012d36:	d005      	beq.n	8012d44 <create_name+0x314>
 8012d38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d3c:	f003 0303 	and.w	r3, r3, #3
 8012d40:	2b03      	cmp	r3, #3
 8012d42:	d105      	bne.n	8012d50 <create_name+0x320>
 8012d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d48:	f043 0302 	orr.w	r3, r3, #2
 8012d4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d54:	f003 0302 	and.w	r3, r3, #2
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d117      	bne.n	8012d8c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d60:	f003 0303 	and.w	r3, r3, #3
 8012d64:	2b01      	cmp	r3, #1
 8012d66:	d105      	bne.n	8012d74 <create_name+0x344>
 8012d68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d6c:	f043 0310 	orr.w	r3, r3, #16
 8012d70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012d74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d78:	f003 030c 	and.w	r3, r3, #12
 8012d7c:	2b04      	cmp	r3, #4
 8012d7e:	d105      	bne.n	8012d8c <create_name+0x35c>
 8012d80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d84:	f043 0308 	orr.w	r3, r3, #8
 8012d88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8012d92:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8012d96:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3728      	adds	r7, #40	@ 0x28
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}

08012da0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b086      	sub	sp, #24
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
 8012da8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012dae:	693b      	ldr	r3, [r7, #16]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012db4:	e002      	b.n	8012dbc <follow_path+0x1c>
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	3301      	adds	r3, #1
 8012dba:	603b      	str	r3, [r7, #0]
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	781b      	ldrb	r3, [r3, #0]
 8012dc0:	2b2f      	cmp	r3, #47	@ 0x2f
 8012dc2:	d0f8      	beq.n	8012db6 <follow_path+0x16>
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	2b5c      	cmp	r3, #92	@ 0x5c
 8012dca:	d0f4      	beq.n	8012db6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012dcc:	693b      	ldr	r3, [r7, #16]
 8012dce:	2200      	movs	r2, #0
 8012dd0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	2b1f      	cmp	r3, #31
 8012dd8:	d80a      	bhi.n	8012df0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2280      	movs	r2, #128	@ 0x80
 8012dde:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8012de2:	2100      	movs	r1, #0
 8012de4:	6878      	ldr	r0, [r7, #4]
 8012de6:	f7ff f8fe 	bl	8011fe6 <dir_sdi>
 8012dea:	4603      	mov	r3, r0
 8012dec:	75fb      	strb	r3, [r7, #23]
 8012dee:	e048      	b.n	8012e82 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012df0:	463b      	mov	r3, r7
 8012df2:	4619      	mov	r1, r3
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f7ff fe1b 	bl	8012a30 <create_name>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012dfe:	7dfb      	ldrb	r3, [r7, #23]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d139      	bne.n	8012e78 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	f7ff fc5a 	bl	80126be <dir_find>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012e14:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012e16:	7dfb      	ldrb	r3, [r7, #23]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d00a      	beq.n	8012e32 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012e1c:	7dfb      	ldrb	r3, [r7, #23]
 8012e1e:	2b04      	cmp	r3, #4
 8012e20:	d12c      	bne.n	8012e7c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012e22:	7afb      	ldrb	r3, [r7, #11]
 8012e24:	f003 0304 	and.w	r3, r3, #4
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d127      	bne.n	8012e7c <follow_path+0xdc>
 8012e2c:	2305      	movs	r3, #5
 8012e2e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012e30:	e024      	b.n	8012e7c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012e32:	7afb      	ldrb	r3, [r7, #11]
 8012e34:	f003 0304 	and.w	r3, r3, #4
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d121      	bne.n	8012e80 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	799b      	ldrb	r3, [r3, #6]
 8012e40:	f003 0310 	and.w	r3, r3, #16
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d102      	bne.n	8012e4e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012e48:	2305      	movs	r3, #5
 8012e4a:	75fb      	strb	r3, [r7, #23]
 8012e4c:	e019      	b.n	8012e82 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	695b      	ldr	r3, [r3, #20]
 8012e58:	68fa      	ldr	r2, [r7, #12]
 8012e5a:	8992      	ldrh	r2, [r2, #12]
 8012e5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8012e60:	fb00 f202 	mul.w	r2, r0, r2
 8012e64:	1a9b      	subs	r3, r3, r2
 8012e66:	440b      	add	r3, r1
 8012e68:	4619      	mov	r1, r3
 8012e6a:	68f8      	ldr	r0, [r7, #12]
 8012e6c:	f7ff fa61 	bl	8012332 <ld_clust>
 8012e70:	4602      	mov	r2, r0
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012e76:	e7bb      	b.n	8012df0 <follow_path+0x50>
			if (res != FR_OK) break;
 8012e78:	bf00      	nop
 8012e7a:	e002      	b.n	8012e82 <follow_path+0xe2>
				break;
 8012e7c:	bf00      	nop
 8012e7e:	e000      	b.n	8012e82 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012e80:	bf00      	nop
			}
		}
	}

	return res;
 8012e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e84:	4618      	mov	r0, r3
 8012e86:	3718      	adds	r7, #24
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}

08012e8c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	b087      	sub	sp, #28
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012e94:	f04f 33ff 	mov.w	r3, #4294967295
 8012e98:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d031      	beq.n	8012f06 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	617b      	str	r3, [r7, #20]
 8012ea8:	e002      	b.n	8012eb0 <get_ldnumber+0x24>
 8012eaa:	697b      	ldr	r3, [r7, #20]
 8012eac:	3301      	adds	r3, #1
 8012eae:	617b      	str	r3, [r7, #20]
 8012eb0:	697b      	ldr	r3, [r7, #20]
 8012eb2:	781b      	ldrb	r3, [r3, #0]
 8012eb4:	2b1f      	cmp	r3, #31
 8012eb6:	d903      	bls.n	8012ec0 <get_ldnumber+0x34>
 8012eb8:	697b      	ldr	r3, [r7, #20]
 8012eba:	781b      	ldrb	r3, [r3, #0]
 8012ebc:	2b3a      	cmp	r3, #58	@ 0x3a
 8012ebe:	d1f4      	bne.n	8012eaa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012ec0:	697b      	ldr	r3, [r7, #20]
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	2b3a      	cmp	r3, #58	@ 0x3a
 8012ec6:	d11c      	bne.n	8012f02 <get_ldnumber+0x76>
			tp = *path;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	1c5a      	adds	r2, r3, #1
 8012ed2:	60fa      	str	r2, [r7, #12]
 8012ed4:	781b      	ldrb	r3, [r3, #0]
 8012ed6:	3b30      	subs	r3, #48	@ 0x30
 8012ed8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	2b09      	cmp	r3, #9
 8012ede:	d80e      	bhi.n	8012efe <get_ldnumber+0x72>
 8012ee0:	68fa      	ldr	r2, [r7, #12]
 8012ee2:	697b      	ldr	r3, [r7, #20]
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d10a      	bne.n	8012efe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d107      	bne.n	8012efe <get_ldnumber+0x72>
					vol = (int)i;
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012ef2:	697b      	ldr	r3, [r7, #20]
 8012ef4:	3301      	adds	r3, #1
 8012ef6:	617b      	str	r3, [r7, #20]
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	697a      	ldr	r2, [r7, #20]
 8012efc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012efe:	693b      	ldr	r3, [r7, #16]
 8012f00:	e002      	b.n	8012f08 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012f02:	2300      	movs	r3, #0
 8012f04:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012f06:	693b      	ldr	r3, [r7, #16]
}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	371c      	adds	r7, #28
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f12:	4770      	bx	lr

08012f14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b082      	sub	sp, #8
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
 8012f1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2200      	movs	r2, #0
 8012f22:	70da      	strb	r2, [r3, #3]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	f04f 32ff 	mov.w	r2, #4294967295
 8012f2a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012f2c:	6839      	ldr	r1, [r7, #0]
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f7fe fc7a 	bl	8011828 <move_window>
 8012f34:	4603      	mov	r3, r0
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d001      	beq.n	8012f3e <check_fs+0x2a>
 8012f3a:	2304      	movs	r3, #4
 8012f3c:	e038      	b.n	8012fb0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	3338      	adds	r3, #56	@ 0x38
 8012f42:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012f46:	4618      	mov	r0, r3
 8012f48:	f7fe f9be 	bl	80112c8 <ld_word>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	461a      	mov	r2, r3
 8012f50:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d001      	beq.n	8012f5c <check_fs+0x48>
 8012f58:	2303      	movs	r3, #3
 8012f5a:	e029      	b.n	8012fb0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012f62:	2be9      	cmp	r3, #233	@ 0xe9
 8012f64:	d009      	beq.n	8012f7a <check_fs+0x66>
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012f6c:	2beb      	cmp	r3, #235	@ 0xeb
 8012f6e:	d11e      	bne.n	8012fae <check_fs+0x9a>
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8012f76:	2b90      	cmp	r3, #144	@ 0x90
 8012f78:	d119      	bne.n	8012fae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	3338      	adds	r3, #56	@ 0x38
 8012f7e:	3336      	adds	r3, #54	@ 0x36
 8012f80:	4618      	mov	r0, r3
 8012f82:	f7fe f9b9 	bl	80112f8 <ld_dword>
 8012f86:	4603      	mov	r3, r0
 8012f88:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8012fb8 <check_fs+0xa4>)
 8012f8e:	4293      	cmp	r3, r2
 8012f90:	d101      	bne.n	8012f96 <check_fs+0x82>
 8012f92:	2300      	movs	r3, #0
 8012f94:	e00c      	b.n	8012fb0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	3338      	adds	r3, #56	@ 0x38
 8012f9a:	3352      	adds	r3, #82	@ 0x52
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f7fe f9ab 	bl	80112f8 <ld_dword>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	4a05      	ldr	r2, [pc, #20]	@ (8012fbc <check_fs+0xa8>)
 8012fa6:	4293      	cmp	r3, r2
 8012fa8:	d101      	bne.n	8012fae <check_fs+0x9a>
 8012faa:	2300      	movs	r3, #0
 8012fac:	e000      	b.n	8012fb0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012fae:	2302      	movs	r3, #2
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	3708      	adds	r7, #8
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}
 8012fb8:	00544146 	.word	0x00544146
 8012fbc:	33544146 	.word	0x33544146

08012fc0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b096      	sub	sp, #88	@ 0x58
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	60f8      	str	r0, [r7, #12]
 8012fc8:	60b9      	str	r1, [r7, #8]
 8012fca:	4613      	mov	r3, r2
 8012fcc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012fd4:	68f8      	ldr	r0, [r7, #12]
 8012fd6:	f7ff ff59 	bl	8012e8c <get_ldnumber>
 8012fda:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	da01      	bge.n	8012fe6 <find_volume+0x26>
 8012fe2:	230b      	movs	r3, #11
 8012fe4:	e265      	b.n	80134b2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012fe6:	4a9f      	ldr	r2, [pc, #636]	@ (8013264 <find_volume+0x2a4>)
 8012fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012fee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d101      	bne.n	8012ffa <find_volume+0x3a>
 8012ff6:	230c      	movs	r3, #12
 8012ff8:	e25b      	b.n	80134b2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012ffe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013000:	79fb      	ldrb	r3, [r7, #7]
 8013002:	f023 0301 	bic.w	r3, r3, #1
 8013006:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801300a:	781b      	ldrb	r3, [r3, #0]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d01a      	beq.n	8013046 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013012:	785b      	ldrb	r3, [r3, #1]
 8013014:	4618      	mov	r0, r3
 8013016:	f7fe f8b7 	bl	8011188 <disk_status>
 801301a:	4603      	mov	r3, r0
 801301c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013020:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013024:	f003 0301 	and.w	r3, r3, #1
 8013028:	2b00      	cmp	r3, #0
 801302a:	d10c      	bne.n	8013046 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801302c:	79fb      	ldrb	r3, [r7, #7]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d007      	beq.n	8013042 <find_volume+0x82>
 8013032:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013036:	f003 0304 	and.w	r3, r3, #4
 801303a:	2b00      	cmp	r3, #0
 801303c:	d001      	beq.n	8013042 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801303e:	230a      	movs	r3, #10
 8013040:	e237      	b.n	80134b2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8013042:	2300      	movs	r3, #0
 8013044:	e235      	b.n	80134b2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013048:	2200      	movs	r2, #0
 801304a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801304c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801304e:	b2da      	uxtb	r2, r3
 8013050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013052:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013056:	785b      	ldrb	r3, [r3, #1]
 8013058:	4618      	mov	r0, r3
 801305a:	f7fe f8af 	bl	80111bc <disk_initialize>
 801305e:	4603      	mov	r3, r0
 8013060:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013064:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013068:	f003 0301 	and.w	r3, r3, #1
 801306c:	2b00      	cmp	r3, #0
 801306e:	d001      	beq.n	8013074 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013070:	2303      	movs	r3, #3
 8013072:	e21e      	b.n	80134b2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013074:	79fb      	ldrb	r3, [r7, #7]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d007      	beq.n	801308a <find_volume+0xca>
 801307a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801307e:	f003 0304 	and.w	r3, r3, #4
 8013082:	2b00      	cmp	r3, #0
 8013084:	d001      	beq.n	801308a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013086:	230a      	movs	r3, #10
 8013088:	e213      	b.n	80134b2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801308a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801308c:	7858      	ldrb	r0, [r3, #1]
 801308e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013090:	330c      	adds	r3, #12
 8013092:	461a      	mov	r2, r3
 8013094:	2102      	movs	r1, #2
 8013096:	f7fe f8f9 	bl	801128c <disk_ioctl>
 801309a:	4603      	mov	r3, r0
 801309c:	2b00      	cmp	r3, #0
 801309e:	d001      	beq.n	80130a4 <find_volume+0xe4>
 80130a0:	2301      	movs	r3, #1
 80130a2:	e206      	b.n	80134b2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80130a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130a6:	899b      	ldrh	r3, [r3, #12]
 80130a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80130ac:	d80d      	bhi.n	80130ca <find_volume+0x10a>
 80130ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130b0:	899b      	ldrh	r3, [r3, #12]
 80130b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80130b6:	d308      	bcc.n	80130ca <find_volume+0x10a>
 80130b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130ba:	899b      	ldrh	r3, [r3, #12]
 80130bc:	461a      	mov	r2, r3
 80130be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130c0:	899b      	ldrh	r3, [r3, #12]
 80130c2:	3b01      	subs	r3, #1
 80130c4:	4013      	ands	r3, r2
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d001      	beq.n	80130ce <find_volume+0x10e>
 80130ca:	2301      	movs	r3, #1
 80130cc:	e1f1      	b.n	80134b2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80130ce:	2300      	movs	r3, #0
 80130d0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80130d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80130d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80130d6:	f7ff ff1d 	bl	8012f14 <check_fs>
 80130da:	4603      	mov	r3, r0
 80130dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80130e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80130e4:	2b02      	cmp	r3, #2
 80130e6:	d149      	bne.n	801317c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80130e8:	2300      	movs	r3, #0
 80130ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80130ec:	e01e      	b.n	801312c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80130ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130f0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80130f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80130f6:	011b      	lsls	r3, r3, #4
 80130f8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80130fc:	4413      	add	r3, r2
 80130fe:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013102:	3304      	adds	r3, #4
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d006      	beq.n	8013118 <find_volume+0x158>
 801310a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801310c:	3308      	adds	r3, #8
 801310e:	4618      	mov	r0, r3
 8013110:	f7fe f8f2 	bl	80112f8 <ld_dword>
 8013114:	4602      	mov	r2, r0
 8013116:	e000      	b.n	801311a <find_volume+0x15a>
 8013118:	2200      	movs	r2, #0
 801311a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801311c:	009b      	lsls	r3, r3, #2
 801311e:	3358      	adds	r3, #88	@ 0x58
 8013120:	443b      	add	r3, r7
 8013122:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013128:	3301      	adds	r3, #1
 801312a:	643b      	str	r3, [r7, #64]	@ 0x40
 801312c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801312e:	2b03      	cmp	r3, #3
 8013130:	d9dd      	bls.n	80130ee <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013132:	2300      	movs	r3, #0
 8013134:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8013136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013138:	2b00      	cmp	r3, #0
 801313a:	d002      	beq.n	8013142 <find_volume+0x182>
 801313c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801313e:	3b01      	subs	r3, #1
 8013140:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	3358      	adds	r3, #88	@ 0x58
 8013148:	443b      	add	r3, r7
 801314a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801314e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013150:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013152:	2b00      	cmp	r3, #0
 8013154:	d005      	beq.n	8013162 <find_volume+0x1a2>
 8013156:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013158:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801315a:	f7ff fedb 	bl	8012f14 <check_fs>
 801315e:	4603      	mov	r3, r0
 8013160:	e000      	b.n	8013164 <find_volume+0x1a4>
 8013162:	2303      	movs	r3, #3
 8013164:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013168:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801316c:	2b01      	cmp	r3, #1
 801316e:	d905      	bls.n	801317c <find_volume+0x1bc>
 8013170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013172:	3301      	adds	r3, #1
 8013174:	643b      	str	r3, [r7, #64]	@ 0x40
 8013176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013178:	2b03      	cmp	r3, #3
 801317a:	d9e2      	bls.n	8013142 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801317c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013180:	2b04      	cmp	r3, #4
 8013182:	d101      	bne.n	8013188 <find_volume+0x1c8>
 8013184:	2301      	movs	r3, #1
 8013186:	e194      	b.n	80134b2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013188:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801318c:	2b01      	cmp	r3, #1
 801318e:	d901      	bls.n	8013194 <find_volume+0x1d4>
 8013190:	230d      	movs	r3, #13
 8013192:	e18e      	b.n	80134b2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013196:	3338      	adds	r3, #56	@ 0x38
 8013198:	330b      	adds	r3, #11
 801319a:	4618      	mov	r0, r3
 801319c:	f7fe f894 	bl	80112c8 <ld_word>
 80131a0:	4603      	mov	r3, r0
 80131a2:	461a      	mov	r2, r3
 80131a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131a6:	899b      	ldrh	r3, [r3, #12]
 80131a8:	429a      	cmp	r2, r3
 80131aa:	d001      	beq.n	80131b0 <find_volume+0x1f0>
 80131ac:	230d      	movs	r3, #13
 80131ae:	e180      	b.n	80134b2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80131b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131b2:	3338      	adds	r3, #56	@ 0x38
 80131b4:	3316      	adds	r3, #22
 80131b6:	4618      	mov	r0, r3
 80131b8:	f7fe f886 	bl	80112c8 <ld_word>
 80131bc:	4603      	mov	r3, r0
 80131be:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80131c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d106      	bne.n	80131d4 <find_volume+0x214>
 80131c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131c8:	3338      	adds	r3, #56	@ 0x38
 80131ca:	3324      	adds	r3, #36	@ 0x24
 80131cc:	4618      	mov	r0, r3
 80131ce:	f7fe f893 	bl	80112f8 <ld_dword>
 80131d2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80131d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80131d8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80131da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131dc:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80131e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80131e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131e6:	789b      	ldrb	r3, [r3, #2]
 80131e8:	2b01      	cmp	r3, #1
 80131ea:	d005      	beq.n	80131f8 <find_volume+0x238>
 80131ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131ee:	789b      	ldrb	r3, [r3, #2]
 80131f0:	2b02      	cmp	r3, #2
 80131f2:	d001      	beq.n	80131f8 <find_volume+0x238>
 80131f4:	230d      	movs	r3, #13
 80131f6:	e15c      	b.n	80134b2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80131f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131fa:	789b      	ldrb	r3, [r3, #2]
 80131fc:	461a      	mov	r2, r3
 80131fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013200:	fb02 f303 	mul.w	r3, r2, r3
 8013204:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013208:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801320c:	461a      	mov	r2, r3
 801320e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013210:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013214:	895b      	ldrh	r3, [r3, #10]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d008      	beq.n	801322c <find_volume+0x26c>
 801321a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801321c:	895b      	ldrh	r3, [r3, #10]
 801321e:	461a      	mov	r2, r3
 8013220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013222:	895b      	ldrh	r3, [r3, #10]
 8013224:	3b01      	subs	r3, #1
 8013226:	4013      	ands	r3, r2
 8013228:	2b00      	cmp	r3, #0
 801322a:	d001      	beq.n	8013230 <find_volume+0x270>
 801322c:	230d      	movs	r3, #13
 801322e:	e140      	b.n	80134b2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013232:	3338      	adds	r3, #56	@ 0x38
 8013234:	3311      	adds	r3, #17
 8013236:	4618      	mov	r0, r3
 8013238:	f7fe f846 	bl	80112c8 <ld_word>
 801323c:	4603      	mov	r3, r0
 801323e:	461a      	mov	r2, r3
 8013240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013242:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013246:	891b      	ldrh	r3, [r3, #8]
 8013248:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801324a:	8992      	ldrh	r2, [r2, #12]
 801324c:	0952      	lsrs	r2, r2, #5
 801324e:	b292      	uxth	r2, r2
 8013250:	fbb3 f1f2 	udiv	r1, r3, r2
 8013254:	fb01 f202 	mul.w	r2, r1, r2
 8013258:	1a9b      	subs	r3, r3, r2
 801325a:	b29b      	uxth	r3, r3
 801325c:	2b00      	cmp	r3, #0
 801325e:	d003      	beq.n	8013268 <find_volume+0x2a8>
 8013260:	230d      	movs	r3, #13
 8013262:	e126      	b.n	80134b2 <find_volume+0x4f2>
 8013264:	24002914 	.word	0x24002914

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801326a:	3338      	adds	r3, #56	@ 0x38
 801326c:	3313      	adds	r3, #19
 801326e:	4618      	mov	r0, r3
 8013270:	f7fe f82a 	bl	80112c8 <ld_word>
 8013274:	4603      	mov	r3, r0
 8013276:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801327a:	2b00      	cmp	r3, #0
 801327c:	d106      	bne.n	801328c <find_volume+0x2cc>
 801327e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013280:	3338      	adds	r3, #56	@ 0x38
 8013282:	3320      	adds	r3, #32
 8013284:	4618      	mov	r0, r3
 8013286:	f7fe f837 	bl	80112f8 <ld_dword>
 801328a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801328c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801328e:	3338      	adds	r3, #56	@ 0x38
 8013290:	330e      	adds	r3, #14
 8013292:	4618      	mov	r0, r3
 8013294:	f7fe f818 	bl	80112c8 <ld_word>
 8013298:	4603      	mov	r3, r0
 801329a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801329c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d101      	bne.n	80132a6 <find_volume+0x2e6>
 80132a2:	230d      	movs	r3, #13
 80132a4:	e105      	b.n	80134b2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80132a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80132a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80132aa:	4413      	add	r3, r2
 80132ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80132ae:	8911      	ldrh	r1, [r2, #8]
 80132b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80132b2:	8992      	ldrh	r2, [r2, #12]
 80132b4:	0952      	lsrs	r2, r2, #5
 80132b6:	b292      	uxth	r2, r2
 80132b8:	fbb1 f2f2 	udiv	r2, r1, r2
 80132bc:	b292      	uxth	r2, r2
 80132be:	4413      	add	r3, r2
 80132c0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80132c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80132c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132c6:	429a      	cmp	r2, r3
 80132c8:	d201      	bcs.n	80132ce <find_volume+0x30e>
 80132ca:	230d      	movs	r3, #13
 80132cc:	e0f1      	b.n	80134b2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80132ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80132d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132d2:	1ad3      	subs	r3, r2, r3
 80132d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80132d6:	8952      	ldrh	r2, [r2, #10]
 80132d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80132dc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80132de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d101      	bne.n	80132e8 <find_volume+0x328>
 80132e4:	230d      	movs	r3, #13
 80132e6:	e0e4      	b.n	80134b2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80132e8:	2303      	movs	r3, #3
 80132ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80132ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132f0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80132f4:	4293      	cmp	r3, r2
 80132f6:	d802      	bhi.n	80132fe <find_volume+0x33e>
 80132f8:	2302      	movs	r3, #2
 80132fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80132fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013300:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013304:	4293      	cmp	r3, r2
 8013306:	d802      	bhi.n	801330e <find_volume+0x34e>
 8013308:	2301      	movs	r3, #1
 801330a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801330e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013310:	1c9a      	adds	r2, r3, #2
 8013312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013314:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8013316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013318:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801331a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801331c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801331e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013320:	441a      	add	r2, r3
 8013322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013324:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8013326:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801332a:	441a      	add	r2, r3
 801332c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801332e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8013330:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013334:	2b03      	cmp	r3, #3
 8013336:	d11e      	bne.n	8013376 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801333a:	3338      	adds	r3, #56	@ 0x38
 801333c:	332a      	adds	r3, #42	@ 0x2a
 801333e:	4618      	mov	r0, r3
 8013340:	f7fd ffc2 	bl	80112c8 <ld_word>
 8013344:	4603      	mov	r3, r0
 8013346:	2b00      	cmp	r3, #0
 8013348:	d001      	beq.n	801334e <find_volume+0x38e>
 801334a:	230d      	movs	r3, #13
 801334c:	e0b1      	b.n	80134b2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801334e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013350:	891b      	ldrh	r3, [r3, #8]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d001      	beq.n	801335a <find_volume+0x39a>
 8013356:	230d      	movs	r3, #13
 8013358:	e0ab      	b.n	80134b2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801335a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801335c:	3338      	adds	r3, #56	@ 0x38
 801335e:	332c      	adds	r3, #44	@ 0x2c
 8013360:	4618      	mov	r0, r3
 8013362:	f7fd ffc9 	bl	80112f8 <ld_dword>
 8013366:	4602      	mov	r2, r0
 8013368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801336a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801336c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801336e:	69db      	ldr	r3, [r3, #28]
 8013370:	009b      	lsls	r3, r3, #2
 8013372:	647b      	str	r3, [r7, #68]	@ 0x44
 8013374:	e01f      	b.n	80133b6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013378:	891b      	ldrh	r3, [r3, #8]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d101      	bne.n	8013382 <find_volume+0x3c2>
 801337e:	230d      	movs	r3, #13
 8013380:	e097      	b.n	80134b2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013384:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013388:	441a      	add	r2, r3
 801338a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801338c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801338e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013392:	2b02      	cmp	r3, #2
 8013394:	d103      	bne.n	801339e <find_volume+0x3de>
 8013396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013398:	69db      	ldr	r3, [r3, #28]
 801339a:	005b      	lsls	r3, r3, #1
 801339c:	e00a      	b.n	80133b4 <find_volume+0x3f4>
 801339e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133a0:	69da      	ldr	r2, [r3, #28]
 80133a2:	4613      	mov	r3, r2
 80133a4:	005b      	lsls	r3, r3, #1
 80133a6:	4413      	add	r3, r2
 80133a8:	085a      	lsrs	r2, r3, #1
 80133aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ac:	69db      	ldr	r3, [r3, #28]
 80133ae:	f003 0301 	and.w	r3, r3, #1
 80133b2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80133b4:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80133b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133b8:	6a1a      	ldr	r2, [r3, #32]
 80133ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133bc:	899b      	ldrh	r3, [r3, #12]
 80133be:	4619      	mov	r1, r3
 80133c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133c2:	440b      	add	r3, r1
 80133c4:	3b01      	subs	r3, #1
 80133c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80133c8:	8989      	ldrh	r1, [r1, #12]
 80133ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80133ce:	429a      	cmp	r2, r3
 80133d0:	d201      	bcs.n	80133d6 <find_volume+0x416>
 80133d2:	230d      	movs	r3, #13
 80133d4:	e06d      	b.n	80134b2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80133d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133d8:	f04f 32ff 	mov.w	r2, #4294967295
 80133dc:	619a      	str	r2, [r3, #24]
 80133de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133e0:	699a      	ldr	r2, [r3, #24]
 80133e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133e4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80133e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133e8:	2280      	movs	r2, #128	@ 0x80
 80133ea:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80133ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80133f0:	2b03      	cmp	r3, #3
 80133f2:	d149      	bne.n	8013488 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80133f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133f6:	3338      	adds	r3, #56	@ 0x38
 80133f8:	3330      	adds	r3, #48	@ 0x30
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7fd ff64 	bl	80112c8 <ld_word>
 8013400:	4603      	mov	r3, r0
 8013402:	2b01      	cmp	r3, #1
 8013404:	d140      	bne.n	8013488 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013406:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013408:	3301      	adds	r3, #1
 801340a:	4619      	mov	r1, r3
 801340c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801340e:	f7fe fa0b 	bl	8011828 <move_window>
 8013412:	4603      	mov	r3, r0
 8013414:	2b00      	cmp	r3, #0
 8013416:	d137      	bne.n	8013488 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8013418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801341a:	2200      	movs	r2, #0
 801341c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801341e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013420:	3338      	adds	r3, #56	@ 0x38
 8013422:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013426:	4618      	mov	r0, r3
 8013428:	f7fd ff4e 	bl	80112c8 <ld_word>
 801342c:	4603      	mov	r3, r0
 801342e:	461a      	mov	r2, r3
 8013430:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013434:	429a      	cmp	r2, r3
 8013436:	d127      	bne.n	8013488 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801343a:	3338      	adds	r3, #56	@ 0x38
 801343c:	4618      	mov	r0, r3
 801343e:	f7fd ff5b 	bl	80112f8 <ld_dword>
 8013442:	4603      	mov	r3, r0
 8013444:	4a1d      	ldr	r2, [pc, #116]	@ (80134bc <find_volume+0x4fc>)
 8013446:	4293      	cmp	r3, r2
 8013448:	d11e      	bne.n	8013488 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801344a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801344c:	3338      	adds	r3, #56	@ 0x38
 801344e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013452:	4618      	mov	r0, r3
 8013454:	f7fd ff50 	bl	80112f8 <ld_dword>
 8013458:	4603      	mov	r3, r0
 801345a:	4a19      	ldr	r2, [pc, #100]	@ (80134c0 <find_volume+0x500>)
 801345c:	4293      	cmp	r3, r2
 801345e:	d113      	bne.n	8013488 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013462:	3338      	adds	r3, #56	@ 0x38
 8013464:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013468:	4618      	mov	r0, r3
 801346a:	f7fd ff45 	bl	80112f8 <ld_dword>
 801346e:	4602      	mov	r2, r0
 8013470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013472:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013476:	3338      	adds	r3, #56	@ 0x38
 8013478:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801347c:	4618      	mov	r0, r3
 801347e:	f7fd ff3b 	bl	80112f8 <ld_dword>
 8013482:	4602      	mov	r2, r0
 8013484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013486:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801348a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801348e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013490:	4b0c      	ldr	r3, [pc, #48]	@ (80134c4 <find_volume+0x504>)
 8013492:	881b      	ldrh	r3, [r3, #0]
 8013494:	3301      	adds	r3, #1
 8013496:	b29a      	uxth	r2, r3
 8013498:	4b0a      	ldr	r3, [pc, #40]	@ (80134c4 <find_volume+0x504>)
 801349a:	801a      	strh	r2, [r3, #0]
 801349c:	4b09      	ldr	r3, [pc, #36]	@ (80134c4 <find_volume+0x504>)
 801349e:	881a      	ldrh	r2, [r3, #0]
 80134a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134a2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80134a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134a6:	4a08      	ldr	r2, [pc, #32]	@ (80134c8 <find_volume+0x508>)
 80134a8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80134aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80134ac:	f7fe f954 	bl	8011758 <clear_lock>
#endif
	return FR_OK;
 80134b0:	2300      	movs	r3, #0
}
 80134b2:	4618      	mov	r0, r3
 80134b4:	3758      	adds	r7, #88	@ 0x58
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}
 80134ba:	bf00      	nop
 80134bc:	41615252 	.word	0x41615252
 80134c0:	61417272 	.word	0x61417272
 80134c4:	24002918 	.word	0x24002918
 80134c8:	2400293c 	.word	0x2400293c

080134cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b084      	sub	sp, #16
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
 80134d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80134d6:	2309      	movs	r3, #9
 80134d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d01c      	beq.n	801351a <validate+0x4e>
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d018      	beq.n	801351a <validate+0x4e>
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	781b      	ldrb	r3, [r3, #0]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d013      	beq.n	801351a <validate+0x4e>
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	889a      	ldrh	r2, [r3, #4]
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	88db      	ldrh	r3, [r3, #6]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d10c      	bne.n	801351a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	785b      	ldrb	r3, [r3, #1]
 8013506:	4618      	mov	r0, r3
 8013508:	f7fd fe3e 	bl	8011188 <disk_status>
 801350c:	4603      	mov	r3, r0
 801350e:	f003 0301 	and.w	r3, r3, #1
 8013512:	2b00      	cmp	r3, #0
 8013514:	d101      	bne.n	801351a <validate+0x4e>
			res = FR_OK;
 8013516:	2300      	movs	r3, #0
 8013518:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801351a:	7bfb      	ldrb	r3, [r7, #15]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d102      	bne.n	8013526 <validate+0x5a>
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	e000      	b.n	8013528 <validate+0x5c>
 8013526:	2300      	movs	r3, #0
 8013528:	683a      	ldr	r2, [r7, #0]
 801352a:	6013      	str	r3, [r2, #0]
	return res;
 801352c:	7bfb      	ldrb	r3, [r7, #15]
}
 801352e:	4618      	mov	r0, r3
 8013530:	3710      	adds	r7, #16
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
	...

08013538 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b088      	sub	sp, #32
 801353c:	af00      	add	r7, sp, #0
 801353e:	60f8      	str	r0, [r7, #12]
 8013540:	60b9      	str	r1, [r7, #8]
 8013542:	4613      	mov	r3, r2
 8013544:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801354a:	f107 0310 	add.w	r3, r7, #16
 801354e:	4618      	mov	r0, r3
 8013550:	f7ff fc9c 	bl	8012e8c <get_ldnumber>
 8013554:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013556:	69fb      	ldr	r3, [r7, #28]
 8013558:	2b00      	cmp	r3, #0
 801355a:	da01      	bge.n	8013560 <f_mount+0x28>
 801355c:	230b      	movs	r3, #11
 801355e:	e02b      	b.n	80135b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013560:	4a17      	ldr	r2, [pc, #92]	@ (80135c0 <f_mount+0x88>)
 8013562:	69fb      	ldr	r3, [r7, #28]
 8013564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013568:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801356a:	69bb      	ldr	r3, [r7, #24]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d005      	beq.n	801357c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013570:	69b8      	ldr	r0, [r7, #24]
 8013572:	f7fe f8f1 	bl	8011758 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013576:	69bb      	ldr	r3, [r7, #24]
 8013578:	2200      	movs	r2, #0
 801357a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d002      	beq.n	8013588 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	2200      	movs	r2, #0
 8013586:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013588:	68fa      	ldr	r2, [r7, #12]
 801358a:	490d      	ldr	r1, [pc, #52]	@ (80135c0 <f_mount+0x88>)
 801358c:	69fb      	ldr	r3, [r7, #28]
 801358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d002      	beq.n	801359e <f_mount+0x66>
 8013598:	79fb      	ldrb	r3, [r7, #7]
 801359a:	2b01      	cmp	r3, #1
 801359c:	d001      	beq.n	80135a2 <f_mount+0x6a>
 801359e:	2300      	movs	r3, #0
 80135a0:	e00a      	b.n	80135b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80135a2:	f107 010c 	add.w	r1, r7, #12
 80135a6:	f107 0308 	add.w	r3, r7, #8
 80135aa:	2200      	movs	r2, #0
 80135ac:	4618      	mov	r0, r3
 80135ae:	f7ff fd07 	bl	8012fc0 <find_volume>
 80135b2:	4603      	mov	r3, r0
 80135b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80135b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3720      	adds	r7, #32
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}
 80135c0:	24002914 	.word	0x24002914

080135c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b09a      	sub	sp, #104	@ 0x68
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	4613      	mov	r3, r2
 80135d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d101      	bne.n	80135dc <f_open+0x18>
 80135d8:	2309      	movs	r3, #9
 80135da:	e1b7      	b.n	801394c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80135dc:	79fb      	ldrb	r3, [r7, #7]
 80135de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80135e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80135e4:	79fa      	ldrb	r2, [r7, #7]
 80135e6:	f107 0114 	add.w	r1, r7, #20
 80135ea:	f107 0308 	add.w	r3, r7, #8
 80135ee:	4618      	mov	r0, r3
 80135f0:	f7ff fce6 	bl	8012fc0 <find_volume>
 80135f4:	4603      	mov	r3, r0
 80135f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80135fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80135fe:	2b00      	cmp	r3, #0
 8013600:	f040 819b 	bne.w	801393a <f_open+0x376>
		dj.obj.fs = fs;
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013608:	68ba      	ldr	r2, [r7, #8]
 801360a:	f107 0318 	add.w	r3, r7, #24
 801360e:	4611      	mov	r1, r2
 8013610:	4618      	mov	r0, r3
 8013612:	f7ff fbc5 	bl	8012da0 <follow_path>
 8013616:	4603      	mov	r3, r0
 8013618:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801361c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013620:	2b00      	cmp	r3, #0
 8013622:	d118      	bne.n	8013656 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013624:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013628:	b25b      	sxtb	r3, r3
 801362a:	2b00      	cmp	r3, #0
 801362c:	da03      	bge.n	8013636 <f_open+0x72>
				res = FR_INVALID_NAME;
 801362e:	2306      	movs	r3, #6
 8013630:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013634:	e00f      	b.n	8013656 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013636:	79fb      	ldrb	r3, [r7, #7]
 8013638:	2b01      	cmp	r3, #1
 801363a:	bf8c      	ite	hi
 801363c:	2301      	movhi	r3, #1
 801363e:	2300      	movls	r3, #0
 8013640:	b2db      	uxtb	r3, r3
 8013642:	461a      	mov	r2, r3
 8013644:	f107 0318 	add.w	r3, r7, #24
 8013648:	4611      	mov	r1, r2
 801364a:	4618      	mov	r0, r3
 801364c:	f7fd ff3c 	bl	80114c8 <chk_lock>
 8013650:	4603      	mov	r3, r0
 8013652:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013656:	79fb      	ldrb	r3, [r7, #7]
 8013658:	f003 031c 	and.w	r3, r3, #28
 801365c:	2b00      	cmp	r3, #0
 801365e:	d07f      	beq.n	8013760 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8013660:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013664:	2b00      	cmp	r3, #0
 8013666:	d017      	beq.n	8013698 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013668:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801366c:	2b04      	cmp	r3, #4
 801366e:	d10e      	bne.n	801368e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013670:	f7fd ff86 	bl	8011580 <enq_lock>
 8013674:	4603      	mov	r3, r0
 8013676:	2b00      	cmp	r3, #0
 8013678:	d006      	beq.n	8013688 <f_open+0xc4>
 801367a:	f107 0318 	add.w	r3, r7, #24
 801367e:	4618      	mov	r0, r3
 8013680:	f7ff f8de 	bl	8012840 <dir_register>
 8013684:	4603      	mov	r3, r0
 8013686:	e000      	b.n	801368a <f_open+0xc6>
 8013688:	2312      	movs	r3, #18
 801368a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801368e:	79fb      	ldrb	r3, [r7, #7]
 8013690:	f043 0308 	orr.w	r3, r3, #8
 8013694:	71fb      	strb	r3, [r7, #7]
 8013696:	e010      	b.n	80136ba <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013698:	7fbb      	ldrb	r3, [r7, #30]
 801369a:	f003 0311 	and.w	r3, r3, #17
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d003      	beq.n	80136aa <f_open+0xe6>
					res = FR_DENIED;
 80136a2:	2307      	movs	r3, #7
 80136a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80136a8:	e007      	b.n	80136ba <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80136aa:	79fb      	ldrb	r3, [r7, #7]
 80136ac:	f003 0304 	and.w	r3, r3, #4
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d002      	beq.n	80136ba <f_open+0xf6>
 80136b4:	2308      	movs	r3, #8
 80136b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80136ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d168      	bne.n	8013794 <f_open+0x1d0>
 80136c2:	79fb      	ldrb	r3, [r7, #7]
 80136c4:	f003 0308 	and.w	r3, r3, #8
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d063      	beq.n	8013794 <f_open+0x1d0>
				dw = GET_FATTIME();
 80136cc:	f7fb fd02 	bl	800f0d4 <get_fattime>
 80136d0:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80136d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136d4:	330e      	adds	r3, #14
 80136d6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80136d8:	4618      	mov	r0, r3
 80136da:	f7fd fe4b 	bl	8011374 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80136de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136e0:	3316      	adds	r3, #22
 80136e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7fd fe45 	bl	8011374 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80136ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136ec:	330b      	adds	r3, #11
 80136ee:	2220      	movs	r2, #32
 80136f0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80136f2:	697b      	ldr	r3, [r7, #20]
 80136f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80136f6:	4611      	mov	r1, r2
 80136f8:	4618      	mov	r0, r3
 80136fa:	f7fe fe1a 	bl	8012332 <ld_clust>
 80136fe:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013700:	697b      	ldr	r3, [r7, #20]
 8013702:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013704:	2200      	movs	r2, #0
 8013706:	4618      	mov	r0, r3
 8013708:	f7fe fe32 	bl	8012370 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801370c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801370e:	331c      	adds	r3, #28
 8013710:	2100      	movs	r1, #0
 8013712:	4618      	mov	r0, r3
 8013714:	f7fd fe2e 	bl	8011374 <st_dword>
					fs->wflag = 1;
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	2201      	movs	r2, #1
 801371c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801371e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013720:	2b00      	cmp	r3, #0
 8013722:	d037      	beq.n	8013794 <f_open+0x1d0>
						dw = fs->winsect;
 8013724:	697b      	ldr	r3, [r7, #20]
 8013726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013728:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801372a:	f107 0318 	add.w	r3, r7, #24
 801372e:	2200      	movs	r2, #0
 8013730:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013732:	4618      	mov	r0, r3
 8013734:	f7fe fb22 	bl	8011d7c <remove_chain>
 8013738:	4603      	mov	r3, r0
 801373a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801373e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013742:	2b00      	cmp	r3, #0
 8013744:	d126      	bne.n	8013794 <f_open+0x1d0>
							res = move_window(fs, dw);
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801374a:	4618      	mov	r0, r3
 801374c:	f7fe f86c 	bl	8011828 <move_window>
 8013750:	4603      	mov	r3, r0
 8013752:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013756:	697b      	ldr	r3, [r7, #20]
 8013758:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801375a:	3a01      	subs	r2, #1
 801375c:	615a      	str	r2, [r3, #20]
 801375e:	e019      	b.n	8013794 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013760:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013764:	2b00      	cmp	r3, #0
 8013766:	d115      	bne.n	8013794 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013768:	7fbb      	ldrb	r3, [r7, #30]
 801376a:	f003 0310 	and.w	r3, r3, #16
 801376e:	2b00      	cmp	r3, #0
 8013770:	d003      	beq.n	801377a <f_open+0x1b6>
					res = FR_NO_FILE;
 8013772:	2304      	movs	r3, #4
 8013774:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013778:	e00c      	b.n	8013794 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801377a:	79fb      	ldrb	r3, [r7, #7]
 801377c:	f003 0302 	and.w	r3, r3, #2
 8013780:	2b00      	cmp	r3, #0
 8013782:	d007      	beq.n	8013794 <f_open+0x1d0>
 8013784:	7fbb      	ldrb	r3, [r7, #30]
 8013786:	f003 0301 	and.w	r3, r3, #1
 801378a:	2b00      	cmp	r3, #0
 801378c:	d002      	beq.n	8013794 <f_open+0x1d0>
						res = FR_DENIED;
 801378e:	2307      	movs	r3, #7
 8013790:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8013794:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013798:	2b00      	cmp	r3, #0
 801379a:	d126      	bne.n	80137ea <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801379c:	79fb      	ldrb	r3, [r7, #7]
 801379e:	f003 0308 	and.w	r3, r3, #8
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d003      	beq.n	80137ae <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80137a6:	79fb      	ldrb	r3, [r7, #7]
 80137a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137ac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80137b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80137bc:	79fb      	ldrb	r3, [r7, #7]
 80137be:	2b01      	cmp	r3, #1
 80137c0:	bf8c      	ite	hi
 80137c2:	2301      	movhi	r3, #1
 80137c4:	2300      	movls	r3, #0
 80137c6:	b2db      	uxtb	r3, r3
 80137c8:	461a      	mov	r2, r3
 80137ca:	f107 0318 	add.w	r3, r7, #24
 80137ce:	4611      	mov	r1, r2
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7fd fef7 	bl	80115c4 <inc_lock>
 80137d6:	4602      	mov	r2, r0
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	691b      	ldr	r3, [r3, #16]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d102      	bne.n	80137ea <f_open+0x226>
 80137e4:	2302      	movs	r3, #2
 80137e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80137ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	f040 80a3 	bne.w	801393a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80137f8:	4611      	mov	r1, r2
 80137fa:	4618      	mov	r0, r3
 80137fc:	f7fe fd99 	bl	8012332 <ld_clust>
 8013800:	4602      	mov	r2, r0
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013808:	331c      	adds	r3, #28
 801380a:	4618      	mov	r0, r3
 801380c:	f7fd fd74 	bl	80112f8 <ld_dword>
 8013810:	4602      	mov	r2, r0
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	2200      	movs	r2, #0
 801381a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801381c:	697a      	ldr	r2, [r7, #20]
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	88da      	ldrh	r2, [r3, #6]
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	79fa      	ldrb	r2, [r7, #7]
 801382e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	2200      	movs	r2, #0
 8013834:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	2200      	movs	r2, #0
 801383a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	2200      	movs	r2, #0
 8013840:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	3330      	adds	r3, #48	@ 0x30
 8013846:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801384a:	2100      	movs	r1, #0
 801384c:	4618      	mov	r0, r3
 801384e:	f7fd fdde 	bl	801140e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013852:	79fb      	ldrb	r3, [r7, #7]
 8013854:	f003 0320 	and.w	r3, r3, #32
 8013858:	2b00      	cmp	r3, #0
 801385a:	d06e      	beq.n	801393a <f_open+0x376>
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	68db      	ldr	r3, [r3, #12]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d06a      	beq.n	801393a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	68da      	ldr	r2, [r3, #12]
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801386c:	697b      	ldr	r3, [r7, #20]
 801386e:	895b      	ldrh	r3, [r3, #10]
 8013870:	461a      	mov	r2, r3
 8013872:	697b      	ldr	r3, [r7, #20]
 8013874:	899b      	ldrh	r3, [r3, #12]
 8013876:	fb02 f303 	mul.w	r3, r2, r3
 801387a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	689b      	ldr	r3, [r3, #8]
 8013880:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	68db      	ldr	r3, [r3, #12]
 8013886:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013888:	e016      	b.n	80138b8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801388e:	4618      	mov	r0, r3
 8013890:	f7fe f887 	bl	80119a2 <get_fat>
 8013894:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8013896:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013898:	2b01      	cmp	r3, #1
 801389a:	d802      	bhi.n	80138a2 <f_open+0x2de>
 801389c:	2302      	movs	r3, #2
 801389e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80138a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80138a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138a8:	d102      	bne.n	80138b0 <f_open+0x2ec>
 80138aa:	2301      	movs	r3, #1
 80138ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80138b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80138b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80138b4:	1ad3      	subs	r3, r2, r3
 80138b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80138b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d103      	bne.n	80138c8 <f_open+0x304>
 80138c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80138c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d8e0      	bhi.n	801388a <f_open+0x2c6>
				}
				fp->clust = clst;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80138cc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80138ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d131      	bne.n	801393a <f_open+0x376>
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	899b      	ldrh	r3, [r3, #12]
 80138da:	461a      	mov	r2, r3
 80138dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80138de:	fbb3 f1f2 	udiv	r1, r3, r2
 80138e2:	fb01 f202 	mul.w	r2, r1, r2
 80138e6:	1a9b      	subs	r3, r3, r2
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d026      	beq.n	801393a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80138f0:	4618      	mov	r0, r3
 80138f2:	f7fe f837 	bl	8011964 <clust2sect>
 80138f6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80138f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d103      	bne.n	8013906 <f_open+0x342>
						res = FR_INT_ERR;
 80138fe:	2302      	movs	r3, #2
 8013900:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013904:	e019      	b.n	801393a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013906:	697b      	ldr	r3, [r7, #20]
 8013908:	899b      	ldrh	r3, [r3, #12]
 801390a:	461a      	mov	r2, r3
 801390c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801390e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013914:	441a      	add	r2, r3
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801391a:	697b      	ldr	r3, [r7, #20]
 801391c:	7858      	ldrb	r0, [r3, #1]
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	6a1a      	ldr	r2, [r3, #32]
 8013928:	2301      	movs	r3, #1
 801392a:	f7fd fc6f 	bl	801120c <disk_read>
 801392e:	4603      	mov	r3, r0
 8013930:	2b00      	cmp	r3, #0
 8013932:	d002      	beq.n	801393a <f_open+0x376>
 8013934:	2301      	movs	r3, #1
 8013936:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801393a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801393e:	2b00      	cmp	r3, #0
 8013940:	d002      	beq.n	8013948 <f_open+0x384>
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	2200      	movs	r2, #0
 8013946:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013948:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801394c:	4618      	mov	r0, r3
 801394e:	3768      	adds	r7, #104	@ 0x68
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}

08013954 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b08c      	sub	sp, #48	@ 0x30
 8013958:	af00      	add	r7, sp, #0
 801395a:	60f8      	str	r0, [r7, #12]
 801395c:	60b9      	str	r1, [r7, #8]
 801395e:	607a      	str	r2, [r7, #4]
 8013960:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013966:	683b      	ldr	r3, [r7, #0]
 8013968:	2200      	movs	r2, #0
 801396a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	f107 0210 	add.w	r2, r7, #16
 8013972:	4611      	mov	r1, r2
 8013974:	4618      	mov	r0, r3
 8013976:	f7ff fda9 	bl	80134cc <validate>
 801397a:	4603      	mov	r3, r0
 801397c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013980:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013984:	2b00      	cmp	r3, #0
 8013986:	d107      	bne.n	8013998 <f_write+0x44>
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	7d5b      	ldrb	r3, [r3, #21]
 801398c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013990:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013994:	2b00      	cmp	r3, #0
 8013996:	d002      	beq.n	801399e <f_write+0x4a>
 8013998:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801399c:	e16a      	b.n	8013c74 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	7d1b      	ldrb	r3, [r3, #20]
 80139a2:	f003 0302 	and.w	r3, r3, #2
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d101      	bne.n	80139ae <f_write+0x5a>
 80139aa:	2307      	movs	r3, #7
 80139ac:	e162      	b.n	8013c74 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	699a      	ldr	r2, [r3, #24]
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	441a      	add	r2, r3
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	699b      	ldr	r3, [r3, #24]
 80139ba:	429a      	cmp	r2, r3
 80139bc:	f080 814c 	bcs.w	8013c58 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	699b      	ldr	r3, [r3, #24]
 80139c4:	43db      	mvns	r3, r3
 80139c6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80139c8:	e146      	b.n	8013c58 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	699b      	ldr	r3, [r3, #24]
 80139ce:	693a      	ldr	r2, [r7, #16]
 80139d0:	8992      	ldrh	r2, [r2, #12]
 80139d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80139d6:	fb01 f202 	mul.w	r2, r1, r2
 80139da:	1a9b      	subs	r3, r3, r2
 80139dc:	2b00      	cmp	r3, #0
 80139de:	f040 80f1 	bne.w	8013bc4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	699b      	ldr	r3, [r3, #24]
 80139e6:	693a      	ldr	r2, [r7, #16]
 80139e8:	8992      	ldrh	r2, [r2, #12]
 80139ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80139ee:	693a      	ldr	r2, [r7, #16]
 80139f0:	8952      	ldrh	r2, [r2, #10]
 80139f2:	3a01      	subs	r2, #1
 80139f4:	4013      	ands	r3, r2
 80139f6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80139f8:	69bb      	ldr	r3, [r7, #24]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d143      	bne.n	8013a86 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	699b      	ldr	r3, [r3, #24]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d10c      	bne.n	8013a20 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	689b      	ldr	r3, [r3, #8]
 8013a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d11a      	bne.n	8013a48 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	2100      	movs	r1, #0
 8013a16:	4618      	mov	r0, r3
 8013a18:	f7fe fa15 	bl	8011e46 <create_chain>
 8013a1c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013a1e:	e013      	b.n	8013a48 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d007      	beq.n	8013a38 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	699b      	ldr	r3, [r3, #24]
 8013a2c:	4619      	mov	r1, r3
 8013a2e:	68f8      	ldr	r0, [r7, #12]
 8013a30:	f7fe faa1 	bl	8011f76 <clmt_clust>
 8013a34:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013a36:	e007      	b.n	8013a48 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013a38:	68fa      	ldr	r2, [r7, #12]
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	69db      	ldr	r3, [r3, #28]
 8013a3e:	4619      	mov	r1, r3
 8013a40:	4610      	mov	r0, r2
 8013a42:	f7fe fa00 	bl	8011e46 <create_chain>
 8013a46:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	f000 8109 	beq.w	8013c62 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a52:	2b01      	cmp	r3, #1
 8013a54:	d104      	bne.n	8013a60 <f_write+0x10c>
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	2202      	movs	r2, #2
 8013a5a:	755a      	strb	r2, [r3, #21]
 8013a5c:	2302      	movs	r3, #2
 8013a5e:	e109      	b.n	8013c74 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a66:	d104      	bne.n	8013a72 <f_write+0x11e>
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	2201      	movs	r2, #1
 8013a6c:	755a      	strb	r2, [r3, #21]
 8013a6e:	2301      	movs	r3, #1
 8013a70:	e100      	b.n	8013c74 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a76:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	689b      	ldr	r3, [r3, #8]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d102      	bne.n	8013a86 <f_write+0x132>
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a84:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	7d1b      	ldrb	r3, [r3, #20]
 8013a8a:	b25b      	sxtb	r3, r3
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	da18      	bge.n	8013ac2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	7858      	ldrb	r0, [r3, #1]
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	6a1a      	ldr	r2, [r3, #32]
 8013a9e:	2301      	movs	r3, #1
 8013aa0:	f7fd fbd4 	bl	801124c <disk_write>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d004      	beq.n	8013ab4 <f_write+0x160>
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	2201      	movs	r2, #1
 8013aae:	755a      	strb	r2, [r3, #21]
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	e0df      	b.n	8013c74 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	7d1b      	ldrb	r3, [r3, #20]
 8013ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013abc:	b2da      	uxtb	r2, r3
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013ac2:	693a      	ldr	r2, [r7, #16]
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	69db      	ldr	r3, [r3, #28]
 8013ac8:	4619      	mov	r1, r3
 8013aca:	4610      	mov	r0, r2
 8013acc:	f7fd ff4a 	bl	8011964 <clust2sect>
 8013ad0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d104      	bne.n	8013ae2 <f_write+0x18e>
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	2202      	movs	r2, #2
 8013adc:	755a      	strb	r2, [r3, #21]
 8013ade:	2302      	movs	r3, #2
 8013ae0:	e0c8      	b.n	8013c74 <f_write+0x320>
			sect += csect;
 8013ae2:	697a      	ldr	r2, [r7, #20]
 8013ae4:	69bb      	ldr	r3, [r7, #24]
 8013ae6:	4413      	add	r3, r2
 8013ae8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013aea:	693b      	ldr	r3, [r7, #16]
 8013aec:	899b      	ldrh	r3, [r3, #12]
 8013aee:	461a      	mov	r2, r3
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	fbb3 f3f2 	udiv	r3, r3, r2
 8013af6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013af8:	6a3b      	ldr	r3, [r7, #32]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d043      	beq.n	8013b86 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013afe:	69ba      	ldr	r2, [r7, #24]
 8013b00:	6a3b      	ldr	r3, [r7, #32]
 8013b02:	4413      	add	r3, r2
 8013b04:	693a      	ldr	r2, [r7, #16]
 8013b06:	8952      	ldrh	r2, [r2, #10]
 8013b08:	4293      	cmp	r3, r2
 8013b0a:	d905      	bls.n	8013b18 <f_write+0x1c4>
					cc = fs->csize - csect;
 8013b0c:	693b      	ldr	r3, [r7, #16]
 8013b0e:	895b      	ldrh	r3, [r3, #10]
 8013b10:	461a      	mov	r2, r3
 8013b12:	69bb      	ldr	r3, [r7, #24]
 8013b14:	1ad3      	subs	r3, r2, r3
 8013b16:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b18:	693b      	ldr	r3, [r7, #16]
 8013b1a:	7858      	ldrb	r0, [r3, #1]
 8013b1c:	6a3b      	ldr	r3, [r7, #32]
 8013b1e:	697a      	ldr	r2, [r7, #20]
 8013b20:	69f9      	ldr	r1, [r7, #28]
 8013b22:	f7fd fb93 	bl	801124c <disk_write>
 8013b26:	4603      	mov	r3, r0
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d004      	beq.n	8013b36 <f_write+0x1e2>
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	2201      	movs	r2, #1
 8013b30:	755a      	strb	r2, [r3, #21]
 8013b32:	2301      	movs	r3, #1
 8013b34:	e09e      	b.n	8013c74 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	6a1a      	ldr	r2, [r3, #32]
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	1ad3      	subs	r3, r2, r3
 8013b3e:	6a3a      	ldr	r2, [r7, #32]
 8013b40:	429a      	cmp	r2, r3
 8013b42:	d918      	bls.n	8013b76 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	6a1a      	ldr	r2, [r3, #32]
 8013b4e:	697b      	ldr	r3, [r7, #20]
 8013b50:	1ad3      	subs	r3, r2, r3
 8013b52:	693a      	ldr	r2, [r7, #16]
 8013b54:	8992      	ldrh	r2, [r2, #12]
 8013b56:	fb02 f303 	mul.w	r3, r2, r3
 8013b5a:	69fa      	ldr	r2, [r7, #28]
 8013b5c:	18d1      	adds	r1, r2, r3
 8013b5e:	693b      	ldr	r3, [r7, #16]
 8013b60:	899b      	ldrh	r3, [r3, #12]
 8013b62:	461a      	mov	r2, r3
 8013b64:	f7fd fc32 	bl	80113cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	7d1b      	ldrb	r3, [r3, #20]
 8013b6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013b70:	b2da      	uxtb	r2, r3
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013b76:	693b      	ldr	r3, [r7, #16]
 8013b78:	899b      	ldrh	r3, [r3, #12]
 8013b7a:	461a      	mov	r2, r3
 8013b7c:	6a3b      	ldr	r3, [r7, #32]
 8013b7e:	fb02 f303 	mul.w	r3, r2, r3
 8013b82:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8013b84:	e04b      	b.n	8013c1e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	6a1b      	ldr	r3, [r3, #32]
 8013b8a:	697a      	ldr	r2, [r7, #20]
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	d016      	beq.n	8013bbe <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	699a      	ldr	r2, [r3, #24]
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013b98:	429a      	cmp	r2, r3
 8013b9a:	d210      	bcs.n	8013bbe <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013b9c:	693b      	ldr	r3, [r7, #16]
 8013b9e:	7858      	ldrb	r0, [r3, #1]
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	697a      	ldr	r2, [r7, #20]
 8013baa:	f7fd fb2f 	bl	801120c <disk_read>
 8013bae:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d004      	beq.n	8013bbe <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	2201      	movs	r2, #1
 8013bb8:	755a      	strb	r2, [r3, #21]
 8013bba:	2301      	movs	r3, #1
 8013bbc:	e05a      	b.n	8013c74 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	697a      	ldr	r2, [r7, #20]
 8013bc2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013bc4:	693b      	ldr	r3, [r7, #16]
 8013bc6:	899b      	ldrh	r3, [r3, #12]
 8013bc8:	4618      	mov	r0, r3
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	699b      	ldr	r3, [r3, #24]
 8013bce:	693a      	ldr	r2, [r7, #16]
 8013bd0:	8992      	ldrh	r2, [r2, #12]
 8013bd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8013bd6:	fb01 f202 	mul.w	r2, r1, r2
 8013bda:	1a9b      	subs	r3, r3, r2
 8013bdc:	1ac3      	subs	r3, r0, r3
 8013bde:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	429a      	cmp	r2, r3
 8013be6:	d901      	bls.n	8013bec <f_write+0x298>
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	699b      	ldr	r3, [r3, #24]
 8013bf6:	693a      	ldr	r2, [r7, #16]
 8013bf8:	8992      	ldrh	r2, [r2, #12]
 8013bfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8013bfe:	fb00 f202 	mul.w	r2, r0, r2
 8013c02:	1a9b      	subs	r3, r3, r2
 8013c04:	440b      	add	r3, r1
 8013c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c08:	69f9      	ldr	r1, [r7, #28]
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7fd fbde 	bl	80113cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	7d1b      	ldrb	r3, [r3, #20]
 8013c14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013c18:	b2da      	uxtb	r2, r3
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013c1e:	69fa      	ldr	r2, [r7, #28]
 8013c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c22:	4413      	add	r3, r2
 8013c24:	61fb      	str	r3, [r7, #28]
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	699a      	ldr	r2, [r3, #24]
 8013c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c2c:	441a      	add	r2, r3
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	619a      	str	r2, [r3, #24]
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	68da      	ldr	r2, [r3, #12]
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	699b      	ldr	r3, [r3, #24]
 8013c3a:	429a      	cmp	r2, r3
 8013c3c:	bf38      	it	cc
 8013c3e:	461a      	movcc	r2, r3
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	60da      	str	r2, [r3, #12]
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	681a      	ldr	r2, [r3, #0]
 8013c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c4a:	441a      	add	r2, r3
 8013c4c:	683b      	ldr	r3, [r7, #0]
 8013c4e:	601a      	str	r2, [r3, #0]
 8013c50:	687a      	ldr	r2, [r7, #4]
 8013c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c54:	1ad3      	subs	r3, r2, r3
 8013c56:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	f47f aeb5 	bne.w	80139ca <f_write+0x76>
 8013c60:	e000      	b.n	8013c64 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013c62:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	7d1b      	ldrb	r3, [r3, #20]
 8013c68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c6c:	b2da      	uxtb	r2, r3
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013c72:	2300      	movs	r3, #0
}
 8013c74:	4618      	mov	r0, r3
 8013c76:	3730      	adds	r7, #48	@ 0x30
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}

08013c7c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b086      	sub	sp, #24
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f107 0208 	add.w	r2, r7, #8
 8013c8a:	4611      	mov	r1, r2
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f7ff fc1d 	bl	80134cc <validate>
 8013c92:	4603      	mov	r3, r0
 8013c94:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013c96:	7dfb      	ldrb	r3, [r7, #23]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d168      	bne.n	8013d6e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	7d1b      	ldrb	r3, [r3, #20]
 8013ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d062      	beq.n	8013d6e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	7d1b      	ldrb	r3, [r3, #20]
 8013cac:	b25b      	sxtb	r3, r3
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	da15      	bge.n	8013cde <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	7858      	ldrb	r0, [r3, #1]
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	6a1a      	ldr	r2, [r3, #32]
 8013cc0:	2301      	movs	r3, #1
 8013cc2:	f7fd fac3 	bl	801124c <disk_write>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d001      	beq.n	8013cd0 <f_sync+0x54>
 8013ccc:	2301      	movs	r3, #1
 8013cce:	e04f      	b.n	8013d70 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	7d1b      	ldrb	r3, [r3, #20]
 8013cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013cd8:	b2da      	uxtb	r2, r3
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013cde:	f7fb f9f9 	bl	800f0d4 <get_fattime>
 8013ce2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013ce4:	68ba      	ldr	r2, [r7, #8]
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cea:	4619      	mov	r1, r3
 8013cec:	4610      	mov	r0, r2
 8013cee:	f7fd fd9b 	bl	8011828 <move_window>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013cf6:	7dfb      	ldrb	r3, [r7, #23]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d138      	bne.n	8013d6e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d00:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	330b      	adds	r3, #11
 8013d06:	781a      	ldrb	r2, [r3, #0]
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	330b      	adds	r3, #11
 8013d0c:	f042 0220 	orr.w	r2, r2, #32
 8013d10:	b2d2      	uxtb	r2, r2
 8013d12:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	6818      	ldr	r0, [r3, #0]
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	689b      	ldr	r3, [r3, #8]
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	68f9      	ldr	r1, [r7, #12]
 8013d20:	f7fe fb26 	bl	8012370 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	f103 021c 	add.w	r2, r3, #28
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	68db      	ldr	r3, [r3, #12]
 8013d2e:	4619      	mov	r1, r3
 8013d30:	4610      	mov	r0, r2
 8013d32:	f7fd fb1f 	bl	8011374 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	3316      	adds	r3, #22
 8013d3a:	6939      	ldr	r1, [r7, #16]
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f7fd fb19 	bl	8011374 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	3312      	adds	r3, #18
 8013d46:	2100      	movs	r1, #0
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7fd faf8 	bl	801133e <st_word>
					fs->wflag = 1;
 8013d4e:	68bb      	ldr	r3, [r7, #8]
 8013d50:	2201      	movs	r2, #1
 8013d52:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013d54:	68bb      	ldr	r3, [r7, #8]
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7fd fd94 	bl	8011884 <sync_fs>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	7d1b      	ldrb	r3, [r3, #20]
 8013d64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013d68:	b2da      	uxtb	r2, r3
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	3718      	adds	r7, #24
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}

08013d78 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b084      	sub	sp, #16
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013d80:	6878      	ldr	r0, [r7, #4]
 8013d82:	f7ff ff7b 	bl	8013c7c <f_sync>
 8013d86:	4603      	mov	r3, r0
 8013d88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013d8a:	7bfb      	ldrb	r3, [r7, #15]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d118      	bne.n	8013dc2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	f107 0208 	add.w	r2, r7, #8
 8013d96:	4611      	mov	r1, r2
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f7ff fb97 	bl	80134cc <validate>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013da2:	7bfb      	ldrb	r3, [r7, #15]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d10c      	bne.n	8013dc2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	691b      	ldr	r3, [r3, #16]
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7fd fc97 	bl	80116e0 <dec_lock>
 8013db2:	4603      	mov	r3, r0
 8013db4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013db6:	7bfb      	ldrb	r3, [r7, #15]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d102      	bne.n	8013dc2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3710      	adds	r7, #16
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}

08013dcc <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b092      	sub	sp, #72	@ 0x48
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	60f8      	str	r0, [r7, #12]
 8013dd4:	60b9      	str	r1, [r7, #8]
 8013dd6:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013dd8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8013ddc:	f107 030c 	add.w	r3, r7, #12
 8013de0:	2200      	movs	r2, #0
 8013de2:	4618      	mov	r0, r3
 8013de4:	f7ff f8ec 	bl	8012fc0 <find_volume>
 8013de8:	4603      	mov	r3, r0
 8013dea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8013dee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	f040 8099 	bne.w	8013f2a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8013df8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8013dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e00:	699a      	ldr	r2, [r3, #24]
 8013e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e04:	69db      	ldr	r3, [r3, #28]
 8013e06:	3b02      	subs	r3, #2
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	d804      	bhi.n	8013e16 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8013e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e0e:	699a      	ldr	r2, [r3, #24]
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	601a      	str	r2, [r3, #0]
 8013e14:	e089      	b.n	8013f2a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8013e16:	2300      	movs	r3, #0
 8013e18:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8013e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e1c:	781b      	ldrb	r3, [r3, #0]
 8013e1e:	2b01      	cmp	r3, #1
 8013e20:	d128      	bne.n	8013e74 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8013e22:	2302      	movs	r3, #2
 8013e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e28:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8013e2a:	f107 0314 	add.w	r3, r7, #20
 8013e2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7fd fdb6 	bl	80119a2 <get_fat>
 8013e36:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8013e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e3e:	d103      	bne.n	8013e48 <f_getfree+0x7c>
 8013e40:	2301      	movs	r3, #1
 8013e42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8013e46:	e063      	b.n	8013f10 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8013e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e4a:	2b01      	cmp	r3, #1
 8013e4c:	d103      	bne.n	8013e56 <f_getfree+0x8a>
 8013e4e:	2302      	movs	r3, #2
 8013e50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8013e54:	e05c      	b.n	8013f10 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8013e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d102      	bne.n	8013e62 <f_getfree+0x96>
 8013e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e5e:	3301      	adds	r3, #1
 8013e60:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8013e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e64:	3301      	adds	r3, #1
 8013e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e6a:	69db      	ldr	r3, [r3, #28]
 8013e6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013e6e:	429a      	cmp	r2, r3
 8013e70:	d3db      	bcc.n	8013e2a <f_getfree+0x5e>
 8013e72:	e04d      	b.n	8013f10 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8013e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e76:	69db      	ldr	r3, [r3, #28]
 8013e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8013e80:	2300      	movs	r3, #0
 8013e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8013e84:	2300      	movs	r3, #0
 8013e86:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8013e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d113      	bne.n	8013eb6 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8013e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e92:	1c5a      	adds	r2, r3, #1
 8013e94:	63ba      	str	r2, [r7, #56]	@ 0x38
 8013e96:	4619      	mov	r1, r3
 8013e98:	f7fd fcc6 	bl	8011828 <move_window>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8013ea2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d131      	bne.n	8013f0e <f_getfree+0x142>
							p = fs->win;
 8013eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eac:	3338      	adds	r3, #56	@ 0x38
 8013eae:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8013eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eb2:	899b      	ldrh	r3, [r3, #12]
 8013eb4:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8013eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eb8:	781b      	ldrb	r3, [r3, #0]
 8013eba:	2b02      	cmp	r3, #2
 8013ebc:	d10f      	bne.n	8013ede <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8013ebe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013ec0:	f7fd fa02 	bl	80112c8 <ld_word>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d102      	bne.n	8013ed0 <f_getfree+0x104>
 8013eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ecc:	3301      	adds	r3, #1
 8013ece:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8013ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ed2:	3302      	adds	r3, #2
 8013ed4:	633b      	str	r3, [r7, #48]	@ 0x30
 8013ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ed8:	3b02      	subs	r3, #2
 8013eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8013edc:	e010      	b.n	8013f00 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8013ede:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013ee0:	f7fd fa0a 	bl	80112f8 <ld_dword>
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d102      	bne.n	8013ef4 <f_getfree+0x128>
 8013eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ef0:	3301      	adds	r3, #1
 8013ef2:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8013ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ef6:	3304      	adds	r3, #4
 8013ef8:	633b      	str	r3, [r7, #48]	@ 0x30
 8013efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013efc:	3b04      	subs	r3, #4
 8013efe:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8013f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f02:	3b01      	subs	r3, #1
 8013f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d1bd      	bne.n	8013e88 <f_getfree+0xbc>
 8013f0c:	e000      	b.n	8013f10 <f_getfree+0x144>
							if (res != FR_OK) break;
 8013f0e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013f14:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8013f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013f1a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8013f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f1e:	791a      	ldrb	r2, [r3, #4]
 8013f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f22:	f042 0201 	orr.w	r2, r2, #1
 8013f26:	b2d2      	uxtb	r2, r2
 8013f28:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8013f2a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3748      	adds	r7, #72	@ 0x48
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}

08013f36 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8013f36:	b580      	push	{r7, lr}
 8013f38:	b084      	sub	sp, #16
 8013f3a:	af00      	add	r7, sp, #0
 8013f3c:	6078      	str	r0, [r7, #4]
 8013f3e:	460b      	mov	r3, r1
 8013f40:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8013f42:	78fb      	ldrb	r3, [r7, #3]
 8013f44:	2b0a      	cmp	r3, #10
 8013f46:	d103      	bne.n	8013f50 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8013f48:	210d      	movs	r1, #13
 8013f4a:	6878      	ldr	r0, [r7, #4]
 8013f4c:	f7ff fff3 	bl	8013f36 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	685b      	ldr	r3, [r3, #4]
 8013f54:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	db25      	blt.n	8013fa8 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	1c5a      	adds	r2, r3, #1
 8013f60:	60fa      	str	r2, [r7, #12]
 8013f62:	687a      	ldr	r2, [r7, #4]
 8013f64:	4413      	add	r3, r2
 8013f66:	78fa      	ldrb	r2, [r7, #3]
 8013f68:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	2b3c      	cmp	r3, #60	@ 0x3c
 8013f6e:	dd12      	ble.n	8013f96 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	6818      	ldr	r0, [r3, #0]
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f103 010c 	add.w	r1, r3, #12
 8013f7a:	68fa      	ldr	r2, [r7, #12]
 8013f7c:	f107 0308 	add.w	r3, r7, #8
 8013f80:	f7ff fce8 	bl	8013954 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8013f84:	68ba      	ldr	r2, [r7, #8]
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	429a      	cmp	r2, r3
 8013f8a:	d101      	bne.n	8013f90 <putc_bfd+0x5a>
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	e001      	b.n	8013f94 <putc_bfd+0x5e>
 8013f90:	f04f 33ff 	mov.w	r3, #4294967295
 8013f94:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	68fa      	ldr	r2, [r7, #12]
 8013f9a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	689b      	ldr	r3, [r3, #8]
 8013fa0:	1c5a      	adds	r2, r3, #1
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	609a      	str	r2, [r3, #8]
 8013fa6:	e000      	b.n	8013faa <putc_bfd+0x74>
	if (i < 0) return;
 8013fa8:	bf00      	nop
}
 8013faa:	3710      	adds	r7, #16
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd80      	pop	{r7, pc}

08013fb0 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b084      	sub	sp, #16
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	685b      	ldr	r3, [r3, #4]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	db16      	blt.n	8013fee <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	6818      	ldr	r0, [r3, #0]
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f103 010c 	add.w	r1, r3, #12
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	685b      	ldr	r3, [r3, #4]
 8013fce:	461a      	mov	r2, r3
 8013fd0:	f107 030c 	add.w	r3, r7, #12
 8013fd4:	f7ff fcbe 	bl	8013954 <f_write>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d107      	bne.n	8013fee <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	685b      	ldr	r3, [r3, #4]
 8013fe2:	68fa      	ldr	r2, [r7, #12]
 8013fe4:	4293      	cmp	r3, r2
 8013fe6:	d102      	bne.n	8013fee <putc_flush+0x3e>
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	689b      	ldr	r3, [r3, #8]
 8013fec:	e001      	b.n	8013ff2 <putc_flush+0x42>
	return EOF;
 8013fee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	3710      	adds	r7, #16
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}

08013ffa <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8013ffa:	b480      	push	{r7}
 8013ffc:	b083      	sub	sp, #12
 8013ffe:	af00      	add	r7, sp, #0
 8014000:	6078      	str	r0, [r7, #4]
 8014002:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	683a      	ldr	r2, [r7, #0]
 8014008:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	2200      	movs	r2, #0
 801400e:	605a      	str	r2, [r3, #4]
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	685a      	ldr	r2, [r3, #4]
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	609a      	str	r2, [r3, #8]
}
 8014018:	bf00      	nop
 801401a:	370c      	adds	r7, #12
 801401c:	46bd      	mov	sp, r7
 801401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014022:	4770      	bx	lr

08014024 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b096      	sub	sp, #88	@ 0x58
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
 801402c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801402e:	f107 030c 	add.w	r3, r7, #12
 8014032:	6839      	ldr	r1, [r7, #0]
 8014034:	4618      	mov	r0, r3
 8014036:	f7ff ffe0 	bl	8013ffa <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801403a:	e009      	b.n	8014050 <f_puts+0x2c>
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	1c5a      	adds	r2, r3, #1
 8014040:	607a      	str	r2, [r7, #4]
 8014042:	781a      	ldrb	r2, [r3, #0]
 8014044:	f107 030c 	add.w	r3, r7, #12
 8014048:	4611      	mov	r1, r2
 801404a:	4618      	mov	r0, r3
 801404c:	f7ff ff73 	bl	8013f36 <putc_bfd>
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	781b      	ldrb	r3, [r3, #0]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d1f1      	bne.n	801403c <f_puts+0x18>
	return putc_flush(&pb);
 8014058:	f107 030c 	add.w	r3, r7, #12
 801405c:	4618      	mov	r0, r3
 801405e:	f7ff ffa7 	bl	8013fb0 <putc_flush>
 8014062:	4603      	mov	r3, r0
}
 8014064:	4618      	mov	r0, r3
 8014066:	3758      	adds	r7, #88	@ 0x58
 8014068:	46bd      	mov	sp, r7
 801406a:	bd80      	pop	{r7, pc}

0801406c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801406c:	b480      	push	{r7}
 801406e:	b087      	sub	sp, #28
 8014070:	af00      	add	r7, sp, #0
 8014072:	60f8      	str	r0, [r7, #12]
 8014074:	60b9      	str	r1, [r7, #8]
 8014076:	4613      	mov	r3, r2
 8014078:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801407a:	2301      	movs	r3, #1
 801407c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801407e:	2300      	movs	r3, #0
 8014080:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014082:	4b1f      	ldr	r3, [pc, #124]	@ (8014100 <FATFS_LinkDriverEx+0x94>)
 8014084:	7a5b      	ldrb	r3, [r3, #9]
 8014086:	b2db      	uxtb	r3, r3
 8014088:	2b00      	cmp	r3, #0
 801408a:	d131      	bne.n	80140f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801408c:	4b1c      	ldr	r3, [pc, #112]	@ (8014100 <FATFS_LinkDriverEx+0x94>)
 801408e:	7a5b      	ldrb	r3, [r3, #9]
 8014090:	b2db      	uxtb	r3, r3
 8014092:	461a      	mov	r2, r3
 8014094:	4b1a      	ldr	r3, [pc, #104]	@ (8014100 <FATFS_LinkDriverEx+0x94>)
 8014096:	2100      	movs	r1, #0
 8014098:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801409a:	4b19      	ldr	r3, [pc, #100]	@ (8014100 <FATFS_LinkDriverEx+0x94>)
 801409c:	7a5b      	ldrb	r3, [r3, #9]
 801409e:	b2db      	uxtb	r3, r3
 80140a0:	4a17      	ldr	r2, [pc, #92]	@ (8014100 <FATFS_LinkDriverEx+0x94>)
 80140a2:	009b      	lsls	r3, r3, #2
 80140a4:	4413      	add	r3, r2
 80140a6:	68fa      	ldr	r2, [r7, #12]
 80140a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80140aa:	4b15      	ldr	r3, [pc, #84]	@ (8014100 <FATFS_LinkDriverEx+0x94>)
 80140ac:	7a5b      	ldrb	r3, [r3, #9]
 80140ae:	b2db      	uxtb	r3, r3
 80140b0:	461a      	mov	r2, r3
 80140b2:	4b13      	ldr	r3, [pc, #76]	@ (8014100 <FATFS_LinkDriverEx+0x94>)
 80140b4:	4413      	add	r3, r2
 80140b6:	79fa      	ldrb	r2, [r7, #7]
 80140b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80140ba:	4b11      	ldr	r3, [pc, #68]	@ (8014100 <FATFS_LinkDriverEx+0x94>)
 80140bc:	7a5b      	ldrb	r3, [r3, #9]
 80140be:	b2db      	uxtb	r3, r3
 80140c0:	1c5a      	adds	r2, r3, #1
 80140c2:	b2d1      	uxtb	r1, r2
 80140c4:	4a0e      	ldr	r2, [pc, #56]	@ (8014100 <FATFS_LinkDriverEx+0x94>)
 80140c6:	7251      	strb	r1, [r2, #9]
 80140c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80140ca:	7dbb      	ldrb	r3, [r7, #22]
 80140cc:	3330      	adds	r3, #48	@ 0x30
 80140ce:	b2da      	uxtb	r2, r3
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	3301      	adds	r3, #1
 80140d8:	223a      	movs	r2, #58	@ 0x3a
 80140da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	3302      	adds	r3, #2
 80140e0:	222f      	movs	r2, #47	@ 0x2f
 80140e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	3303      	adds	r3, #3
 80140e8:	2200      	movs	r2, #0
 80140ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80140ec:	2300      	movs	r3, #0
 80140ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80140f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	371c      	adds	r7, #28
 80140f6:	46bd      	mov	sp, r7
 80140f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fc:	4770      	bx	lr
 80140fe:	bf00      	nop
 8014100:	24002b3c 	.word	0x24002b3c

08014104 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b082      	sub	sp, #8
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
 801410c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801410e:	2200      	movs	r2, #0
 8014110:	6839      	ldr	r1, [r7, #0]
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	f7ff ffaa 	bl	801406c <FATFS_LinkDriverEx>
 8014118:	4603      	mov	r3, r0
}
 801411a:	4618      	mov	r0, r3
 801411c:	3708      	adds	r7, #8
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}
	...

08014124 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8014124:	b480      	push	{r7}
 8014126:	b085      	sub	sp, #20
 8014128:	af00      	add	r7, sp, #0
 801412a:	4603      	mov	r3, r0
 801412c:	6039      	str	r1, [r7, #0]
 801412e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8014130:	88fb      	ldrh	r3, [r7, #6]
 8014132:	2b7f      	cmp	r3, #127	@ 0x7f
 8014134:	d802      	bhi.n	801413c <ff_convert+0x18>
		c = chr;
 8014136:	88fb      	ldrh	r3, [r7, #6]
 8014138:	81fb      	strh	r3, [r7, #14]
 801413a:	e025      	b.n	8014188 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d00b      	beq.n	801415a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8014142:	88fb      	ldrh	r3, [r7, #6]
 8014144:	2bff      	cmp	r3, #255	@ 0xff
 8014146:	d805      	bhi.n	8014154 <ff_convert+0x30>
 8014148:	88fb      	ldrh	r3, [r7, #6]
 801414a:	3b80      	subs	r3, #128	@ 0x80
 801414c:	4a12      	ldr	r2, [pc, #72]	@ (8014198 <ff_convert+0x74>)
 801414e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014152:	e000      	b.n	8014156 <ff_convert+0x32>
 8014154:	2300      	movs	r3, #0
 8014156:	81fb      	strh	r3, [r7, #14]
 8014158:	e016      	b.n	8014188 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801415a:	2300      	movs	r3, #0
 801415c:	81fb      	strh	r3, [r7, #14]
 801415e:	e009      	b.n	8014174 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8014160:	89fb      	ldrh	r3, [r7, #14]
 8014162:	4a0d      	ldr	r2, [pc, #52]	@ (8014198 <ff_convert+0x74>)
 8014164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014168:	88fa      	ldrh	r2, [r7, #6]
 801416a:	429a      	cmp	r2, r3
 801416c:	d006      	beq.n	801417c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801416e:	89fb      	ldrh	r3, [r7, #14]
 8014170:	3301      	adds	r3, #1
 8014172:	81fb      	strh	r3, [r7, #14]
 8014174:	89fb      	ldrh	r3, [r7, #14]
 8014176:	2b7f      	cmp	r3, #127	@ 0x7f
 8014178:	d9f2      	bls.n	8014160 <ff_convert+0x3c>
 801417a:	e000      	b.n	801417e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801417c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801417e:	89fb      	ldrh	r3, [r7, #14]
 8014180:	3380      	adds	r3, #128	@ 0x80
 8014182:	b29b      	uxth	r3, r3
 8014184:	b2db      	uxtb	r3, r3
 8014186:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8014188:	89fb      	ldrh	r3, [r7, #14]
}
 801418a:	4618      	mov	r0, r3
 801418c:	3714      	adds	r7, #20
 801418e:	46bd      	mov	sp, r7
 8014190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014194:	4770      	bx	lr
 8014196:	bf00      	nop
 8014198:	08016d90 	.word	0x08016d90

0801419c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801419c:	b480      	push	{r7}
 801419e:	b087      	sub	sp, #28
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	4603      	mov	r3, r0
 80141a4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80141a6:	88fb      	ldrh	r3, [r7, #6]
 80141a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80141ac:	d201      	bcs.n	80141b2 <ff_wtoupper+0x16>
 80141ae:	4b3e      	ldr	r3, [pc, #248]	@ (80142a8 <ff_wtoupper+0x10c>)
 80141b0:	e000      	b.n	80141b4 <ff_wtoupper+0x18>
 80141b2:	4b3e      	ldr	r3, [pc, #248]	@ (80142ac <ff_wtoupper+0x110>)
 80141b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	1c9a      	adds	r2, r3, #2
 80141ba:	617a      	str	r2, [r7, #20]
 80141bc:	881b      	ldrh	r3, [r3, #0]
 80141be:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80141c0:	8a7b      	ldrh	r3, [r7, #18]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d068      	beq.n	8014298 <ff_wtoupper+0xfc>
 80141c6:	88fa      	ldrh	r2, [r7, #6]
 80141c8:	8a7b      	ldrh	r3, [r7, #18]
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d364      	bcc.n	8014298 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80141ce:	697b      	ldr	r3, [r7, #20]
 80141d0:	1c9a      	adds	r2, r3, #2
 80141d2:	617a      	str	r2, [r7, #20]
 80141d4:	881b      	ldrh	r3, [r3, #0]
 80141d6:	823b      	strh	r3, [r7, #16]
 80141d8:	8a3b      	ldrh	r3, [r7, #16]
 80141da:	0a1b      	lsrs	r3, r3, #8
 80141dc:	81fb      	strh	r3, [r7, #14]
 80141de:	8a3b      	ldrh	r3, [r7, #16]
 80141e0:	b2db      	uxtb	r3, r3
 80141e2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80141e4:	88fa      	ldrh	r2, [r7, #6]
 80141e6:	8a79      	ldrh	r1, [r7, #18]
 80141e8:	8a3b      	ldrh	r3, [r7, #16]
 80141ea:	440b      	add	r3, r1
 80141ec:	429a      	cmp	r2, r3
 80141ee:	da49      	bge.n	8014284 <ff_wtoupper+0xe8>
			switch (cmd) {
 80141f0:	89fb      	ldrh	r3, [r7, #14]
 80141f2:	2b08      	cmp	r3, #8
 80141f4:	d84f      	bhi.n	8014296 <ff_wtoupper+0xfa>
 80141f6:	a201      	add	r2, pc, #4	@ (adr r2, 80141fc <ff_wtoupper+0x60>)
 80141f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141fc:	08014221 	.word	0x08014221
 8014200:	08014233 	.word	0x08014233
 8014204:	08014249 	.word	0x08014249
 8014208:	08014251 	.word	0x08014251
 801420c:	08014259 	.word	0x08014259
 8014210:	08014261 	.word	0x08014261
 8014214:	08014269 	.word	0x08014269
 8014218:	08014271 	.word	0x08014271
 801421c:	08014279 	.word	0x08014279
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8014220:	88fa      	ldrh	r2, [r7, #6]
 8014222:	8a7b      	ldrh	r3, [r7, #18]
 8014224:	1ad3      	subs	r3, r2, r3
 8014226:	005b      	lsls	r3, r3, #1
 8014228:	697a      	ldr	r2, [r7, #20]
 801422a:	4413      	add	r3, r2
 801422c:	881b      	ldrh	r3, [r3, #0]
 801422e:	80fb      	strh	r3, [r7, #6]
 8014230:	e027      	b.n	8014282 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8014232:	88fa      	ldrh	r2, [r7, #6]
 8014234:	8a7b      	ldrh	r3, [r7, #18]
 8014236:	1ad3      	subs	r3, r2, r3
 8014238:	b29b      	uxth	r3, r3
 801423a:	f003 0301 	and.w	r3, r3, #1
 801423e:	b29b      	uxth	r3, r3
 8014240:	88fa      	ldrh	r2, [r7, #6]
 8014242:	1ad3      	subs	r3, r2, r3
 8014244:	80fb      	strh	r3, [r7, #6]
 8014246:	e01c      	b.n	8014282 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8014248:	88fb      	ldrh	r3, [r7, #6]
 801424a:	3b10      	subs	r3, #16
 801424c:	80fb      	strh	r3, [r7, #6]
 801424e:	e018      	b.n	8014282 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8014250:	88fb      	ldrh	r3, [r7, #6]
 8014252:	3b20      	subs	r3, #32
 8014254:	80fb      	strh	r3, [r7, #6]
 8014256:	e014      	b.n	8014282 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8014258:	88fb      	ldrh	r3, [r7, #6]
 801425a:	3b30      	subs	r3, #48	@ 0x30
 801425c:	80fb      	strh	r3, [r7, #6]
 801425e:	e010      	b.n	8014282 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8014260:	88fb      	ldrh	r3, [r7, #6]
 8014262:	3b1a      	subs	r3, #26
 8014264:	80fb      	strh	r3, [r7, #6]
 8014266:	e00c      	b.n	8014282 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8014268:	88fb      	ldrh	r3, [r7, #6]
 801426a:	3308      	adds	r3, #8
 801426c:	80fb      	strh	r3, [r7, #6]
 801426e:	e008      	b.n	8014282 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8014270:	88fb      	ldrh	r3, [r7, #6]
 8014272:	3b50      	subs	r3, #80	@ 0x50
 8014274:	80fb      	strh	r3, [r7, #6]
 8014276:	e004      	b.n	8014282 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8014278:	88fb      	ldrh	r3, [r7, #6]
 801427a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801427e:	80fb      	strh	r3, [r7, #6]
 8014280:	bf00      	nop
			}
			break;
 8014282:	e008      	b.n	8014296 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8014284:	89fb      	ldrh	r3, [r7, #14]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d195      	bne.n	80141b6 <ff_wtoupper+0x1a>
 801428a:	8a3b      	ldrh	r3, [r7, #16]
 801428c:	005b      	lsls	r3, r3, #1
 801428e:	697a      	ldr	r2, [r7, #20]
 8014290:	4413      	add	r3, r2
 8014292:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8014294:	e78f      	b.n	80141b6 <ff_wtoupper+0x1a>
			break;
 8014296:	bf00      	nop
	}

	return chr;
 8014298:	88fb      	ldrh	r3, [r7, #6]
}
 801429a:	4618      	mov	r0, r3
 801429c:	371c      	adds	r7, #28
 801429e:	46bd      	mov	sp, r7
 80142a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a4:	4770      	bx	lr
 80142a6:	bf00      	nop
 80142a8:	08016e90 	.word	0x08016e90
 80142ac:	08017084 	.word	0x08017084

080142b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80142b4:	2201      	movs	r2, #1
 80142b6:	4913      	ldr	r1, [pc, #76]	@ (8014304 <MX_USB_DEVICE_Init+0x54>)
 80142b8:	4813      	ldr	r0, [pc, #76]	@ (8014308 <MX_USB_DEVICE_Init+0x58>)
 80142ba:	f7fb fc39 	bl	800fb30 <USBD_Init>
 80142be:	4603      	mov	r3, r0
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d001      	beq.n	80142c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80142c4:	f7ed fce4 	bl	8001c90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80142c8:	4910      	ldr	r1, [pc, #64]	@ (801430c <MX_USB_DEVICE_Init+0x5c>)
 80142ca:	480f      	ldr	r0, [pc, #60]	@ (8014308 <MX_USB_DEVICE_Init+0x58>)
 80142cc:	f7fb fc60 	bl	800fb90 <USBD_RegisterClass>
 80142d0:	4603      	mov	r3, r0
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d001      	beq.n	80142da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80142d6:	f7ed fcdb 	bl	8001c90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80142da:	490d      	ldr	r1, [pc, #52]	@ (8014310 <MX_USB_DEVICE_Init+0x60>)
 80142dc:	480a      	ldr	r0, [pc, #40]	@ (8014308 <MX_USB_DEVICE_Init+0x58>)
 80142de:	f7fb fb57 	bl	800f990 <USBD_CDC_RegisterInterface>
 80142e2:	4603      	mov	r3, r0
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d001      	beq.n	80142ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80142e8:	f7ed fcd2 	bl	8001c90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80142ec:	4806      	ldr	r0, [pc, #24]	@ (8014308 <MX_USB_DEVICE_Init+0x58>)
 80142ee:	f7fb fc85 	bl	800fbfc <USBD_Start>
 80142f2:	4603      	mov	r3, r0
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d001      	beq.n	80142fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80142f8:	f7ed fcca 	bl	8001c90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80142fc:	f7f2 fc22 	bl	8006b44 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014300:	bf00      	nop
 8014302:	bd80      	pop	{r7, pc}
 8014304:	240001c0 	.word	0x240001c0
 8014308:	24002b48 	.word	0x24002b48
 801430c:	2400012c 	.word	0x2400012c
 8014310:	240001ac 	.word	0x240001ac

08014314 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8014314:	b580      	push	{r7, lr}
 8014316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8014318:	2200      	movs	r2, #0
 801431a:	4905      	ldr	r1, [pc, #20]	@ (8014330 <CDC_Init_HS+0x1c>)
 801431c:	4805      	ldr	r0, [pc, #20]	@ (8014334 <CDC_Init_HS+0x20>)
 801431e:	f7fb fb51 	bl	800f9c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8014322:	4905      	ldr	r1, [pc, #20]	@ (8014338 <CDC_Init_HS+0x24>)
 8014324:	4803      	ldr	r0, [pc, #12]	@ (8014334 <CDC_Init_HS+0x20>)
 8014326:	f7fb fb6f 	bl	800fa08 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801432a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801432c:	4618      	mov	r0, r3
 801432e:	bd80      	pop	{r7, pc}
 8014330:	24003624 	.word	0x24003624
 8014334:	24002b48 	.word	0x24002b48
 8014338:	24002e24 	.word	0x24002e24

0801433c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801433c:	b480      	push	{r7}
 801433e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8014340:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8014342:	4618      	mov	r0, r3
 8014344:	46bd      	mov	sp, r7
 8014346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434a:	4770      	bx	lr

0801434c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801434c:	b480      	push	{r7}
 801434e:	b083      	sub	sp, #12
 8014350:	af00      	add	r7, sp, #0
 8014352:	4603      	mov	r3, r0
 8014354:	6039      	str	r1, [r7, #0]
 8014356:	71fb      	strb	r3, [r7, #7]
 8014358:	4613      	mov	r3, r2
 801435a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801435c:	79fb      	ldrb	r3, [r7, #7]
 801435e:	2b23      	cmp	r3, #35	@ 0x23
 8014360:	d84a      	bhi.n	80143f8 <CDC_Control_HS+0xac>
 8014362:	a201      	add	r2, pc, #4	@ (adr r2, 8014368 <CDC_Control_HS+0x1c>)
 8014364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014368:	080143f9 	.word	0x080143f9
 801436c:	080143f9 	.word	0x080143f9
 8014370:	080143f9 	.word	0x080143f9
 8014374:	080143f9 	.word	0x080143f9
 8014378:	080143f9 	.word	0x080143f9
 801437c:	080143f9 	.word	0x080143f9
 8014380:	080143f9 	.word	0x080143f9
 8014384:	080143f9 	.word	0x080143f9
 8014388:	080143f9 	.word	0x080143f9
 801438c:	080143f9 	.word	0x080143f9
 8014390:	080143f9 	.word	0x080143f9
 8014394:	080143f9 	.word	0x080143f9
 8014398:	080143f9 	.word	0x080143f9
 801439c:	080143f9 	.word	0x080143f9
 80143a0:	080143f9 	.word	0x080143f9
 80143a4:	080143f9 	.word	0x080143f9
 80143a8:	080143f9 	.word	0x080143f9
 80143ac:	080143f9 	.word	0x080143f9
 80143b0:	080143f9 	.word	0x080143f9
 80143b4:	080143f9 	.word	0x080143f9
 80143b8:	080143f9 	.word	0x080143f9
 80143bc:	080143f9 	.word	0x080143f9
 80143c0:	080143f9 	.word	0x080143f9
 80143c4:	080143f9 	.word	0x080143f9
 80143c8:	080143f9 	.word	0x080143f9
 80143cc:	080143f9 	.word	0x080143f9
 80143d0:	080143f9 	.word	0x080143f9
 80143d4:	080143f9 	.word	0x080143f9
 80143d8:	080143f9 	.word	0x080143f9
 80143dc:	080143f9 	.word	0x080143f9
 80143e0:	080143f9 	.word	0x080143f9
 80143e4:	080143f9 	.word	0x080143f9
 80143e8:	080143f9 	.word	0x080143f9
 80143ec:	080143f9 	.word	0x080143f9
 80143f0:	080143f9 	.word	0x080143f9
 80143f4:	080143f9 	.word	0x080143f9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80143f8:	bf00      	nop
  }

  return (USBD_OK);
 80143fa:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80143fc:	4618      	mov	r0, r3
 80143fe:	370c      	adds	r7, #12
 8014400:	46bd      	mov	sp, r7
 8014402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014406:	4770      	bx	lr

08014408 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b084      	sub	sp, #16
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8014412:	6879      	ldr	r1, [r7, #4]
 8014414:	4809      	ldr	r0, [pc, #36]	@ (801443c <CDC_Receive_HS+0x34>)
 8014416:	f7fb faf7 	bl	800fa08 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801441a:	4808      	ldr	r0, [pc, #32]	@ (801443c <CDC_Receive_HS+0x34>)
 801441c:	f7fb fb52 	bl	800fac4 <USBD_CDC_ReceivePacket>
  uint8_t len=(uint8_t)*Len;
 8014420:	683b      	ldr	r3, [r7, #0]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	73fb      	strb	r3, [r7, #15]
  memcpy(rx_usb,Buf,len);
 8014426:	7bfb      	ldrb	r3, [r7, #15]
 8014428:	461a      	mov	r2, r3
 801442a:	6879      	ldr	r1, [r7, #4]
 801442c:	4804      	ldr	r0, [pc, #16]	@ (8014440 <CDC_Receive_HS+0x38>)
 801442e:	f000 ffaa 	bl	8015386 <memcpy>
  return (USBD_OK);
 8014432:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8014434:	4618      	mov	r0, r3
 8014436:	3710      	adds	r7, #16
 8014438:	46bd      	mov	sp, r7
 801443a:	bd80      	pop	{r7, pc}
 801443c:	24002b48 	.word	0x24002b48
 8014440:	2400266c 	.word	0x2400266c

08014444 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b084      	sub	sp, #16
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	460b      	mov	r3, r1
 801444e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014450:	2300      	movs	r3, #0
 8014452:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8014454:	4b0d      	ldr	r3, [pc, #52]	@ (801448c <CDC_Transmit_HS+0x48>)
 8014456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801445a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801445c:	68bb      	ldr	r3, [r7, #8]
 801445e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014462:	2b00      	cmp	r3, #0
 8014464:	d001      	beq.n	801446a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8014466:	2301      	movs	r3, #1
 8014468:	e00b      	b.n	8014482 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801446a:	887b      	ldrh	r3, [r7, #2]
 801446c:	461a      	mov	r2, r3
 801446e:	6879      	ldr	r1, [r7, #4]
 8014470:	4806      	ldr	r0, [pc, #24]	@ (801448c <CDC_Transmit_HS+0x48>)
 8014472:	f7fb faa7 	bl	800f9c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8014476:	4805      	ldr	r0, [pc, #20]	@ (801448c <CDC_Transmit_HS+0x48>)
 8014478:	f7fb fae4 	bl	800fa44 <USBD_CDC_TransmitPacket>
 801447c:	4603      	mov	r3, r0
 801447e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8014480:	7bfb      	ldrb	r3, [r7, #15]
}
 8014482:	4618      	mov	r0, r3
 8014484:	3710      	adds	r7, #16
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}
 801448a:	bf00      	nop
 801448c:	24002b48 	.word	0x24002b48

08014490 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014490:	b480      	push	{r7}
 8014492:	b087      	sub	sp, #28
 8014494:	af00      	add	r7, sp, #0
 8014496:	60f8      	str	r0, [r7, #12]
 8014498:	60b9      	str	r1, [r7, #8]
 801449a:	4613      	mov	r3, r2
 801449c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801449e:	2300      	movs	r3, #0
 80144a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80144a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80144a6:	4618      	mov	r0, r3
 80144a8:	371c      	adds	r7, #28
 80144aa:	46bd      	mov	sp, r7
 80144ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b0:	4770      	bx	lr
	...

080144b4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80144b4:	b480      	push	{r7}
 80144b6:	b083      	sub	sp, #12
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	4603      	mov	r3, r0
 80144bc:	6039      	str	r1, [r7, #0]
 80144be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	2212      	movs	r2, #18
 80144c4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80144c6:	4b03      	ldr	r3, [pc, #12]	@ (80144d4 <USBD_HS_DeviceDescriptor+0x20>)
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	370c      	adds	r7, #12
 80144cc:	46bd      	mov	sp, r7
 80144ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d2:	4770      	bx	lr
 80144d4:	240001e0 	.word	0x240001e0

080144d8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80144d8:	b480      	push	{r7}
 80144da:	b083      	sub	sp, #12
 80144dc:	af00      	add	r7, sp, #0
 80144de:	4603      	mov	r3, r0
 80144e0:	6039      	str	r1, [r7, #0]
 80144e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	2204      	movs	r2, #4
 80144e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80144ea:	4b03      	ldr	r3, [pc, #12]	@ (80144f8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80144ec:	4618      	mov	r0, r3
 80144ee:	370c      	adds	r7, #12
 80144f0:	46bd      	mov	sp, r7
 80144f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f6:	4770      	bx	lr
 80144f8:	240001f4 	.word	0x240001f4

080144fc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b082      	sub	sp, #8
 8014500:	af00      	add	r7, sp, #0
 8014502:	4603      	mov	r3, r0
 8014504:	6039      	str	r1, [r7, #0]
 8014506:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014508:	79fb      	ldrb	r3, [r7, #7]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d105      	bne.n	801451a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801450e:	683a      	ldr	r2, [r7, #0]
 8014510:	4907      	ldr	r1, [pc, #28]	@ (8014530 <USBD_HS_ProductStrDescriptor+0x34>)
 8014512:	4808      	ldr	r0, [pc, #32]	@ (8014534 <USBD_HS_ProductStrDescriptor+0x38>)
 8014514:	f7fc fd4c 	bl	8010fb0 <USBD_GetString>
 8014518:	e004      	b.n	8014524 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801451a:	683a      	ldr	r2, [r7, #0]
 801451c:	4904      	ldr	r1, [pc, #16]	@ (8014530 <USBD_HS_ProductStrDescriptor+0x34>)
 801451e:	4805      	ldr	r0, [pc, #20]	@ (8014534 <USBD_HS_ProductStrDescriptor+0x38>)
 8014520:	f7fc fd46 	bl	8010fb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014524:	4b02      	ldr	r3, [pc, #8]	@ (8014530 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8014526:	4618      	mov	r0, r3
 8014528:	3708      	adds	r7, #8
 801452a:	46bd      	mov	sp, r7
 801452c:	bd80      	pop	{r7, pc}
 801452e:	bf00      	nop
 8014530:	24003e24 	.word	0x24003e24
 8014534:	08016c6c 	.word	0x08016c6c

08014538 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
 801453e:	4603      	mov	r3, r0
 8014540:	6039      	str	r1, [r7, #0]
 8014542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014544:	683a      	ldr	r2, [r7, #0]
 8014546:	4904      	ldr	r1, [pc, #16]	@ (8014558 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8014548:	4804      	ldr	r0, [pc, #16]	@ (801455c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801454a:	f7fc fd31 	bl	8010fb0 <USBD_GetString>
  return USBD_StrDesc;
 801454e:	4b02      	ldr	r3, [pc, #8]	@ (8014558 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8014550:	4618      	mov	r0, r3
 8014552:	3708      	adds	r7, #8
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}
 8014558:	24003e24 	.word	0x24003e24
 801455c:	08016c84 	.word	0x08016c84

08014560 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b082      	sub	sp, #8
 8014564:	af00      	add	r7, sp, #0
 8014566:	4603      	mov	r3, r0
 8014568:	6039      	str	r1, [r7, #0]
 801456a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	221a      	movs	r2, #26
 8014570:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014572:	f000 f891 	bl	8014698 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */
    USBD_StringSerial[0] = 26;
 8014576:	4b29      	ldr	r3, [pc, #164]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 8014578:	221a      	movs	r2, #26
 801457a:	701a      	strb	r2, [r3, #0]
    USBD_StringSerial[1] = 3;
 801457c:	4b27      	ldr	r3, [pc, #156]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 801457e:	2203      	movs	r2, #3
 8014580:	705a      	strb	r2, [r3, #1]
    USBD_StringSerial[2] = 52;
 8014582:	4b26      	ldr	r3, [pc, #152]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 8014584:	2234      	movs	r2, #52	@ 0x34
 8014586:	709a      	strb	r2, [r3, #2]
    USBD_StringSerial[3] = 0;
 8014588:	4b24      	ldr	r3, [pc, #144]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 801458a:	2200      	movs	r2, #0
 801458c:	70da      	strb	r2, [r3, #3]
    USBD_StringSerial[4] = 56;
 801458e:	4b23      	ldr	r3, [pc, #140]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 8014590:	2238      	movs	r2, #56	@ 0x38
 8014592:	711a      	strb	r2, [r3, #4]
    USBD_StringSerial[5] = 0;
 8014594:	4b21      	ldr	r3, [pc, #132]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 8014596:	2200      	movs	r2, #0
 8014598:	715a      	strb	r2, [r3, #5]
    USBD_StringSerial[6] = 68;
 801459a:	4b20      	ldr	r3, [pc, #128]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 801459c:	2244      	movs	r2, #68	@ 0x44
 801459e:	719a      	strb	r2, [r3, #6]
    USBD_StringSerial[7] = 0;
 80145a0:	4b1e      	ldr	r3, [pc, #120]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 80145a2:	2200      	movs	r2, #0
 80145a4:	71da      	strb	r2, [r3, #7]
    USBD_StringSerial[8] = 66;
 80145a6:	4b1d      	ldr	r3, [pc, #116]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 80145a8:	2242      	movs	r2, #66	@ 0x42
 80145aa:	721a      	strb	r2, [r3, #8]
    USBD_StringSerial[9] = 0;
 80145ac:	4b1b      	ldr	r3, [pc, #108]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 80145ae:	2200      	movs	r2, #0
 80145b0:	725a      	strb	r2, [r3, #9]
    USBD_StringSerial[10] = 53;
 80145b2:	4b1a      	ldr	r3, [pc, #104]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 80145b4:	2235      	movs	r2, #53	@ 0x35
 80145b6:	729a      	strb	r2, [r3, #10]
    USBD_StringSerial[11] = 0;
 80145b8:	4b18      	ldr	r3, [pc, #96]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 80145ba:	2200      	movs	r2, #0
 80145bc:	72da      	strb	r2, [r3, #11]
    USBD_StringSerial[12] = 52;
 80145be:	4b17      	ldr	r3, [pc, #92]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 80145c0:	2234      	movs	r2, #52	@ 0x34
 80145c2:	731a      	strb	r2, [r3, #12]
    USBD_StringSerial[13] = 0;
 80145c4:	4b15      	ldr	r3, [pc, #84]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 80145c6:	2200      	movs	r2, #0
 80145c8:	735a      	strb	r2, [r3, #13]
    USBD_StringSerial[14] = 54;
 80145ca:	4b14      	ldr	r3, [pc, #80]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 80145cc:	2236      	movs	r2, #54	@ 0x36
 80145ce:	739a      	strb	r2, [r3, #14]
    USBD_StringSerial[15] = 0;
 80145d0:	4b12      	ldr	r3, [pc, #72]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 80145d2:	2200      	movs	r2, #0
 80145d4:	73da      	strb	r2, [r3, #15]
    USBD_StringSerial[16] = 68;
 80145d6:	4b11      	ldr	r3, [pc, #68]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 80145d8:	2244      	movs	r2, #68	@ 0x44
 80145da:	741a      	strb	r2, [r3, #16]
    USBD_StringSerial[17] = 0;
 80145dc:	4b0f      	ldr	r3, [pc, #60]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 80145de:	2200      	movs	r2, #0
 80145e0:	745a      	strb	r2, [r3, #17]
    USBD_StringSerial[18] = 51;
 80145e2:	4b0e      	ldr	r3, [pc, #56]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 80145e4:	2233      	movs	r2, #51	@ 0x33
 80145e6:	749a      	strb	r2, [r3, #18]
    USBD_StringSerial[19] = 0;
 80145e8:	4b0c      	ldr	r3, [pc, #48]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 80145ea:	2200      	movs	r2, #0
 80145ec:	74da      	strb	r2, [r3, #19]
    USBD_StringSerial[20] = 53;
 80145ee:	4b0b      	ldr	r3, [pc, #44]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 80145f0:	2235      	movs	r2, #53	@ 0x35
 80145f2:	751a      	strb	r2, [r3, #20]
    USBD_StringSerial[21] = 0;
 80145f4:	4b09      	ldr	r3, [pc, #36]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 80145f6:	2200      	movs	r2, #0
 80145f8:	755a      	strb	r2, [r3, #21]
    USBD_StringSerial[22] = 52;
 80145fa:	4b08      	ldr	r3, [pc, #32]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 80145fc:	2234      	movs	r2, #52	@ 0x34
 80145fe:	759a      	strb	r2, [r3, #22]
    USBD_StringSerial[23] = 0;
 8014600:	4b06      	ldr	r3, [pc, #24]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 8014602:	2200      	movs	r2, #0
 8014604:	75da      	strb	r2, [r3, #23]
    USBD_StringSerial[24] = 53;
 8014606:	4b05      	ldr	r3, [pc, #20]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 8014608:	2235      	movs	r2, #53	@ 0x35
 801460a:	761a      	strb	r2, [r3, #24]
    USBD_StringSerial[25] = 0;
 801460c:	4b03      	ldr	r3, [pc, #12]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
 801460e:	2200      	movs	r2, #0
 8014610:	765a      	strb	r2, [r3, #25]
  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8014612:	4b02      	ldr	r3, [pc, #8]	@ (801461c <USBD_HS_SerialStrDescriptor+0xbc>)
}
 8014614:	4618      	mov	r0, r3
 8014616:	3708      	adds	r7, #8
 8014618:	46bd      	mov	sp, r7
 801461a:	bd80      	pop	{r7, pc}
 801461c:	240001f8 	.word	0x240001f8

08014620 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b082      	sub	sp, #8
 8014624:	af00      	add	r7, sp, #0
 8014626:	4603      	mov	r3, r0
 8014628:	6039      	str	r1, [r7, #0]
 801462a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801462c:	79fb      	ldrb	r3, [r7, #7]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d105      	bne.n	801463e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8014632:	683a      	ldr	r2, [r7, #0]
 8014634:	4907      	ldr	r1, [pc, #28]	@ (8014654 <USBD_HS_ConfigStrDescriptor+0x34>)
 8014636:	4808      	ldr	r0, [pc, #32]	@ (8014658 <USBD_HS_ConfigStrDescriptor+0x38>)
 8014638:	f7fc fcba 	bl	8010fb0 <USBD_GetString>
 801463c:	e004      	b.n	8014648 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801463e:	683a      	ldr	r2, [r7, #0]
 8014640:	4904      	ldr	r1, [pc, #16]	@ (8014654 <USBD_HS_ConfigStrDescriptor+0x34>)
 8014642:	4805      	ldr	r0, [pc, #20]	@ (8014658 <USBD_HS_ConfigStrDescriptor+0x38>)
 8014644:	f7fc fcb4 	bl	8010fb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014648:	4b02      	ldr	r3, [pc, #8]	@ (8014654 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801464a:	4618      	mov	r0, r3
 801464c:	3708      	adds	r7, #8
 801464e:	46bd      	mov	sp, r7
 8014650:	bd80      	pop	{r7, pc}
 8014652:	bf00      	nop
 8014654:	24003e24 	.word	0x24003e24
 8014658:	08016c98 	.word	0x08016c98

0801465c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b082      	sub	sp, #8
 8014660:	af00      	add	r7, sp, #0
 8014662:	4603      	mov	r3, r0
 8014664:	6039      	str	r1, [r7, #0]
 8014666:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014668:	79fb      	ldrb	r3, [r7, #7]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d105      	bne.n	801467a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801466e:	683a      	ldr	r2, [r7, #0]
 8014670:	4907      	ldr	r1, [pc, #28]	@ (8014690 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8014672:	4808      	ldr	r0, [pc, #32]	@ (8014694 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8014674:	f7fc fc9c 	bl	8010fb0 <USBD_GetString>
 8014678:	e004      	b.n	8014684 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801467a:	683a      	ldr	r2, [r7, #0]
 801467c:	4904      	ldr	r1, [pc, #16]	@ (8014690 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801467e:	4805      	ldr	r0, [pc, #20]	@ (8014694 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8014680:	f7fc fc96 	bl	8010fb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014684:	4b02      	ldr	r3, [pc, #8]	@ (8014690 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8014686:	4618      	mov	r0, r3
 8014688:	3708      	adds	r7, #8
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}
 801468e:	bf00      	nop
 8014690:	24003e24 	.word	0x24003e24
 8014694:	08016ca4 	.word	0x08016ca4

08014698 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b084      	sub	sp, #16
 801469c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 801469e:	68fa      	ldr	r2, [r7, #12]
 80146a0:	68bb      	ldr	r3, [r7, #8]
 80146a2:	4413      	add	r3, r2
 80146a4:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d009      	beq.n	80146c0 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80146ac:	2208      	movs	r2, #8
 80146ae:	4906      	ldr	r1, [pc, #24]	@ (80146c8 <Get_SerialNum+0x30>)
 80146b0:	68f8      	ldr	r0, [r7, #12]
 80146b2:	f000 f80d 	bl	80146d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80146b6:	2204      	movs	r2, #4
 80146b8:	4904      	ldr	r1, [pc, #16]	@ (80146cc <Get_SerialNum+0x34>)
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f000 f808 	bl	80146d0 <IntToUnicode>
  }
}
 80146c0:	bf00      	nop
 80146c2:	3710      	adds	r7, #16
 80146c4:	46bd      	mov	sp, r7
 80146c6:	bd80      	pop	{r7, pc}
 80146c8:	240001fa 	.word	0x240001fa
 80146cc:	2400020a 	.word	0x2400020a

080146d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80146d0:	b480      	push	{r7}
 80146d2:	b087      	sub	sp, #28
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	60f8      	str	r0, [r7, #12]
 80146d8:	60b9      	str	r1, [r7, #8]
 80146da:	4613      	mov	r3, r2
 80146dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80146de:	2300      	movs	r3, #0
 80146e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80146e2:	2300      	movs	r3, #0
 80146e4:	75fb      	strb	r3, [r7, #23]
 80146e6:	e027      	b.n	8014738 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	0f1b      	lsrs	r3, r3, #28
 80146ec:	2b09      	cmp	r3, #9
 80146ee:	d80b      	bhi.n	8014708 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	0f1b      	lsrs	r3, r3, #28
 80146f4:	b2da      	uxtb	r2, r3
 80146f6:	7dfb      	ldrb	r3, [r7, #23]
 80146f8:	005b      	lsls	r3, r3, #1
 80146fa:	4619      	mov	r1, r3
 80146fc:	68bb      	ldr	r3, [r7, #8]
 80146fe:	440b      	add	r3, r1
 8014700:	3230      	adds	r2, #48	@ 0x30
 8014702:	b2d2      	uxtb	r2, r2
 8014704:	701a      	strb	r2, [r3, #0]
 8014706:	e00a      	b.n	801471e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	0f1b      	lsrs	r3, r3, #28
 801470c:	b2da      	uxtb	r2, r3
 801470e:	7dfb      	ldrb	r3, [r7, #23]
 8014710:	005b      	lsls	r3, r3, #1
 8014712:	4619      	mov	r1, r3
 8014714:	68bb      	ldr	r3, [r7, #8]
 8014716:	440b      	add	r3, r1
 8014718:	3237      	adds	r2, #55	@ 0x37
 801471a:	b2d2      	uxtb	r2, r2
 801471c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	011b      	lsls	r3, r3, #4
 8014722:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014724:	7dfb      	ldrb	r3, [r7, #23]
 8014726:	005b      	lsls	r3, r3, #1
 8014728:	3301      	adds	r3, #1
 801472a:	68ba      	ldr	r2, [r7, #8]
 801472c:	4413      	add	r3, r2
 801472e:	2200      	movs	r2, #0
 8014730:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014732:	7dfb      	ldrb	r3, [r7, #23]
 8014734:	3301      	adds	r3, #1
 8014736:	75fb      	strb	r3, [r7, #23]
 8014738:	7dfa      	ldrb	r2, [r7, #23]
 801473a:	79fb      	ldrb	r3, [r7, #7]
 801473c:	429a      	cmp	r2, r3
 801473e:	d3d3      	bcc.n	80146e8 <IntToUnicode+0x18>
  }
}
 8014740:	bf00      	nop
 8014742:	bf00      	nop
 8014744:	371c      	adds	r7, #28
 8014746:	46bd      	mov	sp, r7
 8014748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474c:	4770      	bx	lr
	...

08014750 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b0b8      	sub	sp, #224	@ 0xe0
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014758:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 801475c:	2200      	movs	r2, #0
 801475e:	601a      	str	r2, [r3, #0]
 8014760:	605a      	str	r2, [r3, #4]
 8014762:	609a      	str	r2, [r3, #8]
 8014764:	60da      	str	r2, [r3, #12]
 8014766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014768:	f107 0310 	add.w	r3, r7, #16
 801476c:	22b8      	movs	r2, #184	@ 0xb8
 801476e:	2100      	movs	r1, #0
 8014770:	4618      	mov	r0, r3
 8014772:	f000 fd7d 	bl	8015270 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	4a2c      	ldr	r2, [pc, #176]	@ (801482c <HAL_PCD_MspInit+0xdc>)
 801477c:	4293      	cmp	r3, r2
 801477e:	d151      	bne.n	8014824 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014780:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8014784:	f04f 0300 	mov.w	r3, #0
 8014788:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801478c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8014790:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014794:	f107 0310 	add.w	r3, r7, #16
 8014798:	4618      	mov	r0, r3
 801479a:	f7f3 f949 	bl	8007a30 <HAL_RCCEx_PeriphCLKConfig>
 801479e:	4603      	mov	r3, r0
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d001      	beq.n	80147a8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80147a4:	f7ed fa74 	bl	8001c90 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80147a8:	f7f2 f9cc 	bl	8006b44 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80147ac:	4b20      	ldr	r3, [pc, #128]	@ (8014830 <HAL_PCD_MspInit+0xe0>)
 80147ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80147b2:	4a1f      	ldr	r2, [pc, #124]	@ (8014830 <HAL_PCD_MspInit+0xe0>)
 80147b4:	f043 0301 	orr.w	r3, r3, #1
 80147b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80147bc:	4b1c      	ldr	r3, [pc, #112]	@ (8014830 <HAL_PCD_MspInit+0xe0>)
 80147be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80147c2:	f003 0301 	and.w	r3, r3, #1
 80147c6:	60fb      	str	r3, [r7, #12]
 80147c8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80147ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80147ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80147d2:	2302      	movs	r3, #2
 80147d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147d8:	2300      	movs	r3, #0
 80147da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80147de:	2300      	movs	r3, #0
 80147e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80147e4:	230a      	movs	r3, #10
 80147e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80147ea:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80147ee:	4619      	mov	r1, r3
 80147f0:	4810      	ldr	r0, [pc, #64]	@ (8014834 <HAL_PCD_MspInit+0xe4>)
 80147f2:	f7f0 fcdb 	bl	80051ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80147f6:	4b0e      	ldr	r3, [pc, #56]	@ (8014830 <HAL_PCD_MspInit+0xe0>)
 80147f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80147fc:	4a0c      	ldr	r2, [pc, #48]	@ (8014830 <HAL_PCD_MspInit+0xe0>)
 80147fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8014802:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8014806:	4b0a      	ldr	r3, [pc, #40]	@ (8014830 <HAL_PCD_MspInit+0xe0>)
 8014808:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801480c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014810:	60bb      	str	r3, [r7, #8]
 8014812:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8014814:	2200      	movs	r2, #0
 8014816:	2100      	movs	r1, #0
 8014818:	204d      	movs	r0, #77	@ 0x4d
 801481a:	f7ee fa70 	bl	8002cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801481e:	204d      	movs	r0, #77	@ 0x4d
 8014820:	f7ee fa87 	bl	8002d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8014824:	bf00      	nop
 8014826:	37e0      	adds	r7, #224	@ 0xe0
 8014828:	46bd      	mov	sp, r7
 801482a:	bd80      	pop	{r7, pc}
 801482c:	40040000 	.word	0x40040000
 8014830:	58024400 	.word	0x58024400
 8014834:	58020000 	.word	0x58020000

08014838 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b082      	sub	sp, #8
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801484c:	4619      	mov	r1, r3
 801484e:	4610      	mov	r0, r2
 8014850:	f7fb fa21 	bl	800fc96 <USBD_LL_SetupStage>
}
 8014854:	bf00      	nop
 8014856:	3708      	adds	r7, #8
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}

0801485c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b082      	sub	sp, #8
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
 8014864:	460b      	mov	r3, r1
 8014866:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801486e:	78fa      	ldrb	r2, [r7, #3]
 8014870:	6879      	ldr	r1, [r7, #4]
 8014872:	4613      	mov	r3, r2
 8014874:	00db      	lsls	r3, r3, #3
 8014876:	4413      	add	r3, r2
 8014878:	009b      	lsls	r3, r3, #2
 801487a:	440b      	add	r3, r1
 801487c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014880:	681a      	ldr	r2, [r3, #0]
 8014882:	78fb      	ldrb	r3, [r7, #3]
 8014884:	4619      	mov	r1, r3
 8014886:	f7fb fa5b 	bl	800fd40 <USBD_LL_DataOutStage>
}
 801488a:	bf00      	nop
 801488c:	3708      	adds	r7, #8
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}

08014892 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014892:	b580      	push	{r7, lr}
 8014894:	b082      	sub	sp, #8
 8014896:	af00      	add	r7, sp, #0
 8014898:	6078      	str	r0, [r7, #4]
 801489a:	460b      	mov	r3, r1
 801489c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80148a4:	78fa      	ldrb	r2, [r7, #3]
 80148a6:	6879      	ldr	r1, [r7, #4]
 80148a8:	4613      	mov	r3, r2
 80148aa:	00db      	lsls	r3, r3, #3
 80148ac:	4413      	add	r3, r2
 80148ae:	009b      	lsls	r3, r3, #2
 80148b0:	440b      	add	r3, r1
 80148b2:	3320      	adds	r3, #32
 80148b4:	681a      	ldr	r2, [r3, #0]
 80148b6:	78fb      	ldrb	r3, [r7, #3]
 80148b8:	4619      	mov	r1, r3
 80148ba:	f7fb faf4 	bl	800fea6 <USBD_LL_DataInStage>
}
 80148be:	bf00      	nop
 80148c0:	3708      	adds	r7, #8
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}

080148c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80148c6:	b580      	push	{r7, lr}
 80148c8:	b082      	sub	sp, #8
 80148ca:	af00      	add	r7, sp, #0
 80148cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80148d4:	4618      	mov	r0, r3
 80148d6:	f7fb fc2e 	bl	8010136 <USBD_LL_SOF>
}
 80148da:	bf00      	nop
 80148dc:	3708      	adds	r7, #8
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}

080148e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80148e2:	b580      	push	{r7, lr}
 80148e4:	b084      	sub	sp, #16
 80148e6:	af00      	add	r7, sp, #0
 80148e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80148ea:	2301      	movs	r3, #1
 80148ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	79db      	ldrb	r3, [r3, #7]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d102      	bne.n	80148fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80148f6:	2300      	movs	r3, #0
 80148f8:	73fb      	strb	r3, [r7, #15]
 80148fa:	e008      	b.n	801490e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	79db      	ldrb	r3, [r3, #7]
 8014900:	2b02      	cmp	r3, #2
 8014902:	d102      	bne.n	801490a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014904:	2301      	movs	r3, #1
 8014906:	73fb      	strb	r3, [r7, #15]
 8014908:	e001      	b.n	801490e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801490a:	f7ed f9c1 	bl	8001c90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014914:	7bfa      	ldrb	r2, [r7, #15]
 8014916:	4611      	mov	r1, r2
 8014918:	4618      	mov	r0, r3
 801491a:	f7fb fbc8 	bl	80100ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014924:	4618      	mov	r0, r3
 8014926:	f7fb fb70 	bl	801000a <USBD_LL_Reset>
}
 801492a:	bf00      	nop
 801492c:	3710      	adds	r7, #16
 801492e:	46bd      	mov	sp, r7
 8014930:	bd80      	pop	{r7, pc}
	...

08014934 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b082      	sub	sp, #8
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014942:	4618      	mov	r0, r3
 8014944:	f7fb fbc3 	bl	80100ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	687a      	ldr	r2, [r7, #4]
 8014954:	6812      	ldr	r2, [r2, #0]
 8014956:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801495a:	f043 0301 	orr.w	r3, r3, #1
 801495e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	7adb      	ldrb	r3, [r3, #11]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d005      	beq.n	8014974 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014968:	4b04      	ldr	r3, [pc, #16]	@ (801497c <HAL_PCD_SuspendCallback+0x48>)
 801496a:	691b      	ldr	r3, [r3, #16]
 801496c:	4a03      	ldr	r2, [pc, #12]	@ (801497c <HAL_PCD_SuspendCallback+0x48>)
 801496e:	f043 0306 	orr.w	r3, r3, #6
 8014972:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014974:	bf00      	nop
 8014976:	3708      	adds	r7, #8
 8014978:	46bd      	mov	sp, r7
 801497a:	bd80      	pop	{r7, pc}
 801497c:	e000ed00 	.word	0xe000ed00

08014980 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b082      	sub	sp, #8
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801498e:	4618      	mov	r0, r3
 8014990:	f7fb fbb9 	bl	8010106 <USBD_LL_Resume>
}
 8014994:	bf00      	nop
 8014996:	3708      	adds	r7, #8
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}

0801499c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b082      	sub	sp, #8
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
 80149a4:	460b      	mov	r3, r1
 80149a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80149ae:	78fa      	ldrb	r2, [r7, #3]
 80149b0:	4611      	mov	r1, r2
 80149b2:	4618      	mov	r0, r3
 80149b4:	f7fb fc11 	bl	80101da <USBD_LL_IsoOUTIncomplete>
}
 80149b8:	bf00      	nop
 80149ba:	3708      	adds	r7, #8
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}

080149c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b082      	sub	sp, #8
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	6078      	str	r0, [r7, #4]
 80149c8:	460b      	mov	r3, r1
 80149ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80149d2:	78fa      	ldrb	r2, [r7, #3]
 80149d4:	4611      	mov	r1, r2
 80149d6:	4618      	mov	r0, r3
 80149d8:	f7fb fbcd 	bl	8010176 <USBD_LL_IsoINIncomplete>
}
 80149dc:	bf00      	nop
 80149de:	3708      	adds	r7, #8
 80149e0:	46bd      	mov	sp, r7
 80149e2:	bd80      	pop	{r7, pc}

080149e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b082      	sub	sp, #8
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80149f2:	4618      	mov	r0, r3
 80149f4:	f7fb fc23 	bl	801023e <USBD_LL_DevConnected>
}
 80149f8:	bf00      	nop
 80149fa:	3708      	adds	r7, #8
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}

08014a00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b082      	sub	sp, #8
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f7fb fc20 	bl	8010254 <USBD_LL_DevDisconnected>
}
 8014a14:	bf00      	nop
 8014a16:	3708      	adds	r7, #8
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}

08014a1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b082      	sub	sp, #8
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	781b      	ldrb	r3, [r3, #0]
 8014a28:	2b01      	cmp	r3, #1
 8014a2a:	d140      	bne.n	8014aae <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8014a2c:	4a22      	ldr	r2, [pc, #136]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	4a20      	ldr	r2, [pc, #128]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014a38:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8014a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8014abc <USBD_LL_Init+0xa0>)
 8014a40:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8014a42:	4b1d      	ldr	r3, [pc, #116]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014a44:	2209      	movs	r2, #9
 8014a46:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8014a48:	4b1b      	ldr	r3, [pc, #108]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014a4a:	2202      	movs	r2, #2
 8014a4c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8014a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014a50:	2200      	movs	r2, #0
 8014a52:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8014a54:	4b18      	ldr	r3, [pc, #96]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014a56:	2202      	movs	r2, #2
 8014a58:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8014a5a:	4b17      	ldr	r3, [pc, #92]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8014a60:	4b15      	ldr	r3, [pc, #84]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014a62:	2200      	movs	r2, #0
 8014a64:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8014a66:	4b14      	ldr	r3, [pc, #80]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014a68:	2200      	movs	r2, #0
 8014a6a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8014a6c:	4b12      	ldr	r3, [pc, #72]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014a6e:	2200      	movs	r2, #0
 8014a70:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8014a72:	4b11      	ldr	r3, [pc, #68]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014a74:	2200      	movs	r2, #0
 8014a76:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8014a78:	4b0f      	ldr	r3, [pc, #60]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8014a7e:	480e      	ldr	r0, [pc, #56]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014a80:	f7f0 fd87 	bl	8005592 <HAL_PCD_Init>
 8014a84:	4603      	mov	r3, r0
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d001      	beq.n	8014a8e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8014a8a:	f7ed f901 	bl	8001c90 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8014a8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8014a92:	4809      	ldr	r0, [pc, #36]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014a94:	f7f1 ffdb 	bl	8006a4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8014a98:	2280      	movs	r2, #128	@ 0x80
 8014a9a:	2100      	movs	r1, #0
 8014a9c:	4806      	ldr	r0, [pc, #24]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014a9e:	f7f1 ff8f 	bl	80069c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8014aa2:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8014aa6:	2101      	movs	r1, #1
 8014aa8:	4803      	ldr	r0, [pc, #12]	@ (8014ab8 <USBD_LL_Init+0x9c>)
 8014aaa:	f7f1 ff89 	bl	80069c0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8014aae:	2300      	movs	r3, #0
}
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	3708      	adds	r7, #8
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}
 8014ab8:	24004624 	.word	0x24004624
 8014abc:	40040000 	.word	0x40040000

08014ac0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b084      	sub	sp, #16
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ac8:	2300      	movs	r3, #0
 8014aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014acc:	2300      	movs	r3, #0
 8014ace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f7f0 fe67 	bl	80057aa <HAL_PCD_Start>
 8014adc:	4603      	mov	r3, r0
 8014ade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ae0:	7bfb      	ldrb	r3, [r7, #15]
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f000 f942 	bl	8014d6c <USBD_Get_USB_Status>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3710      	adds	r7, #16
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}

08014af6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014af6:	b580      	push	{r7, lr}
 8014af8:	b084      	sub	sp, #16
 8014afa:	af00      	add	r7, sp, #0
 8014afc:	6078      	str	r0, [r7, #4]
 8014afe:	4608      	mov	r0, r1
 8014b00:	4611      	mov	r1, r2
 8014b02:	461a      	mov	r2, r3
 8014b04:	4603      	mov	r3, r0
 8014b06:	70fb      	strb	r3, [r7, #3]
 8014b08:	460b      	mov	r3, r1
 8014b0a:	70bb      	strb	r3, [r7, #2]
 8014b0c:	4613      	mov	r3, r2
 8014b0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b10:	2300      	movs	r3, #0
 8014b12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b14:	2300      	movs	r3, #0
 8014b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014b1e:	78bb      	ldrb	r3, [r7, #2]
 8014b20:	883a      	ldrh	r2, [r7, #0]
 8014b22:	78f9      	ldrb	r1, [r7, #3]
 8014b24:	f7f1 fb68 	bl	80061f8 <HAL_PCD_EP_Open>
 8014b28:	4603      	mov	r3, r0
 8014b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b2c:	7bfb      	ldrb	r3, [r7, #15]
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f000 f91c 	bl	8014d6c <USBD_Get_USB_Status>
 8014b34:	4603      	mov	r3, r0
 8014b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3710      	adds	r7, #16
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}

08014b42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014b42:	b580      	push	{r7, lr}
 8014b44:	b084      	sub	sp, #16
 8014b46:	af00      	add	r7, sp, #0
 8014b48:	6078      	str	r0, [r7, #4]
 8014b4a:	460b      	mov	r3, r1
 8014b4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b4e:	2300      	movs	r3, #0
 8014b50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b52:	2300      	movs	r3, #0
 8014b54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014b5c:	78fa      	ldrb	r2, [r7, #3]
 8014b5e:	4611      	mov	r1, r2
 8014b60:	4618      	mov	r0, r3
 8014b62:	f7f1 fbb1 	bl	80062c8 <HAL_PCD_EP_Close>
 8014b66:	4603      	mov	r3, r0
 8014b68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b6a:	7bfb      	ldrb	r3, [r7, #15]
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f000 f8fd 	bl	8014d6c <USBD_Get_USB_Status>
 8014b72:	4603      	mov	r3, r0
 8014b74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014b76:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b78:	4618      	mov	r0, r3
 8014b7a:	3710      	adds	r7, #16
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bd80      	pop	{r7, pc}

08014b80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b084      	sub	sp, #16
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
 8014b88:	460b      	mov	r3, r1
 8014b8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b90:	2300      	movs	r3, #0
 8014b92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014b9a:	78fa      	ldrb	r2, [r7, #3]
 8014b9c:	4611      	mov	r1, r2
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f7f1 fc69 	bl	8006476 <HAL_PCD_EP_SetStall>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ba8:	7bfb      	ldrb	r3, [r7, #15]
 8014baa:	4618      	mov	r0, r3
 8014bac:	f000 f8de 	bl	8014d6c <USBD_Get_USB_Status>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014bb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	3710      	adds	r7, #16
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	bd80      	pop	{r7, pc}

08014bbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014bbe:	b580      	push	{r7, lr}
 8014bc0:	b084      	sub	sp, #16
 8014bc2:	af00      	add	r7, sp, #0
 8014bc4:	6078      	str	r0, [r7, #4]
 8014bc6:	460b      	mov	r3, r1
 8014bc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014bca:	2300      	movs	r3, #0
 8014bcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014bce:	2300      	movs	r3, #0
 8014bd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014bd8:	78fa      	ldrb	r2, [r7, #3]
 8014bda:	4611      	mov	r1, r2
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7f1 fcad 	bl	800653c <HAL_PCD_EP_ClrStall>
 8014be2:	4603      	mov	r3, r0
 8014be4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014be6:	7bfb      	ldrb	r3, [r7, #15]
 8014be8:	4618      	mov	r0, r3
 8014bea:	f000 f8bf 	bl	8014d6c <USBD_Get_USB_Status>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014bf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	3710      	adds	r7, #16
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd80      	pop	{r7, pc}

08014bfc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014bfc:	b480      	push	{r7}
 8014bfe:	b085      	sub	sp, #20
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
 8014c04:	460b      	mov	r3, r1
 8014c06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014c0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014c10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	da0b      	bge.n	8014c30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014c18:	78fb      	ldrb	r3, [r7, #3]
 8014c1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014c1e:	68f9      	ldr	r1, [r7, #12]
 8014c20:	4613      	mov	r3, r2
 8014c22:	00db      	lsls	r3, r3, #3
 8014c24:	4413      	add	r3, r2
 8014c26:	009b      	lsls	r3, r3, #2
 8014c28:	440b      	add	r3, r1
 8014c2a:	3316      	adds	r3, #22
 8014c2c:	781b      	ldrb	r3, [r3, #0]
 8014c2e:	e00b      	b.n	8014c48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014c30:	78fb      	ldrb	r3, [r7, #3]
 8014c32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014c36:	68f9      	ldr	r1, [r7, #12]
 8014c38:	4613      	mov	r3, r2
 8014c3a:	00db      	lsls	r3, r3, #3
 8014c3c:	4413      	add	r3, r2
 8014c3e:	009b      	lsls	r3, r3, #2
 8014c40:	440b      	add	r3, r1
 8014c42:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8014c46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014c48:	4618      	mov	r0, r3
 8014c4a:	3714      	adds	r7, #20
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c52:	4770      	bx	lr

08014c54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b084      	sub	sp, #16
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
 8014c5c:	460b      	mov	r3, r1
 8014c5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c60:	2300      	movs	r3, #0
 8014c62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c64:	2300      	movs	r3, #0
 8014c66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014c6e:	78fa      	ldrb	r2, [r7, #3]
 8014c70:	4611      	mov	r1, r2
 8014c72:	4618      	mov	r0, r3
 8014c74:	f7f1 fa9c 	bl	80061b0 <HAL_PCD_SetAddress>
 8014c78:	4603      	mov	r3, r0
 8014c7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c7c:	7bfb      	ldrb	r3, [r7, #15]
 8014c7e:	4618      	mov	r0, r3
 8014c80:	f000 f874 	bl	8014d6c <USBD_Get_USB_Status>
 8014c84:	4603      	mov	r3, r0
 8014c86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c88:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	3710      	adds	r7, #16
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd80      	pop	{r7, pc}

08014c92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014c92:	b580      	push	{r7, lr}
 8014c94:	b086      	sub	sp, #24
 8014c96:	af00      	add	r7, sp, #0
 8014c98:	60f8      	str	r0, [r7, #12]
 8014c9a:	607a      	str	r2, [r7, #4]
 8014c9c:	603b      	str	r3, [r7, #0]
 8014c9e:	460b      	mov	r3, r1
 8014ca0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014cb0:	7af9      	ldrb	r1, [r7, #11]
 8014cb2:	683b      	ldr	r3, [r7, #0]
 8014cb4:	687a      	ldr	r2, [r7, #4]
 8014cb6:	f7f1 fba4 	bl	8006402 <HAL_PCD_EP_Transmit>
 8014cba:	4603      	mov	r3, r0
 8014cbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014cbe:	7dfb      	ldrb	r3, [r7, #23]
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f000 f853 	bl	8014d6c <USBD_Get_USB_Status>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014cca:	7dbb      	ldrb	r3, [r7, #22]
}
 8014ccc:	4618      	mov	r0, r3
 8014cce:	3718      	adds	r7, #24
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	bd80      	pop	{r7, pc}

08014cd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b086      	sub	sp, #24
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	60f8      	str	r0, [r7, #12]
 8014cdc:	607a      	str	r2, [r7, #4]
 8014cde:	603b      	str	r3, [r7, #0]
 8014ce0:	460b      	mov	r3, r1
 8014ce2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ce8:	2300      	movs	r3, #0
 8014cea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014cf2:	7af9      	ldrb	r1, [r7, #11]
 8014cf4:	683b      	ldr	r3, [r7, #0]
 8014cf6:	687a      	ldr	r2, [r7, #4]
 8014cf8:	f7f1 fb30 	bl	800635c <HAL_PCD_EP_Receive>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d00:	7dfb      	ldrb	r3, [r7, #23]
 8014d02:	4618      	mov	r0, r3
 8014d04:	f000 f832 	bl	8014d6c <USBD_Get_USB_Status>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014d0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8014d0e:	4618      	mov	r0, r3
 8014d10:	3718      	adds	r7, #24
 8014d12:	46bd      	mov	sp, r7
 8014d14:	bd80      	pop	{r7, pc}

08014d16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d16:	b580      	push	{r7, lr}
 8014d18:	b082      	sub	sp, #8
 8014d1a:	af00      	add	r7, sp, #0
 8014d1c:	6078      	str	r0, [r7, #4]
 8014d1e:	460b      	mov	r3, r1
 8014d20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014d28:	78fa      	ldrb	r2, [r7, #3]
 8014d2a:	4611      	mov	r1, r2
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f7f1 fb50 	bl	80063d2 <HAL_PCD_EP_GetRxCount>
 8014d32:	4603      	mov	r3, r0
}
 8014d34:	4618      	mov	r0, r3
 8014d36:	3708      	adds	r7, #8
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	bd80      	pop	{r7, pc}

08014d3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014d3c:	b480      	push	{r7}
 8014d3e:	b083      	sub	sp, #12
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014d44:	4b03      	ldr	r3, [pc, #12]	@ (8014d54 <USBD_static_malloc+0x18>)
}
 8014d46:	4618      	mov	r0, r3
 8014d48:	370c      	adds	r7, #12
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d50:	4770      	bx	lr
 8014d52:	bf00      	nop
 8014d54:	24004b08 	.word	0x24004b08

08014d58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014d58:	b480      	push	{r7}
 8014d5a:	b083      	sub	sp, #12
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8014d60:	bf00      	nop
 8014d62:	370c      	adds	r7, #12
 8014d64:	46bd      	mov	sp, r7
 8014d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6a:	4770      	bx	lr

08014d6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014d6c:	b480      	push	{r7}
 8014d6e:	b085      	sub	sp, #20
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	4603      	mov	r3, r0
 8014d74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d76:	2300      	movs	r3, #0
 8014d78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014d7a:	79fb      	ldrb	r3, [r7, #7]
 8014d7c:	2b03      	cmp	r3, #3
 8014d7e:	d817      	bhi.n	8014db0 <USBD_Get_USB_Status+0x44>
 8014d80:	a201      	add	r2, pc, #4	@ (adr r2, 8014d88 <USBD_Get_USB_Status+0x1c>)
 8014d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d86:	bf00      	nop
 8014d88:	08014d99 	.word	0x08014d99
 8014d8c:	08014d9f 	.word	0x08014d9f
 8014d90:	08014da5 	.word	0x08014da5
 8014d94:	08014dab 	.word	0x08014dab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014d98:	2300      	movs	r3, #0
 8014d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8014d9c:	e00b      	b.n	8014db6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014d9e:	2303      	movs	r3, #3
 8014da0:	73fb      	strb	r3, [r7, #15]
    break;
 8014da2:	e008      	b.n	8014db6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014da4:	2301      	movs	r3, #1
 8014da6:	73fb      	strb	r3, [r7, #15]
    break;
 8014da8:	e005      	b.n	8014db6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014daa:	2303      	movs	r3, #3
 8014dac:	73fb      	strb	r3, [r7, #15]
    break;
 8014dae:	e002      	b.n	8014db6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014db0:	2303      	movs	r3, #3
 8014db2:	73fb      	strb	r3, [r7, #15]
    break;
 8014db4:	bf00      	nop
  }
  return usb_status;
 8014db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8014db8:	4618      	mov	r0, r3
 8014dba:	3714      	adds	r7, #20
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc2:	4770      	bx	lr

08014dc4 <std>:
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	b510      	push	{r4, lr}
 8014dc8:	4604      	mov	r4, r0
 8014dca:	e9c0 3300 	strd	r3, r3, [r0]
 8014dce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014dd2:	6083      	str	r3, [r0, #8]
 8014dd4:	8181      	strh	r1, [r0, #12]
 8014dd6:	6643      	str	r3, [r0, #100]	@ 0x64
 8014dd8:	81c2      	strh	r2, [r0, #14]
 8014dda:	6183      	str	r3, [r0, #24]
 8014ddc:	4619      	mov	r1, r3
 8014dde:	2208      	movs	r2, #8
 8014de0:	305c      	adds	r0, #92	@ 0x5c
 8014de2:	f000 fa45 	bl	8015270 <memset>
 8014de6:	4b0d      	ldr	r3, [pc, #52]	@ (8014e1c <std+0x58>)
 8014de8:	6263      	str	r3, [r4, #36]	@ 0x24
 8014dea:	4b0d      	ldr	r3, [pc, #52]	@ (8014e20 <std+0x5c>)
 8014dec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014dee:	4b0d      	ldr	r3, [pc, #52]	@ (8014e24 <std+0x60>)
 8014df0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014df2:	4b0d      	ldr	r3, [pc, #52]	@ (8014e28 <std+0x64>)
 8014df4:	6323      	str	r3, [r4, #48]	@ 0x30
 8014df6:	4b0d      	ldr	r3, [pc, #52]	@ (8014e2c <std+0x68>)
 8014df8:	6224      	str	r4, [r4, #32]
 8014dfa:	429c      	cmp	r4, r3
 8014dfc:	d006      	beq.n	8014e0c <std+0x48>
 8014dfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014e02:	4294      	cmp	r4, r2
 8014e04:	d002      	beq.n	8014e0c <std+0x48>
 8014e06:	33d0      	adds	r3, #208	@ 0xd0
 8014e08:	429c      	cmp	r4, r3
 8014e0a:	d105      	bne.n	8014e18 <std+0x54>
 8014e0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e14:	f000 bab4 	b.w	8015380 <__retarget_lock_init_recursive>
 8014e18:	bd10      	pop	{r4, pc}
 8014e1a:	bf00      	nop
 8014e1c:	080150bd 	.word	0x080150bd
 8014e20:	080150e3 	.word	0x080150e3
 8014e24:	0801511b 	.word	0x0801511b
 8014e28:	0801513f 	.word	0x0801513f
 8014e2c:	24004d28 	.word	0x24004d28

08014e30 <stdio_exit_handler>:
 8014e30:	4a02      	ldr	r2, [pc, #8]	@ (8014e3c <stdio_exit_handler+0xc>)
 8014e32:	4903      	ldr	r1, [pc, #12]	@ (8014e40 <stdio_exit_handler+0x10>)
 8014e34:	4803      	ldr	r0, [pc, #12]	@ (8014e44 <stdio_exit_handler+0x14>)
 8014e36:	f000 b869 	b.w	8014f0c <_fwalk_sglue>
 8014e3a:	bf00      	nop
 8014e3c:	24000214 	.word	0x24000214
 8014e40:	08016521 	.word	0x08016521
 8014e44:	24000224 	.word	0x24000224

08014e48 <cleanup_stdio>:
 8014e48:	6841      	ldr	r1, [r0, #4]
 8014e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8014e7c <cleanup_stdio+0x34>)
 8014e4c:	4299      	cmp	r1, r3
 8014e4e:	b510      	push	{r4, lr}
 8014e50:	4604      	mov	r4, r0
 8014e52:	d001      	beq.n	8014e58 <cleanup_stdio+0x10>
 8014e54:	f001 fb64 	bl	8016520 <_fflush_r>
 8014e58:	68a1      	ldr	r1, [r4, #8]
 8014e5a:	4b09      	ldr	r3, [pc, #36]	@ (8014e80 <cleanup_stdio+0x38>)
 8014e5c:	4299      	cmp	r1, r3
 8014e5e:	d002      	beq.n	8014e66 <cleanup_stdio+0x1e>
 8014e60:	4620      	mov	r0, r4
 8014e62:	f001 fb5d 	bl	8016520 <_fflush_r>
 8014e66:	68e1      	ldr	r1, [r4, #12]
 8014e68:	4b06      	ldr	r3, [pc, #24]	@ (8014e84 <cleanup_stdio+0x3c>)
 8014e6a:	4299      	cmp	r1, r3
 8014e6c:	d004      	beq.n	8014e78 <cleanup_stdio+0x30>
 8014e6e:	4620      	mov	r0, r4
 8014e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e74:	f001 bb54 	b.w	8016520 <_fflush_r>
 8014e78:	bd10      	pop	{r4, pc}
 8014e7a:	bf00      	nop
 8014e7c:	24004d28 	.word	0x24004d28
 8014e80:	24004d90 	.word	0x24004d90
 8014e84:	24004df8 	.word	0x24004df8

08014e88 <global_stdio_init.part.0>:
 8014e88:	b510      	push	{r4, lr}
 8014e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8014eb8 <global_stdio_init.part.0+0x30>)
 8014e8c:	4c0b      	ldr	r4, [pc, #44]	@ (8014ebc <global_stdio_init.part.0+0x34>)
 8014e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8014ec0 <global_stdio_init.part.0+0x38>)
 8014e90:	601a      	str	r2, [r3, #0]
 8014e92:	4620      	mov	r0, r4
 8014e94:	2200      	movs	r2, #0
 8014e96:	2104      	movs	r1, #4
 8014e98:	f7ff ff94 	bl	8014dc4 <std>
 8014e9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014ea0:	2201      	movs	r2, #1
 8014ea2:	2109      	movs	r1, #9
 8014ea4:	f7ff ff8e 	bl	8014dc4 <std>
 8014ea8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014eac:	2202      	movs	r2, #2
 8014eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014eb2:	2112      	movs	r1, #18
 8014eb4:	f7ff bf86 	b.w	8014dc4 <std>
 8014eb8:	24004e60 	.word	0x24004e60
 8014ebc:	24004d28 	.word	0x24004d28
 8014ec0:	08014e31 	.word	0x08014e31

08014ec4 <__sfp_lock_acquire>:
 8014ec4:	4801      	ldr	r0, [pc, #4]	@ (8014ecc <__sfp_lock_acquire+0x8>)
 8014ec6:	f000 ba5c 	b.w	8015382 <__retarget_lock_acquire_recursive>
 8014eca:	bf00      	nop
 8014ecc:	24004e69 	.word	0x24004e69

08014ed0 <__sfp_lock_release>:
 8014ed0:	4801      	ldr	r0, [pc, #4]	@ (8014ed8 <__sfp_lock_release+0x8>)
 8014ed2:	f000 ba57 	b.w	8015384 <__retarget_lock_release_recursive>
 8014ed6:	bf00      	nop
 8014ed8:	24004e69 	.word	0x24004e69

08014edc <__sinit>:
 8014edc:	b510      	push	{r4, lr}
 8014ede:	4604      	mov	r4, r0
 8014ee0:	f7ff fff0 	bl	8014ec4 <__sfp_lock_acquire>
 8014ee4:	6a23      	ldr	r3, [r4, #32]
 8014ee6:	b11b      	cbz	r3, 8014ef0 <__sinit+0x14>
 8014ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014eec:	f7ff bff0 	b.w	8014ed0 <__sfp_lock_release>
 8014ef0:	4b04      	ldr	r3, [pc, #16]	@ (8014f04 <__sinit+0x28>)
 8014ef2:	6223      	str	r3, [r4, #32]
 8014ef4:	4b04      	ldr	r3, [pc, #16]	@ (8014f08 <__sinit+0x2c>)
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d1f5      	bne.n	8014ee8 <__sinit+0xc>
 8014efc:	f7ff ffc4 	bl	8014e88 <global_stdio_init.part.0>
 8014f00:	e7f2      	b.n	8014ee8 <__sinit+0xc>
 8014f02:	bf00      	nop
 8014f04:	08014e49 	.word	0x08014e49
 8014f08:	24004e60 	.word	0x24004e60

08014f0c <_fwalk_sglue>:
 8014f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f10:	4607      	mov	r7, r0
 8014f12:	4688      	mov	r8, r1
 8014f14:	4614      	mov	r4, r2
 8014f16:	2600      	movs	r6, #0
 8014f18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014f1c:	f1b9 0901 	subs.w	r9, r9, #1
 8014f20:	d505      	bpl.n	8014f2e <_fwalk_sglue+0x22>
 8014f22:	6824      	ldr	r4, [r4, #0]
 8014f24:	2c00      	cmp	r4, #0
 8014f26:	d1f7      	bne.n	8014f18 <_fwalk_sglue+0xc>
 8014f28:	4630      	mov	r0, r6
 8014f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f2e:	89ab      	ldrh	r3, [r5, #12]
 8014f30:	2b01      	cmp	r3, #1
 8014f32:	d907      	bls.n	8014f44 <_fwalk_sglue+0x38>
 8014f34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014f38:	3301      	adds	r3, #1
 8014f3a:	d003      	beq.n	8014f44 <_fwalk_sglue+0x38>
 8014f3c:	4629      	mov	r1, r5
 8014f3e:	4638      	mov	r0, r7
 8014f40:	47c0      	blx	r8
 8014f42:	4306      	orrs	r6, r0
 8014f44:	3568      	adds	r5, #104	@ 0x68
 8014f46:	e7e9      	b.n	8014f1c <_fwalk_sglue+0x10>

08014f48 <iprintf>:
 8014f48:	b40f      	push	{r0, r1, r2, r3}
 8014f4a:	b507      	push	{r0, r1, r2, lr}
 8014f4c:	4906      	ldr	r1, [pc, #24]	@ (8014f68 <iprintf+0x20>)
 8014f4e:	ab04      	add	r3, sp, #16
 8014f50:	6808      	ldr	r0, [r1, #0]
 8014f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f56:	6881      	ldr	r1, [r0, #8]
 8014f58:	9301      	str	r3, [sp, #4]
 8014f5a:	f000 fe69 	bl	8015c30 <_vfiprintf_r>
 8014f5e:	b003      	add	sp, #12
 8014f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f64:	b004      	add	sp, #16
 8014f66:	4770      	bx	lr
 8014f68:	24000220 	.word	0x24000220

08014f6c <_puts_r>:
 8014f6c:	6a03      	ldr	r3, [r0, #32]
 8014f6e:	b570      	push	{r4, r5, r6, lr}
 8014f70:	6884      	ldr	r4, [r0, #8]
 8014f72:	4605      	mov	r5, r0
 8014f74:	460e      	mov	r6, r1
 8014f76:	b90b      	cbnz	r3, 8014f7c <_puts_r+0x10>
 8014f78:	f7ff ffb0 	bl	8014edc <__sinit>
 8014f7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f7e:	07db      	lsls	r3, r3, #31
 8014f80:	d405      	bmi.n	8014f8e <_puts_r+0x22>
 8014f82:	89a3      	ldrh	r3, [r4, #12]
 8014f84:	0598      	lsls	r0, r3, #22
 8014f86:	d402      	bmi.n	8014f8e <_puts_r+0x22>
 8014f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f8a:	f000 f9fa 	bl	8015382 <__retarget_lock_acquire_recursive>
 8014f8e:	89a3      	ldrh	r3, [r4, #12]
 8014f90:	0719      	lsls	r1, r3, #28
 8014f92:	d502      	bpl.n	8014f9a <_puts_r+0x2e>
 8014f94:	6923      	ldr	r3, [r4, #16]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d135      	bne.n	8015006 <_puts_r+0x9a>
 8014f9a:	4621      	mov	r1, r4
 8014f9c:	4628      	mov	r0, r5
 8014f9e:	f000 f911 	bl	80151c4 <__swsetup_r>
 8014fa2:	b380      	cbz	r0, 8015006 <_puts_r+0x9a>
 8014fa4:	f04f 35ff 	mov.w	r5, #4294967295
 8014fa8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014faa:	07da      	lsls	r2, r3, #31
 8014fac:	d405      	bmi.n	8014fba <_puts_r+0x4e>
 8014fae:	89a3      	ldrh	r3, [r4, #12]
 8014fb0:	059b      	lsls	r3, r3, #22
 8014fb2:	d402      	bmi.n	8014fba <_puts_r+0x4e>
 8014fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014fb6:	f000 f9e5 	bl	8015384 <__retarget_lock_release_recursive>
 8014fba:	4628      	mov	r0, r5
 8014fbc:	bd70      	pop	{r4, r5, r6, pc}
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	da04      	bge.n	8014fcc <_puts_r+0x60>
 8014fc2:	69a2      	ldr	r2, [r4, #24]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	dc17      	bgt.n	8014ff8 <_puts_r+0x8c>
 8014fc8:	290a      	cmp	r1, #10
 8014fca:	d015      	beq.n	8014ff8 <_puts_r+0x8c>
 8014fcc:	6823      	ldr	r3, [r4, #0]
 8014fce:	1c5a      	adds	r2, r3, #1
 8014fd0:	6022      	str	r2, [r4, #0]
 8014fd2:	7019      	strb	r1, [r3, #0]
 8014fd4:	68a3      	ldr	r3, [r4, #8]
 8014fd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014fda:	3b01      	subs	r3, #1
 8014fdc:	60a3      	str	r3, [r4, #8]
 8014fde:	2900      	cmp	r1, #0
 8014fe0:	d1ed      	bne.n	8014fbe <_puts_r+0x52>
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	da11      	bge.n	801500a <_puts_r+0x9e>
 8014fe6:	4622      	mov	r2, r4
 8014fe8:	210a      	movs	r1, #10
 8014fea:	4628      	mov	r0, r5
 8014fec:	f000 f8ab 	bl	8015146 <__swbuf_r>
 8014ff0:	3001      	adds	r0, #1
 8014ff2:	d0d7      	beq.n	8014fa4 <_puts_r+0x38>
 8014ff4:	250a      	movs	r5, #10
 8014ff6:	e7d7      	b.n	8014fa8 <_puts_r+0x3c>
 8014ff8:	4622      	mov	r2, r4
 8014ffa:	4628      	mov	r0, r5
 8014ffc:	f000 f8a3 	bl	8015146 <__swbuf_r>
 8015000:	3001      	adds	r0, #1
 8015002:	d1e7      	bne.n	8014fd4 <_puts_r+0x68>
 8015004:	e7ce      	b.n	8014fa4 <_puts_r+0x38>
 8015006:	3e01      	subs	r6, #1
 8015008:	e7e4      	b.n	8014fd4 <_puts_r+0x68>
 801500a:	6823      	ldr	r3, [r4, #0]
 801500c:	1c5a      	adds	r2, r3, #1
 801500e:	6022      	str	r2, [r4, #0]
 8015010:	220a      	movs	r2, #10
 8015012:	701a      	strb	r2, [r3, #0]
 8015014:	e7ee      	b.n	8014ff4 <_puts_r+0x88>
	...

08015018 <puts>:
 8015018:	4b02      	ldr	r3, [pc, #8]	@ (8015024 <puts+0xc>)
 801501a:	4601      	mov	r1, r0
 801501c:	6818      	ldr	r0, [r3, #0]
 801501e:	f7ff bfa5 	b.w	8014f6c <_puts_r>
 8015022:	bf00      	nop
 8015024:	24000220 	.word	0x24000220

08015028 <siprintf>:
 8015028:	b40e      	push	{r1, r2, r3}
 801502a:	b500      	push	{lr}
 801502c:	b09c      	sub	sp, #112	@ 0x70
 801502e:	ab1d      	add	r3, sp, #116	@ 0x74
 8015030:	9002      	str	r0, [sp, #8]
 8015032:	9006      	str	r0, [sp, #24]
 8015034:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015038:	4809      	ldr	r0, [pc, #36]	@ (8015060 <siprintf+0x38>)
 801503a:	9107      	str	r1, [sp, #28]
 801503c:	9104      	str	r1, [sp, #16]
 801503e:	4909      	ldr	r1, [pc, #36]	@ (8015064 <siprintf+0x3c>)
 8015040:	f853 2b04 	ldr.w	r2, [r3], #4
 8015044:	9105      	str	r1, [sp, #20]
 8015046:	6800      	ldr	r0, [r0, #0]
 8015048:	9301      	str	r3, [sp, #4]
 801504a:	a902      	add	r1, sp, #8
 801504c:	f000 fafe 	bl	801564c <_svfiprintf_r>
 8015050:	9b02      	ldr	r3, [sp, #8]
 8015052:	2200      	movs	r2, #0
 8015054:	701a      	strb	r2, [r3, #0]
 8015056:	b01c      	add	sp, #112	@ 0x70
 8015058:	f85d eb04 	ldr.w	lr, [sp], #4
 801505c:	b003      	add	sp, #12
 801505e:	4770      	bx	lr
 8015060:	24000220 	.word	0x24000220
 8015064:	ffff0208 	.word	0xffff0208

08015068 <siscanf>:
 8015068:	b40e      	push	{r1, r2, r3}
 801506a:	b530      	push	{r4, r5, lr}
 801506c:	b09c      	sub	sp, #112	@ 0x70
 801506e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8015070:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8015074:	f854 5b04 	ldr.w	r5, [r4], #4
 8015078:	f8ad 2014 	strh.w	r2, [sp, #20]
 801507c:	9002      	str	r0, [sp, #8]
 801507e:	9006      	str	r0, [sp, #24]
 8015080:	f7eb f946 	bl	8000310 <strlen>
 8015084:	4b0b      	ldr	r3, [pc, #44]	@ (80150b4 <siscanf+0x4c>)
 8015086:	9003      	str	r0, [sp, #12]
 8015088:	9007      	str	r0, [sp, #28]
 801508a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801508c:	480a      	ldr	r0, [pc, #40]	@ (80150b8 <siscanf+0x50>)
 801508e:	9401      	str	r4, [sp, #4]
 8015090:	2300      	movs	r3, #0
 8015092:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015094:	9314      	str	r3, [sp, #80]	@ 0x50
 8015096:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801509a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801509e:	462a      	mov	r2, r5
 80150a0:	4623      	mov	r3, r4
 80150a2:	a902      	add	r1, sp, #8
 80150a4:	6800      	ldr	r0, [r0, #0]
 80150a6:	f000 fc25 	bl	80158f4 <__ssvfiscanf_r>
 80150aa:	b01c      	add	sp, #112	@ 0x70
 80150ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80150b0:	b003      	add	sp, #12
 80150b2:	4770      	bx	lr
 80150b4:	080150df 	.word	0x080150df
 80150b8:	24000220 	.word	0x24000220

080150bc <__sread>:
 80150bc:	b510      	push	{r4, lr}
 80150be:	460c      	mov	r4, r1
 80150c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150c4:	f000 f90e 	bl	80152e4 <_read_r>
 80150c8:	2800      	cmp	r0, #0
 80150ca:	bfab      	itete	ge
 80150cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80150ce:	89a3      	ldrhlt	r3, [r4, #12]
 80150d0:	181b      	addge	r3, r3, r0
 80150d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80150d6:	bfac      	ite	ge
 80150d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80150da:	81a3      	strhlt	r3, [r4, #12]
 80150dc:	bd10      	pop	{r4, pc}

080150de <__seofread>:
 80150de:	2000      	movs	r0, #0
 80150e0:	4770      	bx	lr

080150e2 <__swrite>:
 80150e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150e6:	461f      	mov	r7, r3
 80150e8:	898b      	ldrh	r3, [r1, #12]
 80150ea:	05db      	lsls	r3, r3, #23
 80150ec:	4605      	mov	r5, r0
 80150ee:	460c      	mov	r4, r1
 80150f0:	4616      	mov	r6, r2
 80150f2:	d505      	bpl.n	8015100 <__swrite+0x1e>
 80150f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150f8:	2302      	movs	r3, #2
 80150fa:	2200      	movs	r2, #0
 80150fc:	f000 f8e0 	bl	80152c0 <_lseek_r>
 8015100:	89a3      	ldrh	r3, [r4, #12]
 8015102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015106:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801510a:	81a3      	strh	r3, [r4, #12]
 801510c:	4632      	mov	r2, r6
 801510e:	463b      	mov	r3, r7
 8015110:	4628      	mov	r0, r5
 8015112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015116:	f000 b8f7 	b.w	8015308 <_write_r>

0801511a <__sseek>:
 801511a:	b510      	push	{r4, lr}
 801511c:	460c      	mov	r4, r1
 801511e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015122:	f000 f8cd 	bl	80152c0 <_lseek_r>
 8015126:	1c43      	adds	r3, r0, #1
 8015128:	89a3      	ldrh	r3, [r4, #12]
 801512a:	bf15      	itete	ne
 801512c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801512e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015132:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015136:	81a3      	strheq	r3, [r4, #12]
 8015138:	bf18      	it	ne
 801513a:	81a3      	strhne	r3, [r4, #12]
 801513c:	bd10      	pop	{r4, pc}

0801513e <__sclose>:
 801513e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015142:	f000 b8ad 	b.w	80152a0 <_close_r>

08015146 <__swbuf_r>:
 8015146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015148:	460e      	mov	r6, r1
 801514a:	4614      	mov	r4, r2
 801514c:	4605      	mov	r5, r0
 801514e:	b118      	cbz	r0, 8015158 <__swbuf_r+0x12>
 8015150:	6a03      	ldr	r3, [r0, #32]
 8015152:	b90b      	cbnz	r3, 8015158 <__swbuf_r+0x12>
 8015154:	f7ff fec2 	bl	8014edc <__sinit>
 8015158:	69a3      	ldr	r3, [r4, #24]
 801515a:	60a3      	str	r3, [r4, #8]
 801515c:	89a3      	ldrh	r3, [r4, #12]
 801515e:	071a      	lsls	r2, r3, #28
 8015160:	d501      	bpl.n	8015166 <__swbuf_r+0x20>
 8015162:	6923      	ldr	r3, [r4, #16]
 8015164:	b943      	cbnz	r3, 8015178 <__swbuf_r+0x32>
 8015166:	4621      	mov	r1, r4
 8015168:	4628      	mov	r0, r5
 801516a:	f000 f82b 	bl	80151c4 <__swsetup_r>
 801516e:	b118      	cbz	r0, 8015178 <__swbuf_r+0x32>
 8015170:	f04f 37ff 	mov.w	r7, #4294967295
 8015174:	4638      	mov	r0, r7
 8015176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015178:	6823      	ldr	r3, [r4, #0]
 801517a:	6922      	ldr	r2, [r4, #16]
 801517c:	1a98      	subs	r0, r3, r2
 801517e:	6963      	ldr	r3, [r4, #20]
 8015180:	b2f6      	uxtb	r6, r6
 8015182:	4283      	cmp	r3, r0
 8015184:	4637      	mov	r7, r6
 8015186:	dc05      	bgt.n	8015194 <__swbuf_r+0x4e>
 8015188:	4621      	mov	r1, r4
 801518a:	4628      	mov	r0, r5
 801518c:	f001 f9c8 	bl	8016520 <_fflush_r>
 8015190:	2800      	cmp	r0, #0
 8015192:	d1ed      	bne.n	8015170 <__swbuf_r+0x2a>
 8015194:	68a3      	ldr	r3, [r4, #8]
 8015196:	3b01      	subs	r3, #1
 8015198:	60a3      	str	r3, [r4, #8]
 801519a:	6823      	ldr	r3, [r4, #0]
 801519c:	1c5a      	adds	r2, r3, #1
 801519e:	6022      	str	r2, [r4, #0]
 80151a0:	701e      	strb	r6, [r3, #0]
 80151a2:	6962      	ldr	r2, [r4, #20]
 80151a4:	1c43      	adds	r3, r0, #1
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d004      	beq.n	80151b4 <__swbuf_r+0x6e>
 80151aa:	89a3      	ldrh	r3, [r4, #12]
 80151ac:	07db      	lsls	r3, r3, #31
 80151ae:	d5e1      	bpl.n	8015174 <__swbuf_r+0x2e>
 80151b0:	2e0a      	cmp	r6, #10
 80151b2:	d1df      	bne.n	8015174 <__swbuf_r+0x2e>
 80151b4:	4621      	mov	r1, r4
 80151b6:	4628      	mov	r0, r5
 80151b8:	f001 f9b2 	bl	8016520 <_fflush_r>
 80151bc:	2800      	cmp	r0, #0
 80151be:	d0d9      	beq.n	8015174 <__swbuf_r+0x2e>
 80151c0:	e7d6      	b.n	8015170 <__swbuf_r+0x2a>
	...

080151c4 <__swsetup_r>:
 80151c4:	b538      	push	{r3, r4, r5, lr}
 80151c6:	4b29      	ldr	r3, [pc, #164]	@ (801526c <__swsetup_r+0xa8>)
 80151c8:	4605      	mov	r5, r0
 80151ca:	6818      	ldr	r0, [r3, #0]
 80151cc:	460c      	mov	r4, r1
 80151ce:	b118      	cbz	r0, 80151d8 <__swsetup_r+0x14>
 80151d0:	6a03      	ldr	r3, [r0, #32]
 80151d2:	b90b      	cbnz	r3, 80151d8 <__swsetup_r+0x14>
 80151d4:	f7ff fe82 	bl	8014edc <__sinit>
 80151d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151dc:	0719      	lsls	r1, r3, #28
 80151de:	d422      	bmi.n	8015226 <__swsetup_r+0x62>
 80151e0:	06da      	lsls	r2, r3, #27
 80151e2:	d407      	bmi.n	80151f4 <__swsetup_r+0x30>
 80151e4:	2209      	movs	r2, #9
 80151e6:	602a      	str	r2, [r5, #0]
 80151e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80151ec:	81a3      	strh	r3, [r4, #12]
 80151ee:	f04f 30ff 	mov.w	r0, #4294967295
 80151f2:	e033      	b.n	801525c <__swsetup_r+0x98>
 80151f4:	0758      	lsls	r0, r3, #29
 80151f6:	d512      	bpl.n	801521e <__swsetup_r+0x5a>
 80151f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80151fa:	b141      	cbz	r1, 801520e <__swsetup_r+0x4a>
 80151fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015200:	4299      	cmp	r1, r3
 8015202:	d002      	beq.n	801520a <__swsetup_r+0x46>
 8015204:	4628      	mov	r0, r5
 8015206:	f000 f8cd 	bl	80153a4 <_free_r>
 801520a:	2300      	movs	r3, #0
 801520c:	6363      	str	r3, [r4, #52]	@ 0x34
 801520e:	89a3      	ldrh	r3, [r4, #12]
 8015210:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015214:	81a3      	strh	r3, [r4, #12]
 8015216:	2300      	movs	r3, #0
 8015218:	6063      	str	r3, [r4, #4]
 801521a:	6923      	ldr	r3, [r4, #16]
 801521c:	6023      	str	r3, [r4, #0]
 801521e:	89a3      	ldrh	r3, [r4, #12]
 8015220:	f043 0308 	orr.w	r3, r3, #8
 8015224:	81a3      	strh	r3, [r4, #12]
 8015226:	6923      	ldr	r3, [r4, #16]
 8015228:	b94b      	cbnz	r3, 801523e <__swsetup_r+0x7a>
 801522a:	89a3      	ldrh	r3, [r4, #12]
 801522c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015234:	d003      	beq.n	801523e <__swsetup_r+0x7a>
 8015236:	4621      	mov	r1, r4
 8015238:	4628      	mov	r0, r5
 801523a:	f001 f9bf 	bl	80165bc <__smakebuf_r>
 801523e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015242:	f013 0201 	ands.w	r2, r3, #1
 8015246:	d00a      	beq.n	801525e <__swsetup_r+0x9a>
 8015248:	2200      	movs	r2, #0
 801524a:	60a2      	str	r2, [r4, #8]
 801524c:	6962      	ldr	r2, [r4, #20]
 801524e:	4252      	negs	r2, r2
 8015250:	61a2      	str	r2, [r4, #24]
 8015252:	6922      	ldr	r2, [r4, #16]
 8015254:	b942      	cbnz	r2, 8015268 <__swsetup_r+0xa4>
 8015256:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801525a:	d1c5      	bne.n	80151e8 <__swsetup_r+0x24>
 801525c:	bd38      	pop	{r3, r4, r5, pc}
 801525e:	0799      	lsls	r1, r3, #30
 8015260:	bf58      	it	pl
 8015262:	6962      	ldrpl	r2, [r4, #20]
 8015264:	60a2      	str	r2, [r4, #8]
 8015266:	e7f4      	b.n	8015252 <__swsetup_r+0x8e>
 8015268:	2000      	movs	r0, #0
 801526a:	e7f7      	b.n	801525c <__swsetup_r+0x98>
 801526c:	24000220 	.word	0x24000220

08015270 <memset>:
 8015270:	4402      	add	r2, r0
 8015272:	4603      	mov	r3, r0
 8015274:	4293      	cmp	r3, r2
 8015276:	d100      	bne.n	801527a <memset+0xa>
 8015278:	4770      	bx	lr
 801527a:	f803 1b01 	strb.w	r1, [r3], #1
 801527e:	e7f9      	b.n	8015274 <memset+0x4>

08015280 <strcat>:
 8015280:	b510      	push	{r4, lr}
 8015282:	4602      	mov	r2, r0
 8015284:	7814      	ldrb	r4, [r2, #0]
 8015286:	4613      	mov	r3, r2
 8015288:	3201      	adds	r2, #1
 801528a:	2c00      	cmp	r4, #0
 801528c:	d1fa      	bne.n	8015284 <strcat+0x4>
 801528e:	3b01      	subs	r3, #1
 8015290:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015294:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015298:	2a00      	cmp	r2, #0
 801529a:	d1f9      	bne.n	8015290 <strcat+0x10>
 801529c:	bd10      	pop	{r4, pc}
	...

080152a0 <_close_r>:
 80152a0:	b538      	push	{r3, r4, r5, lr}
 80152a2:	4d06      	ldr	r5, [pc, #24]	@ (80152bc <_close_r+0x1c>)
 80152a4:	2300      	movs	r3, #0
 80152a6:	4604      	mov	r4, r0
 80152a8:	4608      	mov	r0, r1
 80152aa:	602b      	str	r3, [r5, #0]
 80152ac:	f7ed f8b5 	bl	800241a <_close>
 80152b0:	1c43      	adds	r3, r0, #1
 80152b2:	d102      	bne.n	80152ba <_close_r+0x1a>
 80152b4:	682b      	ldr	r3, [r5, #0]
 80152b6:	b103      	cbz	r3, 80152ba <_close_r+0x1a>
 80152b8:	6023      	str	r3, [r4, #0]
 80152ba:	bd38      	pop	{r3, r4, r5, pc}
 80152bc:	24004e64 	.word	0x24004e64

080152c0 <_lseek_r>:
 80152c0:	b538      	push	{r3, r4, r5, lr}
 80152c2:	4d07      	ldr	r5, [pc, #28]	@ (80152e0 <_lseek_r+0x20>)
 80152c4:	4604      	mov	r4, r0
 80152c6:	4608      	mov	r0, r1
 80152c8:	4611      	mov	r1, r2
 80152ca:	2200      	movs	r2, #0
 80152cc:	602a      	str	r2, [r5, #0]
 80152ce:	461a      	mov	r2, r3
 80152d0:	f7ed f8ca 	bl	8002468 <_lseek>
 80152d4:	1c43      	adds	r3, r0, #1
 80152d6:	d102      	bne.n	80152de <_lseek_r+0x1e>
 80152d8:	682b      	ldr	r3, [r5, #0]
 80152da:	b103      	cbz	r3, 80152de <_lseek_r+0x1e>
 80152dc:	6023      	str	r3, [r4, #0]
 80152de:	bd38      	pop	{r3, r4, r5, pc}
 80152e0:	24004e64 	.word	0x24004e64

080152e4 <_read_r>:
 80152e4:	b538      	push	{r3, r4, r5, lr}
 80152e6:	4d07      	ldr	r5, [pc, #28]	@ (8015304 <_read_r+0x20>)
 80152e8:	4604      	mov	r4, r0
 80152ea:	4608      	mov	r0, r1
 80152ec:	4611      	mov	r1, r2
 80152ee:	2200      	movs	r2, #0
 80152f0:	602a      	str	r2, [r5, #0]
 80152f2:	461a      	mov	r2, r3
 80152f4:	f7ed f858 	bl	80023a8 <_read>
 80152f8:	1c43      	adds	r3, r0, #1
 80152fa:	d102      	bne.n	8015302 <_read_r+0x1e>
 80152fc:	682b      	ldr	r3, [r5, #0]
 80152fe:	b103      	cbz	r3, 8015302 <_read_r+0x1e>
 8015300:	6023      	str	r3, [r4, #0]
 8015302:	bd38      	pop	{r3, r4, r5, pc}
 8015304:	24004e64 	.word	0x24004e64

08015308 <_write_r>:
 8015308:	b538      	push	{r3, r4, r5, lr}
 801530a:	4d07      	ldr	r5, [pc, #28]	@ (8015328 <_write_r+0x20>)
 801530c:	4604      	mov	r4, r0
 801530e:	4608      	mov	r0, r1
 8015310:	4611      	mov	r1, r2
 8015312:	2200      	movs	r2, #0
 8015314:	602a      	str	r2, [r5, #0]
 8015316:	461a      	mov	r2, r3
 8015318:	f7ed f863 	bl	80023e2 <_write>
 801531c:	1c43      	adds	r3, r0, #1
 801531e:	d102      	bne.n	8015326 <_write_r+0x1e>
 8015320:	682b      	ldr	r3, [r5, #0]
 8015322:	b103      	cbz	r3, 8015326 <_write_r+0x1e>
 8015324:	6023      	str	r3, [r4, #0]
 8015326:	bd38      	pop	{r3, r4, r5, pc}
 8015328:	24004e64 	.word	0x24004e64

0801532c <__errno>:
 801532c:	4b01      	ldr	r3, [pc, #4]	@ (8015334 <__errno+0x8>)
 801532e:	6818      	ldr	r0, [r3, #0]
 8015330:	4770      	bx	lr
 8015332:	bf00      	nop
 8015334:	24000220 	.word	0x24000220

08015338 <__libc_init_array>:
 8015338:	b570      	push	{r4, r5, r6, lr}
 801533a:	4d0d      	ldr	r5, [pc, #52]	@ (8015370 <__libc_init_array+0x38>)
 801533c:	4c0d      	ldr	r4, [pc, #52]	@ (8015374 <__libc_init_array+0x3c>)
 801533e:	1b64      	subs	r4, r4, r5
 8015340:	10a4      	asrs	r4, r4, #2
 8015342:	2600      	movs	r6, #0
 8015344:	42a6      	cmp	r6, r4
 8015346:	d109      	bne.n	801535c <__libc_init_array+0x24>
 8015348:	4d0b      	ldr	r5, [pc, #44]	@ (8015378 <__libc_init_array+0x40>)
 801534a:	4c0c      	ldr	r4, [pc, #48]	@ (801537c <__libc_init_array+0x44>)
 801534c:	f001 fb54 	bl	80169f8 <_init>
 8015350:	1b64      	subs	r4, r4, r5
 8015352:	10a4      	asrs	r4, r4, #2
 8015354:	2600      	movs	r6, #0
 8015356:	42a6      	cmp	r6, r4
 8015358:	d105      	bne.n	8015366 <__libc_init_array+0x2e>
 801535a:	bd70      	pop	{r4, r5, r6, pc}
 801535c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015360:	4798      	blx	r3
 8015362:	3601      	adds	r6, #1
 8015364:	e7ee      	b.n	8015344 <__libc_init_array+0xc>
 8015366:	f855 3b04 	ldr.w	r3, [r5], #4
 801536a:	4798      	blx	r3
 801536c:	3601      	adds	r6, #1
 801536e:	e7f2      	b.n	8015356 <__libc_init_array+0x1e>
 8015370:	08017298 	.word	0x08017298
 8015374:	08017298 	.word	0x08017298
 8015378:	08017298 	.word	0x08017298
 801537c:	0801729c 	.word	0x0801729c

08015380 <__retarget_lock_init_recursive>:
 8015380:	4770      	bx	lr

08015382 <__retarget_lock_acquire_recursive>:
 8015382:	4770      	bx	lr

08015384 <__retarget_lock_release_recursive>:
 8015384:	4770      	bx	lr

08015386 <memcpy>:
 8015386:	440a      	add	r2, r1
 8015388:	4291      	cmp	r1, r2
 801538a:	f100 33ff 	add.w	r3, r0, #4294967295
 801538e:	d100      	bne.n	8015392 <memcpy+0xc>
 8015390:	4770      	bx	lr
 8015392:	b510      	push	{r4, lr}
 8015394:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015398:	f803 4f01 	strb.w	r4, [r3, #1]!
 801539c:	4291      	cmp	r1, r2
 801539e:	d1f9      	bne.n	8015394 <memcpy+0xe>
 80153a0:	bd10      	pop	{r4, pc}
	...

080153a4 <_free_r>:
 80153a4:	b538      	push	{r3, r4, r5, lr}
 80153a6:	4605      	mov	r5, r0
 80153a8:	2900      	cmp	r1, #0
 80153aa:	d041      	beq.n	8015430 <_free_r+0x8c>
 80153ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153b0:	1f0c      	subs	r4, r1, #4
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	bfb8      	it	lt
 80153b6:	18e4      	addlt	r4, r4, r3
 80153b8:	f000 f8e0 	bl	801557c <__malloc_lock>
 80153bc:	4a1d      	ldr	r2, [pc, #116]	@ (8015434 <_free_r+0x90>)
 80153be:	6813      	ldr	r3, [r2, #0]
 80153c0:	b933      	cbnz	r3, 80153d0 <_free_r+0x2c>
 80153c2:	6063      	str	r3, [r4, #4]
 80153c4:	6014      	str	r4, [r2, #0]
 80153c6:	4628      	mov	r0, r5
 80153c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153cc:	f000 b8dc 	b.w	8015588 <__malloc_unlock>
 80153d0:	42a3      	cmp	r3, r4
 80153d2:	d908      	bls.n	80153e6 <_free_r+0x42>
 80153d4:	6820      	ldr	r0, [r4, #0]
 80153d6:	1821      	adds	r1, r4, r0
 80153d8:	428b      	cmp	r3, r1
 80153da:	bf01      	itttt	eq
 80153dc:	6819      	ldreq	r1, [r3, #0]
 80153de:	685b      	ldreq	r3, [r3, #4]
 80153e0:	1809      	addeq	r1, r1, r0
 80153e2:	6021      	streq	r1, [r4, #0]
 80153e4:	e7ed      	b.n	80153c2 <_free_r+0x1e>
 80153e6:	461a      	mov	r2, r3
 80153e8:	685b      	ldr	r3, [r3, #4]
 80153ea:	b10b      	cbz	r3, 80153f0 <_free_r+0x4c>
 80153ec:	42a3      	cmp	r3, r4
 80153ee:	d9fa      	bls.n	80153e6 <_free_r+0x42>
 80153f0:	6811      	ldr	r1, [r2, #0]
 80153f2:	1850      	adds	r0, r2, r1
 80153f4:	42a0      	cmp	r0, r4
 80153f6:	d10b      	bne.n	8015410 <_free_r+0x6c>
 80153f8:	6820      	ldr	r0, [r4, #0]
 80153fa:	4401      	add	r1, r0
 80153fc:	1850      	adds	r0, r2, r1
 80153fe:	4283      	cmp	r3, r0
 8015400:	6011      	str	r1, [r2, #0]
 8015402:	d1e0      	bne.n	80153c6 <_free_r+0x22>
 8015404:	6818      	ldr	r0, [r3, #0]
 8015406:	685b      	ldr	r3, [r3, #4]
 8015408:	6053      	str	r3, [r2, #4]
 801540a:	4408      	add	r0, r1
 801540c:	6010      	str	r0, [r2, #0]
 801540e:	e7da      	b.n	80153c6 <_free_r+0x22>
 8015410:	d902      	bls.n	8015418 <_free_r+0x74>
 8015412:	230c      	movs	r3, #12
 8015414:	602b      	str	r3, [r5, #0]
 8015416:	e7d6      	b.n	80153c6 <_free_r+0x22>
 8015418:	6820      	ldr	r0, [r4, #0]
 801541a:	1821      	adds	r1, r4, r0
 801541c:	428b      	cmp	r3, r1
 801541e:	bf04      	itt	eq
 8015420:	6819      	ldreq	r1, [r3, #0]
 8015422:	685b      	ldreq	r3, [r3, #4]
 8015424:	6063      	str	r3, [r4, #4]
 8015426:	bf04      	itt	eq
 8015428:	1809      	addeq	r1, r1, r0
 801542a:	6021      	streq	r1, [r4, #0]
 801542c:	6054      	str	r4, [r2, #4]
 801542e:	e7ca      	b.n	80153c6 <_free_r+0x22>
 8015430:	bd38      	pop	{r3, r4, r5, pc}
 8015432:	bf00      	nop
 8015434:	24004e70 	.word	0x24004e70

08015438 <sbrk_aligned>:
 8015438:	b570      	push	{r4, r5, r6, lr}
 801543a:	4e0f      	ldr	r6, [pc, #60]	@ (8015478 <sbrk_aligned+0x40>)
 801543c:	460c      	mov	r4, r1
 801543e:	6831      	ldr	r1, [r6, #0]
 8015440:	4605      	mov	r5, r0
 8015442:	b911      	cbnz	r1, 801544a <sbrk_aligned+0x12>
 8015444:	f001 f9a6 	bl	8016794 <_sbrk_r>
 8015448:	6030      	str	r0, [r6, #0]
 801544a:	4621      	mov	r1, r4
 801544c:	4628      	mov	r0, r5
 801544e:	f001 f9a1 	bl	8016794 <_sbrk_r>
 8015452:	1c43      	adds	r3, r0, #1
 8015454:	d103      	bne.n	801545e <sbrk_aligned+0x26>
 8015456:	f04f 34ff 	mov.w	r4, #4294967295
 801545a:	4620      	mov	r0, r4
 801545c:	bd70      	pop	{r4, r5, r6, pc}
 801545e:	1cc4      	adds	r4, r0, #3
 8015460:	f024 0403 	bic.w	r4, r4, #3
 8015464:	42a0      	cmp	r0, r4
 8015466:	d0f8      	beq.n	801545a <sbrk_aligned+0x22>
 8015468:	1a21      	subs	r1, r4, r0
 801546a:	4628      	mov	r0, r5
 801546c:	f001 f992 	bl	8016794 <_sbrk_r>
 8015470:	3001      	adds	r0, #1
 8015472:	d1f2      	bne.n	801545a <sbrk_aligned+0x22>
 8015474:	e7ef      	b.n	8015456 <sbrk_aligned+0x1e>
 8015476:	bf00      	nop
 8015478:	24004e6c 	.word	0x24004e6c

0801547c <_malloc_r>:
 801547c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015480:	1ccd      	adds	r5, r1, #3
 8015482:	f025 0503 	bic.w	r5, r5, #3
 8015486:	3508      	adds	r5, #8
 8015488:	2d0c      	cmp	r5, #12
 801548a:	bf38      	it	cc
 801548c:	250c      	movcc	r5, #12
 801548e:	2d00      	cmp	r5, #0
 8015490:	4606      	mov	r6, r0
 8015492:	db01      	blt.n	8015498 <_malloc_r+0x1c>
 8015494:	42a9      	cmp	r1, r5
 8015496:	d904      	bls.n	80154a2 <_malloc_r+0x26>
 8015498:	230c      	movs	r3, #12
 801549a:	6033      	str	r3, [r6, #0]
 801549c:	2000      	movs	r0, #0
 801549e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015578 <_malloc_r+0xfc>
 80154a6:	f000 f869 	bl	801557c <__malloc_lock>
 80154aa:	f8d8 3000 	ldr.w	r3, [r8]
 80154ae:	461c      	mov	r4, r3
 80154b0:	bb44      	cbnz	r4, 8015504 <_malloc_r+0x88>
 80154b2:	4629      	mov	r1, r5
 80154b4:	4630      	mov	r0, r6
 80154b6:	f7ff ffbf 	bl	8015438 <sbrk_aligned>
 80154ba:	1c43      	adds	r3, r0, #1
 80154bc:	4604      	mov	r4, r0
 80154be:	d158      	bne.n	8015572 <_malloc_r+0xf6>
 80154c0:	f8d8 4000 	ldr.w	r4, [r8]
 80154c4:	4627      	mov	r7, r4
 80154c6:	2f00      	cmp	r7, #0
 80154c8:	d143      	bne.n	8015552 <_malloc_r+0xd6>
 80154ca:	2c00      	cmp	r4, #0
 80154cc:	d04b      	beq.n	8015566 <_malloc_r+0xea>
 80154ce:	6823      	ldr	r3, [r4, #0]
 80154d0:	4639      	mov	r1, r7
 80154d2:	4630      	mov	r0, r6
 80154d4:	eb04 0903 	add.w	r9, r4, r3
 80154d8:	f001 f95c 	bl	8016794 <_sbrk_r>
 80154dc:	4581      	cmp	r9, r0
 80154de:	d142      	bne.n	8015566 <_malloc_r+0xea>
 80154e0:	6821      	ldr	r1, [r4, #0]
 80154e2:	1a6d      	subs	r5, r5, r1
 80154e4:	4629      	mov	r1, r5
 80154e6:	4630      	mov	r0, r6
 80154e8:	f7ff ffa6 	bl	8015438 <sbrk_aligned>
 80154ec:	3001      	adds	r0, #1
 80154ee:	d03a      	beq.n	8015566 <_malloc_r+0xea>
 80154f0:	6823      	ldr	r3, [r4, #0]
 80154f2:	442b      	add	r3, r5
 80154f4:	6023      	str	r3, [r4, #0]
 80154f6:	f8d8 3000 	ldr.w	r3, [r8]
 80154fa:	685a      	ldr	r2, [r3, #4]
 80154fc:	bb62      	cbnz	r2, 8015558 <_malloc_r+0xdc>
 80154fe:	f8c8 7000 	str.w	r7, [r8]
 8015502:	e00f      	b.n	8015524 <_malloc_r+0xa8>
 8015504:	6822      	ldr	r2, [r4, #0]
 8015506:	1b52      	subs	r2, r2, r5
 8015508:	d420      	bmi.n	801554c <_malloc_r+0xd0>
 801550a:	2a0b      	cmp	r2, #11
 801550c:	d917      	bls.n	801553e <_malloc_r+0xc2>
 801550e:	1961      	adds	r1, r4, r5
 8015510:	42a3      	cmp	r3, r4
 8015512:	6025      	str	r5, [r4, #0]
 8015514:	bf18      	it	ne
 8015516:	6059      	strne	r1, [r3, #4]
 8015518:	6863      	ldr	r3, [r4, #4]
 801551a:	bf08      	it	eq
 801551c:	f8c8 1000 	streq.w	r1, [r8]
 8015520:	5162      	str	r2, [r4, r5]
 8015522:	604b      	str	r3, [r1, #4]
 8015524:	4630      	mov	r0, r6
 8015526:	f000 f82f 	bl	8015588 <__malloc_unlock>
 801552a:	f104 000b 	add.w	r0, r4, #11
 801552e:	1d23      	adds	r3, r4, #4
 8015530:	f020 0007 	bic.w	r0, r0, #7
 8015534:	1ac2      	subs	r2, r0, r3
 8015536:	bf1c      	itt	ne
 8015538:	1a1b      	subne	r3, r3, r0
 801553a:	50a3      	strne	r3, [r4, r2]
 801553c:	e7af      	b.n	801549e <_malloc_r+0x22>
 801553e:	6862      	ldr	r2, [r4, #4]
 8015540:	42a3      	cmp	r3, r4
 8015542:	bf0c      	ite	eq
 8015544:	f8c8 2000 	streq.w	r2, [r8]
 8015548:	605a      	strne	r2, [r3, #4]
 801554a:	e7eb      	b.n	8015524 <_malloc_r+0xa8>
 801554c:	4623      	mov	r3, r4
 801554e:	6864      	ldr	r4, [r4, #4]
 8015550:	e7ae      	b.n	80154b0 <_malloc_r+0x34>
 8015552:	463c      	mov	r4, r7
 8015554:	687f      	ldr	r7, [r7, #4]
 8015556:	e7b6      	b.n	80154c6 <_malloc_r+0x4a>
 8015558:	461a      	mov	r2, r3
 801555a:	685b      	ldr	r3, [r3, #4]
 801555c:	42a3      	cmp	r3, r4
 801555e:	d1fb      	bne.n	8015558 <_malloc_r+0xdc>
 8015560:	2300      	movs	r3, #0
 8015562:	6053      	str	r3, [r2, #4]
 8015564:	e7de      	b.n	8015524 <_malloc_r+0xa8>
 8015566:	230c      	movs	r3, #12
 8015568:	6033      	str	r3, [r6, #0]
 801556a:	4630      	mov	r0, r6
 801556c:	f000 f80c 	bl	8015588 <__malloc_unlock>
 8015570:	e794      	b.n	801549c <_malloc_r+0x20>
 8015572:	6005      	str	r5, [r0, #0]
 8015574:	e7d6      	b.n	8015524 <_malloc_r+0xa8>
 8015576:	bf00      	nop
 8015578:	24004e70 	.word	0x24004e70

0801557c <__malloc_lock>:
 801557c:	4801      	ldr	r0, [pc, #4]	@ (8015584 <__malloc_lock+0x8>)
 801557e:	f7ff bf00 	b.w	8015382 <__retarget_lock_acquire_recursive>
 8015582:	bf00      	nop
 8015584:	24004e68 	.word	0x24004e68

08015588 <__malloc_unlock>:
 8015588:	4801      	ldr	r0, [pc, #4]	@ (8015590 <__malloc_unlock+0x8>)
 801558a:	f7ff befb 	b.w	8015384 <__retarget_lock_release_recursive>
 801558e:	bf00      	nop
 8015590:	24004e68 	.word	0x24004e68

08015594 <__ssputs_r>:
 8015594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015598:	688e      	ldr	r6, [r1, #8]
 801559a:	461f      	mov	r7, r3
 801559c:	42be      	cmp	r6, r7
 801559e:	680b      	ldr	r3, [r1, #0]
 80155a0:	4682      	mov	sl, r0
 80155a2:	460c      	mov	r4, r1
 80155a4:	4690      	mov	r8, r2
 80155a6:	d82d      	bhi.n	8015604 <__ssputs_r+0x70>
 80155a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80155ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80155b0:	d026      	beq.n	8015600 <__ssputs_r+0x6c>
 80155b2:	6965      	ldr	r5, [r4, #20]
 80155b4:	6909      	ldr	r1, [r1, #16]
 80155b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80155ba:	eba3 0901 	sub.w	r9, r3, r1
 80155be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80155c2:	1c7b      	adds	r3, r7, #1
 80155c4:	444b      	add	r3, r9
 80155c6:	106d      	asrs	r5, r5, #1
 80155c8:	429d      	cmp	r5, r3
 80155ca:	bf38      	it	cc
 80155cc:	461d      	movcc	r5, r3
 80155ce:	0553      	lsls	r3, r2, #21
 80155d0:	d527      	bpl.n	8015622 <__ssputs_r+0x8e>
 80155d2:	4629      	mov	r1, r5
 80155d4:	f7ff ff52 	bl	801547c <_malloc_r>
 80155d8:	4606      	mov	r6, r0
 80155da:	b360      	cbz	r0, 8015636 <__ssputs_r+0xa2>
 80155dc:	6921      	ldr	r1, [r4, #16]
 80155de:	464a      	mov	r2, r9
 80155e0:	f7ff fed1 	bl	8015386 <memcpy>
 80155e4:	89a3      	ldrh	r3, [r4, #12]
 80155e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80155ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80155ee:	81a3      	strh	r3, [r4, #12]
 80155f0:	6126      	str	r6, [r4, #16]
 80155f2:	6165      	str	r5, [r4, #20]
 80155f4:	444e      	add	r6, r9
 80155f6:	eba5 0509 	sub.w	r5, r5, r9
 80155fa:	6026      	str	r6, [r4, #0]
 80155fc:	60a5      	str	r5, [r4, #8]
 80155fe:	463e      	mov	r6, r7
 8015600:	42be      	cmp	r6, r7
 8015602:	d900      	bls.n	8015606 <__ssputs_r+0x72>
 8015604:	463e      	mov	r6, r7
 8015606:	6820      	ldr	r0, [r4, #0]
 8015608:	4632      	mov	r2, r6
 801560a:	4641      	mov	r1, r8
 801560c:	f001 f885 	bl	801671a <memmove>
 8015610:	68a3      	ldr	r3, [r4, #8]
 8015612:	1b9b      	subs	r3, r3, r6
 8015614:	60a3      	str	r3, [r4, #8]
 8015616:	6823      	ldr	r3, [r4, #0]
 8015618:	4433      	add	r3, r6
 801561a:	6023      	str	r3, [r4, #0]
 801561c:	2000      	movs	r0, #0
 801561e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015622:	462a      	mov	r2, r5
 8015624:	f001 f8c6 	bl	80167b4 <_realloc_r>
 8015628:	4606      	mov	r6, r0
 801562a:	2800      	cmp	r0, #0
 801562c:	d1e0      	bne.n	80155f0 <__ssputs_r+0x5c>
 801562e:	6921      	ldr	r1, [r4, #16]
 8015630:	4650      	mov	r0, sl
 8015632:	f7ff feb7 	bl	80153a4 <_free_r>
 8015636:	230c      	movs	r3, #12
 8015638:	f8ca 3000 	str.w	r3, [sl]
 801563c:	89a3      	ldrh	r3, [r4, #12]
 801563e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015642:	81a3      	strh	r3, [r4, #12]
 8015644:	f04f 30ff 	mov.w	r0, #4294967295
 8015648:	e7e9      	b.n	801561e <__ssputs_r+0x8a>
	...

0801564c <_svfiprintf_r>:
 801564c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015650:	4698      	mov	r8, r3
 8015652:	898b      	ldrh	r3, [r1, #12]
 8015654:	061b      	lsls	r3, r3, #24
 8015656:	b09d      	sub	sp, #116	@ 0x74
 8015658:	4607      	mov	r7, r0
 801565a:	460d      	mov	r5, r1
 801565c:	4614      	mov	r4, r2
 801565e:	d510      	bpl.n	8015682 <_svfiprintf_r+0x36>
 8015660:	690b      	ldr	r3, [r1, #16]
 8015662:	b973      	cbnz	r3, 8015682 <_svfiprintf_r+0x36>
 8015664:	2140      	movs	r1, #64	@ 0x40
 8015666:	f7ff ff09 	bl	801547c <_malloc_r>
 801566a:	6028      	str	r0, [r5, #0]
 801566c:	6128      	str	r0, [r5, #16]
 801566e:	b930      	cbnz	r0, 801567e <_svfiprintf_r+0x32>
 8015670:	230c      	movs	r3, #12
 8015672:	603b      	str	r3, [r7, #0]
 8015674:	f04f 30ff 	mov.w	r0, #4294967295
 8015678:	b01d      	add	sp, #116	@ 0x74
 801567a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801567e:	2340      	movs	r3, #64	@ 0x40
 8015680:	616b      	str	r3, [r5, #20]
 8015682:	2300      	movs	r3, #0
 8015684:	9309      	str	r3, [sp, #36]	@ 0x24
 8015686:	2320      	movs	r3, #32
 8015688:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801568c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015690:	2330      	movs	r3, #48	@ 0x30
 8015692:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015830 <_svfiprintf_r+0x1e4>
 8015696:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801569a:	f04f 0901 	mov.w	r9, #1
 801569e:	4623      	mov	r3, r4
 80156a0:	469a      	mov	sl, r3
 80156a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156a6:	b10a      	cbz	r2, 80156ac <_svfiprintf_r+0x60>
 80156a8:	2a25      	cmp	r2, #37	@ 0x25
 80156aa:	d1f9      	bne.n	80156a0 <_svfiprintf_r+0x54>
 80156ac:	ebba 0b04 	subs.w	fp, sl, r4
 80156b0:	d00b      	beq.n	80156ca <_svfiprintf_r+0x7e>
 80156b2:	465b      	mov	r3, fp
 80156b4:	4622      	mov	r2, r4
 80156b6:	4629      	mov	r1, r5
 80156b8:	4638      	mov	r0, r7
 80156ba:	f7ff ff6b 	bl	8015594 <__ssputs_r>
 80156be:	3001      	adds	r0, #1
 80156c0:	f000 80a7 	beq.w	8015812 <_svfiprintf_r+0x1c6>
 80156c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80156c6:	445a      	add	r2, fp
 80156c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80156ca:	f89a 3000 	ldrb.w	r3, [sl]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	f000 809f 	beq.w	8015812 <_svfiprintf_r+0x1c6>
 80156d4:	2300      	movs	r3, #0
 80156d6:	f04f 32ff 	mov.w	r2, #4294967295
 80156da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80156de:	f10a 0a01 	add.w	sl, sl, #1
 80156e2:	9304      	str	r3, [sp, #16]
 80156e4:	9307      	str	r3, [sp, #28]
 80156e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80156ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80156ec:	4654      	mov	r4, sl
 80156ee:	2205      	movs	r2, #5
 80156f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156f4:	484e      	ldr	r0, [pc, #312]	@ (8015830 <_svfiprintf_r+0x1e4>)
 80156f6:	f7ea fe13 	bl	8000320 <memchr>
 80156fa:	9a04      	ldr	r2, [sp, #16]
 80156fc:	b9d8      	cbnz	r0, 8015736 <_svfiprintf_r+0xea>
 80156fe:	06d0      	lsls	r0, r2, #27
 8015700:	bf44      	itt	mi
 8015702:	2320      	movmi	r3, #32
 8015704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015708:	0711      	lsls	r1, r2, #28
 801570a:	bf44      	itt	mi
 801570c:	232b      	movmi	r3, #43	@ 0x2b
 801570e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015712:	f89a 3000 	ldrb.w	r3, [sl]
 8015716:	2b2a      	cmp	r3, #42	@ 0x2a
 8015718:	d015      	beq.n	8015746 <_svfiprintf_r+0xfa>
 801571a:	9a07      	ldr	r2, [sp, #28]
 801571c:	4654      	mov	r4, sl
 801571e:	2000      	movs	r0, #0
 8015720:	f04f 0c0a 	mov.w	ip, #10
 8015724:	4621      	mov	r1, r4
 8015726:	f811 3b01 	ldrb.w	r3, [r1], #1
 801572a:	3b30      	subs	r3, #48	@ 0x30
 801572c:	2b09      	cmp	r3, #9
 801572e:	d94b      	bls.n	80157c8 <_svfiprintf_r+0x17c>
 8015730:	b1b0      	cbz	r0, 8015760 <_svfiprintf_r+0x114>
 8015732:	9207      	str	r2, [sp, #28]
 8015734:	e014      	b.n	8015760 <_svfiprintf_r+0x114>
 8015736:	eba0 0308 	sub.w	r3, r0, r8
 801573a:	fa09 f303 	lsl.w	r3, r9, r3
 801573e:	4313      	orrs	r3, r2
 8015740:	9304      	str	r3, [sp, #16]
 8015742:	46a2      	mov	sl, r4
 8015744:	e7d2      	b.n	80156ec <_svfiprintf_r+0xa0>
 8015746:	9b03      	ldr	r3, [sp, #12]
 8015748:	1d19      	adds	r1, r3, #4
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	9103      	str	r1, [sp, #12]
 801574e:	2b00      	cmp	r3, #0
 8015750:	bfbb      	ittet	lt
 8015752:	425b      	neglt	r3, r3
 8015754:	f042 0202 	orrlt.w	r2, r2, #2
 8015758:	9307      	strge	r3, [sp, #28]
 801575a:	9307      	strlt	r3, [sp, #28]
 801575c:	bfb8      	it	lt
 801575e:	9204      	strlt	r2, [sp, #16]
 8015760:	7823      	ldrb	r3, [r4, #0]
 8015762:	2b2e      	cmp	r3, #46	@ 0x2e
 8015764:	d10a      	bne.n	801577c <_svfiprintf_r+0x130>
 8015766:	7863      	ldrb	r3, [r4, #1]
 8015768:	2b2a      	cmp	r3, #42	@ 0x2a
 801576a:	d132      	bne.n	80157d2 <_svfiprintf_r+0x186>
 801576c:	9b03      	ldr	r3, [sp, #12]
 801576e:	1d1a      	adds	r2, r3, #4
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	9203      	str	r2, [sp, #12]
 8015774:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015778:	3402      	adds	r4, #2
 801577a:	9305      	str	r3, [sp, #20]
 801577c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015840 <_svfiprintf_r+0x1f4>
 8015780:	7821      	ldrb	r1, [r4, #0]
 8015782:	2203      	movs	r2, #3
 8015784:	4650      	mov	r0, sl
 8015786:	f7ea fdcb 	bl	8000320 <memchr>
 801578a:	b138      	cbz	r0, 801579c <_svfiprintf_r+0x150>
 801578c:	9b04      	ldr	r3, [sp, #16]
 801578e:	eba0 000a 	sub.w	r0, r0, sl
 8015792:	2240      	movs	r2, #64	@ 0x40
 8015794:	4082      	lsls	r2, r0
 8015796:	4313      	orrs	r3, r2
 8015798:	3401      	adds	r4, #1
 801579a:	9304      	str	r3, [sp, #16]
 801579c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157a0:	4824      	ldr	r0, [pc, #144]	@ (8015834 <_svfiprintf_r+0x1e8>)
 80157a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80157a6:	2206      	movs	r2, #6
 80157a8:	f7ea fdba 	bl	8000320 <memchr>
 80157ac:	2800      	cmp	r0, #0
 80157ae:	d036      	beq.n	801581e <_svfiprintf_r+0x1d2>
 80157b0:	4b21      	ldr	r3, [pc, #132]	@ (8015838 <_svfiprintf_r+0x1ec>)
 80157b2:	bb1b      	cbnz	r3, 80157fc <_svfiprintf_r+0x1b0>
 80157b4:	9b03      	ldr	r3, [sp, #12]
 80157b6:	3307      	adds	r3, #7
 80157b8:	f023 0307 	bic.w	r3, r3, #7
 80157bc:	3308      	adds	r3, #8
 80157be:	9303      	str	r3, [sp, #12]
 80157c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157c2:	4433      	add	r3, r6
 80157c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80157c6:	e76a      	b.n	801569e <_svfiprintf_r+0x52>
 80157c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80157cc:	460c      	mov	r4, r1
 80157ce:	2001      	movs	r0, #1
 80157d0:	e7a8      	b.n	8015724 <_svfiprintf_r+0xd8>
 80157d2:	2300      	movs	r3, #0
 80157d4:	3401      	adds	r4, #1
 80157d6:	9305      	str	r3, [sp, #20]
 80157d8:	4619      	mov	r1, r3
 80157da:	f04f 0c0a 	mov.w	ip, #10
 80157de:	4620      	mov	r0, r4
 80157e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80157e4:	3a30      	subs	r2, #48	@ 0x30
 80157e6:	2a09      	cmp	r2, #9
 80157e8:	d903      	bls.n	80157f2 <_svfiprintf_r+0x1a6>
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d0c6      	beq.n	801577c <_svfiprintf_r+0x130>
 80157ee:	9105      	str	r1, [sp, #20]
 80157f0:	e7c4      	b.n	801577c <_svfiprintf_r+0x130>
 80157f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80157f6:	4604      	mov	r4, r0
 80157f8:	2301      	movs	r3, #1
 80157fa:	e7f0      	b.n	80157de <_svfiprintf_r+0x192>
 80157fc:	ab03      	add	r3, sp, #12
 80157fe:	9300      	str	r3, [sp, #0]
 8015800:	462a      	mov	r2, r5
 8015802:	4b0e      	ldr	r3, [pc, #56]	@ (801583c <_svfiprintf_r+0x1f0>)
 8015804:	a904      	add	r1, sp, #16
 8015806:	4638      	mov	r0, r7
 8015808:	f3af 8000 	nop.w
 801580c:	1c42      	adds	r2, r0, #1
 801580e:	4606      	mov	r6, r0
 8015810:	d1d6      	bne.n	80157c0 <_svfiprintf_r+0x174>
 8015812:	89ab      	ldrh	r3, [r5, #12]
 8015814:	065b      	lsls	r3, r3, #25
 8015816:	f53f af2d 	bmi.w	8015674 <_svfiprintf_r+0x28>
 801581a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801581c:	e72c      	b.n	8015678 <_svfiprintf_r+0x2c>
 801581e:	ab03      	add	r3, sp, #12
 8015820:	9300      	str	r3, [sp, #0]
 8015822:	462a      	mov	r2, r5
 8015824:	4b05      	ldr	r3, [pc, #20]	@ (801583c <_svfiprintf_r+0x1f0>)
 8015826:	a904      	add	r1, sp, #16
 8015828:	4638      	mov	r0, r7
 801582a:	f000 fb87 	bl	8015f3c <_printf_i>
 801582e:	e7ed      	b.n	801580c <_svfiprintf_r+0x1c0>
 8015830:	08017140 	.word	0x08017140
 8015834:	0801714a 	.word	0x0801714a
 8015838:	00000000 	.word	0x00000000
 801583c:	08015595 	.word	0x08015595
 8015840:	08017146 	.word	0x08017146

08015844 <_sungetc_r>:
 8015844:	b538      	push	{r3, r4, r5, lr}
 8015846:	1c4b      	adds	r3, r1, #1
 8015848:	4614      	mov	r4, r2
 801584a:	d103      	bne.n	8015854 <_sungetc_r+0x10>
 801584c:	f04f 35ff 	mov.w	r5, #4294967295
 8015850:	4628      	mov	r0, r5
 8015852:	bd38      	pop	{r3, r4, r5, pc}
 8015854:	8993      	ldrh	r3, [r2, #12]
 8015856:	f023 0320 	bic.w	r3, r3, #32
 801585a:	8193      	strh	r3, [r2, #12]
 801585c:	6853      	ldr	r3, [r2, #4]
 801585e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8015860:	b2cd      	uxtb	r5, r1
 8015862:	b18a      	cbz	r2, 8015888 <_sungetc_r+0x44>
 8015864:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8015866:	429a      	cmp	r2, r3
 8015868:	dd08      	ble.n	801587c <_sungetc_r+0x38>
 801586a:	6823      	ldr	r3, [r4, #0]
 801586c:	1e5a      	subs	r2, r3, #1
 801586e:	6022      	str	r2, [r4, #0]
 8015870:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015874:	6863      	ldr	r3, [r4, #4]
 8015876:	3301      	adds	r3, #1
 8015878:	6063      	str	r3, [r4, #4]
 801587a:	e7e9      	b.n	8015850 <_sungetc_r+0xc>
 801587c:	4621      	mov	r1, r4
 801587e:	f000 ff12 	bl	80166a6 <__submore>
 8015882:	2800      	cmp	r0, #0
 8015884:	d0f1      	beq.n	801586a <_sungetc_r+0x26>
 8015886:	e7e1      	b.n	801584c <_sungetc_r+0x8>
 8015888:	6921      	ldr	r1, [r4, #16]
 801588a:	6822      	ldr	r2, [r4, #0]
 801588c:	b141      	cbz	r1, 80158a0 <_sungetc_r+0x5c>
 801588e:	4291      	cmp	r1, r2
 8015890:	d206      	bcs.n	80158a0 <_sungetc_r+0x5c>
 8015892:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8015896:	42a9      	cmp	r1, r5
 8015898:	d102      	bne.n	80158a0 <_sungetc_r+0x5c>
 801589a:	3a01      	subs	r2, #1
 801589c:	6022      	str	r2, [r4, #0]
 801589e:	e7ea      	b.n	8015876 <_sungetc_r+0x32>
 80158a0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80158a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80158a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80158aa:	2303      	movs	r3, #3
 80158ac:	63a3      	str	r3, [r4, #56]	@ 0x38
 80158ae:	4623      	mov	r3, r4
 80158b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80158b4:	6023      	str	r3, [r4, #0]
 80158b6:	2301      	movs	r3, #1
 80158b8:	e7de      	b.n	8015878 <_sungetc_r+0x34>

080158ba <__ssrefill_r>:
 80158ba:	b510      	push	{r4, lr}
 80158bc:	460c      	mov	r4, r1
 80158be:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80158c0:	b169      	cbz	r1, 80158de <__ssrefill_r+0x24>
 80158c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80158c6:	4299      	cmp	r1, r3
 80158c8:	d001      	beq.n	80158ce <__ssrefill_r+0x14>
 80158ca:	f7ff fd6b 	bl	80153a4 <_free_r>
 80158ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80158d0:	6063      	str	r3, [r4, #4]
 80158d2:	2000      	movs	r0, #0
 80158d4:	6360      	str	r0, [r4, #52]	@ 0x34
 80158d6:	b113      	cbz	r3, 80158de <__ssrefill_r+0x24>
 80158d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80158da:	6023      	str	r3, [r4, #0]
 80158dc:	bd10      	pop	{r4, pc}
 80158de:	6923      	ldr	r3, [r4, #16]
 80158e0:	6023      	str	r3, [r4, #0]
 80158e2:	2300      	movs	r3, #0
 80158e4:	6063      	str	r3, [r4, #4]
 80158e6:	89a3      	ldrh	r3, [r4, #12]
 80158e8:	f043 0320 	orr.w	r3, r3, #32
 80158ec:	81a3      	strh	r3, [r4, #12]
 80158ee:	f04f 30ff 	mov.w	r0, #4294967295
 80158f2:	e7f3      	b.n	80158dc <__ssrefill_r+0x22>

080158f4 <__ssvfiscanf_r>:
 80158f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158f8:	460c      	mov	r4, r1
 80158fa:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80158fe:	2100      	movs	r1, #0
 8015900:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8015904:	49a5      	ldr	r1, [pc, #660]	@ (8015b9c <__ssvfiscanf_r+0x2a8>)
 8015906:	91a0      	str	r1, [sp, #640]	@ 0x280
 8015908:	f10d 0804 	add.w	r8, sp, #4
 801590c:	49a4      	ldr	r1, [pc, #656]	@ (8015ba0 <__ssvfiscanf_r+0x2ac>)
 801590e:	4fa5      	ldr	r7, [pc, #660]	@ (8015ba4 <__ssvfiscanf_r+0x2b0>)
 8015910:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8015914:	4606      	mov	r6, r0
 8015916:	91a1      	str	r1, [sp, #644]	@ 0x284
 8015918:	9300      	str	r3, [sp, #0]
 801591a:	7813      	ldrb	r3, [r2, #0]
 801591c:	2b00      	cmp	r3, #0
 801591e:	f000 8158 	beq.w	8015bd2 <__ssvfiscanf_r+0x2de>
 8015922:	5cf9      	ldrb	r1, [r7, r3]
 8015924:	f011 0108 	ands.w	r1, r1, #8
 8015928:	f102 0501 	add.w	r5, r2, #1
 801592c:	d019      	beq.n	8015962 <__ssvfiscanf_r+0x6e>
 801592e:	6863      	ldr	r3, [r4, #4]
 8015930:	2b00      	cmp	r3, #0
 8015932:	dd0f      	ble.n	8015954 <__ssvfiscanf_r+0x60>
 8015934:	6823      	ldr	r3, [r4, #0]
 8015936:	781a      	ldrb	r2, [r3, #0]
 8015938:	5cba      	ldrb	r2, [r7, r2]
 801593a:	0712      	lsls	r2, r2, #28
 801593c:	d401      	bmi.n	8015942 <__ssvfiscanf_r+0x4e>
 801593e:	462a      	mov	r2, r5
 8015940:	e7eb      	b.n	801591a <__ssvfiscanf_r+0x26>
 8015942:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8015944:	3201      	adds	r2, #1
 8015946:	9245      	str	r2, [sp, #276]	@ 0x114
 8015948:	6862      	ldr	r2, [r4, #4]
 801594a:	3301      	adds	r3, #1
 801594c:	3a01      	subs	r2, #1
 801594e:	6062      	str	r2, [r4, #4]
 8015950:	6023      	str	r3, [r4, #0]
 8015952:	e7ec      	b.n	801592e <__ssvfiscanf_r+0x3a>
 8015954:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015956:	4621      	mov	r1, r4
 8015958:	4630      	mov	r0, r6
 801595a:	4798      	blx	r3
 801595c:	2800      	cmp	r0, #0
 801595e:	d0e9      	beq.n	8015934 <__ssvfiscanf_r+0x40>
 8015960:	e7ed      	b.n	801593e <__ssvfiscanf_r+0x4a>
 8015962:	2b25      	cmp	r3, #37	@ 0x25
 8015964:	d012      	beq.n	801598c <__ssvfiscanf_r+0x98>
 8015966:	4699      	mov	r9, r3
 8015968:	6863      	ldr	r3, [r4, #4]
 801596a:	2b00      	cmp	r3, #0
 801596c:	f340 8093 	ble.w	8015a96 <__ssvfiscanf_r+0x1a2>
 8015970:	6822      	ldr	r2, [r4, #0]
 8015972:	7813      	ldrb	r3, [r2, #0]
 8015974:	454b      	cmp	r3, r9
 8015976:	f040 812c 	bne.w	8015bd2 <__ssvfiscanf_r+0x2de>
 801597a:	6863      	ldr	r3, [r4, #4]
 801597c:	3b01      	subs	r3, #1
 801597e:	6063      	str	r3, [r4, #4]
 8015980:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8015982:	3201      	adds	r2, #1
 8015984:	3301      	adds	r3, #1
 8015986:	6022      	str	r2, [r4, #0]
 8015988:	9345      	str	r3, [sp, #276]	@ 0x114
 801598a:	e7d8      	b.n	801593e <__ssvfiscanf_r+0x4a>
 801598c:	9141      	str	r1, [sp, #260]	@ 0x104
 801598e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8015990:	7853      	ldrb	r3, [r2, #1]
 8015992:	2b2a      	cmp	r3, #42	@ 0x2a
 8015994:	bf02      	ittt	eq
 8015996:	2310      	moveq	r3, #16
 8015998:	1c95      	addeq	r5, r2, #2
 801599a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801599c:	220a      	movs	r2, #10
 801599e:	46a9      	mov	r9, r5
 80159a0:	f819 1b01 	ldrb.w	r1, [r9], #1
 80159a4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80159a8:	2b09      	cmp	r3, #9
 80159aa:	d91e      	bls.n	80159ea <__ssvfiscanf_r+0xf6>
 80159ac:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8015ba8 <__ssvfiscanf_r+0x2b4>
 80159b0:	2203      	movs	r2, #3
 80159b2:	4650      	mov	r0, sl
 80159b4:	f7ea fcb4 	bl	8000320 <memchr>
 80159b8:	b138      	cbz	r0, 80159ca <__ssvfiscanf_r+0xd6>
 80159ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80159bc:	eba0 000a 	sub.w	r0, r0, sl
 80159c0:	2301      	movs	r3, #1
 80159c2:	4083      	lsls	r3, r0
 80159c4:	4313      	orrs	r3, r2
 80159c6:	9341      	str	r3, [sp, #260]	@ 0x104
 80159c8:	464d      	mov	r5, r9
 80159ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80159ce:	2b78      	cmp	r3, #120	@ 0x78
 80159d0:	d806      	bhi.n	80159e0 <__ssvfiscanf_r+0xec>
 80159d2:	2b57      	cmp	r3, #87	@ 0x57
 80159d4:	d810      	bhi.n	80159f8 <__ssvfiscanf_r+0x104>
 80159d6:	2b25      	cmp	r3, #37	@ 0x25
 80159d8:	d0c5      	beq.n	8015966 <__ssvfiscanf_r+0x72>
 80159da:	d857      	bhi.n	8015a8c <__ssvfiscanf_r+0x198>
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d065      	beq.n	8015aac <__ssvfiscanf_r+0x1b8>
 80159e0:	2303      	movs	r3, #3
 80159e2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80159e4:	230a      	movs	r3, #10
 80159e6:	9342      	str	r3, [sp, #264]	@ 0x108
 80159e8:	e078      	b.n	8015adc <__ssvfiscanf_r+0x1e8>
 80159ea:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80159ec:	fb02 1103 	mla	r1, r2, r3, r1
 80159f0:	3930      	subs	r1, #48	@ 0x30
 80159f2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80159f4:	464d      	mov	r5, r9
 80159f6:	e7d2      	b.n	801599e <__ssvfiscanf_r+0xaa>
 80159f8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80159fc:	2a20      	cmp	r2, #32
 80159fe:	d8ef      	bhi.n	80159e0 <__ssvfiscanf_r+0xec>
 8015a00:	a101      	add	r1, pc, #4	@ (adr r1, 8015a08 <__ssvfiscanf_r+0x114>)
 8015a02:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015a06:	bf00      	nop
 8015a08:	08015abb 	.word	0x08015abb
 8015a0c:	080159e1 	.word	0x080159e1
 8015a10:	080159e1 	.word	0x080159e1
 8015a14:	08015b15 	.word	0x08015b15
 8015a18:	080159e1 	.word	0x080159e1
 8015a1c:	080159e1 	.word	0x080159e1
 8015a20:	080159e1 	.word	0x080159e1
 8015a24:	080159e1 	.word	0x080159e1
 8015a28:	080159e1 	.word	0x080159e1
 8015a2c:	080159e1 	.word	0x080159e1
 8015a30:	080159e1 	.word	0x080159e1
 8015a34:	08015b2b 	.word	0x08015b2b
 8015a38:	08015b11 	.word	0x08015b11
 8015a3c:	08015a93 	.word	0x08015a93
 8015a40:	08015a93 	.word	0x08015a93
 8015a44:	08015a93 	.word	0x08015a93
 8015a48:	080159e1 	.word	0x080159e1
 8015a4c:	08015acd 	.word	0x08015acd
 8015a50:	080159e1 	.word	0x080159e1
 8015a54:	080159e1 	.word	0x080159e1
 8015a58:	080159e1 	.word	0x080159e1
 8015a5c:	080159e1 	.word	0x080159e1
 8015a60:	08015b3b 	.word	0x08015b3b
 8015a64:	08015ad5 	.word	0x08015ad5
 8015a68:	08015ab3 	.word	0x08015ab3
 8015a6c:	080159e1 	.word	0x080159e1
 8015a70:	080159e1 	.word	0x080159e1
 8015a74:	08015b37 	.word	0x08015b37
 8015a78:	080159e1 	.word	0x080159e1
 8015a7c:	08015b11 	.word	0x08015b11
 8015a80:	080159e1 	.word	0x080159e1
 8015a84:	080159e1 	.word	0x080159e1
 8015a88:	08015abb 	.word	0x08015abb
 8015a8c:	3b45      	subs	r3, #69	@ 0x45
 8015a8e:	2b02      	cmp	r3, #2
 8015a90:	d8a6      	bhi.n	80159e0 <__ssvfiscanf_r+0xec>
 8015a92:	2305      	movs	r3, #5
 8015a94:	e021      	b.n	8015ada <__ssvfiscanf_r+0x1e6>
 8015a96:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015a98:	4621      	mov	r1, r4
 8015a9a:	4630      	mov	r0, r6
 8015a9c:	4798      	blx	r3
 8015a9e:	2800      	cmp	r0, #0
 8015aa0:	f43f af66 	beq.w	8015970 <__ssvfiscanf_r+0x7c>
 8015aa4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8015aa6:	2800      	cmp	r0, #0
 8015aa8:	f040 808b 	bne.w	8015bc2 <__ssvfiscanf_r+0x2ce>
 8015aac:	f04f 30ff 	mov.w	r0, #4294967295
 8015ab0:	e08b      	b.n	8015bca <__ssvfiscanf_r+0x2d6>
 8015ab2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8015ab4:	f042 0220 	orr.w	r2, r2, #32
 8015ab8:	9241      	str	r2, [sp, #260]	@ 0x104
 8015aba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8015abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015ac0:	9241      	str	r2, [sp, #260]	@ 0x104
 8015ac2:	2210      	movs	r2, #16
 8015ac4:	2b6e      	cmp	r3, #110	@ 0x6e
 8015ac6:	9242      	str	r2, [sp, #264]	@ 0x108
 8015ac8:	d902      	bls.n	8015ad0 <__ssvfiscanf_r+0x1dc>
 8015aca:	e005      	b.n	8015ad8 <__ssvfiscanf_r+0x1e4>
 8015acc:	2300      	movs	r3, #0
 8015ace:	9342      	str	r3, [sp, #264]	@ 0x108
 8015ad0:	2303      	movs	r3, #3
 8015ad2:	e002      	b.n	8015ada <__ssvfiscanf_r+0x1e6>
 8015ad4:	2308      	movs	r3, #8
 8015ad6:	9342      	str	r3, [sp, #264]	@ 0x108
 8015ad8:	2304      	movs	r3, #4
 8015ada:	9347      	str	r3, [sp, #284]	@ 0x11c
 8015adc:	6863      	ldr	r3, [r4, #4]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	dd39      	ble.n	8015b56 <__ssvfiscanf_r+0x262>
 8015ae2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8015ae4:	0659      	lsls	r1, r3, #25
 8015ae6:	d404      	bmi.n	8015af2 <__ssvfiscanf_r+0x1fe>
 8015ae8:	6823      	ldr	r3, [r4, #0]
 8015aea:	781a      	ldrb	r2, [r3, #0]
 8015aec:	5cba      	ldrb	r2, [r7, r2]
 8015aee:	0712      	lsls	r2, r2, #28
 8015af0:	d438      	bmi.n	8015b64 <__ssvfiscanf_r+0x270>
 8015af2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8015af4:	2b02      	cmp	r3, #2
 8015af6:	dc47      	bgt.n	8015b88 <__ssvfiscanf_r+0x294>
 8015af8:	466b      	mov	r3, sp
 8015afa:	4622      	mov	r2, r4
 8015afc:	a941      	add	r1, sp, #260	@ 0x104
 8015afe:	4630      	mov	r0, r6
 8015b00:	f000 fb3c 	bl	801617c <_scanf_chars>
 8015b04:	2801      	cmp	r0, #1
 8015b06:	d064      	beq.n	8015bd2 <__ssvfiscanf_r+0x2de>
 8015b08:	2802      	cmp	r0, #2
 8015b0a:	f47f af18 	bne.w	801593e <__ssvfiscanf_r+0x4a>
 8015b0e:	e7c9      	b.n	8015aa4 <__ssvfiscanf_r+0x1b0>
 8015b10:	220a      	movs	r2, #10
 8015b12:	e7d7      	b.n	8015ac4 <__ssvfiscanf_r+0x1d0>
 8015b14:	4629      	mov	r1, r5
 8015b16:	4640      	mov	r0, r8
 8015b18:	f000 fd8c 	bl	8016634 <__sccl>
 8015b1c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8015b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b22:	9341      	str	r3, [sp, #260]	@ 0x104
 8015b24:	4605      	mov	r5, r0
 8015b26:	2301      	movs	r3, #1
 8015b28:	e7d7      	b.n	8015ada <__ssvfiscanf_r+0x1e6>
 8015b2a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8015b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b30:	9341      	str	r3, [sp, #260]	@ 0x104
 8015b32:	2300      	movs	r3, #0
 8015b34:	e7d1      	b.n	8015ada <__ssvfiscanf_r+0x1e6>
 8015b36:	2302      	movs	r3, #2
 8015b38:	e7cf      	b.n	8015ada <__ssvfiscanf_r+0x1e6>
 8015b3a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8015b3c:	06c3      	lsls	r3, r0, #27
 8015b3e:	f53f aefe 	bmi.w	801593e <__ssvfiscanf_r+0x4a>
 8015b42:	9b00      	ldr	r3, [sp, #0]
 8015b44:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8015b46:	1d19      	adds	r1, r3, #4
 8015b48:	9100      	str	r1, [sp, #0]
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	07c0      	lsls	r0, r0, #31
 8015b4e:	bf4c      	ite	mi
 8015b50:	801a      	strhmi	r2, [r3, #0]
 8015b52:	601a      	strpl	r2, [r3, #0]
 8015b54:	e6f3      	b.n	801593e <__ssvfiscanf_r+0x4a>
 8015b56:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015b58:	4621      	mov	r1, r4
 8015b5a:	4630      	mov	r0, r6
 8015b5c:	4798      	blx	r3
 8015b5e:	2800      	cmp	r0, #0
 8015b60:	d0bf      	beq.n	8015ae2 <__ssvfiscanf_r+0x1ee>
 8015b62:	e79f      	b.n	8015aa4 <__ssvfiscanf_r+0x1b0>
 8015b64:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8015b66:	3201      	adds	r2, #1
 8015b68:	9245      	str	r2, [sp, #276]	@ 0x114
 8015b6a:	6862      	ldr	r2, [r4, #4]
 8015b6c:	3a01      	subs	r2, #1
 8015b6e:	2a00      	cmp	r2, #0
 8015b70:	6062      	str	r2, [r4, #4]
 8015b72:	dd02      	ble.n	8015b7a <__ssvfiscanf_r+0x286>
 8015b74:	3301      	adds	r3, #1
 8015b76:	6023      	str	r3, [r4, #0]
 8015b78:	e7b6      	b.n	8015ae8 <__ssvfiscanf_r+0x1f4>
 8015b7a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015b7c:	4621      	mov	r1, r4
 8015b7e:	4630      	mov	r0, r6
 8015b80:	4798      	blx	r3
 8015b82:	2800      	cmp	r0, #0
 8015b84:	d0b0      	beq.n	8015ae8 <__ssvfiscanf_r+0x1f4>
 8015b86:	e78d      	b.n	8015aa4 <__ssvfiscanf_r+0x1b0>
 8015b88:	2b04      	cmp	r3, #4
 8015b8a:	dc0f      	bgt.n	8015bac <__ssvfiscanf_r+0x2b8>
 8015b8c:	466b      	mov	r3, sp
 8015b8e:	4622      	mov	r2, r4
 8015b90:	a941      	add	r1, sp, #260	@ 0x104
 8015b92:	4630      	mov	r0, r6
 8015b94:	f000 fb4c 	bl	8016230 <_scanf_i>
 8015b98:	e7b4      	b.n	8015b04 <__ssvfiscanf_r+0x210>
 8015b9a:	bf00      	nop
 8015b9c:	08015845 	.word	0x08015845
 8015ba0:	080158bb 	.word	0x080158bb
 8015ba4:	0801718f 	.word	0x0801718f
 8015ba8:	08017146 	.word	0x08017146
 8015bac:	4b0a      	ldr	r3, [pc, #40]	@ (8015bd8 <__ssvfiscanf_r+0x2e4>)
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	f43f aec5 	beq.w	801593e <__ssvfiscanf_r+0x4a>
 8015bb4:	466b      	mov	r3, sp
 8015bb6:	4622      	mov	r2, r4
 8015bb8:	a941      	add	r1, sp, #260	@ 0x104
 8015bba:	4630      	mov	r0, r6
 8015bbc:	f3af 8000 	nop.w
 8015bc0:	e7a0      	b.n	8015b04 <__ssvfiscanf_r+0x210>
 8015bc2:	89a3      	ldrh	r3, [r4, #12]
 8015bc4:	065b      	lsls	r3, r3, #25
 8015bc6:	f53f af71 	bmi.w	8015aac <__ssvfiscanf_r+0x1b8>
 8015bca:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8015bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bd2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8015bd4:	e7f9      	b.n	8015bca <__ssvfiscanf_r+0x2d6>
 8015bd6:	bf00      	nop
 8015bd8:	00000000 	.word	0x00000000

08015bdc <__sfputc_r>:
 8015bdc:	6893      	ldr	r3, [r2, #8]
 8015bde:	3b01      	subs	r3, #1
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	b410      	push	{r4}
 8015be4:	6093      	str	r3, [r2, #8]
 8015be6:	da08      	bge.n	8015bfa <__sfputc_r+0x1e>
 8015be8:	6994      	ldr	r4, [r2, #24]
 8015bea:	42a3      	cmp	r3, r4
 8015bec:	db01      	blt.n	8015bf2 <__sfputc_r+0x16>
 8015bee:	290a      	cmp	r1, #10
 8015bf0:	d103      	bne.n	8015bfa <__sfputc_r+0x1e>
 8015bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015bf6:	f7ff baa6 	b.w	8015146 <__swbuf_r>
 8015bfa:	6813      	ldr	r3, [r2, #0]
 8015bfc:	1c58      	adds	r0, r3, #1
 8015bfe:	6010      	str	r0, [r2, #0]
 8015c00:	7019      	strb	r1, [r3, #0]
 8015c02:	4608      	mov	r0, r1
 8015c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c08:	4770      	bx	lr

08015c0a <__sfputs_r>:
 8015c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c0c:	4606      	mov	r6, r0
 8015c0e:	460f      	mov	r7, r1
 8015c10:	4614      	mov	r4, r2
 8015c12:	18d5      	adds	r5, r2, r3
 8015c14:	42ac      	cmp	r4, r5
 8015c16:	d101      	bne.n	8015c1c <__sfputs_r+0x12>
 8015c18:	2000      	movs	r0, #0
 8015c1a:	e007      	b.n	8015c2c <__sfputs_r+0x22>
 8015c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c20:	463a      	mov	r2, r7
 8015c22:	4630      	mov	r0, r6
 8015c24:	f7ff ffda 	bl	8015bdc <__sfputc_r>
 8015c28:	1c43      	adds	r3, r0, #1
 8015c2a:	d1f3      	bne.n	8015c14 <__sfputs_r+0xa>
 8015c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015c30 <_vfiprintf_r>:
 8015c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c34:	460d      	mov	r5, r1
 8015c36:	b09d      	sub	sp, #116	@ 0x74
 8015c38:	4614      	mov	r4, r2
 8015c3a:	4698      	mov	r8, r3
 8015c3c:	4606      	mov	r6, r0
 8015c3e:	b118      	cbz	r0, 8015c48 <_vfiprintf_r+0x18>
 8015c40:	6a03      	ldr	r3, [r0, #32]
 8015c42:	b90b      	cbnz	r3, 8015c48 <_vfiprintf_r+0x18>
 8015c44:	f7ff f94a 	bl	8014edc <__sinit>
 8015c48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015c4a:	07d9      	lsls	r1, r3, #31
 8015c4c:	d405      	bmi.n	8015c5a <_vfiprintf_r+0x2a>
 8015c4e:	89ab      	ldrh	r3, [r5, #12]
 8015c50:	059a      	lsls	r2, r3, #22
 8015c52:	d402      	bmi.n	8015c5a <_vfiprintf_r+0x2a>
 8015c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015c56:	f7ff fb94 	bl	8015382 <__retarget_lock_acquire_recursive>
 8015c5a:	89ab      	ldrh	r3, [r5, #12]
 8015c5c:	071b      	lsls	r3, r3, #28
 8015c5e:	d501      	bpl.n	8015c64 <_vfiprintf_r+0x34>
 8015c60:	692b      	ldr	r3, [r5, #16]
 8015c62:	b99b      	cbnz	r3, 8015c8c <_vfiprintf_r+0x5c>
 8015c64:	4629      	mov	r1, r5
 8015c66:	4630      	mov	r0, r6
 8015c68:	f7ff faac 	bl	80151c4 <__swsetup_r>
 8015c6c:	b170      	cbz	r0, 8015c8c <_vfiprintf_r+0x5c>
 8015c6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015c70:	07dc      	lsls	r4, r3, #31
 8015c72:	d504      	bpl.n	8015c7e <_vfiprintf_r+0x4e>
 8015c74:	f04f 30ff 	mov.w	r0, #4294967295
 8015c78:	b01d      	add	sp, #116	@ 0x74
 8015c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c7e:	89ab      	ldrh	r3, [r5, #12]
 8015c80:	0598      	lsls	r0, r3, #22
 8015c82:	d4f7      	bmi.n	8015c74 <_vfiprintf_r+0x44>
 8015c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015c86:	f7ff fb7d 	bl	8015384 <__retarget_lock_release_recursive>
 8015c8a:	e7f3      	b.n	8015c74 <_vfiprintf_r+0x44>
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c90:	2320      	movs	r3, #32
 8015c92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8015c9a:	2330      	movs	r3, #48	@ 0x30
 8015c9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015e4c <_vfiprintf_r+0x21c>
 8015ca0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015ca4:	f04f 0901 	mov.w	r9, #1
 8015ca8:	4623      	mov	r3, r4
 8015caa:	469a      	mov	sl, r3
 8015cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015cb0:	b10a      	cbz	r2, 8015cb6 <_vfiprintf_r+0x86>
 8015cb2:	2a25      	cmp	r2, #37	@ 0x25
 8015cb4:	d1f9      	bne.n	8015caa <_vfiprintf_r+0x7a>
 8015cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8015cba:	d00b      	beq.n	8015cd4 <_vfiprintf_r+0xa4>
 8015cbc:	465b      	mov	r3, fp
 8015cbe:	4622      	mov	r2, r4
 8015cc0:	4629      	mov	r1, r5
 8015cc2:	4630      	mov	r0, r6
 8015cc4:	f7ff ffa1 	bl	8015c0a <__sfputs_r>
 8015cc8:	3001      	adds	r0, #1
 8015cca:	f000 80a7 	beq.w	8015e1c <_vfiprintf_r+0x1ec>
 8015cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015cd0:	445a      	add	r2, fp
 8015cd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8015cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	f000 809f 	beq.w	8015e1c <_vfiprintf_r+0x1ec>
 8015cde:	2300      	movs	r3, #0
 8015ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8015ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ce8:	f10a 0a01 	add.w	sl, sl, #1
 8015cec:	9304      	str	r3, [sp, #16]
 8015cee:	9307      	str	r3, [sp, #28]
 8015cf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015cf4:	931a      	str	r3, [sp, #104]	@ 0x68
 8015cf6:	4654      	mov	r4, sl
 8015cf8:	2205      	movs	r2, #5
 8015cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cfe:	4853      	ldr	r0, [pc, #332]	@ (8015e4c <_vfiprintf_r+0x21c>)
 8015d00:	f7ea fb0e 	bl	8000320 <memchr>
 8015d04:	9a04      	ldr	r2, [sp, #16]
 8015d06:	b9d8      	cbnz	r0, 8015d40 <_vfiprintf_r+0x110>
 8015d08:	06d1      	lsls	r1, r2, #27
 8015d0a:	bf44      	itt	mi
 8015d0c:	2320      	movmi	r3, #32
 8015d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015d12:	0713      	lsls	r3, r2, #28
 8015d14:	bf44      	itt	mi
 8015d16:	232b      	movmi	r3, #43	@ 0x2b
 8015d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8015d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8015d22:	d015      	beq.n	8015d50 <_vfiprintf_r+0x120>
 8015d24:	9a07      	ldr	r2, [sp, #28]
 8015d26:	4654      	mov	r4, sl
 8015d28:	2000      	movs	r0, #0
 8015d2a:	f04f 0c0a 	mov.w	ip, #10
 8015d2e:	4621      	mov	r1, r4
 8015d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d34:	3b30      	subs	r3, #48	@ 0x30
 8015d36:	2b09      	cmp	r3, #9
 8015d38:	d94b      	bls.n	8015dd2 <_vfiprintf_r+0x1a2>
 8015d3a:	b1b0      	cbz	r0, 8015d6a <_vfiprintf_r+0x13a>
 8015d3c:	9207      	str	r2, [sp, #28]
 8015d3e:	e014      	b.n	8015d6a <_vfiprintf_r+0x13a>
 8015d40:	eba0 0308 	sub.w	r3, r0, r8
 8015d44:	fa09 f303 	lsl.w	r3, r9, r3
 8015d48:	4313      	orrs	r3, r2
 8015d4a:	9304      	str	r3, [sp, #16]
 8015d4c:	46a2      	mov	sl, r4
 8015d4e:	e7d2      	b.n	8015cf6 <_vfiprintf_r+0xc6>
 8015d50:	9b03      	ldr	r3, [sp, #12]
 8015d52:	1d19      	adds	r1, r3, #4
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	9103      	str	r1, [sp, #12]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	bfbb      	ittet	lt
 8015d5c:	425b      	neglt	r3, r3
 8015d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8015d62:	9307      	strge	r3, [sp, #28]
 8015d64:	9307      	strlt	r3, [sp, #28]
 8015d66:	bfb8      	it	lt
 8015d68:	9204      	strlt	r2, [sp, #16]
 8015d6a:	7823      	ldrb	r3, [r4, #0]
 8015d6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8015d6e:	d10a      	bne.n	8015d86 <_vfiprintf_r+0x156>
 8015d70:	7863      	ldrb	r3, [r4, #1]
 8015d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8015d74:	d132      	bne.n	8015ddc <_vfiprintf_r+0x1ac>
 8015d76:	9b03      	ldr	r3, [sp, #12]
 8015d78:	1d1a      	adds	r2, r3, #4
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	9203      	str	r2, [sp, #12]
 8015d7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015d82:	3402      	adds	r4, #2
 8015d84:	9305      	str	r3, [sp, #20]
 8015d86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015e5c <_vfiprintf_r+0x22c>
 8015d8a:	7821      	ldrb	r1, [r4, #0]
 8015d8c:	2203      	movs	r2, #3
 8015d8e:	4650      	mov	r0, sl
 8015d90:	f7ea fac6 	bl	8000320 <memchr>
 8015d94:	b138      	cbz	r0, 8015da6 <_vfiprintf_r+0x176>
 8015d96:	9b04      	ldr	r3, [sp, #16]
 8015d98:	eba0 000a 	sub.w	r0, r0, sl
 8015d9c:	2240      	movs	r2, #64	@ 0x40
 8015d9e:	4082      	lsls	r2, r0
 8015da0:	4313      	orrs	r3, r2
 8015da2:	3401      	adds	r4, #1
 8015da4:	9304      	str	r3, [sp, #16]
 8015da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015daa:	4829      	ldr	r0, [pc, #164]	@ (8015e50 <_vfiprintf_r+0x220>)
 8015dac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015db0:	2206      	movs	r2, #6
 8015db2:	f7ea fab5 	bl	8000320 <memchr>
 8015db6:	2800      	cmp	r0, #0
 8015db8:	d03f      	beq.n	8015e3a <_vfiprintf_r+0x20a>
 8015dba:	4b26      	ldr	r3, [pc, #152]	@ (8015e54 <_vfiprintf_r+0x224>)
 8015dbc:	bb1b      	cbnz	r3, 8015e06 <_vfiprintf_r+0x1d6>
 8015dbe:	9b03      	ldr	r3, [sp, #12]
 8015dc0:	3307      	adds	r3, #7
 8015dc2:	f023 0307 	bic.w	r3, r3, #7
 8015dc6:	3308      	adds	r3, #8
 8015dc8:	9303      	str	r3, [sp, #12]
 8015dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015dcc:	443b      	add	r3, r7
 8015dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8015dd0:	e76a      	b.n	8015ca8 <_vfiprintf_r+0x78>
 8015dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8015dd6:	460c      	mov	r4, r1
 8015dd8:	2001      	movs	r0, #1
 8015dda:	e7a8      	b.n	8015d2e <_vfiprintf_r+0xfe>
 8015ddc:	2300      	movs	r3, #0
 8015dde:	3401      	adds	r4, #1
 8015de0:	9305      	str	r3, [sp, #20]
 8015de2:	4619      	mov	r1, r3
 8015de4:	f04f 0c0a 	mov.w	ip, #10
 8015de8:	4620      	mov	r0, r4
 8015dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015dee:	3a30      	subs	r2, #48	@ 0x30
 8015df0:	2a09      	cmp	r2, #9
 8015df2:	d903      	bls.n	8015dfc <_vfiprintf_r+0x1cc>
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d0c6      	beq.n	8015d86 <_vfiprintf_r+0x156>
 8015df8:	9105      	str	r1, [sp, #20]
 8015dfa:	e7c4      	b.n	8015d86 <_vfiprintf_r+0x156>
 8015dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e00:	4604      	mov	r4, r0
 8015e02:	2301      	movs	r3, #1
 8015e04:	e7f0      	b.n	8015de8 <_vfiprintf_r+0x1b8>
 8015e06:	ab03      	add	r3, sp, #12
 8015e08:	9300      	str	r3, [sp, #0]
 8015e0a:	462a      	mov	r2, r5
 8015e0c:	4b12      	ldr	r3, [pc, #72]	@ (8015e58 <_vfiprintf_r+0x228>)
 8015e0e:	a904      	add	r1, sp, #16
 8015e10:	4630      	mov	r0, r6
 8015e12:	f3af 8000 	nop.w
 8015e16:	4607      	mov	r7, r0
 8015e18:	1c78      	adds	r0, r7, #1
 8015e1a:	d1d6      	bne.n	8015dca <_vfiprintf_r+0x19a>
 8015e1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015e1e:	07d9      	lsls	r1, r3, #31
 8015e20:	d405      	bmi.n	8015e2e <_vfiprintf_r+0x1fe>
 8015e22:	89ab      	ldrh	r3, [r5, #12]
 8015e24:	059a      	lsls	r2, r3, #22
 8015e26:	d402      	bmi.n	8015e2e <_vfiprintf_r+0x1fe>
 8015e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015e2a:	f7ff faab 	bl	8015384 <__retarget_lock_release_recursive>
 8015e2e:	89ab      	ldrh	r3, [r5, #12]
 8015e30:	065b      	lsls	r3, r3, #25
 8015e32:	f53f af1f 	bmi.w	8015c74 <_vfiprintf_r+0x44>
 8015e36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015e38:	e71e      	b.n	8015c78 <_vfiprintf_r+0x48>
 8015e3a:	ab03      	add	r3, sp, #12
 8015e3c:	9300      	str	r3, [sp, #0]
 8015e3e:	462a      	mov	r2, r5
 8015e40:	4b05      	ldr	r3, [pc, #20]	@ (8015e58 <_vfiprintf_r+0x228>)
 8015e42:	a904      	add	r1, sp, #16
 8015e44:	4630      	mov	r0, r6
 8015e46:	f000 f879 	bl	8015f3c <_printf_i>
 8015e4a:	e7e4      	b.n	8015e16 <_vfiprintf_r+0x1e6>
 8015e4c:	08017140 	.word	0x08017140
 8015e50:	0801714a 	.word	0x0801714a
 8015e54:	00000000 	.word	0x00000000
 8015e58:	08015c0b 	.word	0x08015c0b
 8015e5c:	08017146 	.word	0x08017146

08015e60 <_printf_common>:
 8015e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e64:	4616      	mov	r6, r2
 8015e66:	4698      	mov	r8, r3
 8015e68:	688a      	ldr	r2, [r1, #8]
 8015e6a:	690b      	ldr	r3, [r1, #16]
 8015e6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015e70:	4293      	cmp	r3, r2
 8015e72:	bfb8      	it	lt
 8015e74:	4613      	movlt	r3, r2
 8015e76:	6033      	str	r3, [r6, #0]
 8015e78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015e7c:	4607      	mov	r7, r0
 8015e7e:	460c      	mov	r4, r1
 8015e80:	b10a      	cbz	r2, 8015e86 <_printf_common+0x26>
 8015e82:	3301      	adds	r3, #1
 8015e84:	6033      	str	r3, [r6, #0]
 8015e86:	6823      	ldr	r3, [r4, #0]
 8015e88:	0699      	lsls	r1, r3, #26
 8015e8a:	bf42      	ittt	mi
 8015e8c:	6833      	ldrmi	r3, [r6, #0]
 8015e8e:	3302      	addmi	r3, #2
 8015e90:	6033      	strmi	r3, [r6, #0]
 8015e92:	6825      	ldr	r5, [r4, #0]
 8015e94:	f015 0506 	ands.w	r5, r5, #6
 8015e98:	d106      	bne.n	8015ea8 <_printf_common+0x48>
 8015e9a:	f104 0a19 	add.w	sl, r4, #25
 8015e9e:	68e3      	ldr	r3, [r4, #12]
 8015ea0:	6832      	ldr	r2, [r6, #0]
 8015ea2:	1a9b      	subs	r3, r3, r2
 8015ea4:	42ab      	cmp	r3, r5
 8015ea6:	dc26      	bgt.n	8015ef6 <_printf_common+0x96>
 8015ea8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015eac:	6822      	ldr	r2, [r4, #0]
 8015eae:	3b00      	subs	r3, #0
 8015eb0:	bf18      	it	ne
 8015eb2:	2301      	movne	r3, #1
 8015eb4:	0692      	lsls	r2, r2, #26
 8015eb6:	d42b      	bmi.n	8015f10 <_printf_common+0xb0>
 8015eb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015ebc:	4641      	mov	r1, r8
 8015ebe:	4638      	mov	r0, r7
 8015ec0:	47c8      	blx	r9
 8015ec2:	3001      	adds	r0, #1
 8015ec4:	d01e      	beq.n	8015f04 <_printf_common+0xa4>
 8015ec6:	6823      	ldr	r3, [r4, #0]
 8015ec8:	6922      	ldr	r2, [r4, #16]
 8015eca:	f003 0306 	and.w	r3, r3, #6
 8015ece:	2b04      	cmp	r3, #4
 8015ed0:	bf02      	ittt	eq
 8015ed2:	68e5      	ldreq	r5, [r4, #12]
 8015ed4:	6833      	ldreq	r3, [r6, #0]
 8015ed6:	1aed      	subeq	r5, r5, r3
 8015ed8:	68a3      	ldr	r3, [r4, #8]
 8015eda:	bf0c      	ite	eq
 8015edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015ee0:	2500      	movne	r5, #0
 8015ee2:	4293      	cmp	r3, r2
 8015ee4:	bfc4      	itt	gt
 8015ee6:	1a9b      	subgt	r3, r3, r2
 8015ee8:	18ed      	addgt	r5, r5, r3
 8015eea:	2600      	movs	r6, #0
 8015eec:	341a      	adds	r4, #26
 8015eee:	42b5      	cmp	r5, r6
 8015ef0:	d11a      	bne.n	8015f28 <_printf_common+0xc8>
 8015ef2:	2000      	movs	r0, #0
 8015ef4:	e008      	b.n	8015f08 <_printf_common+0xa8>
 8015ef6:	2301      	movs	r3, #1
 8015ef8:	4652      	mov	r2, sl
 8015efa:	4641      	mov	r1, r8
 8015efc:	4638      	mov	r0, r7
 8015efe:	47c8      	blx	r9
 8015f00:	3001      	adds	r0, #1
 8015f02:	d103      	bne.n	8015f0c <_printf_common+0xac>
 8015f04:	f04f 30ff 	mov.w	r0, #4294967295
 8015f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f0c:	3501      	adds	r5, #1
 8015f0e:	e7c6      	b.n	8015e9e <_printf_common+0x3e>
 8015f10:	18e1      	adds	r1, r4, r3
 8015f12:	1c5a      	adds	r2, r3, #1
 8015f14:	2030      	movs	r0, #48	@ 0x30
 8015f16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015f1a:	4422      	add	r2, r4
 8015f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015f20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015f24:	3302      	adds	r3, #2
 8015f26:	e7c7      	b.n	8015eb8 <_printf_common+0x58>
 8015f28:	2301      	movs	r3, #1
 8015f2a:	4622      	mov	r2, r4
 8015f2c:	4641      	mov	r1, r8
 8015f2e:	4638      	mov	r0, r7
 8015f30:	47c8      	blx	r9
 8015f32:	3001      	adds	r0, #1
 8015f34:	d0e6      	beq.n	8015f04 <_printf_common+0xa4>
 8015f36:	3601      	adds	r6, #1
 8015f38:	e7d9      	b.n	8015eee <_printf_common+0x8e>
	...

08015f3c <_printf_i>:
 8015f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015f40:	7e0f      	ldrb	r7, [r1, #24]
 8015f42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015f44:	2f78      	cmp	r7, #120	@ 0x78
 8015f46:	4691      	mov	r9, r2
 8015f48:	4680      	mov	r8, r0
 8015f4a:	460c      	mov	r4, r1
 8015f4c:	469a      	mov	sl, r3
 8015f4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015f52:	d807      	bhi.n	8015f64 <_printf_i+0x28>
 8015f54:	2f62      	cmp	r7, #98	@ 0x62
 8015f56:	d80a      	bhi.n	8015f6e <_printf_i+0x32>
 8015f58:	2f00      	cmp	r7, #0
 8015f5a:	f000 80d2 	beq.w	8016102 <_printf_i+0x1c6>
 8015f5e:	2f58      	cmp	r7, #88	@ 0x58
 8015f60:	f000 80b9 	beq.w	80160d6 <_printf_i+0x19a>
 8015f64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015f68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015f6c:	e03a      	b.n	8015fe4 <_printf_i+0xa8>
 8015f6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015f72:	2b15      	cmp	r3, #21
 8015f74:	d8f6      	bhi.n	8015f64 <_printf_i+0x28>
 8015f76:	a101      	add	r1, pc, #4	@ (adr r1, 8015f7c <_printf_i+0x40>)
 8015f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015f7c:	08015fd5 	.word	0x08015fd5
 8015f80:	08015fe9 	.word	0x08015fe9
 8015f84:	08015f65 	.word	0x08015f65
 8015f88:	08015f65 	.word	0x08015f65
 8015f8c:	08015f65 	.word	0x08015f65
 8015f90:	08015f65 	.word	0x08015f65
 8015f94:	08015fe9 	.word	0x08015fe9
 8015f98:	08015f65 	.word	0x08015f65
 8015f9c:	08015f65 	.word	0x08015f65
 8015fa0:	08015f65 	.word	0x08015f65
 8015fa4:	08015f65 	.word	0x08015f65
 8015fa8:	080160e9 	.word	0x080160e9
 8015fac:	08016013 	.word	0x08016013
 8015fb0:	080160a3 	.word	0x080160a3
 8015fb4:	08015f65 	.word	0x08015f65
 8015fb8:	08015f65 	.word	0x08015f65
 8015fbc:	0801610b 	.word	0x0801610b
 8015fc0:	08015f65 	.word	0x08015f65
 8015fc4:	08016013 	.word	0x08016013
 8015fc8:	08015f65 	.word	0x08015f65
 8015fcc:	08015f65 	.word	0x08015f65
 8015fd0:	080160ab 	.word	0x080160ab
 8015fd4:	6833      	ldr	r3, [r6, #0]
 8015fd6:	1d1a      	adds	r2, r3, #4
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	6032      	str	r2, [r6, #0]
 8015fdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015fe0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015fe4:	2301      	movs	r3, #1
 8015fe6:	e09d      	b.n	8016124 <_printf_i+0x1e8>
 8015fe8:	6833      	ldr	r3, [r6, #0]
 8015fea:	6820      	ldr	r0, [r4, #0]
 8015fec:	1d19      	adds	r1, r3, #4
 8015fee:	6031      	str	r1, [r6, #0]
 8015ff0:	0606      	lsls	r6, r0, #24
 8015ff2:	d501      	bpl.n	8015ff8 <_printf_i+0xbc>
 8015ff4:	681d      	ldr	r5, [r3, #0]
 8015ff6:	e003      	b.n	8016000 <_printf_i+0xc4>
 8015ff8:	0645      	lsls	r5, r0, #25
 8015ffa:	d5fb      	bpl.n	8015ff4 <_printf_i+0xb8>
 8015ffc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016000:	2d00      	cmp	r5, #0
 8016002:	da03      	bge.n	801600c <_printf_i+0xd0>
 8016004:	232d      	movs	r3, #45	@ 0x2d
 8016006:	426d      	negs	r5, r5
 8016008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801600c:	4859      	ldr	r0, [pc, #356]	@ (8016174 <_printf_i+0x238>)
 801600e:	230a      	movs	r3, #10
 8016010:	e011      	b.n	8016036 <_printf_i+0xfa>
 8016012:	6821      	ldr	r1, [r4, #0]
 8016014:	6833      	ldr	r3, [r6, #0]
 8016016:	0608      	lsls	r0, r1, #24
 8016018:	f853 5b04 	ldr.w	r5, [r3], #4
 801601c:	d402      	bmi.n	8016024 <_printf_i+0xe8>
 801601e:	0649      	lsls	r1, r1, #25
 8016020:	bf48      	it	mi
 8016022:	b2ad      	uxthmi	r5, r5
 8016024:	2f6f      	cmp	r7, #111	@ 0x6f
 8016026:	4853      	ldr	r0, [pc, #332]	@ (8016174 <_printf_i+0x238>)
 8016028:	6033      	str	r3, [r6, #0]
 801602a:	bf14      	ite	ne
 801602c:	230a      	movne	r3, #10
 801602e:	2308      	moveq	r3, #8
 8016030:	2100      	movs	r1, #0
 8016032:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016036:	6866      	ldr	r6, [r4, #4]
 8016038:	60a6      	str	r6, [r4, #8]
 801603a:	2e00      	cmp	r6, #0
 801603c:	bfa2      	ittt	ge
 801603e:	6821      	ldrge	r1, [r4, #0]
 8016040:	f021 0104 	bicge.w	r1, r1, #4
 8016044:	6021      	strge	r1, [r4, #0]
 8016046:	b90d      	cbnz	r5, 801604c <_printf_i+0x110>
 8016048:	2e00      	cmp	r6, #0
 801604a:	d04b      	beq.n	80160e4 <_printf_i+0x1a8>
 801604c:	4616      	mov	r6, r2
 801604e:	fbb5 f1f3 	udiv	r1, r5, r3
 8016052:	fb03 5711 	mls	r7, r3, r1, r5
 8016056:	5dc7      	ldrb	r7, [r0, r7]
 8016058:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801605c:	462f      	mov	r7, r5
 801605e:	42bb      	cmp	r3, r7
 8016060:	460d      	mov	r5, r1
 8016062:	d9f4      	bls.n	801604e <_printf_i+0x112>
 8016064:	2b08      	cmp	r3, #8
 8016066:	d10b      	bne.n	8016080 <_printf_i+0x144>
 8016068:	6823      	ldr	r3, [r4, #0]
 801606a:	07df      	lsls	r7, r3, #31
 801606c:	d508      	bpl.n	8016080 <_printf_i+0x144>
 801606e:	6923      	ldr	r3, [r4, #16]
 8016070:	6861      	ldr	r1, [r4, #4]
 8016072:	4299      	cmp	r1, r3
 8016074:	bfde      	ittt	le
 8016076:	2330      	movle	r3, #48	@ 0x30
 8016078:	f806 3c01 	strble.w	r3, [r6, #-1]
 801607c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016080:	1b92      	subs	r2, r2, r6
 8016082:	6122      	str	r2, [r4, #16]
 8016084:	f8cd a000 	str.w	sl, [sp]
 8016088:	464b      	mov	r3, r9
 801608a:	aa03      	add	r2, sp, #12
 801608c:	4621      	mov	r1, r4
 801608e:	4640      	mov	r0, r8
 8016090:	f7ff fee6 	bl	8015e60 <_printf_common>
 8016094:	3001      	adds	r0, #1
 8016096:	d14a      	bne.n	801612e <_printf_i+0x1f2>
 8016098:	f04f 30ff 	mov.w	r0, #4294967295
 801609c:	b004      	add	sp, #16
 801609e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160a2:	6823      	ldr	r3, [r4, #0]
 80160a4:	f043 0320 	orr.w	r3, r3, #32
 80160a8:	6023      	str	r3, [r4, #0]
 80160aa:	4833      	ldr	r0, [pc, #204]	@ (8016178 <_printf_i+0x23c>)
 80160ac:	2778      	movs	r7, #120	@ 0x78
 80160ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80160b2:	6823      	ldr	r3, [r4, #0]
 80160b4:	6831      	ldr	r1, [r6, #0]
 80160b6:	061f      	lsls	r7, r3, #24
 80160b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80160bc:	d402      	bmi.n	80160c4 <_printf_i+0x188>
 80160be:	065f      	lsls	r7, r3, #25
 80160c0:	bf48      	it	mi
 80160c2:	b2ad      	uxthmi	r5, r5
 80160c4:	6031      	str	r1, [r6, #0]
 80160c6:	07d9      	lsls	r1, r3, #31
 80160c8:	bf44      	itt	mi
 80160ca:	f043 0320 	orrmi.w	r3, r3, #32
 80160ce:	6023      	strmi	r3, [r4, #0]
 80160d0:	b11d      	cbz	r5, 80160da <_printf_i+0x19e>
 80160d2:	2310      	movs	r3, #16
 80160d4:	e7ac      	b.n	8016030 <_printf_i+0xf4>
 80160d6:	4827      	ldr	r0, [pc, #156]	@ (8016174 <_printf_i+0x238>)
 80160d8:	e7e9      	b.n	80160ae <_printf_i+0x172>
 80160da:	6823      	ldr	r3, [r4, #0]
 80160dc:	f023 0320 	bic.w	r3, r3, #32
 80160e0:	6023      	str	r3, [r4, #0]
 80160e2:	e7f6      	b.n	80160d2 <_printf_i+0x196>
 80160e4:	4616      	mov	r6, r2
 80160e6:	e7bd      	b.n	8016064 <_printf_i+0x128>
 80160e8:	6833      	ldr	r3, [r6, #0]
 80160ea:	6825      	ldr	r5, [r4, #0]
 80160ec:	6961      	ldr	r1, [r4, #20]
 80160ee:	1d18      	adds	r0, r3, #4
 80160f0:	6030      	str	r0, [r6, #0]
 80160f2:	062e      	lsls	r6, r5, #24
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	d501      	bpl.n	80160fc <_printf_i+0x1c0>
 80160f8:	6019      	str	r1, [r3, #0]
 80160fa:	e002      	b.n	8016102 <_printf_i+0x1c6>
 80160fc:	0668      	lsls	r0, r5, #25
 80160fe:	d5fb      	bpl.n	80160f8 <_printf_i+0x1bc>
 8016100:	8019      	strh	r1, [r3, #0]
 8016102:	2300      	movs	r3, #0
 8016104:	6123      	str	r3, [r4, #16]
 8016106:	4616      	mov	r6, r2
 8016108:	e7bc      	b.n	8016084 <_printf_i+0x148>
 801610a:	6833      	ldr	r3, [r6, #0]
 801610c:	1d1a      	adds	r2, r3, #4
 801610e:	6032      	str	r2, [r6, #0]
 8016110:	681e      	ldr	r6, [r3, #0]
 8016112:	6862      	ldr	r2, [r4, #4]
 8016114:	2100      	movs	r1, #0
 8016116:	4630      	mov	r0, r6
 8016118:	f7ea f902 	bl	8000320 <memchr>
 801611c:	b108      	cbz	r0, 8016122 <_printf_i+0x1e6>
 801611e:	1b80      	subs	r0, r0, r6
 8016120:	6060      	str	r0, [r4, #4]
 8016122:	6863      	ldr	r3, [r4, #4]
 8016124:	6123      	str	r3, [r4, #16]
 8016126:	2300      	movs	r3, #0
 8016128:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801612c:	e7aa      	b.n	8016084 <_printf_i+0x148>
 801612e:	6923      	ldr	r3, [r4, #16]
 8016130:	4632      	mov	r2, r6
 8016132:	4649      	mov	r1, r9
 8016134:	4640      	mov	r0, r8
 8016136:	47d0      	blx	sl
 8016138:	3001      	adds	r0, #1
 801613a:	d0ad      	beq.n	8016098 <_printf_i+0x15c>
 801613c:	6823      	ldr	r3, [r4, #0]
 801613e:	079b      	lsls	r3, r3, #30
 8016140:	d413      	bmi.n	801616a <_printf_i+0x22e>
 8016142:	68e0      	ldr	r0, [r4, #12]
 8016144:	9b03      	ldr	r3, [sp, #12]
 8016146:	4298      	cmp	r0, r3
 8016148:	bfb8      	it	lt
 801614a:	4618      	movlt	r0, r3
 801614c:	e7a6      	b.n	801609c <_printf_i+0x160>
 801614e:	2301      	movs	r3, #1
 8016150:	4632      	mov	r2, r6
 8016152:	4649      	mov	r1, r9
 8016154:	4640      	mov	r0, r8
 8016156:	47d0      	blx	sl
 8016158:	3001      	adds	r0, #1
 801615a:	d09d      	beq.n	8016098 <_printf_i+0x15c>
 801615c:	3501      	adds	r5, #1
 801615e:	68e3      	ldr	r3, [r4, #12]
 8016160:	9903      	ldr	r1, [sp, #12]
 8016162:	1a5b      	subs	r3, r3, r1
 8016164:	42ab      	cmp	r3, r5
 8016166:	dcf2      	bgt.n	801614e <_printf_i+0x212>
 8016168:	e7eb      	b.n	8016142 <_printf_i+0x206>
 801616a:	2500      	movs	r5, #0
 801616c:	f104 0619 	add.w	r6, r4, #25
 8016170:	e7f5      	b.n	801615e <_printf_i+0x222>
 8016172:	bf00      	nop
 8016174:	08017151 	.word	0x08017151
 8016178:	08017162 	.word	0x08017162

0801617c <_scanf_chars>:
 801617c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016180:	4615      	mov	r5, r2
 8016182:	688a      	ldr	r2, [r1, #8]
 8016184:	4680      	mov	r8, r0
 8016186:	460c      	mov	r4, r1
 8016188:	b932      	cbnz	r2, 8016198 <_scanf_chars+0x1c>
 801618a:	698a      	ldr	r2, [r1, #24]
 801618c:	2a00      	cmp	r2, #0
 801618e:	bf14      	ite	ne
 8016190:	f04f 32ff 	movne.w	r2, #4294967295
 8016194:	2201      	moveq	r2, #1
 8016196:	608a      	str	r2, [r1, #8]
 8016198:	6822      	ldr	r2, [r4, #0]
 801619a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801622c <_scanf_chars+0xb0>
 801619e:	06d1      	lsls	r1, r2, #27
 80161a0:	bf5f      	itttt	pl
 80161a2:	681a      	ldrpl	r2, [r3, #0]
 80161a4:	1d11      	addpl	r1, r2, #4
 80161a6:	6019      	strpl	r1, [r3, #0]
 80161a8:	6816      	ldrpl	r6, [r2, #0]
 80161aa:	2700      	movs	r7, #0
 80161ac:	69a0      	ldr	r0, [r4, #24]
 80161ae:	b188      	cbz	r0, 80161d4 <_scanf_chars+0x58>
 80161b0:	2801      	cmp	r0, #1
 80161b2:	d107      	bne.n	80161c4 <_scanf_chars+0x48>
 80161b4:	682b      	ldr	r3, [r5, #0]
 80161b6:	781a      	ldrb	r2, [r3, #0]
 80161b8:	6963      	ldr	r3, [r4, #20]
 80161ba:	5c9b      	ldrb	r3, [r3, r2]
 80161bc:	b953      	cbnz	r3, 80161d4 <_scanf_chars+0x58>
 80161be:	2f00      	cmp	r7, #0
 80161c0:	d031      	beq.n	8016226 <_scanf_chars+0xaa>
 80161c2:	e022      	b.n	801620a <_scanf_chars+0x8e>
 80161c4:	2802      	cmp	r0, #2
 80161c6:	d120      	bne.n	801620a <_scanf_chars+0x8e>
 80161c8:	682b      	ldr	r3, [r5, #0]
 80161ca:	781b      	ldrb	r3, [r3, #0]
 80161cc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80161d0:	071b      	lsls	r3, r3, #28
 80161d2:	d41a      	bmi.n	801620a <_scanf_chars+0x8e>
 80161d4:	6823      	ldr	r3, [r4, #0]
 80161d6:	06da      	lsls	r2, r3, #27
 80161d8:	bf5e      	ittt	pl
 80161da:	682b      	ldrpl	r3, [r5, #0]
 80161dc:	781b      	ldrbpl	r3, [r3, #0]
 80161de:	f806 3b01 	strbpl.w	r3, [r6], #1
 80161e2:	682a      	ldr	r2, [r5, #0]
 80161e4:	686b      	ldr	r3, [r5, #4]
 80161e6:	3201      	adds	r2, #1
 80161e8:	602a      	str	r2, [r5, #0]
 80161ea:	68a2      	ldr	r2, [r4, #8]
 80161ec:	3b01      	subs	r3, #1
 80161ee:	3a01      	subs	r2, #1
 80161f0:	606b      	str	r3, [r5, #4]
 80161f2:	3701      	adds	r7, #1
 80161f4:	60a2      	str	r2, [r4, #8]
 80161f6:	b142      	cbz	r2, 801620a <_scanf_chars+0x8e>
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	dcd7      	bgt.n	80161ac <_scanf_chars+0x30>
 80161fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016200:	4629      	mov	r1, r5
 8016202:	4640      	mov	r0, r8
 8016204:	4798      	blx	r3
 8016206:	2800      	cmp	r0, #0
 8016208:	d0d0      	beq.n	80161ac <_scanf_chars+0x30>
 801620a:	6823      	ldr	r3, [r4, #0]
 801620c:	f013 0310 	ands.w	r3, r3, #16
 8016210:	d105      	bne.n	801621e <_scanf_chars+0xa2>
 8016212:	68e2      	ldr	r2, [r4, #12]
 8016214:	3201      	adds	r2, #1
 8016216:	60e2      	str	r2, [r4, #12]
 8016218:	69a2      	ldr	r2, [r4, #24]
 801621a:	b102      	cbz	r2, 801621e <_scanf_chars+0xa2>
 801621c:	7033      	strb	r3, [r6, #0]
 801621e:	6923      	ldr	r3, [r4, #16]
 8016220:	443b      	add	r3, r7
 8016222:	6123      	str	r3, [r4, #16]
 8016224:	2000      	movs	r0, #0
 8016226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801622a:	bf00      	nop
 801622c:	0801718f 	.word	0x0801718f

08016230 <_scanf_i>:
 8016230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016234:	4698      	mov	r8, r3
 8016236:	4b74      	ldr	r3, [pc, #464]	@ (8016408 <_scanf_i+0x1d8>)
 8016238:	460c      	mov	r4, r1
 801623a:	4682      	mov	sl, r0
 801623c:	4616      	mov	r6, r2
 801623e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016242:	b087      	sub	sp, #28
 8016244:	ab03      	add	r3, sp, #12
 8016246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801624a:	4b70      	ldr	r3, [pc, #448]	@ (801640c <_scanf_i+0x1dc>)
 801624c:	69a1      	ldr	r1, [r4, #24]
 801624e:	4a70      	ldr	r2, [pc, #448]	@ (8016410 <_scanf_i+0x1e0>)
 8016250:	2903      	cmp	r1, #3
 8016252:	bf08      	it	eq
 8016254:	461a      	moveq	r2, r3
 8016256:	68a3      	ldr	r3, [r4, #8]
 8016258:	9201      	str	r2, [sp, #4]
 801625a:	1e5a      	subs	r2, r3, #1
 801625c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8016260:	bf88      	it	hi
 8016262:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8016266:	4627      	mov	r7, r4
 8016268:	bf82      	ittt	hi
 801626a:	eb03 0905 	addhi.w	r9, r3, r5
 801626e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8016272:	60a3      	strhi	r3, [r4, #8]
 8016274:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016278:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801627c:	bf98      	it	ls
 801627e:	f04f 0900 	movls.w	r9, #0
 8016282:	6023      	str	r3, [r4, #0]
 8016284:	463d      	mov	r5, r7
 8016286:	f04f 0b00 	mov.w	fp, #0
 801628a:	6831      	ldr	r1, [r6, #0]
 801628c:	ab03      	add	r3, sp, #12
 801628e:	7809      	ldrb	r1, [r1, #0]
 8016290:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016294:	2202      	movs	r2, #2
 8016296:	f7ea f843 	bl	8000320 <memchr>
 801629a:	b328      	cbz	r0, 80162e8 <_scanf_i+0xb8>
 801629c:	f1bb 0f01 	cmp.w	fp, #1
 80162a0:	d159      	bne.n	8016356 <_scanf_i+0x126>
 80162a2:	6862      	ldr	r2, [r4, #4]
 80162a4:	b92a      	cbnz	r2, 80162b2 <_scanf_i+0x82>
 80162a6:	6822      	ldr	r2, [r4, #0]
 80162a8:	2108      	movs	r1, #8
 80162aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80162ae:	6061      	str	r1, [r4, #4]
 80162b0:	6022      	str	r2, [r4, #0]
 80162b2:	6822      	ldr	r2, [r4, #0]
 80162b4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80162b8:	6022      	str	r2, [r4, #0]
 80162ba:	68a2      	ldr	r2, [r4, #8]
 80162bc:	1e51      	subs	r1, r2, #1
 80162be:	60a1      	str	r1, [r4, #8]
 80162c0:	b192      	cbz	r2, 80162e8 <_scanf_i+0xb8>
 80162c2:	6832      	ldr	r2, [r6, #0]
 80162c4:	1c51      	adds	r1, r2, #1
 80162c6:	6031      	str	r1, [r6, #0]
 80162c8:	7812      	ldrb	r2, [r2, #0]
 80162ca:	f805 2b01 	strb.w	r2, [r5], #1
 80162ce:	6872      	ldr	r2, [r6, #4]
 80162d0:	3a01      	subs	r2, #1
 80162d2:	2a00      	cmp	r2, #0
 80162d4:	6072      	str	r2, [r6, #4]
 80162d6:	dc07      	bgt.n	80162e8 <_scanf_i+0xb8>
 80162d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80162dc:	4631      	mov	r1, r6
 80162de:	4650      	mov	r0, sl
 80162e0:	4790      	blx	r2
 80162e2:	2800      	cmp	r0, #0
 80162e4:	f040 8085 	bne.w	80163f2 <_scanf_i+0x1c2>
 80162e8:	f10b 0b01 	add.w	fp, fp, #1
 80162ec:	f1bb 0f03 	cmp.w	fp, #3
 80162f0:	d1cb      	bne.n	801628a <_scanf_i+0x5a>
 80162f2:	6863      	ldr	r3, [r4, #4]
 80162f4:	b90b      	cbnz	r3, 80162fa <_scanf_i+0xca>
 80162f6:	230a      	movs	r3, #10
 80162f8:	6063      	str	r3, [r4, #4]
 80162fa:	6863      	ldr	r3, [r4, #4]
 80162fc:	4945      	ldr	r1, [pc, #276]	@ (8016414 <_scanf_i+0x1e4>)
 80162fe:	6960      	ldr	r0, [r4, #20]
 8016300:	1ac9      	subs	r1, r1, r3
 8016302:	f000 f997 	bl	8016634 <__sccl>
 8016306:	f04f 0b00 	mov.w	fp, #0
 801630a:	68a3      	ldr	r3, [r4, #8]
 801630c:	6822      	ldr	r2, [r4, #0]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d03d      	beq.n	801638e <_scanf_i+0x15e>
 8016312:	6831      	ldr	r1, [r6, #0]
 8016314:	6960      	ldr	r0, [r4, #20]
 8016316:	f891 c000 	ldrb.w	ip, [r1]
 801631a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801631e:	2800      	cmp	r0, #0
 8016320:	d035      	beq.n	801638e <_scanf_i+0x15e>
 8016322:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8016326:	d124      	bne.n	8016372 <_scanf_i+0x142>
 8016328:	0510      	lsls	r0, r2, #20
 801632a:	d522      	bpl.n	8016372 <_scanf_i+0x142>
 801632c:	f10b 0b01 	add.w	fp, fp, #1
 8016330:	f1b9 0f00 	cmp.w	r9, #0
 8016334:	d003      	beq.n	801633e <_scanf_i+0x10e>
 8016336:	3301      	adds	r3, #1
 8016338:	f109 39ff 	add.w	r9, r9, #4294967295
 801633c:	60a3      	str	r3, [r4, #8]
 801633e:	6873      	ldr	r3, [r6, #4]
 8016340:	3b01      	subs	r3, #1
 8016342:	2b00      	cmp	r3, #0
 8016344:	6073      	str	r3, [r6, #4]
 8016346:	dd1b      	ble.n	8016380 <_scanf_i+0x150>
 8016348:	6833      	ldr	r3, [r6, #0]
 801634a:	3301      	adds	r3, #1
 801634c:	6033      	str	r3, [r6, #0]
 801634e:	68a3      	ldr	r3, [r4, #8]
 8016350:	3b01      	subs	r3, #1
 8016352:	60a3      	str	r3, [r4, #8]
 8016354:	e7d9      	b.n	801630a <_scanf_i+0xda>
 8016356:	f1bb 0f02 	cmp.w	fp, #2
 801635a:	d1ae      	bne.n	80162ba <_scanf_i+0x8a>
 801635c:	6822      	ldr	r2, [r4, #0]
 801635e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8016362:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8016366:	d1bf      	bne.n	80162e8 <_scanf_i+0xb8>
 8016368:	2110      	movs	r1, #16
 801636a:	6061      	str	r1, [r4, #4]
 801636c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016370:	e7a2      	b.n	80162b8 <_scanf_i+0x88>
 8016372:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8016376:	6022      	str	r2, [r4, #0]
 8016378:	780b      	ldrb	r3, [r1, #0]
 801637a:	f805 3b01 	strb.w	r3, [r5], #1
 801637e:	e7de      	b.n	801633e <_scanf_i+0x10e>
 8016380:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016384:	4631      	mov	r1, r6
 8016386:	4650      	mov	r0, sl
 8016388:	4798      	blx	r3
 801638a:	2800      	cmp	r0, #0
 801638c:	d0df      	beq.n	801634e <_scanf_i+0x11e>
 801638e:	6823      	ldr	r3, [r4, #0]
 8016390:	05d9      	lsls	r1, r3, #23
 8016392:	d50d      	bpl.n	80163b0 <_scanf_i+0x180>
 8016394:	42bd      	cmp	r5, r7
 8016396:	d909      	bls.n	80163ac <_scanf_i+0x17c>
 8016398:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801639c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80163a0:	4632      	mov	r2, r6
 80163a2:	4650      	mov	r0, sl
 80163a4:	4798      	blx	r3
 80163a6:	f105 39ff 	add.w	r9, r5, #4294967295
 80163aa:	464d      	mov	r5, r9
 80163ac:	42bd      	cmp	r5, r7
 80163ae:	d028      	beq.n	8016402 <_scanf_i+0x1d2>
 80163b0:	6822      	ldr	r2, [r4, #0]
 80163b2:	f012 0210 	ands.w	r2, r2, #16
 80163b6:	d113      	bne.n	80163e0 <_scanf_i+0x1b0>
 80163b8:	702a      	strb	r2, [r5, #0]
 80163ba:	6863      	ldr	r3, [r4, #4]
 80163bc:	9e01      	ldr	r6, [sp, #4]
 80163be:	4639      	mov	r1, r7
 80163c0:	4650      	mov	r0, sl
 80163c2:	47b0      	blx	r6
 80163c4:	f8d8 3000 	ldr.w	r3, [r8]
 80163c8:	6821      	ldr	r1, [r4, #0]
 80163ca:	1d1a      	adds	r2, r3, #4
 80163cc:	f8c8 2000 	str.w	r2, [r8]
 80163d0:	f011 0f20 	tst.w	r1, #32
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	d00f      	beq.n	80163f8 <_scanf_i+0x1c8>
 80163d8:	6018      	str	r0, [r3, #0]
 80163da:	68e3      	ldr	r3, [r4, #12]
 80163dc:	3301      	adds	r3, #1
 80163de:	60e3      	str	r3, [r4, #12]
 80163e0:	6923      	ldr	r3, [r4, #16]
 80163e2:	1bed      	subs	r5, r5, r7
 80163e4:	445d      	add	r5, fp
 80163e6:	442b      	add	r3, r5
 80163e8:	6123      	str	r3, [r4, #16]
 80163ea:	2000      	movs	r0, #0
 80163ec:	b007      	add	sp, #28
 80163ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163f2:	f04f 0b00 	mov.w	fp, #0
 80163f6:	e7ca      	b.n	801638e <_scanf_i+0x15e>
 80163f8:	07ca      	lsls	r2, r1, #31
 80163fa:	bf4c      	ite	mi
 80163fc:	8018      	strhmi	r0, [r3, #0]
 80163fe:	6018      	strpl	r0, [r3, #0]
 8016400:	e7eb      	b.n	80163da <_scanf_i+0x1aa>
 8016402:	2001      	movs	r0, #1
 8016404:	e7f2      	b.n	80163ec <_scanf_i+0x1bc>
 8016406:	bf00      	nop
 8016408:	08016cb4 	.word	0x08016cb4
 801640c:	08016905 	.word	0x08016905
 8016410:	080169e5 	.word	0x080169e5
 8016414:	08017183 	.word	0x08017183

08016418 <__sflush_r>:
 8016418:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801641c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016420:	0716      	lsls	r6, r2, #28
 8016422:	4605      	mov	r5, r0
 8016424:	460c      	mov	r4, r1
 8016426:	d454      	bmi.n	80164d2 <__sflush_r+0xba>
 8016428:	684b      	ldr	r3, [r1, #4]
 801642a:	2b00      	cmp	r3, #0
 801642c:	dc02      	bgt.n	8016434 <__sflush_r+0x1c>
 801642e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016430:	2b00      	cmp	r3, #0
 8016432:	dd48      	ble.n	80164c6 <__sflush_r+0xae>
 8016434:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016436:	2e00      	cmp	r6, #0
 8016438:	d045      	beq.n	80164c6 <__sflush_r+0xae>
 801643a:	2300      	movs	r3, #0
 801643c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016440:	682f      	ldr	r7, [r5, #0]
 8016442:	6a21      	ldr	r1, [r4, #32]
 8016444:	602b      	str	r3, [r5, #0]
 8016446:	d030      	beq.n	80164aa <__sflush_r+0x92>
 8016448:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801644a:	89a3      	ldrh	r3, [r4, #12]
 801644c:	0759      	lsls	r1, r3, #29
 801644e:	d505      	bpl.n	801645c <__sflush_r+0x44>
 8016450:	6863      	ldr	r3, [r4, #4]
 8016452:	1ad2      	subs	r2, r2, r3
 8016454:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016456:	b10b      	cbz	r3, 801645c <__sflush_r+0x44>
 8016458:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801645a:	1ad2      	subs	r2, r2, r3
 801645c:	2300      	movs	r3, #0
 801645e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016460:	6a21      	ldr	r1, [r4, #32]
 8016462:	4628      	mov	r0, r5
 8016464:	47b0      	blx	r6
 8016466:	1c43      	adds	r3, r0, #1
 8016468:	89a3      	ldrh	r3, [r4, #12]
 801646a:	d106      	bne.n	801647a <__sflush_r+0x62>
 801646c:	6829      	ldr	r1, [r5, #0]
 801646e:	291d      	cmp	r1, #29
 8016470:	d82b      	bhi.n	80164ca <__sflush_r+0xb2>
 8016472:	4a2a      	ldr	r2, [pc, #168]	@ (801651c <__sflush_r+0x104>)
 8016474:	410a      	asrs	r2, r1
 8016476:	07d6      	lsls	r6, r2, #31
 8016478:	d427      	bmi.n	80164ca <__sflush_r+0xb2>
 801647a:	2200      	movs	r2, #0
 801647c:	6062      	str	r2, [r4, #4]
 801647e:	04d9      	lsls	r1, r3, #19
 8016480:	6922      	ldr	r2, [r4, #16]
 8016482:	6022      	str	r2, [r4, #0]
 8016484:	d504      	bpl.n	8016490 <__sflush_r+0x78>
 8016486:	1c42      	adds	r2, r0, #1
 8016488:	d101      	bne.n	801648e <__sflush_r+0x76>
 801648a:	682b      	ldr	r3, [r5, #0]
 801648c:	b903      	cbnz	r3, 8016490 <__sflush_r+0x78>
 801648e:	6560      	str	r0, [r4, #84]	@ 0x54
 8016490:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016492:	602f      	str	r7, [r5, #0]
 8016494:	b1b9      	cbz	r1, 80164c6 <__sflush_r+0xae>
 8016496:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801649a:	4299      	cmp	r1, r3
 801649c:	d002      	beq.n	80164a4 <__sflush_r+0x8c>
 801649e:	4628      	mov	r0, r5
 80164a0:	f7fe ff80 	bl	80153a4 <_free_r>
 80164a4:	2300      	movs	r3, #0
 80164a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80164a8:	e00d      	b.n	80164c6 <__sflush_r+0xae>
 80164aa:	2301      	movs	r3, #1
 80164ac:	4628      	mov	r0, r5
 80164ae:	47b0      	blx	r6
 80164b0:	4602      	mov	r2, r0
 80164b2:	1c50      	adds	r0, r2, #1
 80164b4:	d1c9      	bne.n	801644a <__sflush_r+0x32>
 80164b6:	682b      	ldr	r3, [r5, #0]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d0c6      	beq.n	801644a <__sflush_r+0x32>
 80164bc:	2b1d      	cmp	r3, #29
 80164be:	d001      	beq.n	80164c4 <__sflush_r+0xac>
 80164c0:	2b16      	cmp	r3, #22
 80164c2:	d11e      	bne.n	8016502 <__sflush_r+0xea>
 80164c4:	602f      	str	r7, [r5, #0]
 80164c6:	2000      	movs	r0, #0
 80164c8:	e022      	b.n	8016510 <__sflush_r+0xf8>
 80164ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80164ce:	b21b      	sxth	r3, r3
 80164d0:	e01b      	b.n	801650a <__sflush_r+0xf2>
 80164d2:	690f      	ldr	r7, [r1, #16]
 80164d4:	2f00      	cmp	r7, #0
 80164d6:	d0f6      	beq.n	80164c6 <__sflush_r+0xae>
 80164d8:	0793      	lsls	r3, r2, #30
 80164da:	680e      	ldr	r6, [r1, #0]
 80164dc:	bf08      	it	eq
 80164de:	694b      	ldreq	r3, [r1, #20]
 80164e0:	600f      	str	r7, [r1, #0]
 80164e2:	bf18      	it	ne
 80164e4:	2300      	movne	r3, #0
 80164e6:	eba6 0807 	sub.w	r8, r6, r7
 80164ea:	608b      	str	r3, [r1, #8]
 80164ec:	f1b8 0f00 	cmp.w	r8, #0
 80164f0:	dde9      	ble.n	80164c6 <__sflush_r+0xae>
 80164f2:	6a21      	ldr	r1, [r4, #32]
 80164f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80164f6:	4643      	mov	r3, r8
 80164f8:	463a      	mov	r2, r7
 80164fa:	4628      	mov	r0, r5
 80164fc:	47b0      	blx	r6
 80164fe:	2800      	cmp	r0, #0
 8016500:	dc08      	bgt.n	8016514 <__sflush_r+0xfc>
 8016502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801650a:	81a3      	strh	r3, [r4, #12]
 801650c:	f04f 30ff 	mov.w	r0, #4294967295
 8016510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016514:	4407      	add	r7, r0
 8016516:	eba8 0800 	sub.w	r8, r8, r0
 801651a:	e7e7      	b.n	80164ec <__sflush_r+0xd4>
 801651c:	dfbffffe 	.word	0xdfbffffe

08016520 <_fflush_r>:
 8016520:	b538      	push	{r3, r4, r5, lr}
 8016522:	690b      	ldr	r3, [r1, #16]
 8016524:	4605      	mov	r5, r0
 8016526:	460c      	mov	r4, r1
 8016528:	b913      	cbnz	r3, 8016530 <_fflush_r+0x10>
 801652a:	2500      	movs	r5, #0
 801652c:	4628      	mov	r0, r5
 801652e:	bd38      	pop	{r3, r4, r5, pc}
 8016530:	b118      	cbz	r0, 801653a <_fflush_r+0x1a>
 8016532:	6a03      	ldr	r3, [r0, #32]
 8016534:	b90b      	cbnz	r3, 801653a <_fflush_r+0x1a>
 8016536:	f7fe fcd1 	bl	8014edc <__sinit>
 801653a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d0f3      	beq.n	801652a <_fflush_r+0xa>
 8016542:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016544:	07d0      	lsls	r0, r2, #31
 8016546:	d404      	bmi.n	8016552 <_fflush_r+0x32>
 8016548:	0599      	lsls	r1, r3, #22
 801654a:	d402      	bmi.n	8016552 <_fflush_r+0x32>
 801654c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801654e:	f7fe ff18 	bl	8015382 <__retarget_lock_acquire_recursive>
 8016552:	4628      	mov	r0, r5
 8016554:	4621      	mov	r1, r4
 8016556:	f7ff ff5f 	bl	8016418 <__sflush_r>
 801655a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801655c:	07da      	lsls	r2, r3, #31
 801655e:	4605      	mov	r5, r0
 8016560:	d4e4      	bmi.n	801652c <_fflush_r+0xc>
 8016562:	89a3      	ldrh	r3, [r4, #12]
 8016564:	059b      	lsls	r3, r3, #22
 8016566:	d4e1      	bmi.n	801652c <_fflush_r+0xc>
 8016568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801656a:	f7fe ff0b 	bl	8015384 <__retarget_lock_release_recursive>
 801656e:	e7dd      	b.n	801652c <_fflush_r+0xc>

08016570 <__swhatbuf_r>:
 8016570:	b570      	push	{r4, r5, r6, lr}
 8016572:	460c      	mov	r4, r1
 8016574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016578:	2900      	cmp	r1, #0
 801657a:	b096      	sub	sp, #88	@ 0x58
 801657c:	4615      	mov	r5, r2
 801657e:	461e      	mov	r6, r3
 8016580:	da0d      	bge.n	801659e <__swhatbuf_r+0x2e>
 8016582:	89a3      	ldrh	r3, [r4, #12]
 8016584:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016588:	f04f 0100 	mov.w	r1, #0
 801658c:	bf14      	ite	ne
 801658e:	2340      	movne	r3, #64	@ 0x40
 8016590:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016594:	2000      	movs	r0, #0
 8016596:	6031      	str	r1, [r6, #0]
 8016598:	602b      	str	r3, [r5, #0]
 801659a:	b016      	add	sp, #88	@ 0x58
 801659c:	bd70      	pop	{r4, r5, r6, pc}
 801659e:	466a      	mov	r2, sp
 80165a0:	f000 f8d6 	bl	8016750 <_fstat_r>
 80165a4:	2800      	cmp	r0, #0
 80165a6:	dbec      	blt.n	8016582 <__swhatbuf_r+0x12>
 80165a8:	9901      	ldr	r1, [sp, #4]
 80165aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80165ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80165b2:	4259      	negs	r1, r3
 80165b4:	4159      	adcs	r1, r3
 80165b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80165ba:	e7eb      	b.n	8016594 <__swhatbuf_r+0x24>

080165bc <__smakebuf_r>:
 80165bc:	898b      	ldrh	r3, [r1, #12]
 80165be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80165c0:	079d      	lsls	r5, r3, #30
 80165c2:	4606      	mov	r6, r0
 80165c4:	460c      	mov	r4, r1
 80165c6:	d507      	bpl.n	80165d8 <__smakebuf_r+0x1c>
 80165c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80165cc:	6023      	str	r3, [r4, #0]
 80165ce:	6123      	str	r3, [r4, #16]
 80165d0:	2301      	movs	r3, #1
 80165d2:	6163      	str	r3, [r4, #20]
 80165d4:	b003      	add	sp, #12
 80165d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165d8:	ab01      	add	r3, sp, #4
 80165da:	466a      	mov	r2, sp
 80165dc:	f7ff ffc8 	bl	8016570 <__swhatbuf_r>
 80165e0:	9f00      	ldr	r7, [sp, #0]
 80165e2:	4605      	mov	r5, r0
 80165e4:	4639      	mov	r1, r7
 80165e6:	4630      	mov	r0, r6
 80165e8:	f7fe ff48 	bl	801547c <_malloc_r>
 80165ec:	b948      	cbnz	r0, 8016602 <__smakebuf_r+0x46>
 80165ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165f2:	059a      	lsls	r2, r3, #22
 80165f4:	d4ee      	bmi.n	80165d4 <__smakebuf_r+0x18>
 80165f6:	f023 0303 	bic.w	r3, r3, #3
 80165fa:	f043 0302 	orr.w	r3, r3, #2
 80165fe:	81a3      	strh	r3, [r4, #12]
 8016600:	e7e2      	b.n	80165c8 <__smakebuf_r+0xc>
 8016602:	89a3      	ldrh	r3, [r4, #12]
 8016604:	6020      	str	r0, [r4, #0]
 8016606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801660a:	81a3      	strh	r3, [r4, #12]
 801660c:	9b01      	ldr	r3, [sp, #4]
 801660e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016612:	b15b      	cbz	r3, 801662c <__smakebuf_r+0x70>
 8016614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016618:	4630      	mov	r0, r6
 801661a:	f000 f8ab 	bl	8016774 <_isatty_r>
 801661e:	b128      	cbz	r0, 801662c <__smakebuf_r+0x70>
 8016620:	89a3      	ldrh	r3, [r4, #12]
 8016622:	f023 0303 	bic.w	r3, r3, #3
 8016626:	f043 0301 	orr.w	r3, r3, #1
 801662a:	81a3      	strh	r3, [r4, #12]
 801662c:	89a3      	ldrh	r3, [r4, #12]
 801662e:	431d      	orrs	r5, r3
 8016630:	81a5      	strh	r5, [r4, #12]
 8016632:	e7cf      	b.n	80165d4 <__smakebuf_r+0x18>

08016634 <__sccl>:
 8016634:	b570      	push	{r4, r5, r6, lr}
 8016636:	780b      	ldrb	r3, [r1, #0]
 8016638:	4604      	mov	r4, r0
 801663a:	2b5e      	cmp	r3, #94	@ 0x5e
 801663c:	bf0b      	itete	eq
 801663e:	784b      	ldrbeq	r3, [r1, #1]
 8016640:	1c4a      	addne	r2, r1, #1
 8016642:	1c8a      	addeq	r2, r1, #2
 8016644:	2100      	movne	r1, #0
 8016646:	bf08      	it	eq
 8016648:	2101      	moveq	r1, #1
 801664a:	3801      	subs	r0, #1
 801664c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8016650:	f800 1f01 	strb.w	r1, [r0, #1]!
 8016654:	42a8      	cmp	r0, r5
 8016656:	d1fb      	bne.n	8016650 <__sccl+0x1c>
 8016658:	b90b      	cbnz	r3, 801665e <__sccl+0x2a>
 801665a:	1e50      	subs	r0, r2, #1
 801665c:	bd70      	pop	{r4, r5, r6, pc}
 801665e:	f081 0101 	eor.w	r1, r1, #1
 8016662:	54e1      	strb	r1, [r4, r3]
 8016664:	4610      	mov	r0, r2
 8016666:	4602      	mov	r2, r0
 8016668:	f812 5b01 	ldrb.w	r5, [r2], #1
 801666c:	2d2d      	cmp	r5, #45	@ 0x2d
 801666e:	d005      	beq.n	801667c <__sccl+0x48>
 8016670:	2d5d      	cmp	r5, #93	@ 0x5d
 8016672:	d016      	beq.n	80166a2 <__sccl+0x6e>
 8016674:	2d00      	cmp	r5, #0
 8016676:	d0f1      	beq.n	801665c <__sccl+0x28>
 8016678:	462b      	mov	r3, r5
 801667a:	e7f2      	b.n	8016662 <__sccl+0x2e>
 801667c:	7846      	ldrb	r6, [r0, #1]
 801667e:	2e5d      	cmp	r6, #93	@ 0x5d
 8016680:	d0fa      	beq.n	8016678 <__sccl+0x44>
 8016682:	42b3      	cmp	r3, r6
 8016684:	dcf8      	bgt.n	8016678 <__sccl+0x44>
 8016686:	3002      	adds	r0, #2
 8016688:	461a      	mov	r2, r3
 801668a:	3201      	adds	r2, #1
 801668c:	4296      	cmp	r6, r2
 801668e:	54a1      	strb	r1, [r4, r2]
 8016690:	dcfb      	bgt.n	801668a <__sccl+0x56>
 8016692:	1af2      	subs	r2, r6, r3
 8016694:	3a01      	subs	r2, #1
 8016696:	1c5d      	adds	r5, r3, #1
 8016698:	42b3      	cmp	r3, r6
 801669a:	bfa8      	it	ge
 801669c:	2200      	movge	r2, #0
 801669e:	18ab      	adds	r3, r5, r2
 80166a0:	e7e1      	b.n	8016666 <__sccl+0x32>
 80166a2:	4610      	mov	r0, r2
 80166a4:	e7da      	b.n	801665c <__sccl+0x28>

080166a6 <__submore>:
 80166a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166aa:	460c      	mov	r4, r1
 80166ac:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80166ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80166b2:	4299      	cmp	r1, r3
 80166b4:	d11d      	bne.n	80166f2 <__submore+0x4c>
 80166b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80166ba:	f7fe fedf 	bl	801547c <_malloc_r>
 80166be:	b918      	cbnz	r0, 80166c8 <__submore+0x22>
 80166c0:	f04f 30ff 	mov.w	r0, #4294967295
 80166c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80166cc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80166ce:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80166d2:	6360      	str	r0, [r4, #52]	@ 0x34
 80166d4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80166d8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80166dc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80166e0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80166e4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80166e8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80166ec:	6020      	str	r0, [r4, #0]
 80166ee:	2000      	movs	r0, #0
 80166f0:	e7e8      	b.n	80166c4 <__submore+0x1e>
 80166f2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80166f4:	0077      	lsls	r7, r6, #1
 80166f6:	463a      	mov	r2, r7
 80166f8:	f000 f85c 	bl	80167b4 <_realloc_r>
 80166fc:	4605      	mov	r5, r0
 80166fe:	2800      	cmp	r0, #0
 8016700:	d0de      	beq.n	80166c0 <__submore+0x1a>
 8016702:	eb00 0806 	add.w	r8, r0, r6
 8016706:	4601      	mov	r1, r0
 8016708:	4632      	mov	r2, r6
 801670a:	4640      	mov	r0, r8
 801670c:	f7fe fe3b 	bl	8015386 <memcpy>
 8016710:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8016714:	f8c4 8000 	str.w	r8, [r4]
 8016718:	e7e9      	b.n	80166ee <__submore+0x48>

0801671a <memmove>:
 801671a:	4288      	cmp	r0, r1
 801671c:	b510      	push	{r4, lr}
 801671e:	eb01 0402 	add.w	r4, r1, r2
 8016722:	d902      	bls.n	801672a <memmove+0x10>
 8016724:	4284      	cmp	r4, r0
 8016726:	4623      	mov	r3, r4
 8016728:	d807      	bhi.n	801673a <memmove+0x20>
 801672a:	1e43      	subs	r3, r0, #1
 801672c:	42a1      	cmp	r1, r4
 801672e:	d008      	beq.n	8016742 <memmove+0x28>
 8016730:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016734:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016738:	e7f8      	b.n	801672c <memmove+0x12>
 801673a:	4402      	add	r2, r0
 801673c:	4601      	mov	r1, r0
 801673e:	428a      	cmp	r2, r1
 8016740:	d100      	bne.n	8016744 <memmove+0x2a>
 8016742:	bd10      	pop	{r4, pc}
 8016744:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016748:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801674c:	e7f7      	b.n	801673e <memmove+0x24>
	...

08016750 <_fstat_r>:
 8016750:	b538      	push	{r3, r4, r5, lr}
 8016752:	4d07      	ldr	r5, [pc, #28]	@ (8016770 <_fstat_r+0x20>)
 8016754:	2300      	movs	r3, #0
 8016756:	4604      	mov	r4, r0
 8016758:	4608      	mov	r0, r1
 801675a:	4611      	mov	r1, r2
 801675c:	602b      	str	r3, [r5, #0]
 801675e:	f7eb fe68 	bl	8002432 <_fstat>
 8016762:	1c43      	adds	r3, r0, #1
 8016764:	d102      	bne.n	801676c <_fstat_r+0x1c>
 8016766:	682b      	ldr	r3, [r5, #0]
 8016768:	b103      	cbz	r3, 801676c <_fstat_r+0x1c>
 801676a:	6023      	str	r3, [r4, #0]
 801676c:	bd38      	pop	{r3, r4, r5, pc}
 801676e:	bf00      	nop
 8016770:	24004e64 	.word	0x24004e64

08016774 <_isatty_r>:
 8016774:	b538      	push	{r3, r4, r5, lr}
 8016776:	4d06      	ldr	r5, [pc, #24]	@ (8016790 <_isatty_r+0x1c>)
 8016778:	2300      	movs	r3, #0
 801677a:	4604      	mov	r4, r0
 801677c:	4608      	mov	r0, r1
 801677e:	602b      	str	r3, [r5, #0]
 8016780:	f7eb fe67 	bl	8002452 <_isatty>
 8016784:	1c43      	adds	r3, r0, #1
 8016786:	d102      	bne.n	801678e <_isatty_r+0x1a>
 8016788:	682b      	ldr	r3, [r5, #0]
 801678a:	b103      	cbz	r3, 801678e <_isatty_r+0x1a>
 801678c:	6023      	str	r3, [r4, #0]
 801678e:	bd38      	pop	{r3, r4, r5, pc}
 8016790:	24004e64 	.word	0x24004e64

08016794 <_sbrk_r>:
 8016794:	b538      	push	{r3, r4, r5, lr}
 8016796:	4d06      	ldr	r5, [pc, #24]	@ (80167b0 <_sbrk_r+0x1c>)
 8016798:	2300      	movs	r3, #0
 801679a:	4604      	mov	r4, r0
 801679c:	4608      	mov	r0, r1
 801679e:	602b      	str	r3, [r5, #0]
 80167a0:	f7eb fe70 	bl	8002484 <_sbrk>
 80167a4:	1c43      	adds	r3, r0, #1
 80167a6:	d102      	bne.n	80167ae <_sbrk_r+0x1a>
 80167a8:	682b      	ldr	r3, [r5, #0]
 80167aa:	b103      	cbz	r3, 80167ae <_sbrk_r+0x1a>
 80167ac:	6023      	str	r3, [r4, #0]
 80167ae:	bd38      	pop	{r3, r4, r5, pc}
 80167b0:	24004e64 	.word	0x24004e64

080167b4 <_realloc_r>:
 80167b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167b8:	4680      	mov	r8, r0
 80167ba:	4615      	mov	r5, r2
 80167bc:	460c      	mov	r4, r1
 80167be:	b921      	cbnz	r1, 80167ca <_realloc_r+0x16>
 80167c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167c4:	4611      	mov	r1, r2
 80167c6:	f7fe be59 	b.w	801547c <_malloc_r>
 80167ca:	b92a      	cbnz	r2, 80167d8 <_realloc_r+0x24>
 80167cc:	f7fe fdea 	bl	80153a4 <_free_r>
 80167d0:	2400      	movs	r4, #0
 80167d2:	4620      	mov	r0, r4
 80167d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167d8:	f000 f906 	bl	80169e8 <_malloc_usable_size_r>
 80167dc:	4285      	cmp	r5, r0
 80167de:	4606      	mov	r6, r0
 80167e0:	d802      	bhi.n	80167e8 <_realloc_r+0x34>
 80167e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80167e6:	d8f4      	bhi.n	80167d2 <_realloc_r+0x1e>
 80167e8:	4629      	mov	r1, r5
 80167ea:	4640      	mov	r0, r8
 80167ec:	f7fe fe46 	bl	801547c <_malloc_r>
 80167f0:	4607      	mov	r7, r0
 80167f2:	2800      	cmp	r0, #0
 80167f4:	d0ec      	beq.n	80167d0 <_realloc_r+0x1c>
 80167f6:	42b5      	cmp	r5, r6
 80167f8:	462a      	mov	r2, r5
 80167fa:	4621      	mov	r1, r4
 80167fc:	bf28      	it	cs
 80167fe:	4632      	movcs	r2, r6
 8016800:	f7fe fdc1 	bl	8015386 <memcpy>
 8016804:	4621      	mov	r1, r4
 8016806:	4640      	mov	r0, r8
 8016808:	f7fe fdcc 	bl	80153a4 <_free_r>
 801680c:	463c      	mov	r4, r7
 801680e:	e7e0      	b.n	80167d2 <_realloc_r+0x1e>

08016810 <_strtol_l.constprop.0>:
 8016810:	2b24      	cmp	r3, #36	@ 0x24
 8016812:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016816:	4686      	mov	lr, r0
 8016818:	4690      	mov	r8, r2
 801681a:	d801      	bhi.n	8016820 <_strtol_l.constprop.0+0x10>
 801681c:	2b01      	cmp	r3, #1
 801681e:	d106      	bne.n	801682e <_strtol_l.constprop.0+0x1e>
 8016820:	f7fe fd84 	bl	801532c <__errno>
 8016824:	2316      	movs	r3, #22
 8016826:	6003      	str	r3, [r0, #0]
 8016828:	2000      	movs	r0, #0
 801682a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801682e:	4834      	ldr	r0, [pc, #208]	@ (8016900 <_strtol_l.constprop.0+0xf0>)
 8016830:	460d      	mov	r5, r1
 8016832:	462a      	mov	r2, r5
 8016834:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016838:	5d06      	ldrb	r6, [r0, r4]
 801683a:	f016 0608 	ands.w	r6, r6, #8
 801683e:	d1f8      	bne.n	8016832 <_strtol_l.constprop.0+0x22>
 8016840:	2c2d      	cmp	r4, #45	@ 0x2d
 8016842:	d12d      	bne.n	80168a0 <_strtol_l.constprop.0+0x90>
 8016844:	782c      	ldrb	r4, [r5, #0]
 8016846:	2601      	movs	r6, #1
 8016848:	1c95      	adds	r5, r2, #2
 801684a:	f033 0210 	bics.w	r2, r3, #16
 801684e:	d109      	bne.n	8016864 <_strtol_l.constprop.0+0x54>
 8016850:	2c30      	cmp	r4, #48	@ 0x30
 8016852:	d12a      	bne.n	80168aa <_strtol_l.constprop.0+0x9a>
 8016854:	782a      	ldrb	r2, [r5, #0]
 8016856:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801685a:	2a58      	cmp	r2, #88	@ 0x58
 801685c:	d125      	bne.n	80168aa <_strtol_l.constprop.0+0x9a>
 801685e:	786c      	ldrb	r4, [r5, #1]
 8016860:	2310      	movs	r3, #16
 8016862:	3502      	adds	r5, #2
 8016864:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016868:	f10c 3cff 	add.w	ip, ip, #4294967295
 801686c:	2200      	movs	r2, #0
 801686e:	fbbc f9f3 	udiv	r9, ip, r3
 8016872:	4610      	mov	r0, r2
 8016874:	fb03 ca19 	mls	sl, r3, r9, ip
 8016878:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801687c:	2f09      	cmp	r7, #9
 801687e:	d81b      	bhi.n	80168b8 <_strtol_l.constprop.0+0xa8>
 8016880:	463c      	mov	r4, r7
 8016882:	42a3      	cmp	r3, r4
 8016884:	dd27      	ble.n	80168d6 <_strtol_l.constprop.0+0xc6>
 8016886:	1c57      	adds	r7, r2, #1
 8016888:	d007      	beq.n	801689a <_strtol_l.constprop.0+0x8a>
 801688a:	4581      	cmp	r9, r0
 801688c:	d320      	bcc.n	80168d0 <_strtol_l.constprop.0+0xc0>
 801688e:	d101      	bne.n	8016894 <_strtol_l.constprop.0+0x84>
 8016890:	45a2      	cmp	sl, r4
 8016892:	db1d      	blt.n	80168d0 <_strtol_l.constprop.0+0xc0>
 8016894:	fb00 4003 	mla	r0, r0, r3, r4
 8016898:	2201      	movs	r2, #1
 801689a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801689e:	e7eb      	b.n	8016878 <_strtol_l.constprop.0+0x68>
 80168a0:	2c2b      	cmp	r4, #43	@ 0x2b
 80168a2:	bf04      	itt	eq
 80168a4:	782c      	ldrbeq	r4, [r5, #0]
 80168a6:	1c95      	addeq	r5, r2, #2
 80168a8:	e7cf      	b.n	801684a <_strtol_l.constprop.0+0x3a>
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d1da      	bne.n	8016864 <_strtol_l.constprop.0+0x54>
 80168ae:	2c30      	cmp	r4, #48	@ 0x30
 80168b0:	bf0c      	ite	eq
 80168b2:	2308      	moveq	r3, #8
 80168b4:	230a      	movne	r3, #10
 80168b6:	e7d5      	b.n	8016864 <_strtol_l.constprop.0+0x54>
 80168b8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80168bc:	2f19      	cmp	r7, #25
 80168be:	d801      	bhi.n	80168c4 <_strtol_l.constprop.0+0xb4>
 80168c0:	3c37      	subs	r4, #55	@ 0x37
 80168c2:	e7de      	b.n	8016882 <_strtol_l.constprop.0+0x72>
 80168c4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80168c8:	2f19      	cmp	r7, #25
 80168ca:	d804      	bhi.n	80168d6 <_strtol_l.constprop.0+0xc6>
 80168cc:	3c57      	subs	r4, #87	@ 0x57
 80168ce:	e7d8      	b.n	8016882 <_strtol_l.constprop.0+0x72>
 80168d0:	f04f 32ff 	mov.w	r2, #4294967295
 80168d4:	e7e1      	b.n	801689a <_strtol_l.constprop.0+0x8a>
 80168d6:	1c53      	adds	r3, r2, #1
 80168d8:	d108      	bne.n	80168ec <_strtol_l.constprop.0+0xdc>
 80168da:	2322      	movs	r3, #34	@ 0x22
 80168dc:	f8ce 3000 	str.w	r3, [lr]
 80168e0:	4660      	mov	r0, ip
 80168e2:	f1b8 0f00 	cmp.w	r8, #0
 80168e6:	d0a0      	beq.n	801682a <_strtol_l.constprop.0+0x1a>
 80168e8:	1e69      	subs	r1, r5, #1
 80168ea:	e006      	b.n	80168fa <_strtol_l.constprop.0+0xea>
 80168ec:	b106      	cbz	r6, 80168f0 <_strtol_l.constprop.0+0xe0>
 80168ee:	4240      	negs	r0, r0
 80168f0:	f1b8 0f00 	cmp.w	r8, #0
 80168f4:	d099      	beq.n	801682a <_strtol_l.constprop.0+0x1a>
 80168f6:	2a00      	cmp	r2, #0
 80168f8:	d1f6      	bne.n	80168e8 <_strtol_l.constprop.0+0xd8>
 80168fa:	f8c8 1000 	str.w	r1, [r8]
 80168fe:	e794      	b.n	801682a <_strtol_l.constprop.0+0x1a>
 8016900:	0801718f 	.word	0x0801718f

08016904 <_strtol_r>:
 8016904:	f7ff bf84 	b.w	8016810 <_strtol_l.constprop.0>

08016908 <_strtoul_l.constprop.0>:
 8016908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801690c:	4e34      	ldr	r6, [pc, #208]	@ (80169e0 <_strtoul_l.constprop.0+0xd8>)
 801690e:	4686      	mov	lr, r0
 8016910:	460d      	mov	r5, r1
 8016912:	4628      	mov	r0, r5
 8016914:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016918:	5d37      	ldrb	r7, [r6, r4]
 801691a:	f017 0708 	ands.w	r7, r7, #8
 801691e:	d1f8      	bne.n	8016912 <_strtoul_l.constprop.0+0xa>
 8016920:	2c2d      	cmp	r4, #45	@ 0x2d
 8016922:	d12f      	bne.n	8016984 <_strtoul_l.constprop.0+0x7c>
 8016924:	782c      	ldrb	r4, [r5, #0]
 8016926:	2701      	movs	r7, #1
 8016928:	1c85      	adds	r5, r0, #2
 801692a:	f033 0010 	bics.w	r0, r3, #16
 801692e:	d109      	bne.n	8016944 <_strtoul_l.constprop.0+0x3c>
 8016930:	2c30      	cmp	r4, #48	@ 0x30
 8016932:	d12c      	bne.n	801698e <_strtoul_l.constprop.0+0x86>
 8016934:	7828      	ldrb	r0, [r5, #0]
 8016936:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801693a:	2858      	cmp	r0, #88	@ 0x58
 801693c:	d127      	bne.n	801698e <_strtoul_l.constprop.0+0x86>
 801693e:	786c      	ldrb	r4, [r5, #1]
 8016940:	2310      	movs	r3, #16
 8016942:	3502      	adds	r5, #2
 8016944:	f04f 38ff 	mov.w	r8, #4294967295
 8016948:	2600      	movs	r6, #0
 801694a:	fbb8 f8f3 	udiv	r8, r8, r3
 801694e:	fb03 f908 	mul.w	r9, r3, r8
 8016952:	ea6f 0909 	mvn.w	r9, r9
 8016956:	4630      	mov	r0, r6
 8016958:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801695c:	f1bc 0f09 	cmp.w	ip, #9
 8016960:	d81c      	bhi.n	801699c <_strtoul_l.constprop.0+0x94>
 8016962:	4664      	mov	r4, ip
 8016964:	42a3      	cmp	r3, r4
 8016966:	dd2a      	ble.n	80169be <_strtoul_l.constprop.0+0xb6>
 8016968:	f1b6 3fff 	cmp.w	r6, #4294967295
 801696c:	d007      	beq.n	801697e <_strtoul_l.constprop.0+0x76>
 801696e:	4580      	cmp	r8, r0
 8016970:	d322      	bcc.n	80169b8 <_strtoul_l.constprop.0+0xb0>
 8016972:	d101      	bne.n	8016978 <_strtoul_l.constprop.0+0x70>
 8016974:	45a1      	cmp	r9, r4
 8016976:	db1f      	blt.n	80169b8 <_strtoul_l.constprop.0+0xb0>
 8016978:	fb00 4003 	mla	r0, r0, r3, r4
 801697c:	2601      	movs	r6, #1
 801697e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016982:	e7e9      	b.n	8016958 <_strtoul_l.constprop.0+0x50>
 8016984:	2c2b      	cmp	r4, #43	@ 0x2b
 8016986:	bf04      	itt	eq
 8016988:	782c      	ldrbeq	r4, [r5, #0]
 801698a:	1c85      	addeq	r5, r0, #2
 801698c:	e7cd      	b.n	801692a <_strtoul_l.constprop.0+0x22>
 801698e:	2b00      	cmp	r3, #0
 8016990:	d1d8      	bne.n	8016944 <_strtoul_l.constprop.0+0x3c>
 8016992:	2c30      	cmp	r4, #48	@ 0x30
 8016994:	bf0c      	ite	eq
 8016996:	2308      	moveq	r3, #8
 8016998:	230a      	movne	r3, #10
 801699a:	e7d3      	b.n	8016944 <_strtoul_l.constprop.0+0x3c>
 801699c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80169a0:	f1bc 0f19 	cmp.w	ip, #25
 80169a4:	d801      	bhi.n	80169aa <_strtoul_l.constprop.0+0xa2>
 80169a6:	3c37      	subs	r4, #55	@ 0x37
 80169a8:	e7dc      	b.n	8016964 <_strtoul_l.constprop.0+0x5c>
 80169aa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80169ae:	f1bc 0f19 	cmp.w	ip, #25
 80169b2:	d804      	bhi.n	80169be <_strtoul_l.constprop.0+0xb6>
 80169b4:	3c57      	subs	r4, #87	@ 0x57
 80169b6:	e7d5      	b.n	8016964 <_strtoul_l.constprop.0+0x5c>
 80169b8:	f04f 36ff 	mov.w	r6, #4294967295
 80169bc:	e7df      	b.n	801697e <_strtoul_l.constprop.0+0x76>
 80169be:	1c73      	adds	r3, r6, #1
 80169c0:	d106      	bne.n	80169d0 <_strtoul_l.constprop.0+0xc8>
 80169c2:	2322      	movs	r3, #34	@ 0x22
 80169c4:	f8ce 3000 	str.w	r3, [lr]
 80169c8:	4630      	mov	r0, r6
 80169ca:	b932      	cbnz	r2, 80169da <_strtoul_l.constprop.0+0xd2>
 80169cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169d0:	b107      	cbz	r7, 80169d4 <_strtoul_l.constprop.0+0xcc>
 80169d2:	4240      	negs	r0, r0
 80169d4:	2a00      	cmp	r2, #0
 80169d6:	d0f9      	beq.n	80169cc <_strtoul_l.constprop.0+0xc4>
 80169d8:	b106      	cbz	r6, 80169dc <_strtoul_l.constprop.0+0xd4>
 80169da:	1e69      	subs	r1, r5, #1
 80169dc:	6011      	str	r1, [r2, #0]
 80169de:	e7f5      	b.n	80169cc <_strtoul_l.constprop.0+0xc4>
 80169e0:	0801718f 	.word	0x0801718f

080169e4 <_strtoul_r>:
 80169e4:	f7ff bf90 	b.w	8016908 <_strtoul_l.constprop.0>

080169e8 <_malloc_usable_size_r>:
 80169e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169ec:	1f18      	subs	r0, r3, #4
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	bfbc      	itt	lt
 80169f2:	580b      	ldrlt	r3, [r1, r0]
 80169f4:	18c0      	addlt	r0, r0, r3
 80169f6:	4770      	bx	lr

080169f8 <_init>:
 80169f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169fa:	bf00      	nop
 80169fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169fe:	bc08      	pop	{r3}
 8016a00:	469e      	mov	lr, r3
 8016a02:	4770      	bx	lr

08016a04 <_fini>:
 8016a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a06:	bf00      	nop
 8016a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a0a:	bc08      	pop	{r3}
 8016a0c:	469e      	mov	lr, r3
 8016a0e:	4770      	bx	lr
