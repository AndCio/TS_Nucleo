/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <math.h>
#include <usbd_cdc_if.h>
#include <nuc_connection.h>
#include <total_station_interface.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_rx;

TIM_HandleTypeDef htim16;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* USER CODE BEGIN PV */
#define 	UART_BUFFER_SIZE 64
#define 	STREAM_SIZE 150
//__IO uint8_t uartBuffer[UART_BUFFER_SIZE];
//char uartBuffer[UART_BUFFER_SIZE];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_SPI2_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM16_Init(void);
/* USER CODE BEGIN PFP */
void 		process_init_SD_card( void );
void 		process_circular_buffer(void);
void 		handle_complete_packet(void);
//void file_name_request(char file_name_request, uint8_t rx_usb);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
FATFS   FatFs;                //Fatfs handle
FIL     fil;                  //File handle
FRESULT fres;                 //Result after operations
char    buf[100];
//char buffer_tx[UART_BUFFER_SIZE]="2~";
char 	*buffer_tx;
char 	*stream_sd_card;
uint8_t rx_usb[64];
int 	size_rx_usb=sizeof (rx_usb);
uint8_t uartBuffer[UART_BUFFER_SIZE];
//char *write_command=buffer;

//lista comandi
//char nome_file[16]="Prima_prova.txt";
//char 			ero_buffer[UART_BUFFER_SIZE];
char 			nome_file_txt[50];
extern char 	nome_file[50];
extern char 	*nuc_time_stamp;
extern char 	*complete_time_stamp;
extern char 	*time_stamp_TS_buffer;
extern char 	stop_stream_command;
extern ForIntegers;
//char 	zero_buffer[UART_BUFFER_SIZE];
int 	stream_started_flag, saving_data_flag, start_stream_flag,measure_finished_flag=0;
int 	search_prism_flag, start_distance_flag, get_time_stamp_flag, change_file_flag, stop_measure_flag, stop_stream_complete=0;
int 	contatore_stream;
//char get_time_stamp_command[20];
//char client_time[10]="1603889027";
// init macchina a stati
int 	machine_state=1; //1 Ricerca Prisma // 2 Time Stamp // 3 Start Stream // 4 Stop Stream
//char machine_state;
int 	ctrl=1;
int 	receive_dma_complete=0;
int 	t_1;//client time2
int 	t_2,t_3;//
char 	buffer_read[16];
//char received_buffer[45];
char 	*trigger="%";
//char *tx_usb_to_nuc;
char 	progressive_number;
uint8_t *ptr_uart_buffer;
uint8_t stream_buffer[STREAM_SIZE];
uint8_t safe_buffer[STREAM_SIZE];
uint8_t previous_buffer[STREAM_SIZE];
uint8_t dma_buffer[STREAM_SIZE];  // Buffer per la ricezione DMA di un singolo byte
uint8_t circular_buffer[STREAM_SIZE];  // Buffer circolare
volatile uint16_t write_index = 0;  // Indice di scrittura del buffer circolare
volatile uint16_t read_index = 0;  // Indice di lettura del buffer circolare
uint8_t uart_data;
uint8_t buffer_index = 0;
uint8_t data_changed = 0;

//char a
//char *tx_usb;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  ptr_uart_buffer = (uint8_t *)&uartBuffer;

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART3_UART_Init();
  MX_FATFS_Init();
  MX_SPI2_Init();
  MX_USART1_UART_Init();
  MX_USB_DEVICE_Init();
  MX_TIM16_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim16); //START TIMER
  int num_file=0;
  int open_new_file=1;
  int nuc_connection=1;
  int change_file=0;
  int point_measured_per_file=0;
  int max_point_per_file=4;
  //int max_point_per_file=20000; // 107 byte a stream -- 20000x107= 2Mbyte per 66min (20000x0,2 sec = 66 min)
  memset((uint8_t *)&uartBuffer,1,UART_BUFFER_SIZE);
  //int timer_time_1;
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
  //timer_time_1=0;
  //timer_time_2=0;
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (nuc_connection==1){
		  HAL_Delay(1000);
		  get_file_name();

		  //get_file_name( rx_usb);
		  nuc_connection=0;
	  }
	  if (open_new_file==1){
		  memset(nome_file_txt,0,size_rx_usb);
		  //k=string(num_file);
		  //sprintf(nome_file, "var%d", numero_progressivo);
		  //printf(k,"%i",num_file);
		  sprintf(progressive_number, "_%d", num_file);
		  strcat(progressive_number,".txt");
		  memcpy(nome_file_txt,nome_file, sizeof(nome_file));
		  strcat(nome_file_txt,progressive_number);
		  printf("\n nome file %s \r\n",nome_file_txt);
		  //strcat(nome_file,".txt");
		  process_init_SD_card();
		  memset((uint8_t *)&rx_usb,0,size_rx_usb);
		  num_file++;
		  open_new_file=0;
	  }


	  // Prova macchina a stati
	  switch (machine_state)
	  	  {
	  	  case 1: // Search-Prism
	  	    {
				search_prism_flag=1;
				break;
	  		}
	  	  case 2: // Start distance (Non viene fatto)
			{
				start_distance_flag=1;
				break;
			}
	  	  case 3: // Get-Time-Stamp
			{
				get_time_stamp_flag=1;
				break;
							}
	  	  case 4: //Start-Measure and Save Data
	  	  {
				start_stream_flag=1;
				break;
	  	  }
	  	  case 5: //Change file
		  {
			  	change_file_flag=1;
				break;
		  }
	  	  case 6: //Stop-Measure
		  {
			    stop_measure_flag=1;
				break;
		  }
	  	  case 7: //Stop-Measure
		  {
				measure_finished_flag=1;
				break;
		  }
	  	  }


	  if (search_prism_flag==1){
		  search_prism(search_prism_flag);
		  search_prism_flag=0;
		  machine_state=3;
	  }
	  if (start_distance_flag==1){
		  start_distance();
		  start_distance_flag=0;
		  machine_state=3;
	  	  }
	  if (get_time_stamp_flag==1){
		  ForIntegers time_stm=get_TS_time_stamp();
		  printf("Tempo di andata=%i  Tempo di ritorno= %i  delta_time=%i  tempo_rit_comp=%i" , time_stm.a,time_stm.d,time_stm.c, time_stm.b);
		  stream_sd_card=(char *)time_stamp_TS_buffer;
		  f_puts(stream_sd_card, &fil);
		  strcat(complete_time_stamp,"\r\n");
		  stream_sd_card=(char *)complete_time_stamp;
		  f_puts(stream_sd_card, &fil);
		  get_time_stamp_flag=0;
		  stream_started_flag=0;
		  f_close(&fil);
		  machine_state=4;
		  //HAL_Delay(5000);
		  //f_close(&fil);
	  	  }
	  if (start_stream_flag==1){
		   if (stream_started_flag==0){

			   start_measure();
			   stream_started_flag=1;
		   }
		   //HAL_UART_Receive_IT(&huart1, (uint8_t *)&stream_buffer, 104);
		   //HAL_UART_Receive_DMA(&huart1, (uint8_t *)&stream_buffer, STREAM_SIZE);
		   //HAL_UART_Receive_DMA(&huart1, dma_buffer, STREAM_SIZE);
		   contatore_stream=0;
		   point_measured_per_file=0;
		   //HAL_UARTEx_ReceiveToIdle_DMA(&huart1, dma_buffer, STREAM_SIZE);
		   //HAL_UART_Receive_DMA(&huart1, (uint8_t *)&stream_buffer, STREAM_SIZE);
		   //HAL_UARTEx_GetRxEventType(&huart1);
		   //__HAL_DMA_DISABLE_IT();
		   while (start_stream_flag==1 && change_file==0){
			   HAL_UARTEx_ReceiveToIdle_IT(&huart1, dma_buffer, STREAM_SIZE);
			   /*
			   HAL_UART_Receive_IT(&huart1, dma_buffer, STREAM_SIZE);
			   if (__HAL_TIM_GET_COUNTER(&htim16) - timer_time_1 >= (uint16_t) 100){ // con 100  non funziona, con 101 ricevo troppi byte
					timer_time_1=__HAL_TIM_GET_COUNTER(&htim16);
					HAL_UART_AbortReceive_IT(&huart1);
			   	}
			    */
			   if (receive_dma_complete==1){
				   handle_complete_packet();
				   point_measured_per_file++;
			   }
			   HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);

			   	   	//if (__HAL_TIM_GET_COUNTER(&htim16) - timer_time_1 >= (uint16_t) 300  && HAL_UART_Receive_DMA(&huart1, (uint8_t *)&stream_buffer, STREAM_SIZE) != HAL_BUSY){

						//timer_time_1=__HAL_TIM_GET_COUNTER(&htim16);
			   	   //	}
					if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10)==0){
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET); //G
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, RESET); //Y

						start_stream_flag=0;
						machine_state=6;
					}
					// al momento non è implementata la logica cambio file ( non durerà tanto da superare 1GB di file)
					if (point_measured_per_file==max_point_per_file){
						point_measured_per_file=0;
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET); //G
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, RESET); //Y
						//change_file=1;
						//machine_state=5;
						start_stream_flag=0;
						machine_state=6;
						//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
					}
				}
	  }
	  if (stop_measure_flag==1){
		  stop_measure();
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET); //R
		  printf("\nClosing file\r\n");
		  f_close(&fil); // close file.txt
		  start_stream_flag=0;
		  machine_state=7;
		  stop_measure_flag=0;
	  }
	 if  (change_file_flag==1){
		  printf("\nClosing file\r\n");
		  f_close(&fil); // close file.txt
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // LED_GREEN
		  //start_stream_flag=1;
		  open_new_file=1;
		  machine_state=4;
	  }
	 if  (measure_finished_flag==1){

	 	  }

	} //END WHILE LOOP
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = 64;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 12;
  RCC_OscInitStruct.PLL.PLLP = 1;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x0;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
  htim16.Init.Prescaler = 48000-1;
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.Period = 65535;
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim16.Init.RepetitionCounter = 0;
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|GPIO_PIN_12|LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LED_GREEN_Pin PB12 LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_12|LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
	if (huart->Instance == USART1) {  // Controlla che sia la tua UART
			stream_sd_card=(char *)dma_buffer;
			contatore_stream++;
			printf("\n %i Stream DMA Buffer  %s \r\n",contatore_stream,dma_buffer);
	        // Riavvia la ricezione DMA per un altro byte
	        HAL_UARTEx_ReceiveToIdle_IT(&huart1, dma_buffer, STREAM_SIZE);
	        receive_dma_complete=1;
	}
}

// Implementa la logica per processare il pacchetto completo
void handle_complete_packet(void) {
	fres = f_open(&fil,nome_file_txt, FA_WRITE | FA_OPEN_APPEND);
	f_puts(stream_sd_card, &fil);
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	printf("\n %i Stream SD Card  %s \r\n",contatore_stream,stream_sd_card);
	receive_dma_complete=0;
	f_close(&fil);
}

#ifdef __GNUC__
  /* With GCC, small printf (option LD Linker->Libraries->Small printf
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
}
/**/
void process_init_SD_card( void )
{
	/* Tolti e messi a comune. AC in data 24/04/2024
  FATFS       FatFs;                //Fatfs handle
  FIL         fil;                  //File handle
  FRESULT     fres;                 //Result after operations
  char        buf[100];
	 */
  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "1", 0);    //1=mount now
    if (fres != FR_OK)
    {
      printf("No SD Card found : (%i)\r\n", fres);
      break;
    }
    printf("SD Card Mounted Successfully!!!\r\n");

    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;

    f_getfree("1", &fre_clust, &pfs);
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);

    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\r\n", totalSpace, freeSpace);
    //Open the file
    fres = f_open(&fil, nome_file_txt, FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
    if(fres != FR_OK){
		  printf("File creation/open Error : (%i)\r\n", fres);
		  break;
    }
    /*
    //Open the file
    fres = f_open(&fil, nome_file, FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
    if(fres != FR_OK)
    {
      printf("File creation/open Error : (%i)\r\n", fres);
     break;
    }

    printf("Writing data!!!\r\n");
    //write the data
    //f_puts("Welcome to EmbeTronicX", &fil);
    f_puts(stop_distance_command, &fil);
    f_puts("\n", &fil);
    f_puts(complete_prism_search_command, &fil);
    //close your file
    f_close(&fil);

    //Open the file
    fres = f_open(&fil, nome_file, FA_READ);
    if(fres != FR_OK)
    {
      printf("File opening Error : (%i)\r\n", fres);
      break;
    }

    //read the data
    f_gets(buf, sizeof(buf), &fil);

    printf("Read Data : %s\r\n", buf);

    //close your file
    f_close(&fil);
    printf("Closing File!!!\r\n");
#if 0
    //Delete the file.
    fres = f_unlink(EmbeTronicX.txt);
    if (fres != FR_OK)
    {
      printf("Cannot able to delete the file\n");
    }
#endif
*/
  } while( false );
  /*
  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
  printf("SD Card Unmounted Successfully!!!\r\n");
  */
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
