
provaRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cfc  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008fc8  08008fc8  00009fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009010  08009010  0000a010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009018  08009018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800901c  0800901c  0000a01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000050  24000000  08009020  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001b8  24000050  08009070  0000b050  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000208  08009070  0000b208  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b050  2**0
                  CONTENTS, READONLY
 10 .debug_info   000106e5  00000000  00000000  0000b07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001f8c  00000000  00000000  0001b763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ad8  00000000  00000000  0001d6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000085d  00000000  00000000  0001e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031579  00000000  00000000  0001ea25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010852  00000000  00000000  0004ff9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013f8b0  00000000  00000000  000607f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a00a0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c98  00000000  00000000  001a00e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005f  00000000  00000000  001a2d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000050 	.word	0x24000050
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08008fb0 	.word	0x08008fb0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000054 	.word	0x24000054
 8000308:	08008fb0 	.word	0x08008fb0

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b96a 	b.w	8000608 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	460c      	mov	r4, r1
 8000354:	2b00      	cmp	r3, #0
 8000356:	d14e      	bne.n	80003f6 <__udivmoddi4+0xaa>
 8000358:	4694      	mov	ip, r2
 800035a:	458c      	cmp	ip, r1
 800035c:	4686      	mov	lr, r0
 800035e:	fab2 f282 	clz	r2, r2
 8000362:	d962      	bls.n	800042a <__udivmoddi4+0xde>
 8000364:	b14a      	cbz	r2, 800037a <__udivmoddi4+0x2e>
 8000366:	f1c2 0320 	rsb	r3, r2, #32
 800036a:	4091      	lsls	r1, r2
 800036c:	fa20 f303 	lsr.w	r3, r0, r3
 8000370:	fa0c fc02 	lsl.w	ip, ip, r2
 8000374:	4319      	orrs	r1, r3
 8000376:	fa00 fe02 	lsl.w	lr, r0, r2
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f f68c 	uxth.w	r6, ip
 8000382:	fbb1 f4f7 	udiv	r4, r1, r7
 8000386:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038a:	fb07 1114 	mls	r1, r7, r4, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb04 f106 	mul.w	r1, r4, r6
 8000396:	4299      	cmp	r1, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x64>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f104 30ff 	add.w	r0, r4, #4294967295
 80003a2:	f080 8112 	bcs.w	80005ca <__udivmoddi4+0x27e>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 810f 	bls.w	80005ca <__udivmoddi4+0x27e>
 80003ac:	3c02      	subs	r4, #2
 80003ae:	4463      	add	r3, ip
 80003b0:	1a59      	subs	r1, r3, r1
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ba:	fb07 1110 	mls	r1, r7, r0, r1
 80003be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c2:	fb00 f606 	mul.w	r6, r0, r6
 80003c6:	429e      	cmp	r6, r3
 80003c8:	d90a      	bls.n	80003e0 <__udivmoddi4+0x94>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d2:	f080 80fc 	bcs.w	80005ce <__udivmoddi4+0x282>
 80003d6:	429e      	cmp	r6, r3
 80003d8:	f240 80f9 	bls.w	80005ce <__udivmoddi4+0x282>
 80003dc:	4463      	add	r3, ip
 80003de:	3802      	subs	r0, #2
 80003e0:	1b9b      	subs	r3, r3, r6
 80003e2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11d      	cbz	r5, 80003f2 <__udivmoddi4+0xa6>
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	2200      	movs	r2, #0
 80003ee:	e9c5 3200 	strd	r3, r2, [r5]
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d905      	bls.n	8000406 <__udivmoddi4+0xba>
 80003fa:	b10d      	cbz	r5, 8000400 <__udivmoddi4+0xb4>
 80003fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	4608      	mov	r0, r1
 8000404:	e7f5      	b.n	80003f2 <__udivmoddi4+0xa6>
 8000406:	fab3 f183 	clz	r1, r3
 800040a:	2900      	cmp	r1, #0
 800040c:	d146      	bne.n	800049c <__udivmoddi4+0x150>
 800040e:	42a3      	cmp	r3, r4
 8000410:	d302      	bcc.n	8000418 <__udivmoddi4+0xcc>
 8000412:	4290      	cmp	r0, r2
 8000414:	f0c0 80f0 	bcc.w	80005f8 <__udivmoddi4+0x2ac>
 8000418:	1a86      	subs	r6, r0, r2
 800041a:	eb64 0303 	sbc.w	r3, r4, r3
 800041e:	2001      	movs	r0, #1
 8000420:	2d00      	cmp	r5, #0
 8000422:	d0e6      	beq.n	80003f2 <__udivmoddi4+0xa6>
 8000424:	e9c5 6300 	strd	r6, r3, [r5]
 8000428:	e7e3      	b.n	80003f2 <__udivmoddi4+0xa6>
 800042a:	2a00      	cmp	r2, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x204>
 8000430:	eba1 040c 	sub.w	r4, r1, ip
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	2101      	movs	r1, #1
 800043e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000442:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000446:	fb08 4416 	mls	r4, r8, r6, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb07 f006 	mul.w	r0, r7, r6
 8000452:	4298      	cmp	r0, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x11c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f106 34ff 	add.w	r4, r6, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x11a>
 8000460:	4298      	cmp	r0, r3
 8000462:	f200 80cd 	bhi.w	8000600 <__udivmoddi4+0x2b4>
 8000466:	4626      	mov	r6, r4
 8000468:	1a1c      	subs	r4, r3, r0
 800046a:	fa1f f38e 	uxth.w	r3, lr
 800046e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000472:	fb08 4410 	mls	r4, r8, r0, r4
 8000476:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047a:	fb00 f707 	mul.w	r7, r0, r7
 800047e:	429f      	cmp	r7, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x148>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 34ff 	add.w	r4, r0, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0x146>
 800048c:	429f      	cmp	r7, r3
 800048e:	f200 80b0 	bhi.w	80005f2 <__udivmoddi4+0x2a6>
 8000492:	4620      	mov	r0, r4
 8000494:	1bdb      	subs	r3, r3, r7
 8000496:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049a:	e7a5      	b.n	80003e8 <__udivmoddi4+0x9c>
 800049c:	f1c1 0620 	rsb	r6, r1, #32
 80004a0:	408b      	lsls	r3, r1
 80004a2:	fa22 f706 	lsr.w	r7, r2, r6
 80004a6:	431f      	orrs	r7, r3
 80004a8:	fa20 fc06 	lsr.w	ip, r0, r6
 80004ac:	fa04 f301 	lsl.w	r3, r4, r1
 80004b0:	ea43 030c 	orr.w	r3, r3, ip
 80004b4:	40f4      	lsrs	r4, r6
 80004b6:	fa00 f801 	lsl.w	r8, r0, r1
 80004ba:	0c38      	lsrs	r0, r7, #16
 80004bc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c0:	fbb4 fef0 	udiv	lr, r4, r0
 80004c4:	fa1f fc87 	uxth.w	ip, r7
 80004c8:	fb00 441e 	mls	r4, r0, lr, r4
 80004cc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d0:	fb0e f90c 	mul.w	r9, lr, ip
 80004d4:	45a1      	cmp	r9, r4
 80004d6:	fa02 f201 	lsl.w	r2, r2, r1
 80004da:	d90a      	bls.n	80004f2 <__udivmoddi4+0x1a6>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004e2:	f080 8084 	bcs.w	80005ee <__udivmoddi4+0x2a2>
 80004e6:	45a1      	cmp	r9, r4
 80004e8:	f240 8081 	bls.w	80005ee <__udivmoddi4+0x2a2>
 80004ec:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	eba4 0409 	sub.w	r4, r4, r9
 80004f6:	fa1f f983 	uxth.w	r9, r3
 80004fa:	fbb4 f3f0 	udiv	r3, r4, r0
 80004fe:	fb00 4413 	mls	r4, r0, r3, r4
 8000502:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000506:	fb03 fc0c 	mul.w	ip, r3, ip
 800050a:	45a4      	cmp	ip, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x1d2>
 800050e:	193c      	adds	r4, r7, r4
 8000510:	f103 30ff 	add.w	r0, r3, #4294967295
 8000514:	d267      	bcs.n	80005e6 <__udivmoddi4+0x29a>
 8000516:	45a4      	cmp	ip, r4
 8000518:	d965      	bls.n	80005e6 <__udivmoddi4+0x29a>
 800051a:	3b02      	subs	r3, #2
 800051c:	443c      	add	r4, r7
 800051e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000522:	fba0 9302 	umull	r9, r3, r0, r2
 8000526:	eba4 040c 	sub.w	r4, r4, ip
 800052a:	429c      	cmp	r4, r3
 800052c:	46ce      	mov	lr, r9
 800052e:	469c      	mov	ip, r3
 8000530:	d351      	bcc.n	80005d6 <__udivmoddi4+0x28a>
 8000532:	d04e      	beq.n	80005d2 <__udivmoddi4+0x286>
 8000534:	b155      	cbz	r5, 800054c <__udivmoddi4+0x200>
 8000536:	ebb8 030e 	subs.w	r3, r8, lr
 800053a:	eb64 040c 	sbc.w	r4, r4, ip
 800053e:	fa04 f606 	lsl.w	r6, r4, r6
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431e      	orrs	r6, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	e9c5 6400 	strd	r6, r4, [r5]
 800054c:	2100      	movs	r1, #0
 800054e:	e750      	b.n	80003f2 <__udivmoddi4+0xa6>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f103 	lsr.w	r1, r0, r3
 8000558:	fa0c fc02 	lsl.w	ip, ip, r2
 800055c:	fa24 f303 	lsr.w	r3, r4, r3
 8000560:	4094      	lsls	r4, r2
 8000562:	430c      	orrs	r4, r1
 8000564:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000568:	fa00 fe02 	lsl.w	lr, r0, r2
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	fbb3 f0f8 	udiv	r0, r3, r8
 8000574:	fb08 3110 	mls	r1, r8, r0, r3
 8000578:	0c23      	lsrs	r3, r4, #16
 800057a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057e:	fb00 f107 	mul.w	r1, r0, r7
 8000582:	4299      	cmp	r1, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x24c>
 8000586:	eb1c 0303 	adds.w	r3, ip, r3
 800058a:	f100 36ff 	add.w	r6, r0, #4294967295
 800058e:	d22c      	bcs.n	80005ea <__udivmoddi4+0x29e>
 8000590:	4299      	cmp	r1, r3
 8000592:	d92a      	bls.n	80005ea <__udivmoddi4+0x29e>
 8000594:	3802      	subs	r0, #2
 8000596:	4463      	add	r3, ip
 8000598:	1a5b      	subs	r3, r3, r1
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a0:	fb08 3311 	mls	r3, r8, r1, r3
 80005a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005a8:	fb01 f307 	mul.w	r3, r1, r7
 80005ac:	42a3      	cmp	r3, r4
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x276>
 80005b0:	eb1c 0404 	adds.w	r4, ip, r4
 80005b4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005b8:	d213      	bcs.n	80005e2 <__udivmoddi4+0x296>
 80005ba:	42a3      	cmp	r3, r4
 80005bc:	d911      	bls.n	80005e2 <__udivmoddi4+0x296>
 80005be:	3902      	subs	r1, #2
 80005c0:	4464      	add	r4, ip
 80005c2:	1ae4      	subs	r4, r4, r3
 80005c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005c8:	e739      	b.n	800043e <__udivmoddi4+0xf2>
 80005ca:	4604      	mov	r4, r0
 80005cc:	e6f0      	b.n	80003b0 <__udivmoddi4+0x64>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e706      	b.n	80003e0 <__udivmoddi4+0x94>
 80005d2:	45c8      	cmp	r8, r9
 80005d4:	d2ae      	bcs.n	8000534 <__udivmoddi4+0x1e8>
 80005d6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005da:	eb63 0c07 	sbc.w	ip, r3, r7
 80005de:	3801      	subs	r0, #1
 80005e0:	e7a8      	b.n	8000534 <__udivmoddi4+0x1e8>
 80005e2:	4631      	mov	r1, r6
 80005e4:	e7ed      	b.n	80005c2 <__udivmoddi4+0x276>
 80005e6:	4603      	mov	r3, r0
 80005e8:	e799      	b.n	800051e <__udivmoddi4+0x1d2>
 80005ea:	4630      	mov	r0, r6
 80005ec:	e7d4      	b.n	8000598 <__udivmoddi4+0x24c>
 80005ee:	46d6      	mov	lr, sl
 80005f0:	e77f      	b.n	80004f2 <__udivmoddi4+0x1a6>
 80005f2:	4463      	add	r3, ip
 80005f4:	3802      	subs	r0, #2
 80005f6:	e74d      	b.n	8000494 <__udivmoddi4+0x148>
 80005f8:	4606      	mov	r6, r0
 80005fa:	4623      	mov	r3, r4
 80005fc:	4608      	mov	r0, r1
 80005fe:	e70f      	b.n	8000420 <__udivmoddi4+0xd4>
 8000600:	3e02      	subs	r6, #2
 8000602:	4463      	add	r3, ip
 8000604:	e730      	b.n	8000468 <__udivmoddi4+0x11c>
 8000606:	bf00      	nop

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	buffer_tx=stop_distance_command; //per agganciarsi
 8000612:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <main+0x94>)
 8000614:	4a23      	ldr	r2, [pc, #140]	@ (80006a4 <main+0x98>)
 8000616:	601a      	str	r2, [r3, #0]
	//buffer_tx="~2";
	strcat(client_time, "\r");
 8000618:	4823      	ldr	r0, [pc, #140]	@ (80006a8 <main+0x9c>)
 800061a:	f7ff fe77 	bl	800030c <strlen>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <main+0x9c>)
 8000624:	4413      	add	r3, r2
 8000626:	4921      	ldr	r1, [pc, #132]	@ (80006ac <main+0xa0>)
 8000628:	461a      	mov	r2, r3
 800062a:	460b      	mov	r3, r1
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	8013      	strh	r3, [r2, #0]
	strcat(get_time_stamp_command, client_time);
 8000630:	491d      	ldr	r1, [pc, #116]	@ (80006a8 <main+0x9c>)
 8000632:	481f      	ldr	r0, [pc, #124]	@ (80006b0 <main+0xa4>)
 8000634:	f008 fc88 	bl	8008f48 <strcat>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fc66 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f842 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f924 	bl	800088c <MX_GPIO_Init>
  MX_DMA_Init();
 8000644:	f000 f8fa 	bl	800083c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000648:	f000 f8ac 	bl	80007a4 <MX_USART1_UART_Init>
  //memset((uint8_t *)&uartBuffer,0,sizeof(uartBuffer)); //Clear buffer
  //HAL_UART_Receive(&huart1, (uint8_t *)&uartBuffer, UART_BUFFER_SIZE,0);
  //HAL_UART_Receive_IT(&huart1, (uint8_t *)&uartBuffer, UART_BUFFER_SIZE);
  //HAL_UART_Receive(&huart1, (uint8_t *)&uartBuffer, UART_BUFFER_SIZE,0);
  //HAL_UART_Receive_DMA(&huart1, (uint8_t *)&uartBuffer, UART_BUFFER_SIZE);
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)&uartBuffer, UART_BUFFER_SIZE);
 800064c:	2210      	movs	r2, #16
 800064e:	4919      	ldr	r1, [pc, #100]	@ (80006b4 <main+0xa8>)
 8000650:	4819      	ldr	r0, [pc, #100]	@ (80006b8 <main+0xac>)
 8000652:	f006 fc73 	bl	8006f3c <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //uint16_t timer_time_1 =1000;
  int first_search=1;
 8000656:	2301      	movs	r3, #1
 8000658:	607b      	str	r3, [r7, #4]
  //int waited_time;
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 800065a:	2102      	movs	r1, #2
 800065c:	4817      	ldr	r0, [pc, #92]	@ (80006bc <main+0xb0>)
 800065e:	f003 fe12 	bl	8004286 <HAL_GPIO_TogglePin>
	  //HAL_UART_Receive(&huart1, (uint8_t *)&uartBuffer, UART_BUFFER_SIZE,0);

	  //HAL_UART_Receive(&huart1, (uint8_t *)&uartBuffer, UART_BUFFER_SIZE,0);
	  //HAL_UART_Receive_IT(&huart1, (uint8_t *)&uartBuffer, UART_BUFFER_SIZE);

	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer_tx, UART_BUFFER_SIZE,UART_BUFFER_SIZE); // ultimo valore è il timeout (ovvero dopo quanti baud si interrompe - con 0 mandava solo il 1° carattere)
 8000662:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <main+0x94>)
 8000664:	6819      	ldr	r1, [r3, #0]
 8000666:	2310      	movs	r3, #16
 8000668:	2210      	movs	r2, #16
 800066a:	4813      	ldr	r0, [pc, #76]	@ (80006b8 <main+0xac>)
 800066c:	f006 fbd8 	bl	8006e20 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000670:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000674:	f000 fcda 	bl	800102c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8000678:	2102      	movs	r1, #2
 800067a:	4810      	ldr	r0, [pc, #64]	@ (80006bc <main+0xb0>)
 800067c:	f003 fe03 	bl	8004286 <HAL_GPIO_TogglePin>
	  if (first_search==1){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d105      	bne.n	8000692 <main+0x86>
		  buffer_tx=complete_prism_search_command;
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <main+0x94>)
 8000688:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <main+0xb4>)
 800068a:	601a      	str	r2, [r3, #0]
		  first_search=0;
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	e7e7      	b.n	8000662 <main+0x56>
	  }
	  else{

		  buffer_tx=stop_distance_command;
 8000692:	4b03      	ldr	r3, [pc, #12]	@ (80006a0 <main+0x94>)
 8000694:	4a03      	ldr	r2, [pc, #12]	@ (80006a4 <main+0x98>)
 8000696:	601a      	str	r2, [r3, #0]
		  first_search=1;
 8000698:	2301      	movs	r3, #1
 800069a:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer_tx, UART_BUFFER_SIZE,UART_BUFFER_SIZE); // ultimo valore è il timeout (ovvero dopo quanti baud si interrompe - con 0 mandava solo il 1° carattere)
 800069c:	e7e1      	b.n	8000662 <main+0x56>
 800069e:	bf00      	nop
 80006a0:	24000200 	.word	0x24000200
 80006a4:	24000000 	.word	0x24000000
 80006a8:	24000034 	.word	0x24000034
 80006ac:	08008fcc 	.word	0x08008fcc
 80006b0:	24000020 	.word	0x24000020
 80006b4:	240001f0 	.word	0x240001f0
 80006b8:	2400006c 	.word	0x2400006c
 80006bc:	58021000 	.word	0x58021000
 80006c0:	24000010 	.word	0x24000010

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b09c      	sub	sp, #112	@ 0x70
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ce:	224c      	movs	r2, #76	@ 0x4c
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f008 fc30 	bl	8008f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2220      	movs	r2, #32
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f008 fc2a 	bl	8008f38 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006e4:	2002      	movs	r0, #2
 80006e6:	f003 fde9 	bl	80042bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b2c      	ldr	r3, [pc, #176]	@ (80007a0 <SystemClock_Config+0xdc>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006f6:	4a2a      	ldr	r2, [pc, #168]	@ (80007a0 <SystemClock_Config+0xdc>)
 80006f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006fc:	6193      	str	r3, [r2, #24]
 80006fe:	4b28      	ldr	r3, [pc, #160]	@ (80007a0 <SystemClock_Config+0xdc>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800070a:	bf00      	nop
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <SystemClock_Config+0xdc>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000718:	d1f8      	bne.n	800070c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071a:	2302      	movs	r3, #2
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800071e:	2301      	movs	r3, #1
 8000720:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000722:	2340      	movs	r3, #64	@ 0x40
 8000724:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072a:	2300      	movs	r3, #0
 800072c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800072e:	2304      	movs	r3, #4
 8000730:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000732:	230c      	movs	r3, #12
 8000734:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000736:	2301      	movs	r3, #1
 8000738:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800073a:	2304      	movs	r3, #4
 800073c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073e:	2302      	movs	r3, #2
 8000740:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000742:	230c      	movs	r3, #12
 8000744:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000746:	2300      	movs	r3, #0
 8000748:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fdec 	bl	8004330 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800075e:	f000 f9d7 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	233f      	movs	r3, #63	@ 0x3f
 8000764:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2303      	movs	r3, #3
 8000768:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800076e:	2308      	movs	r3, #8
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000772:	2340      	movs	r3, #64	@ 0x40
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000776:	2340      	movs	r3, #64	@ 0x40
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800077a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800077e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000780:	2340      	movs	r3, #64	@ 0x40
 8000782:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2101      	movs	r1, #1
 8000788:	4618      	mov	r0, r3
 800078a:	f004 f9ab 	bl	8004ae4 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000794:	f000 f9bc 	bl	8000b10 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3770      	adds	r7, #112	@ 0x70
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	58024800 	.word	0x58024800

080007a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a8:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007aa:	4a23      	ldr	r2, [pc, #140]	@ (8000838 <MX_USART1_UART_Init+0x94>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ec:	4811      	ldr	r0, [pc, #68]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 80007ee:	f006 fac7 	bl	8006d80 <HAL_UART_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007f8:	f000 f98a 	bl	8000b10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fc:	2100      	movs	r1, #0
 80007fe:	480d      	ldr	r0, [pc, #52]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 8000800:	f008 facf 	bl	8008da2 <HAL_UARTEx_SetTxFifoThreshold>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800080a:	f000 f981 	bl	8000b10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4808      	ldr	r0, [pc, #32]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 8000812:	f008 fb04 	bl	8008e1e <HAL_UARTEx_SetRxFifoThreshold>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800081c:	f000 f978 	bl	8000b10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	@ (8000834 <MX_USART1_UART_Init+0x90>)
 8000822:	f008 fa85 	bl	8008d30 <HAL_UARTEx_DisableFifoMode>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800082c:	f000 f970 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2400006c 	.word	0x2400006c
 8000838:	40011000 	.word	0x40011000

0800083c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_DMA_Init+0x4c>)
 8000844:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000848:	4a0f      	ldr	r2, [pc, #60]	@ (8000888 <MX_DMA_Init+0x4c>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <MX_DMA_Init+0x4c>)
 8000854:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	200b      	movs	r0, #11
 8000866:	f000 fce0 	bl	800122a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800086a:	200b      	movs	r0, #11
 800086c:	f000 fcf7 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2100      	movs	r1, #0
 8000874:	200c      	movs	r0, #12
 8000876:	f000 fcd8 	bl	800122a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800087a:	200c      	movs	r0, #12
 800087c:	f000 fcef 	bl	800125e <HAL_NVIC_EnableIRQ>

}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	58024400 	.word	0x58024400

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	@ 0x30
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b94      	ldr	r3, [pc, #592]	@ (8000af4 <MX_GPIO_Init+0x268>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a8:	4a92      	ldr	r2, [pc, #584]	@ (8000af4 <MX_GPIO_Init+0x268>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b2:	4b90      	ldr	r3, [pc, #576]	@ (8000af4 <MX_GPIO_Init+0x268>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	61bb      	str	r3, [r7, #24]
 80008be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c0:	4b8c      	ldr	r3, [pc, #560]	@ (8000af4 <MX_GPIO_Init+0x268>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c6:	4a8b      	ldr	r2, [pc, #556]	@ (8000af4 <MX_GPIO_Init+0x268>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d0:	4b88      	ldr	r3, [pc, #544]	@ (8000af4 <MX_GPIO_Init+0x268>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b85      	ldr	r3, [pc, #532]	@ (8000af4 <MX_GPIO_Init+0x268>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e4:	4a83      	ldr	r2, [pc, #524]	@ (8000af4 <MX_GPIO_Init+0x268>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ee:	4b81      	ldr	r3, [pc, #516]	@ (8000af4 <MX_GPIO_Init+0x268>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fc:	4b7d      	ldr	r3, [pc, #500]	@ (8000af4 <MX_GPIO_Init+0x268>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	4a7c      	ldr	r2, [pc, #496]	@ (8000af4 <MX_GPIO_Init+0x268>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800090c:	4b79      	ldr	r3, [pc, #484]	@ (8000af4 <MX_GPIO_Init+0x268>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	4b76      	ldr	r3, [pc, #472]	@ (8000af4 <MX_GPIO_Init+0x268>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000920:	4a74      	ldr	r2, [pc, #464]	@ (8000af4 <MX_GPIO_Init+0x268>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092a:	4b72      	ldr	r3, [pc, #456]	@ (8000af4 <MX_GPIO_Init+0x268>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000930:	f003 0308 	and.w	r3, r3, #8
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000938:	4b6e      	ldr	r3, [pc, #440]	@ (8000af4 <MX_GPIO_Init+0x268>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093e:	4a6d      	ldr	r2, [pc, #436]	@ (8000af4 <MX_GPIO_Init+0x268>)
 8000940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000948:	4b6a      	ldr	r3, [pc, #424]	@ (8000af4 <MX_GPIO_Init+0x268>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000956:	4b67      	ldr	r3, [pc, #412]	@ (8000af4 <MX_GPIO_Init+0x268>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095c:	4a65      	ldr	r2, [pc, #404]	@ (8000af4 <MX_GPIO_Init+0x268>)
 800095e:	f043 0310 	orr.w	r3, r3, #16
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000966:	4b63      	ldr	r3, [pc, #396]	@ (8000af4 <MX_GPIO_Init+0x268>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096c:	f003 0310 	and.w	r3, r3, #16
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f244 0101 	movw	r1, #16385	@ 0x4001
 800097a:	485f      	ldr	r0, [pc, #380]	@ (8000af8 <MX_GPIO_Init+0x26c>)
 800097c:	f003 fc6a 	bl	8004254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000986:	485d      	ldr	r0, [pc, #372]	@ (8000afc <MX_GPIO_Init+0x270>)
 8000988:	f003 fc64 	bl	8004254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2102      	movs	r1, #2
 8000990:	485b      	ldr	r0, [pc, #364]	@ (8000b00 <MX_GPIO_Init+0x274>)
 8000992:	f003 fc5f 	bl	8004254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000996:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4856      	ldr	r0, [pc, #344]	@ (8000b04 <MX_GPIO_Init+0x278>)
 80009ac:	f003 faaa 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009b0:	2332      	movs	r3, #50	@ 0x32
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009c0:	230b      	movs	r3, #11
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	484e      	ldr	r0, [pc, #312]	@ (8000b04 <MX_GPIO_Init+0x278>)
 80009cc:	f003 fa9a 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009d0:	2386      	movs	r3, #134	@ 0x86
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009e0:	230b      	movs	r3, #11
 80009e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4847      	ldr	r0, [pc, #284]	@ (8000b08 <MX_GPIO_Init+0x27c>)
 80009ec:	f003 fa8a 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80009f0:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	483b      	ldr	r0, [pc, #236]	@ (8000af8 <MX_GPIO_Init+0x26c>)
 8000a0a:	f003 fa7b 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a20:	230b      	movs	r3, #11
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4833      	ldr	r0, [pc, #204]	@ (8000af8 <MX_GPIO_Init+0x26c>)
 8000a2c:	f003 fa6a 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000a30:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a42:	2307      	movs	r3, #7
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482b      	ldr	r0, [pc, #172]	@ (8000afc <MX_GPIO_Init+0x270>)
 8000a4e:	f003 fa59 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4824      	ldr	r0, [pc, #144]	@ (8000afc <MX_GPIO_Init+0x270>)
 8000a6c:	f003 fa4a 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a70:	2380      	movs	r3, #128	@ 0x80
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a74:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4821      	ldr	r0, [pc, #132]	@ (8000b0c <MX_GPIO_Init+0x280>)
 8000a86:	f003 fa3d 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a9c:	230a      	movs	r3, #10
 8000a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4818      	ldr	r0, [pc, #96]	@ (8000b08 <MX_GPIO_Init+0x27c>)
 8000aa8:	f003 fa2c 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000aac:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000abe:	230b      	movs	r3, #11
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4810      	ldr	r0, [pc, #64]	@ (8000b0c <MX_GPIO_Init+0x280>)
 8000aca:	f003 fa1b 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <MX_GPIO_Init+0x274>)
 8000ae6:	f003 fa0d 	bl	8003f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aea:	bf00      	nop
 8000aec:	3730      	adds	r7, #48	@ 0x30
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	58024400 	.word	0x58024400
 8000af8:	58020400 	.word	0x58020400
 8000afc:	58020c00 	.word	0x58020c00
 8000b00:	58021000 	.word	0x58021000
 8000b04:	58020800 	.word	0x58020800
 8000b08:	58020000 	.word	0x58020000
 8000b0c:	58021800 	.word	0x58021800

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <Error_Handler+0x8>

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <HAL_MspInit+0x30>)
 8000b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b28:	4a08      	ldr	r2, [pc, #32]	@ (8000b4c <HAL_MspInit+0x30>)
 8000b2a:	f043 0302 	orr.w	r3, r3, #2
 8000b2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_MspInit+0x30>)
 8000b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	58024400 	.word	0x58024400

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0b8      	sub	sp, #224	@ 0xe0
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	22b8      	movs	r2, #184	@ 0xb8
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f008 f9e1 	bl	8008f38 <memset>
  if(huart->Instance==USART1)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a64      	ldr	r2, [pc, #400]	@ (8000d0c <HAL_UART_MspInit+0x1bc>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	f040 80c0 	bne.w	8000d02 <HAL_UART_MspInit+0x1b2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b82:	f04f 0201 	mov.w	r2, #1
 8000b86:	f04f 0300 	mov.w	r3, #0
 8000b8a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f004 fb2f 	bl	80051fc <HAL_RCCEx_PeriphCLKConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000ba4:	f7ff ffb4 	bl	8000b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ba8:	4b59      	ldr	r3, [pc, #356]	@ (8000d10 <HAL_UART_MspInit+0x1c0>)
 8000baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000bae:	4a58      	ldr	r2, [pc, #352]	@ (8000d10 <HAL_UART_MspInit+0x1c0>)
 8000bb0:	f043 0310 	orr.w	r3, r3, #16
 8000bb4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000bb8:	4b55      	ldr	r3, [pc, #340]	@ (8000d10 <HAL_UART_MspInit+0x1c0>)
 8000bba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000bbe:	f003 0310 	and.w	r3, r3, #16
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4b52      	ldr	r3, [pc, #328]	@ (8000d10 <HAL_UART_MspInit+0x1c0>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bcc:	4a50      	ldr	r2, [pc, #320]	@ (8000d10 <HAL_UART_MspInit+0x1c0>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd6:	4b4e      	ldr	r3, [pc, #312]	@ (8000d10 <HAL_UART_MspInit+0x1c0>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000be4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000be8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000bfe:	2304      	movs	r3, #4
 8000c00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4842      	ldr	r0, [pc, #264]	@ (8000d14 <HAL_UART_MspInit+0x1c4>)
 8000c0c:	f003 f97a 	bl	8003f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c10:	2340      	movs	r3, #64	@ 0x40
 8000c12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c28:	2307      	movs	r3, #7
 8000c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c32:	4619      	mov	r1, r3
 8000c34:	4837      	ldr	r0, [pc, #220]	@ (8000d14 <HAL_UART_MspInit+0x1c4>)
 8000c36:	f003 f965 	bl	8003f04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8000c3a:	4b37      	ldr	r3, [pc, #220]	@ (8000d18 <HAL_UART_MspInit+0x1c8>)
 8000c3c:	4a37      	ldr	r2, [pc, #220]	@ (8000d1c <HAL_UART_MspInit+0x1cc>)
 8000c3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000c40:	4b35      	ldr	r3, [pc, #212]	@ (8000d18 <HAL_UART_MspInit+0x1c8>)
 8000c42:	2229      	movs	r2, #41	@ 0x29
 8000c44:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c46:	4b34      	ldr	r3, [pc, #208]	@ (8000d18 <HAL_UART_MspInit+0x1c8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4c:	4b32      	ldr	r3, [pc, #200]	@ (8000d18 <HAL_UART_MspInit+0x1c8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c52:	4b31      	ldr	r3, [pc, #196]	@ (8000d18 <HAL_UART_MspInit+0x1c8>)
 8000c54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c58:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d18 <HAL_UART_MspInit+0x1c8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c60:	4b2d      	ldr	r3, [pc, #180]	@ (8000d18 <HAL_UART_MspInit+0x1c8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c66:	4b2c      	ldr	r3, [pc, #176]	@ (8000d18 <HAL_UART_MspInit+0x1c8>)
 8000c68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c6c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d18 <HAL_UART_MspInit+0x1c8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c74:	4b28      	ldr	r3, [pc, #160]	@ (8000d18 <HAL_UART_MspInit+0x1c8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c7a:	4827      	ldr	r0, [pc, #156]	@ (8000d18 <HAL_UART_MspInit+0x1c8>)
 8000c7c:	f000 fb0a 	bl	8001294 <HAL_DMA_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000c86:	f7ff ff43 	bl	8000b10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a22      	ldr	r2, [pc, #136]	@ (8000d18 <HAL_UART_MspInit+0x1c8>)
 8000c8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000c92:	4a21      	ldr	r2, [pc, #132]	@ (8000d18 <HAL_UART_MspInit+0x1c8>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8000c98:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <HAL_UART_MspInit+0x1d0>)
 8000c9a:	4a22      	ldr	r2, [pc, #136]	@ (8000d24 <HAL_UART_MspInit+0x1d4>)
 8000c9c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000c9e:	4b20      	ldr	r3, [pc, #128]	@ (8000d20 <HAL_UART_MspInit+0x1d0>)
 8000ca0:	222a      	movs	r2, #42	@ 0x2a
 8000ca2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <HAL_UART_MspInit+0x1d0>)
 8000ca6:	2240      	movs	r2, #64	@ 0x40
 8000ca8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000caa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <HAL_UART_MspInit+0x1d0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <HAL_UART_MspInit+0x1d0>)
 8000cb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cb6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb8:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <HAL_UART_MspInit+0x1d0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cbe:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <HAL_UART_MspInit+0x1d0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000cc4:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <HAL_UART_MspInit+0x1d0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_UART_MspInit+0x1d0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cd0:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <HAL_UART_MspInit+0x1d0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000cd6:	4812      	ldr	r0, [pc, #72]	@ (8000d20 <HAL_UART_MspInit+0x1d0>)
 8000cd8:	f000 fadc 	bl	8001294 <HAL_DMA_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_UART_MspInit+0x196>
    {
      Error_Handler();
 8000ce2:	f7ff ff15 	bl	8000b10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <HAL_UART_MspInit+0x1d0>)
 8000cea:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000cec:	4a0c      	ldr	r2, [pc, #48]	@ (8000d20 <HAL_UART_MspInit+0x1d0>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2025      	movs	r0, #37	@ 0x25
 8000cf8:	f000 fa97 	bl	800122a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cfc:	2025      	movs	r0, #37	@ 0x25
 8000cfe:	f000 faae 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	37e0      	adds	r7, #224	@ 0xe0
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40011000 	.word	0x40011000
 8000d10:	58024400 	.word	0x58024400
 8000d14:	58020400 	.word	0x58020400
 8000d18:	24000100 	.word	0x24000100
 8000d1c:	40020010 	.word	0x40020010
 8000d20:	24000178 	.word	0x24000178
 8000d24:	40020028 	.word	0x40020028

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <NMI_Handler+0x4>

08000d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <MemManage_Handler+0x4>

08000d40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7e:	f000 f935 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <DMA1_Stream0_IRQHandler+0x10>)
 8000d8e:	f001 fda7 	bl	80028e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	24000100 	.word	0x24000100

08000d9c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <DMA1_Stream1_IRQHandler+0x10>)
 8000da2:	f001 fd9d 	bl	80028e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	24000178 	.word	0x24000178

08000db0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <USART1_IRQHandler+0x10>)
 8000db6:	f006 f90d 	bl	8006fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2400006c 	.word	0x2400006c

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b32      	ldr	r3, [pc, #200]	@ (8000e94 <SystemInit+0xd0>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dce:	4a31      	ldr	r2, [pc, #196]	@ (8000e94 <SystemInit+0xd0>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8000e98 <SystemInit+0xd4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 030f 	and.w	r3, r3, #15
 8000de0:	2b06      	cmp	r3, #6
 8000de2:	d807      	bhi.n	8000df4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000de4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e98 <SystemInit+0xd4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f023 030f 	bic.w	r3, r3, #15
 8000dec:	4a2a      	ldr	r2, [pc, #168]	@ (8000e98 <SystemInit+0xd4>)
 8000dee:	f043 0307 	orr.w	r3, r3, #7
 8000df2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000df4:	4b29      	ldr	r3, [pc, #164]	@ (8000e9c <SystemInit+0xd8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a28      	ldr	r2, [pc, #160]	@ (8000e9c <SystemInit+0xd8>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e00:	4b26      	ldr	r3, [pc, #152]	@ (8000e9c <SystemInit+0xd8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e06:	4b25      	ldr	r3, [pc, #148]	@ (8000e9c <SystemInit+0xd8>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4924      	ldr	r1, [pc, #144]	@ (8000e9c <SystemInit+0xd8>)
 8000e0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ea0 <SystemInit+0xdc>)
 8000e0e:	4013      	ands	r3, r2
 8000e10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e12:	4b21      	ldr	r3, [pc, #132]	@ (8000e98 <SystemInit+0xd4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d007      	beq.n	8000e2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e98 <SystemInit+0xd4>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f023 030f 	bic.w	r3, r3, #15
 8000e26:	4a1c      	ldr	r2, [pc, #112]	@ (8000e98 <SystemInit+0xd4>)
 8000e28:	f043 0307 	orr.w	r3, r3, #7
 8000e2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e9c <SystemInit+0xd8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e34:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <SystemInit+0xd8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <SystemInit+0xd8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e40:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <SystemInit+0xd8>)
 8000e42:	4a18      	ldr	r2, [pc, #96]	@ (8000ea4 <SystemInit+0xe0>)
 8000e44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <SystemInit+0xd8>)
 8000e48:	4a17      	ldr	r2, [pc, #92]	@ (8000ea8 <SystemInit+0xe4>)
 8000e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e4c:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <SystemInit+0xd8>)
 8000e4e:	4a17      	ldr	r2, [pc, #92]	@ (8000eac <SystemInit+0xe8>)
 8000e50:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e52:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <SystemInit+0xd8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e58:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <SystemInit+0xd8>)
 8000e5a:	4a14      	ldr	r2, [pc, #80]	@ (8000eac <SystemInit+0xe8>)
 8000e5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <SystemInit+0xd8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <SystemInit+0xd8>)
 8000e66:	4a11      	ldr	r2, [pc, #68]	@ (8000eac <SystemInit+0xe8>)
 8000e68:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <SystemInit+0xd8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <SystemInit+0xd8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a09      	ldr	r2, [pc, #36]	@ (8000e9c <SystemInit+0xd8>)
 8000e76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <SystemInit+0xd8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <SystemInit+0xec>)
 8000e84:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00
 8000e98:	52002000 	.word	0x52002000
 8000e9c:	58024400 	.word	0x58024400
 8000ea0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ea4:	02020200 	.word	0x02020200
 8000ea8:	01ff0000 	.word	0x01ff0000
 8000eac:	01010280 	.word	0x01010280
 8000eb0:	52004000 	.word	0x52004000

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eb8:	f7ff ff84 	bl	8000dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	@ (8000ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f008 f841 	bl	8008f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff fb91 	bl	800060c <main>
  bx  lr
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eec:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000ef0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ef4:	24000050 	.word	0x24000050
  ldr r2, =_sidata
 8000ef8:	08009020 	.word	0x08009020
  ldr r2, =_sbss
 8000efc:	24000050 	.word	0x24000050
  ldr r4, =_ebss
 8000f00:	24000208 	.word	0x24000208

08000f04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC3_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0e:	2003      	movs	r0, #3
 8000f10:	f000 f980 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f14:	f003 ff9c 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <HAL_Init+0x68>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	0a1b      	lsrs	r3, r3, #8
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	4913      	ldr	r1, [pc, #76]	@ (8000f74 <HAL_Init+0x6c>)
 8000f26:	5ccb      	ldrb	r3, [r1, r3]
 8000f28:	f003 031f 	and.w	r3, r3, #31
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <HAL_Init+0x68>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f74 <HAL_Init+0x6c>)
 8000f3c:	5cd3      	ldrb	r3, [r2, r3]
 8000f3e:	f003 031f 	and.w	r3, r3, #31
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	fa22 f303 	lsr.w	r3, r2, r3
 8000f48:	4a0b      	ldr	r2, [pc, #44]	@ (8000f78 <HAL_Init+0x70>)
 8000f4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <HAL_Init+0x74>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f814 	bl	8000f80 <HAL_InitTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e002      	b.n	8000f68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f62:	f7ff fddb 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	58024400 	.word	0x58024400
 8000f74:	08008fd0 	.word	0x08008fd0
 8000f78:	24000044 	.word	0x24000044
 8000f7c:	24000040 	.word	0x24000040

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f88:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <HAL_InitTick+0x60>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e021      	b.n	8000fd8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <HAL_InitTick+0x64>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <HAL_InitTick+0x60>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 f965 	bl	800127a <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f000 f92f 	bl	800122a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	@ (8000fe8 <HAL_InitTick+0x68>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2400004c 	.word	0x2400004c
 8000fe4:	24000040 	.word	0x24000040
 8000fe8:	24000048 	.word	0x24000048

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2400004c 	.word	0x2400004c
 8001010:	24000204 	.word	0x24000204

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	@ (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	24000204 	.word	0x24000204

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_Delay+0x44>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2400004c 	.word	0x2400004c

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <__NVIC_SetPriorityGrouping+0x40>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	05fa0000 	.word	0x05fa0000

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4907      	ldr	r1, [pc, #28]	@ (8001110 <__NVIC_EnableIRQ+0x38>)
 80010f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	@ (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	@ (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	@ 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	@ 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f7ff ff8e 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff29 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff40 	bl	80010bc <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff90 	bl	8001168 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5f 	bl	8001114 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001268:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff33 	bl	80010d8 <__NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ffa4 	bl	80011d0 <SysTick_Config>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff feba 	bl	8001014 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e312      	b.n	80018d2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a66      	ldr	r2, [pc, #408]	@ (800144c <HAL_DMA_Init+0x1b8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d04a      	beq.n	800134c <HAL_DMA_Init+0xb8>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a65      	ldr	r2, [pc, #404]	@ (8001450 <HAL_DMA_Init+0x1bc>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d045      	beq.n	800134c <HAL_DMA_Init+0xb8>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a63      	ldr	r2, [pc, #396]	@ (8001454 <HAL_DMA_Init+0x1c0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d040      	beq.n	800134c <HAL_DMA_Init+0xb8>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a62      	ldr	r2, [pc, #392]	@ (8001458 <HAL_DMA_Init+0x1c4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d03b      	beq.n	800134c <HAL_DMA_Init+0xb8>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a60      	ldr	r2, [pc, #384]	@ (800145c <HAL_DMA_Init+0x1c8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d036      	beq.n	800134c <HAL_DMA_Init+0xb8>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a5f      	ldr	r2, [pc, #380]	@ (8001460 <HAL_DMA_Init+0x1cc>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d031      	beq.n	800134c <HAL_DMA_Init+0xb8>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001464 <HAL_DMA_Init+0x1d0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d02c      	beq.n	800134c <HAL_DMA_Init+0xb8>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a5c      	ldr	r2, [pc, #368]	@ (8001468 <HAL_DMA_Init+0x1d4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d027      	beq.n	800134c <HAL_DMA_Init+0xb8>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a5a      	ldr	r2, [pc, #360]	@ (800146c <HAL_DMA_Init+0x1d8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d022      	beq.n	800134c <HAL_DMA_Init+0xb8>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a59      	ldr	r2, [pc, #356]	@ (8001470 <HAL_DMA_Init+0x1dc>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d01d      	beq.n	800134c <HAL_DMA_Init+0xb8>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a57      	ldr	r2, [pc, #348]	@ (8001474 <HAL_DMA_Init+0x1e0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d018      	beq.n	800134c <HAL_DMA_Init+0xb8>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a56      	ldr	r2, [pc, #344]	@ (8001478 <HAL_DMA_Init+0x1e4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d013      	beq.n	800134c <HAL_DMA_Init+0xb8>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a54      	ldr	r2, [pc, #336]	@ (800147c <HAL_DMA_Init+0x1e8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00e      	beq.n	800134c <HAL_DMA_Init+0xb8>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a53      	ldr	r2, [pc, #332]	@ (8001480 <HAL_DMA_Init+0x1ec>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d009      	beq.n	800134c <HAL_DMA_Init+0xb8>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a51      	ldr	r2, [pc, #324]	@ (8001484 <HAL_DMA_Init+0x1f0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d004      	beq.n	800134c <HAL_DMA_Init+0xb8>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a50      	ldr	r2, [pc, #320]	@ (8001488 <HAL_DMA_Init+0x1f4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d101      	bne.n	8001350 <HAL_DMA_Init+0xbc>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <HAL_DMA_Init+0xbe>
 8001350:	2300      	movs	r3, #0
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 813c 	beq.w	80015d0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2202      	movs	r2, #2
 800135c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a37      	ldr	r2, [pc, #220]	@ (800144c <HAL_DMA_Init+0x1b8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d04a      	beq.n	8001408 <HAL_DMA_Init+0x174>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a36      	ldr	r2, [pc, #216]	@ (8001450 <HAL_DMA_Init+0x1bc>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d045      	beq.n	8001408 <HAL_DMA_Init+0x174>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a34      	ldr	r2, [pc, #208]	@ (8001454 <HAL_DMA_Init+0x1c0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d040      	beq.n	8001408 <HAL_DMA_Init+0x174>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a33      	ldr	r2, [pc, #204]	@ (8001458 <HAL_DMA_Init+0x1c4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d03b      	beq.n	8001408 <HAL_DMA_Init+0x174>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a31      	ldr	r2, [pc, #196]	@ (800145c <HAL_DMA_Init+0x1c8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d036      	beq.n	8001408 <HAL_DMA_Init+0x174>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a30      	ldr	r2, [pc, #192]	@ (8001460 <HAL_DMA_Init+0x1cc>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d031      	beq.n	8001408 <HAL_DMA_Init+0x174>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001464 <HAL_DMA_Init+0x1d0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d02c      	beq.n	8001408 <HAL_DMA_Init+0x174>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001468 <HAL_DMA_Init+0x1d4>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d027      	beq.n	8001408 <HAL_DMA_Init+0x174>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a2b      	ldr	r2, [pc, #172]	@ (800146c <HAL_DMA_Init+0x1d8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d022      	beq.n	8001408 <HAL_DMA_Init+0x174>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001470 <HAL_DMA_Init+0x1dc>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d01d      	beq.n	8001408 <HAL_DMA_Init+0x174>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a28      	ldr	r2, [pc, #160]	@ (8001474 <HAL_DMA_Init+0x1e0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d018      	beq.n	8001408 <HAL_DMA_Init+0x174>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a27      	ldr	r2, [pc, #156]	@ (8001478 <HAL_DMA_Init+0x1e4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d013      	beq.n	8001408 <HAL_DMA_Init+0x174>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a25      	ldr	r2, [pc, #148]	@ (800147c <HAL_DMA_Init+0x1e8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00e      	beq.n	8001408 <HAL_DMA_Init+0x174>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a24      	ldr	r2, [pc, #144]	@ (8001480 <HAL_DMA_Init+0x1ec>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d009      	beq.n	8001408 <HAL_DMA_Init+0x174>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a22      	ldr	r2, [pc, #136]	@ (8001484 <HAL_DMA_Init+0x1f0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d004      	beq.n	8001408 <HAL_DMA_Init+0x174>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a21      	ldr	r2, [pc, #132]	@ (8001488 <HAL_DMA_Init+0x1f4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d108      	bne.n	800141a <HAL_DMA_Init+0x186>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0201 	bic.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e007      	b.n	800142a <HAL_DMA_Init+0x196>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0201 	bic.w	r2, r2, #1
 8001428:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800142a:	e02f      	b.n	800148c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800142c:	f7ff fdf2 	bl	8001014 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b05      	cmp	r3, #5
 8001438:	d928      	bls.n	800148c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2220      	movs	r2, #32
 800143e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2203      	movs	r2, #3
 8001444:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e242      	b.n	80018d2 <HAL_DMA_Init+0x63e>
 800144c:	40020010 	.word	0x40020010
 8001450:	40020028 	.word	0x40020028
 8001454:	40020040 	.word	0x40020040
 8001458:	40020058 	.word	0x40020058
 800145c:	40020070 	.word	0x40020070
 8001460:	40020088 	.word	0x40020088
 8001464:	400200a0 	.word	0x400200a0
 8001468:	400200b8 	.word	0x400200b8
 800146c:	40020410 	.word	0x40020410
 8001470:	40020428 	.word	0x40020428
 8001474:	40020440 	.word	0x40020440
 8001478:	40020458 	.word	0x40020458
 800147c:	40020470 	.word	0x40020470
 8001480:	40020488 	.word	0x40020488
 8001484:	400204a0 	.word	0x400204a0
 8001488:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1c8      	bne.n	800142c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	4b83      	ldr	r3, [pc, #524]	@ (80016b4 <HAL_DMA_Init+0x420>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80014b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d107      	bne.n	80014f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e8:	4313      	orrs	r3, r2
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b28      	cmp	r3, #40	@ 0x28
 80014f6:	d903      	bls.n	8001500 <HAL_DMA_Init+0x26c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80014fe:	d91f      	bls.n	8001540 <HAL_DMA_Init+0x2ac>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b3e      	cmp	r3, #62	@ 0x3e
 8001506:	d903      	bls.n	8001510 <HAL_DMA_Init+0x27c>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b42      	cmp	r3, #66	@ 0x42
 800150e:	d917      	bls.n	8001540 <HAL_DMA_Init+0x2ac>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b46      	cmp	r3, #70	@ 0x46
 8001516:	d903      	bls.n	8001520 <HAL_DMA_Init+0x28c>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b48      	cmp	r3, #72	@ 0x48
 800151e:	d90f      	bls.n	8001540 <HAL_DMA_Init+0x2ac>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b4e      	cmp	r3, #78	@ 0x4e
 8001526:	d903      	bls.n	8001530 <HAL_DMA_Init+0x29c>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b52      	cmp	r3, #82	@ 0x52
 800152e:	d907      	bls.n	8001540 <HAL_DMA_Init+0x2ac>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b73      	cmp	r3, #115	@ 0x73
 8001536:	d905      	bls.n	8001544 <HAL_DMA_Init+0x2b0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b77      	cmp	r3, #119	@ 0x77
 800153e:	d801      	bhi.n	8001544 <HAL_DMA_Init+0x2b0>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <HAL_DMA_Init+0x2b2>
 8001544:	2300      	movs	r3, #0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001550:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f023 0307 	bic.w	r3, r3, #7
 8001568:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4313      	orrs	r3, r2
 8001572:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001578:	2b04      	cmp	r3, #4
 800157a:	d117      	bne.n	80015ac <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	4313      	orrs	r3, r2
 8001584:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00e      	beq.n	80015ac <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f002 fb2e 	bl	8003bf0 <DMA_CheckFifoParam>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2240      	movs	r2, #64	@ 0x40
 800159e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e192      	b.n	80018d2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f002 fa69 	bl	8003a8c <DMA_CalcBaseAndBitshift>
 80015ba:	4603      	mov	r3, r0
 80015bc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	223f      	movs	r2, #63	@ 0x3f
 80015c8:	409a      	lsls	r2, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	e0c8      	b.n	8001762 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a38      	ldr	r2, [pc, #224]	@ (80016b8 <HAL_DMA_Init+0x424>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d022      	beq.n	8001620 <HAL_DMA_Init+0x38c>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a37      	ldr	r2, [pc, #220]	@ (80016bc <HAL_DMA_Init+0x428>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d01d      	beq.n	8001620 <HAL_DMA_Init+0x38c>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a35      	ldr	r2, [pc, #212]	@ (80016c0 <HAL_DMA_Init+0x42c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d018      	beq.n	8001620 <HAL_DMA_Init+0x38c>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a34      	ldr	r2, [pc, #208]	@ (80016c4 <HAL_DMA_Init+0x430>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d013      	beq.n	8001620 <HAL_DMA_Init+0x38c>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a32      	ldr	r2, [pc, #200]	@ (80016c8 <HAL_DMA_Init+0x434>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d00e      	beq.n	8001620 <HAL_DMA_Init+0x38c>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a31      	ldr	r2, [pc, #196]	@ (80016cc <HAL_DMA_Init+0x438>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d009      	beq.n	8001620 <HAL_DMA_Init+0x38c>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a2f      	ldr	r2, [pc, #188]	@ (80016d0 <HAL_DMA_Init+0x43c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d004      	beq.n	8001620 <HAL_DMA_Init+0x38c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a2e      	ldr	r2, [pc, #184]	@ (80016d4 <HAL_DMA_Init+0x440>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d101      	bne.n	8001624 <HAL_DMA_Init+0x390>
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <HAL_DMA_Init+0x392>
 8001624:	2300      	movs	r3, #0
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 8092 	beq.w	8001750 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a21      	ldr	r2, [pc, #132]	@ (80016b8 <HAL_DMA_Init+0x424>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d021      	beq.n	800167a <HAL_DMA_Init+0x3e6>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a20      	ldr	r2, [pc, #128]	@ (80016bc <HAL_DMA_Init+0x428>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d01c      	beq.n	800167a <HAL_DMA_Init+0x3e6>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1e      	ldr	r2, [pc, #120]	@ (80016c0 <HAL_DMA_Init+0x42c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d017      	beq.n	800167a <HAL_DMA_Init+0x3e6>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a1d      	ldr	r2, [pc, #116]	@ (80016c4 <HAL_DMA_Init+0x430>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d012      	beq.n	800167a <HAL_DMA_Init+0x3e6>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1b      	ldr	r2, [pc, #108]	@ (80016c8 <HAL_DMA_Init+0x434>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d00d      	beq.n	800167a <HAL_DMA_Init+0x3e6>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1a      	ldr	r2, [pc, #104]	@ (80016cc <HAL_DMA_Init+0x438>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d008      	beq.n	800167a <HAL_DMA_Init+0x3e6>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a18      	ldr	r2, [pc, #96]	@ (80016d0 <HAL_DMA_Init+0x43c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d003      	beq.n	800167a <HAL_DMA_Init+0x3e6>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a17      	ldr	r2, [pc, #92]	@ (80016d4 <HAL_DMA_Init+0x440>)
 8001678:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2202      	movs	r2, #2
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <HAL_DMA_Init+0x444>)
 8001696:	4013      	ands	r3, r2
 8001698:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b40      	cmp	r3, #64	@ 0x40
 80016a0:	d01c      	beq.n	80016dc <HAL_DMA_Init+0x448>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b80      	cmp	r3, #128	@ 0x80
 80016a8:	d102      	bne.n	80016b0 <HAL_DMA_Init+0x41c>
 80016aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016ae:	e016      	b.n	80016de <HAL_DMA_Init+0x44a>
 80016b0:	2300      	movs	r3, #0
 80016b2:	e014      	b.n	80016de <HAL_DMA_Init+0x44a>
 80016b4:	fe10803f 	.word	0xfe10803f
 80016b8:	58025408 	.word	0x58025408
 80016bc:	5802541c 	.word	0x5802541c
 80016c0:	58025430 	.word	0x58025430
 80016c4:	58025444 	.word	0x58025444
 80016c8:	58025458 	.word	0x58025458
 80016cc:	5802546c 	.word	0x5802546c
 80016d0:	58025480 	.word	0x58025480
 80016d4:	58025494 	.word	0x58025494
 80016d8:	fffe000f 	.word	0xfffe000f
 80016dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68d2      	ldr	r2, [r2, #12]
 80016e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001704:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800170c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4313      	orrs	r3, r2
 8001712:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b6e      	ldr	r3, [pc, #440]	@ (80018dc <HAL_DMA_Init+0x648>)
 8001724:	4413      	add	r3, r2
 8001726:	4a6e      	ldr	r2, [pc, #440]	@ (80018e0 <HAL_DMA_Init+0x64c>)
 8001728:	fba2 2303 	umull	r2, r3, r2, r3
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	009a      	lsls	r2, r3, #2
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f002 f9a9 	bl	8003a8c <DMA_CalcBaseAndBitshift>
 800173a:	4603      	mov	r3, r0
 800173c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	2201      	movs	r2, #1
 8001748:	409a      	lsls	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	e008      	b.n	8001762 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2240      	movs	r2, #64	@ 0x40
 8001754:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2203      	movs	r2, #3
 800175a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e0b7      	b.n	80018d2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a5f      	ldr	r2, [pc, #380]	@ (80018e4 <HAL_DMA_Init+0x650>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d072      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a5d      	ldr	r2, [pc, #372]	@ (80018e8 <HAL_DMA_Init+0x654>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d06d      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a5c      	ldr	r2, [pc, #368]	@ (80018ec <HAL_DMA_Init+0x658>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d068      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a5a      	ldr	r2, [pc, #360]	@ (80018f0 <HAL_DMA_Init+0x65c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d063      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a59      	ldr	r2, [pc, #356]	@ (80018f4 <HAL_DMA_Init+0x660>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d05e      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a57      	ldr	r2, [pc, #348]	@ (80018f8 <HAL_DMA_Init+0x664>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d059      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a56      	ldr	r2, [pc, #344]	@ (80018fc <HAL_DMA_Init+0x668>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d054      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a54      	ldr	r2, [pc, #336]	@ (8001900 <HAL_DMA_Init+0x66c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d04f      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a53      	ldr	r2, [pc, #332]	@ (8001904 <HAL_DMA_Init+0x670>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d04a      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a51      	ldr	r2, [pc, #324]	@ (8001908 <HAL_DMA_Init+0x674>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d045      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a50      	ldr	r2, [pc, #320]	@ (800190c <HAL_DMA_Init+0x678>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d040      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001910 <HAL_DMA_Init+0x67c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d03b      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a4d      	ldr	r2, [pc, #308]	@ (8001914 <HAL_DMA_Init+0x680>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d036      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001918 <HAL_DMA_Init+0x684>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d031      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a4a      	ldr	r2, [pc, #296]	@ (800191c <HAL_DMA_Init+0x688>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d02c      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a48      	ldr	r2, [pc, #288]	@ (8001920 <HAL_DMA_Init+0x68c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d027      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a47      	ldr	r2, [pc, #284]	@ (8001924 <HAL_DMA_Init+0x690>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d022      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a45      	ldr	r2, [pc, #276]	@ (8001928 <HAL_DMA_Init+0x694>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d01d      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a44      	ldr	r2, [pc, #272]	@ (800192c <HAL_DMA_Init+0x698>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d018      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a42      	ldr	r2, [pc, #264]	@ (8001930 <HAL_DMA_Init+0x69c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a41      	ldr	r2, [pc, #260]	@ (8001934 <HAL_DMA_Init+0x6a0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00e      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a3f      	ldr	r2, [pc, #252]	@ (8001938 <HAL_DMA_Init+0x6a4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d009      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a3e      	ldr	r2, [pc, #248]	@ (800193c <HAL_DMA_Init+0x6a8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d004      	beq.n	8001852 <HAL_DMA_Init+0x5be>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a3c      	ldr	r2, [pc, #240]	@ (8001940 <HAL_DMA_Init+0x6ac>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d101      	bne.n	8001856 <HAL_DMA_Init+0x5c2>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_DMA_Init+0x5c4>
 8001856:	2300      	movs	r3, #0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d032      	beq.n	80018c2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f002 fa43 	bl	8003ce8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b80      	cmp	r3, #128	@ 0x80
 8001868:	d102      	bne.n	8001870 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001884:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d010      	beq.n	80018b0 <HAL_DMA_Init+0x61c>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b08      	cmp	r3, #8
 8001894:	d80c      	bhi.n	80018b0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f002 fac0 	bl	8003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	e008      	b.n	80018c2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	a7fdabf8 	.word	0xa7fdabf8
 80018e0:	cccccccd 	.word	0xcccccccd
 80018e4:	40020010 	.word	0x40020010
 80018e8:	40020028 	.word	0x40020028
 80018ec:	40020040 	.word	0x40020040
 80018f0:	40020058 	.word	0x40020058
 80018f4:	40020070 	.word	0x40020070
 80018f8:	40020088 	.word	0x40020088
 80018fc:	400200a0 	.word	0x400200a0
 8001900:	400200b8 	.word	0x400200b8
 8001904:	40020410 	.word	0x40020410
 8001908:	40020428 	.word	0x40020428
 800190c:	40020440 	.word	0x40020440
 8001910:	40020458 	.word	0x40020458
 8001914:	40020470 	.word	0x40020470
 8001918:	40020488 	.word	0x40020488
 800191c:	400204a0 	.word	0x400204a0
 8001920:	400204b8 	.word	0x400204b8
 8001924:	58025408 	.word	0x58025408
 8001928:	5802541c 	.word	0x5802541c
 800192c:	58025430 	.word	0x58025430
 8001930:	58025444 	.word	0x58025444
 8001934:	58025458 	.word	0x58025458
 8001938:	5802546c 	.word	0x5802546c
 800193c:	58025480 	.word	0x58025480
 8001940:	58025494 	.word	0x58025494

08001944 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e226      	b.n	8001dae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_DMA_Start_IT+0x2a>
 800196a:	2302      	movs	r3, #2
 800196c:	e21f      	b.n	8001dae <HAL_DMA_Start_IT+0x46a>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b01      	cmp	r3, #1
 8001980:	f040 820a 	bne.w	8001d98 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a68      	ldr	r2, [pc, #416]	@ (8001b38 <HAL_DMA_Start_IT+0x1f4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d04a      	beq.n	8001a32 <HAL_DMA_Start_IT+0xee>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a66      	ldr	r2, [pc, #408]	@ (8001b3c <HAL_DMA_Start_IT+0x1f8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d045      	beq.n	8001a32 <HAL_DMA_Start_IT+0xee>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a65      	ldr	r2, [pc, #404]	@ (8001b40 <HAL_DMA_Start_IT+0x1fc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d040      	beq.n	8001a32 <HAL_DMA_Start_IT+0xee>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a63      	ldr	r2, [pc, #396]	@ (8001b44 <HAL_DMA_Start_IT+0x200>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d03b      	beq.n	8001a32 <HAL_DMA_Start_IT+0xee>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a62      	ldr	r2, [pc, #392]	@ (8001b48 <HAL_DMA_Start_IT+0x204>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d036      	beq.n	8001a32 <HAL_DMA_Start_IT+0xee>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a60      	ldr	r2, [pc, #384]	@ (8001b4c <HAL_DMA_Start_IT+0x208>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d031      	beq.n	8001a32 <HAL_DMA_Start_IT+0xee>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001b50 <HAL_DMA_Start_IT+0x20c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d02c      	beq.n	8001a32 <HAL_DMA_Start_IT+0xee>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001b54 <HAL_DMA_Start_IT+0x210>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d027      	beq.n	8001a32 <HAL_DMA_Start_IT+0xee>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001b58 <HAL_DMA_Start_IT+0x214>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d022      	beq.n	8001a32 <HAL_DMA_Start_IT+0xee>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a5a      	ldr	r2, [pc, #360]	@ (8001b5c <HAL_DMA_Start_IT+0x218>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d01d      	beq.n	8001a32 <HAL_DMA_Start_IT+0xee>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a59      	ldr	r2, [pc, #356]	@ (8001b60 <HAL_DMA_Start_IT+0x21c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d018      	beq.n	8001a32 <HAL_DMA_Start_IT+0xee>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a57      	ldr	r2, [pc, #348]	@ (8001b64 <HAL_DMA_Start_IT+0x220>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_DMA_Start_IT+0xee>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a56      	ldr	r2, [pc, #344]	@ (8001b68 <HAL_DMA_Start_IT+0x224>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d00e      	beq.n	8001a32 <HAL_DMA_Start_IT+0xee>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a54      	ldr	r2, [pc, #336]	@ (8001b6c <HAL_DMA_Start_IT+0x228>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d009      	beq.n	8001a32 <HAL_DMA_Start_IT+0xee>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a53      	ldr	r2, [pc, #332]	@ (8001b70 <HAL_DMA_Start_IT+0x22c>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d004      	beq.n	8001a32 <HAL_DMA_Start_IT+0xee>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a51      	ldr	r2, [pc, #324]	@ (8001b74 <HAL_DMA_Start_IT+0x230>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d108      	bne.n	8001a44 <HAL_DMA_Start_IT+0x100>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0201 	bic.w	r2, r2, #1
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	e007      	b.n	8001a54 <HAL_DMA_Start_IT+0x110>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f001 fe6a 	bl	8003734 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a34      	ldr	r2, [pc, #208]	@ (8001b38 <HAL_DMA_Start_IT+0x1f4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d04a      	beq.n	8001b00 <HAL_DMA_Start_IT+0x1bc>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a33      	ldr	r2, [pc, #204]	@ (8001b3c <HAL_DMA_Start_IT+0x1f8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d045      	beq.n	8001b00 <HAL_DMA_Start_IT+0x1bc>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a31      	ldr	r2, [pc, #196]	@ (8001b40 <HAL_DMA_Start_IT+0x1fc>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d040      	beq.n	8001b00 <HAL_DMA_Start_IT+0x1bc>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a30      	ldr	r2, [pc, #192]	@ (8001b44 <HAL_DMA_Start_IT+0x200>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d03b      	beq.n	8001b00 <HAL_DMA_Start_IT+0x1bc>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a2e      	ldr	r2, [pc, #184]	@ (8001b48 <HAL_DMA_Start_IT+0x204>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d036      	beq.n	8001b00 <HAL_DMA_Start_IT+0x1bc>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a2d      	ldr	r2, [pc, #180]	@ (8001b4c <HAL_DMA_Start_IT+0x208>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d031      	beq.n	8001b00 <HAL_DMA_Start_IT+0x1bc>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a2b      	ldr	r2, [pc, #172]	@ (8001b50 <HAL_DMA_Start_IT+0x20c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d02c      	beq.n	8001b00 <HAL_DMA_Start_IT+0x1bc>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8001b54 <HAL_DMA_Start_IT+0x210>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d027      	beq.n	8001b00 <HAL_DMA_Start_IT+0x1bc>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a28      	ldr	r2, [pc, #160]	@ (8001b58 <HAL_DMA_Start_IT+0x214>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d022      	beq.n	8001b00 <HAL_DMA_Start_IT+0x1bc>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a27      	ldr	r2, [pc, #156]	@ (8001b5c <HAL_DMA_Start_IT+0x218>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d01d      	beq.n	8001b00 <HAL_DMA_Start_IT+0x1bc>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a25      	ldr	r2, [pc, #148]	@ (8001b60 <HAL_DMA_Start_IT+0x21c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d018      	beq.n	8001b00 <HAL_DMA_Start_IT+0x1bc>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a24      	ldr	r2, [pc, #144]	@ (8001b64 <HAL_DMA_Start_IT+0x220>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d013      	beq.n	8001b00 <HAL_DMA_Start_IT+0x1bc>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a22      	ldr	r2, [pc, #136]	@ (8001b68 <HAL_DMA_Start_IT+0x224>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00e      	beq.n	8001b00 <HAL_DMA_Start_IT+0x1bc>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a21      	ldr	r2, [pc, #132]	@ (8001b6c <HAL_DMA_Start_IT+0x228>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d009      	beq.n	8001b00 <HAL_DMA_Start_IT+0x1bc>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b70 <HAL_DMA_Start_IT+0x22c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d004      	beq.n	8001b00 <HAL_DMA_Start_IT+0x1bc>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1e      	ldr	r2, [pc, #120]	@ (8001b74 <HAL_DMA_Start_IT+0x230>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d101      	bne.n	8001b04 <HAL_DMA_Start_IT+0x1c0>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <HAL_DMA_Start_IT+0x1c2>
 8001b04:	2300      	movs	r3, #0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d036      	beq.n	8001b78 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f023 021e 	bic.w	r2, r3, #30
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 0216 	orr.w	r2, r2, #22
 8001b1c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d03e      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 0208 	orr.w	r2, r2, #8
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	e035      	b.n	8001ba4 <HAL_DMA_Start_IT+0x260>
 8001b38:	40020010 	.word	0x40020010
 8001b3c:	40020028 	.word	0x40020028
 8001b40:	40020040 	.word	0x40020040
 8001b44:	40020058 	.word	0x40020058
 8001b48:	40020070 	.word	0x40020070
 8001b4c:	40020088 	.word	0x40020088
 8001b50:	400200a0 	.word	0x400200a0
 8001b54:	400200b8 	.word	0x400200b8
 8001b58:	40020410 	.word	0x40020410
 8001b5c:	40020428 	.word	0x40020428
 8001b60:	40020440 	.word	0x40020440
 8001b64:	40020458 	.word	0x40020458
 8001b68:	40020470 	.word	0x40020470
 8001b6c:	40020488 	.word	0x40020488
 8001b70:	400204a0 	.word	0x400204a0
 8001b74:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 020e 	bic.w	r2, r3, #14
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 020a 	orr.w	r2, r2, #10
 8001b8a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d007      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0204 	orr.w	r2, r2, #4
 8001ba2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a83      	ldr	r2, [pc, #524]	@ (8001db8 <HAL_DMA_Start_IT+0x474>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d072      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a82      	ldr	r2, [pc, #520]	@ (8001dbc <HAL_DMA_Start_IT+0x478>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d06d      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a80      	ldr	r2, [pc, #512]	@ (8001dc0 <HAL_DMA_Start_IT+0x47c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d068      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a7f      	ldr	r2, [pc, #508]	@ (8001dc4 <HAL_DMA_Start_IT+0x480>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d063      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a7d      	ldr	r2, [pc, #500]	@ (8001dc8 <HAL_DMA_Start_IT+0x484>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d05e      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7c      	ldr	r2, [pc, #496]	@ (8001dcc <HAL_DMA_Start_IT+0x488>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d059      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a7a      	ldr	r2, [pc, #488]	@ (8001dd0 <HAL_DMA_Start_IT+0x48c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d054      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a79      	ldr	r2, [pc, #484]	@ (8001dd4 <HAL_DMA_Start_IT+0x490>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d04f      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a77      	ldr	r2, [pc, #476]	@ (8001dd8 <HAL_DMA_Start_IT+0x494>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d04a      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a76      	ldr	r2, [pc, #472]	@ (8001ddc <HAL_DMA_Start_IT+0x498>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d045      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a74      	ldr	r2, [pc, #464]	@ (8001de0 <HAL_DMA_Start_IT+0x49c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d040      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a73      	ldr	r2, [pc, #460]	@ (8001de4 <HAL_DMA_Start_IT+0x4a0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d03b      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a71      	ldr	r2, [pc, #452]	@ (8001de8 <HAL_DMA_Start_IT+0x4a4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d036      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a70      	ldr	r2, [pc, #448]	@ (8001dec <HAL_DMA_Start_IT+0x4a8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d031      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a6e      	ldr	r2, [pc, #440]	@ (8001df0 <HAL_DMA_Start_IT+0x4ac>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d02c      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a6d      	ldr	r2, [pc, #436]	@ (8001df4 <HAL_DMA_Start_IT+0x4b0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d027      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a6b      	ldr	r2, [pc, #428]	@ (8001df8 <HAL_DMA_Start_IT+0x4b4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d022      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a6a      	ldr	r2, [pc, #424]	@ (8001dfc <HAL_DMA_Start_IT+0x4b8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d01d      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a68      	ldr	r2, [pc, #416]	@ (8001e00 <HAL_DMA_Start_IT+0x4bc>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d018      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a67      	ldr	r2, [pc, #412]	@ (8001e04 <HAL_DMA_Start_IT+0x4c0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d013      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a65      	ldr	r2, [pc, #404]	@ (8001e08 <HAL_DMA_Start_IT+0x4c4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00e      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a64      	ldr	r2, [pc, #400]	@ (8001e0c <HAL_DMA_Start_IT+0x4c8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d009      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a62      	ldr	r2, [pc, #392]	@ (8001e10 <HAL_DMA_Start_IT+0x4cc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d004      	beq.n	8001c94 <HAL_DMA_Start_IT+0x350>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a61      	ldr	r2, [pc, #388]	@ (8001e14 <HAL_DMA_Start_IT+0x4d0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d101      	bne.n	8001c98 <HAL_DMA_Start_IT+0x354>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <HAL_DMA_Start_IT+0x356>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01a      	beq.n	8001cd4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d007      	beq.n	8001cbc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cd2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a37      	ldr	r2, [pc, #220]	@ (8001db8 <HAL_DMA_Start_IT+0x474>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d04a      	beq.n	8001d74 <HAL_DMA_Start_IT+0x430>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a36      	ldr	r2, [pc, #216]	@ (8001dbc <HAL_DMA_Start_IT+0x478>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d045      	beq.n	8001d74 <HAL_DMA_Start_IT+0x430>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a34      	ldr	r2, [pc, #208]	@ (8001dc0 <HAL_DMA_Start_IT+0x47c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d040      	beq.n	8001d74 <HAL_DMA_Start_IT+0x430>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a33      	ldr	r2, [pc, #204]	@ (8001dc4 <HAL_DMA_Start_IT+0x480>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d03b      	beq.n	8001d74 <HAL_DMA_Start_IT+0x430>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a31      	ldr	r2, [pc, #196]	@ (8001dc8 <HAL_DMA_Start_IT+0x484>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d036      	beq.n	8001d74 <HAL_DMA_Start_IT+0x430>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a30      	ldr	r2, [pc, #192]	@ (8001dcc <HAL_DMA_Start_IT+0x488>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d031      	beq.n	8001d74 <HAL_DMA_Start_IT+0x430>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2e      	ldr	r2, [pc, #184]	@ (8001dd0 <HAL_DMA_Start_IT+0x48c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d02c      	beq.n	8001d74 <HAL_DMA_Start_IT+0x430>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001dd4 <HAL_DMA_Start_IT+0x490>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d027      	beq.n	8001d74 <HAL_DMA_Start_IT+0x430>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a2b      	ldr	r2, [pc, #172]	@ (8001dd8 <HAL_DMA_Start_IT+0x494>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d022      	beq.n	8001d74 <HAL_DMA_Start_IT+0x430>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a2a      	ldr	r2, [pc, #168]	@ (8001ddc <HAL_DMA_Start_IT+0x498>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d01d      	beq.n	8001d74 <HAL_DMA_Start_IT+0x430>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a28      	ldr	r2, [pc, #160]	@ (8001de0 <HAL_DMA_Start_IT+0x49c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d018      	beq.n	8001d74 <HAL_DMA_Start_IT+0x430>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a27      	ldr	r2, [pc, #156]	@ (8001de4 <HAL_DMA_Start_IT+0x4a0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d013      	beq.n	8001d74 <HAL_DMA_Start_IT+0x430>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a25      	ldr	r2, [pc, #148]	@ (8001de8 <HAL_DMA_Start_IT+0x4a4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00e      	beq.n	8001d74 <HAL_DMA_Start_IT+0x430>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a24      	ldr	r2, [pc, #144]	@ (8001dec <HAL_DMA_Start_IT+0x4a8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d009      	beq.n	8001d74 <HAL_DMA_Start_IT+0x430>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a22      	ldr	r2, [pc, #136]	@ (8001df0 <HAL_DMA_Start_IT+0x4ac>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d004      	beq.n	8001d74 <HAL_DMA_Start_IT+0x430>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a21      	ldr	r2, [pc, #132]	@ (8001df4 <HAL_DMA_Start_IT+0x4b0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d108      	bne.n	8001d86 <HAL_DMA_Start_IT+0x442>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	e012      	b.n	8001dac <HAL_DMA_Start_IT+0x468>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0201 	orr.w	r2, r2, #1
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e009      	b.n	8001dac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40020010 	.word	0x40020010
 8001dbc:	40020028 	.word	0x40020028
 8001dc0:	40020040 	.word	0x40020040
 8001dc4:	40020058 	.word	0x40020058
 8001dc8:	40020070 	.word	0x40020070
 8001dcc:	40020088 	.word	0x40020088
 8001dd0:	400200a0 	.word	0x400200a0
 8001dd4:	400200b8 	.word	0x400200b8
 8001dd8:	40020410 	.word	0x40020410
 8001ddc:	40020428 	.word	0x40020428
 8001de0:	40020440 	.word	0x40020440
 8001de4:	40020458 	.word	0x40020458
 8001de8:	40020470 	.word	0x40020470
 8001dec:	40020488 	.word	0x40020488
 8001df0:	400204a0 	.word	0x400204a0
 8001df4:	400204b8 	.word	0x400204b8
 8001df8:	58025408 	.word	0x58025408
 8001dfc:	5802541c 	.word	0x5802541c
 8001e00:	58025430 	.word	0x58025430
 8001e04:	58025444 	.word	0x58025444
 8001e08:	58025458 	.word	0x58025458
 8001e0c:	5802546c 	.word	0x5802546c
 8001e10:	58025480 	.word	0x58025480
 8001e14:	58025494 	.word	0x58025494

08001e18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff f8f8 	bl	8001014 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e2dc      	b.n	80023ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d008      	beq.n	8001e4e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2280      	movs	r2, #128	@ 0x80
 8001e40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e2cd      	b.n	80023ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a76      	ldr	r2, [pc, #472]	@ (800202c <HAL_DMA_Abort+0x214>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d04a      	beq.n	8001eee <HAL_DMA_Abort+0xd6>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a74      	ldr	r2, [pc, #464]	@ (8002030 <HAL_DMA_Abort+0x218>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d045      	beq.n	8001eee <HAL_DMA_Abort+0xd6>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a73      	ldr	r2, [pc, #460]	@ (8002034 <HAL_DMA_Abort+0x21c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d040      	beq.n	8001eee <HAL_DMA_Abort+0xd6>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a71      	ldr	r2, [pc, #452]	@ (8002038 <HAL_DMA_Abort+0x220>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d03b      	beq.n	8001eee <HAL_DMA_Abort+0xd6>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a70      	ldr	r2, [pc, #448]	@ (800203c <HAL_DMA_Abort+0x224>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d036      	beq.n	8001eee <HAL_DMA_Abort+0xd6>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a6e      	ldr	r2, [pc, #440]	@ (8002040 <HAL_DMA_Abort+0x228>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d031      	beq.n	8001eee <HAL_DMA_Abort+0xd6>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6d      	ldr	r2, [pc, #436]	@ (8002044 <HAL_DMA_Abort+0x22c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d02c      	beq.n	8001eee <HAL_DMA_Abort+0xd6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a6b      	ldr	r2, [pc, #428]	@ (8002048 <HAL_DMA_Abort+0x230>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d027      	beq.n	8001eee <HAL_DMA_Abort+0xd6>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a6a      	ldr	r2, [pc, #424]	@ (800204c <HAL_DMA_Abort+0x234>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d022      	beq.n	8001eee <HAL_DMA_Abort+0xd6>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a68      	ldr	r2, [pc, #416]	@ (8002050 <HAL_DMA_Abort+0x238>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d01d      	beq.n	8001eee <HAL_DMA_Abort+0xd6>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a67      	ldr	r2, [pc, #412]	@ (8002054 <HAL_DMA_Abort+0x23c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d018      	beq.n	8001eee <HAL_DMA_Abort+0xd6>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a65      	ldr	r2, [pc, #404]	@ (8002058 <HAL_DMA_Abort+0x240>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_DMA_Abort+0xd6>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a64      	ldr	r2, [pc, #400]	@ (800205c <HAL_DMA_Abort+0x244>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d00e      	beq.n	8001eee <HAL_DMA_Abort+0xd6>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a62      	ldr	r2, [pc, #392]	@ (8002060 <HAL_DMA_Abort+0x248>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d009      	beq.n	8001eee <HAL_DMA_Abort+0xd6>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a61      	ldr	r2, [pc, #388]	@ (8002064 <HAL_DMA_Abort+0x24c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d004      	beq.n	8001eee <HAL_DMA_Abort+0xd6>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a5f      	ldr	r2, [pc, #380]	@ (8002068 <HAL_DMA_Abort+0x250>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_DMA_Abort+0xda>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_DMA_Abort+0xdc>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 021e 	bic.w	r2, r2, #30
 8001f06:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f16:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	e00a      	b.n	8001f36 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 020e 	bic.w	r2, r2, #14
 8001f2e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a3c      	ldr	r2, [pc, #240]	@ (800202c <HAL_DMA_Abort+0x214>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d072      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a3a      	ldr	r2, [pc, #232]	@ (8002030 <HAL_DMA_Abort+0x218>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d06d      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a39      	ldr	r2, [pc, #228]	@ (8002034 <HAL_DMA_Abort+0x21c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d068      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a37      	ldr	r2, [pc, #220]	@ (8002038 <HAL_DMA_Abort+0x220>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d063      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a36      	ldr	r2, [pc, #216]	@ (800203c <HAL_DMA_Abort+0x224>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d05e      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a34      	ldr	r2, [pc, #208]	@ (8002040 <HAL_DMA_Abort+0x228>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d059      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a33      	ldr	r2, [pc, #204]	@ (8002044 <HAL_DMA_Abort+0x22c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d054      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a31      	ldr	r2, [pc, #196]	@ (8002048 <HAL_DMA_Abort+0x230>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d04f      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a30      	ldr	r2, [pc, #192]	@ (800204c <HAL_DMA_Abort+0x234>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d04a      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a2e      	ldr	r2, [pc, #184]	@ (8002050 <HAL_DMA_Abort+0x238>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d045      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8002054 <HAL_DMA_Abort+0x23c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d040      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8002058 <HAL_DMA_Abort+0x240>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d03b      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800205c <HAL_DMA_Abort+0x244>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d036      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a28      	ldr	r2, [pc, #160]	@ (8002060 <HAL_DMA_Abort+0x248>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d031      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a27      	ldr	r2, [pc, #156]	@ (8002064 <HAL_DMA_Abort+0x24c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d02c      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a25      	ldr	r2, [pc, #148]	@ (8002068 <HAL_DMA_Abort+0x250>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d027      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a24      	ldr	r2, [pc, #144]	@ (800206c <HAL_DMA_Abort+0x254>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d022      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a22      	ldr	r2, [pc, #136]	@ (8002070 <HAL_DMA_Abort+0x258>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01d      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a21      	ldr	r2, [pc, #132]	@ (8002074 <HAL_DMA_Abort+0x25c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d018      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8002078 <HAL_DMA_Abort+0x260>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a1e      	ldr	r2, [pc, #120]	@ (800207c <HAL_DMA_Abort+0x264>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00e      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1c      	ldr	r2, [pc, #112]	@ (8002080 <HAL_DMA_Abort+0x268>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d009      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1b      	ldr	r2, [pc, #108]	@ (8002084 <HAL_DMA_Abort+0x26c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d004      	beq.n	8002026 <HAL_DMA_Abort+0x20e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a19      	ldr	r2, [pc, #100]	@ (8002088 <HAL_DMA_Abort+0x270>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d132      	bne.n	800208c <HAL_DMA_Abort+0x274>
 8002026:	2301      	movs	r3, #1
 8002028:	e031      	b.n	800208e <HAL_DMA_Abort+0x276>
 800202a:	bf00      	nop
 800202c:	40020010 	.word	0x40020010
 8002030:	40020028 	.word	0x40020028
 8002034:	40020040 	.word	0x40020040
 8002038:	40020058 	.word	0x40020058
 800203c:	40020070 	.word	0x40020070
 8002040:	40020088 	.word	0x40020088
 8002044:	400200a0 	.word	0x400200a0
 8002048:	400200b8 	.word	0x400200b8
 800204c:	40020410 	.word	0x40020410
 8002050:	40020428 	.word	0x40020428
 8002054:	40020440 	.word	0x40020440
 8002058:	40020458 	.word	0x40020458
 800205c:	40020470 	.word	0x40020470
 8002060:	40020488 	.word	0x40020488
 8002064:	400204a0 	.word	0x400204a0
 8002068:	400204b8 	.word	0x400204b8
 800206c:	58025408 	.word	0x58025408
 8002070:	5802541c 	.word	0x5802541c
 8002074:	58025430 	.word	0x58025430
 8002078:	58025444 	.word	0x58025444
 800207c:	58025458 	.word	0x58025458
 8002080:	5802546c 	.word	0x5802546c
 8002084:	58025480 	.word	0x58025480
 8002088:	58025494 	.word	0x58025494
 800208c:	2300      	movs	r3, #0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800209c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a6d      	ldr	r2, [pc, #436]	@ (800225c <HAL_DMA_Abort+0x444>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d04a      	beq.n	8002142 <HAL_DMA_Abort+0x32a>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002260 <HAL_DMA_Abort+0x448>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d045      	beq.n	8002142 <HAL_DMA_Abort+0x32a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6a      	ldr	r2, [pc, #424]	@ (8002264 <HAL_DMA_Abort+0x44c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d040      	beq.n	8002142 <HAL_DMA_Abort+0x32a>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a68      	ldr	r2, [pc, #416]	@ (8002268 <HAL_DMA_Abort+0x450>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d03b      	beq.n	8002142 <HAL_DMA_Abort+0x32a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a67      	ldr	r2, [pc, #412]	@ (800226c <HAL_DMA_Abort+0x454>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d036      	beq.n	8002142 <HAL_DMA_Abort+0x32a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a65      	ldr	r2, [pc, #404]	@ (8002270 <HAL_DMA_Abort+0x458>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d031      	beq.n	8002142 <HAL_DMA_Abort+0x32a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a64      	ldr	r2, [pc, #400]	@ (8002274 <HAL_DMA_Abort+0x45c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d02c      	beq.n	8002142 <HAL_DMA_Abort+0x32a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a62      	ldr	r2, [pc, #392]	@ (8002278 <HAL_DMA_Abort+0x460>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d027      	beq.n	8002142 <HAL_DMA_Abort+0x32a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a61      	ldr	r2, [pc, #388]	@ (800227c <HAL_DMA_Abort+0x464>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d022      	beq.n	8002142 <HAL_DMA_Abort+0x32a>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a5f      	ldr	r2, [pc, #380]	@ (8002280 <HAL_DMA_Abort+0x468>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01d      	beq.n	8002142 <HAL_DMA_Abort+0x32a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a5e      	ldr	r2, [pc, #376]	@ (8002284 <HAL_DMA_Abort+0x46c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d018      	beq.n	8002142 <HAL_DMA_Abort+0x32a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a5c      	ldr	r2, [pc, #368]	@ (8002288 <HAL_DMA_Abort+0x470>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_DMA_Abort+0x32a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a5b      	ldr	r2, [pc, #364]	@ (800228c <HAL_DMA_Abort+0x474>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00e      	beq.n	8002142 <HAL_DMA_Abort+0x32a>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a59      	ldr	r2, [pc, #356]	@ (8002290 <HAL_DMA_Abort+0x478>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d009      	beq.n	8002142 <HAL_DMA_Abort+0x32a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a58      	ldr	r2, [pc, #352]	@ (8002294 <HAL_DMA_Abort+0x47c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d004      	beq.n	8002142 <HAL_DMA_Abort+0x32a>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a56      	ldr	r2, [pc, #344]	@ (8002298 <HAL_DMA_Abort+0x480>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d108      	bne.n	8002154 <HAL_DMA_Abort+0x33c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e007      	b.n	8002164 <HAL_DMA_Abort+0x34c>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002164:	e013      	b.n	800218e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002166:	f7fe ff55 	bl	8001014 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b05      	cmp	r3, #5
 8002172:	d90c      	bls.n	800218e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2203      	movs	r2, #3
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e12d      	b.n	80023ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1e5      	bne.n	8002166 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a2f      	ldr	r2, [pc, #188]	@ (800225c <HAL_DMA_Abort+0x444>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d04a      	beq.n	800223a <HAL_DMA_Abort+0x422>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002260 <HAL_DMA_Abort+0x448>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d045      	beq.n	800223a <HAL_DMA_Abort+0x422>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002264 <HAL_DMA_Abort+0x44c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d040      	beq.n	800223a <HAL_DMA_Abort+0x422>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002268 <HAL_DMA_Abort+0x450>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d03b      	beq.n	800223a <HAL_DMA_Abort+0x422>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a29      	ldr	r2, [pc, #164]	@ (800226c <HAL_DMA_Abort+0x454>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d036      	beq.n	800223a <HAL_DMA_Abort+0x422>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a27      	ldr	r2, [pc, #156]	@ (8002270 <HAL_DMA_Abort+0x458>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d031      	beq.n	800223a <HAL_DMA_Abort+0x422>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a26      	ldr	r2, [pc, #152]	@ (8002274 <HAL_DMA_Abort+0x45c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d02c      	beq.n	800223a <HAL_DMA_Abort+0x422>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a24      	ldr	r2, [pc, #144]	@ (8002278 <HAL_DMA_Abort+0x460>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d027      	beq.n	800223a <HAL_DMA_Abort+0x422>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a23      	ldr	r2, [pc, #140]	@ (800227c <HAL_DMA_Abort+0x464>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d022      	beq.n	800223a <HAL_DMA_Abort+0x422>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a21      	ldr	r2, [pc, #132]	@ (8002280 <HAL_DMA_Abort+0x468>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d01d      	beq.n	800223a <HAL_DMA_Abort+0x422>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a20      	ldr	r2, [pc, #128]	@ (8002284 <HAL_DMA_Abort+0x46c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d018      	beq.n	800223a <HAL_DMA_Abort+0x422>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1e      	ldr	r2, [pc, #120]	@ (8002288 <HAL_DMA_Abort+0x470>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <HAL_DMA_Abort+0x422>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a1d      	ldr	r2, [pc, #116]	@ (800228c <HAL_DMA_Abort+0x474>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d00e      	beq.n	800223a <HAL_DMA_Abort+0x422>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1b      	ldr	r2, [pc, #108]	@ (8002290 <HAL_DMA_Abort+0x478>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d009      	beq.n	800223a <HAL_DMA_Abort+0x422>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a1a      	ldr	r2, [pc, #104]	@ (8002294 <HAL_DMA_Abort+0x47c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d004      	beq.n	800223a <HAL_DMA_Abort+0x422>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a18      	ldr	r2, [pc, #96]	@ (8002298 <HAL_DMA_Abort+0x480>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d101      	bne.n	800223e <HAL_DMA_Abort+0x426>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_DMA_Abort+0x428>
 800223e:	2300      	movs	r3, #0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d02b      	beq.n	800229c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002248:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	223f      	movs	r2, #63	@ 0x3f
 8002254:	409a      	lsls	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	e02a      	b.n	80022b2 <HAL_DMA_Abort+0x49a>
 800225c:	40020010 	.word	0x40020010
 8002260:	40020028 	.word	0x40020028
 8002264:	40020040 	.word	0x40020040
 8002268:	40020058 	.word	0x40020058
 800226c:	40020070 	.word	0x40020070
 8002270:	40020088 	.word	0x40020088
 8002274:	400200a0 	.word	0x400200a0
 8002278:	400200b8 	.word	0x400200b8
 800227c:	40020410 	.word	0x40020410
 8002280:	40020428 	.word	0x40020428
 8002284:	40020440 	.word	0x40020440
 8002288:	40020458 	.word	0x40020458
 800228c:	40020470 	.word	0x40020470
 8002290:	40020488 	.word	0x40020488
 8002294:	400204a0 	.word	0x400204a0
 8002298:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	2201      	movs	r2, #1
 80022ac:	409a      	lsls	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a4f      	ldr	r2, [pc, #316]	@ (80023f4 <HAL_DMA_Abort+0x5dc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d072      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a4d      	ldr	r2, [pc, #308]	@ (80023f8 <HAL_DMA_Abort+0x5e0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d06d      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a4c      	ldr	r2, [pc, #304]	@ (80023fc <HAL_DMA_Abort+0x5e4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d068      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002400 <HAL_DMA_Abort+0x5e8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d063      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a49      	ldr	r2, [pc, #292]	@ (8002404 <HAL_DMA_Abort+0x5ec>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d05e      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a47      	ldr	r2, [pc, #284]	@ (8002408 <HAL_DMA_Abort+0x5f0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d059      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a46      	ldr	r2, [pc, #280]	@ (800240c <HAL_DMA_Abort+0x5f4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d054      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a44      	ldr	r2, [pc, #272]	@ (8002410 <HAL_DMA_Abort+0x5f8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d04f      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a43      	ldr	r2, [pc, #268]	@ (8002414 <HAL_DMA_Abort+0x5fc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d04a      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a41      	ldr	r2, [pc, #260]	@ (8002418 <HAL_DMA_Abort+0x600>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d045      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a40      	ldr	r2, [pc, #256]	@ (800241c <HAL_DMA_Abort+0x604>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d040      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a3e      	ldr	r2, [pc, #248]	@ (8002420 <HAL_DMA_Abort+0x608>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d03b      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a3d      	ldr	r2, [pc, #244]	@ (8002424 <HAL_DMA_Abort+0x60c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d036      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a3b      	ldr	r2, [pc, #236]	@ (8002428 <HAL_DMA_Abort+0x610>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d031      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a3a      	ldr	r2, [pc, #232]	@ (800242c <HAL_DMA_Abort+0x614>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d02c      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a38      	ldr	r2, [pc, #224]	@ (8002430 <HAL_DMA_Abort+0x618>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d027      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a37      	ldr	r2, [pc, #220]	@ (8002434 <HAL_DMA_Abort+0x61c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d022      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a35      	ldr	r2, [pc, #212]	@ (8002438 <HAL_DMA_Abort+0x620>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01d      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a34      	ldr	r2, [pc, #208]	@ (800243c <HAL_DMA_Abort+0x624>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d018      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a32      	ldr	r2, [pc, #200]	@ (8002440 <HAL_DMA_Abort+0x628>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a31      	ldr	r2, [pc, #196]	@ (8002444 <HAL_DMA_Abort+0x62c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d00e      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a2f      	ldr	r2, [pc, #188]	@ (8002448 <HAL_DMA_Abort+0x630>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d009      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a2e      	ldr	r2, [pc, #184]	@ (800244c <HAL_DMA_Abort+0x634>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d004      	beq.n	80023a2 <HAL_DMA_Abort+0x58a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a2c      	ldr	r2, [pc, #176]	@ (8002450 <HAL_DMA_Abort+0x638>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_DMA_Abort+0x58e>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_DMA_Abort+0x590>
 80023a6:	2300      	movs	r3, #0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d015      	beq.n	80023d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80023b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00c      	beq.n	80023d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80023d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40020010 	.word	0x40020010
 80023f8:	40020028 	.word	0x40020028
 80023fc:	40020040 	.word	0x40020040
 8002400:	40020058 	.word	0x40020058
 8002404:	40020070 	.word	0x40020070
 8002408:	40020088 	.word	0x40020088
 800240c:	400200a0 	.word	0x400200a0
 8002410:	400200b8 	.word	0x400200b8
 8002414:	40020410 	.word	0x40020410
 8002418:	40020428 	.word	0x40020428
 800241c:	40020440 	.word	0x40020440
 8002420:	40020458 	.word	0x40020458
 8002424:	40020470 	.word	0x40020470
 8002428:	40020488 	.word	0x40020488
 800242c:	400204a0 	.word	0x400204a0
 8002430:	400204b8 	.word	0x400204b8
 8002434:	58025408 	.word	0x58025408
 8002438:	5802541c 	.word	0x5802541c
 800243c:	58025430 	.word	0x58025430
 8002440:	58025444 	.word	0x58025444
 8002444:	58025458 	.word	0x58025458
 8002448:	5802546c 	.word	0x5802546c
 800244c:	58025480 	.word	0x58025480
 8002450:	58025494 	.word	0x58025494

08002454 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e237      	b.n	80028d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d004      	beq.n	800247c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2280      	movs	r2, #128	@ 0x80
 8002476:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e22c      	b.n	80028d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a5c      	ldr	r2, [pc, #368]	@ (80025f4 <HAL_DMA_Abort_IT+0x1a0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d04a      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a5b      	ldr	r2, [pc, #364]	@ (80025f8 <HAL_DMA_Abort_IT+0x1a4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d045      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a59      	ldr	r2, [pc, #356]	@ (80025fc <HAL_DMA_Abort_IT+0x1a8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d040      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a58      	ldr	r2, [pc, #352]	@ (8002600 <HAL_DMA_Abort_IT+0x1ac>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d03b      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a56      	ldr	r2, [pc, #344]	@ (8002604 <HAL_DMA_Abort_IT+0x1b0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d036      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a55      	ldr	r2, [pc, #340]	@ (8002608 <HAL_DMA_Abort_IT+0x1b4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d031      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a53      	ldr	r2, [pc, #332]	@ (800260c <HAL_DMA_Abort_IT+0x1b8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d02c      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a52      	ldr	r2, [pc, #328]	@ (8002610 <HAL_DMA_Abort_IT+0x1bc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d027      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a50      	ldr	r2, [pc, #320]	@ (8002614 <HAL_DMA_Abort_IT+0x1c0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d022      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a4f      	ldr	r2, [pc, #316]	@ (8002618 <HAL_DMA_Abort_IT+0x1c4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d01d      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a4d      	ldr	r2, [pc, #308]	@ (800261c <HAL_DMA_Abort_IT+0x1c8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d018      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002620 <HAL_DMA_Abort_IT+0x1cc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d013      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002624 <HAL_DMA_Abort_IT+0x1d0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00e      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a49      	ldr	r2, [pc, #292]	@ (8002628 <HAL_DMA_Abort_IT+0x1d4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d009      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a47      	ldr	r2, [pc, #284]	@ (800262c <HAL_DMA_Abort_IT+0x1d8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d004      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a46      	ldr	r2, [pc, #280]	@ (8002630 <HAL_DMA_Abort_IT+0x1dc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d101      	bne.n	8002520 <HAL_DMA_Abort_IT+0xcc>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <HAL_DMA_Abort_IT+0xce>
 8002520:	2300      	movs	r3, #0
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8086 	beq.w	8002634 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2204      	movs	r2, #4
 800252c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a2f      	ldr	r2, [pc, #188]	@ (80025f4 <HAL_DMA_Abort_IT+0x1a0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d04a      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x17c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a2e      	ldr	r2, [pc, #184]	@ (80025f8 <HAL_DMA_Abort_IT+0x1a4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d045      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x17c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a2c      	ldr	r2, [pc, #176]	@ (80025fc <HAL_DMA_Abort_IT+0x1a8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d040      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x17c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a2b      	ldr	r2, [pc, #172]	@ (8002600 <HAL_DMA_Abort_IT+0x1ac>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d03b      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x17c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a29      	ldr	r2, [pc, #164]	@ (8002604 <HAL_DMA_Abort_IT+0x1b0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d036      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x17c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a28      	ldr	r2, [pc, #160]	@ (8002608 <HAL_DMA_Abort_IT+0x1b4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d031      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x17c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a26      	ldr	r2, [pc, #152]	@ (800260c <HAL_DMA_Abort_IT+0x1b8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d02c      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x17c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a25      	ldr	r2, [pc, #148]	@ (8002610 <HAL_DMA_Abort_IT+0x1bc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d027      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x17c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a23      	ldr	r2, [pc, #140]	@ (8002614 <HAL_DMA_Abort_IT+0x1c0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d022      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x17c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a22      	ldr	r2, [pc, #136]	@ (8002618 <HAL_DMA_Abort_IT+0x1c4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d01d      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x17c>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a20      	ldr	r2, [pc, #128]	@ (800261c <HAL_DMA_Abort_IT+0x1c8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d018      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x17c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002620 <HAL_DMA_Abort_IT+0x1cc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d013      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x17c>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002624 <HAL_DMA_Abort_IT+0x1d0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00e      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x17c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002628 <HAL_DMA_Abort_IT+0x1d4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d009      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x17c>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1a      	ldr	r2, [pc, #104]	@ (800262c <HAL_DMA_Abort_IT+0x1d8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d004      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x17c>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a19      	ldr	r2, [pc, #100]	@ (8002630 <HAL_DMA_Abort_IT+0x1dc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d108      	bne.n	80025e2 <HAL_DMA_Abort_IT+0x18e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e178      	b.n	80028d4 <HAL_DMA_Abort_IT+0x480>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e16f      	b.n	80028d4 <HAL_DMA_Abort_IT+0x480>
 80025f4:	40020010 	.word	0x40020010
 80025f8:	40020028 	.word	0x40020028
 80025fc:	40020040 	.word	0x40020040
 8002600:	40020058 	.word	0x40020058
 8002604:	40020070 	.word	0x40020070
 8002608:	40020088 	.word	0x40020088
 800260c:	400200a0 	.word	0x400200a0
 8002610:	400200b8 	.word	0x400200b8
 8002614:	40020410 	.word	0x40020410
 8002618:	40020428 	.word	0x40020428
 800261c:	40020440 	.word	0x40020440
 8002620:	40020458 	.word	0x40020458
 8002624:	40020470 	.word	0x40020470
 8002628:	40020488 	.word	0x40020488
 800262c:	400204a0 	.word	0x400204a0
 8002630:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 020e 	bic.w	r2, r2, #14
 8002642:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a6c      	ldr	r2, [pc, #432]	@ (80027fc <HAL_DMA_Abort_IT+0x3a8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d04a      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x290>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6b      	ldr	r2, [pc, #428]	@ (8002800 <HAL_DMA_Abort_IT+0x3ac>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d045      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x290>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a69      	ldr	r2, [pc, #420]	@ (8002804 <HAL_DMA_Abort_IT+0x3b0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d040      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x290>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a68      	ldr	r2, [pc, #416]	@ (8002808 <HAL_DMA_Abort_IT+0x3b4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d03b      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x290>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a66      	ldr	r2, [pc, #408]	@ (800280c <HAL_DMA_Abort_IT+0x3b8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d036      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x290>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a65      	ldr	r2, [pc, #404]	@ (8002810 <HAL_DMA_Abort_IT+0x3bc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d031      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x290>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a63      	ldr	r2, [pc, #396]	@ (8002814 <HAL_DMA_Abort_IT+0x3c0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d02c      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x290>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a62      	ldr	r2, [pc, #392]	@ (8002818 <HAL_DMA_Abort_IT+0x3c4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d027      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x290>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a60      	ldr	r2, [pc, #384]	@ (800281c <HAL_DMA_Abort_IT+0x3c8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d022      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x290>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002820 <HAL_DMA_Abort_IT+0x3cc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d01d      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x290>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002824 <HAL_DMA_Abort_IT+0x3d0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d018      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x290>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a5c      	ldr	r2, [pc, #368]	@ (8002828 <HAL_DMA_Abort_IT+0x3d4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d013      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x290>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a5a      	ldr	r2, [pc, #360]	@ (800282c <HAL_DMA_Abort_IT+0x3d8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00e      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x290>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a59      	ldr	r2, [pc, #356]	@ (8002830 <HAL_DMA_Abort_IT+0x3dc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d009      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x290>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a57      	ldr	r2, [pc, #348]	@ (8002834 <HAL_DMA_Abort_IT+0x3e0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d004      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x290>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a56      	ldr	r2, [pc, #344]	@ (8002838 <HAL_DMA_Abort_IT+0x3e4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d108      	bne.n	80026f6 <HAL_DMA_Abort_IT+0x2a2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	e007      	b.n	8002706 <HAL_DMA_Abort_IT+0x2b2>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0201 	bic.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a3c      	ldr	r2, [pc, #240]	@ (80027fc <HAL_DMA_Abort_IT+0x3a8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d072      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a3a      	ldr	r2, [pc, #232]	@ (8002800 <HAL_DMA_Abort_IT+0x3ac>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d06d      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a39      	ldr	r2, [pc, #228]	@ (8002804 <HAL_DMA_Abort_IT+0x3b0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d068      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a37      	ldr	r2, [pc, #220]	@ (8002808 <HAL_DMA_Abort_IT+0x3b4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d063      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a36      	ldr	r2, [pc, #216]	@ (800280c <HAL_DMA_Abort_IT+0x3b8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d05e      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a34      	ldr	r2, [pc, #208]	@ (8002810 <HAL_DMA_Abort_IT+0x3bc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d059      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a33      	ldr	r2, [pc, #204]	@ (8002814 <HAL_DMA_Abort_IT+0x3c0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d054      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a31      	ldr	r2, [pc, #196]	@ (8002818 <HAL_DMA_Abort_IT+0x3c4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d04f      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a30      	ldr	r2, [pc, #192]	@ (800281c <HAL_DMA_Abort_IT+0x3c8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d04a      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a2e      	ldr	r2, [pc, #184]	@ (8002820 <HAL_DMA_Abort_IT+0x3cc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d045      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a2d      	ldr	r2, [pc, #180]	@ (8002824 <HAL_DMA_Abort_IT+0x3d0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d040      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a2b      	ldr	r2, [pc, #172]	@ (8002828 <HAL_DMA_Abort_IT+0x3d4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d03b      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2a      	ldr	r2, [pc, #168]	@ (800282c <HAL_DMA_Abort_IT+0x3d8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d036      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a28      	ldr	r2, [pc, #160]	@ (8002830 <HAL_DMA_Abort_IT+0x3dc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d031      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a27      	ldr	r2, [pc, #156]	@ (8002834 <HAL_DMA_Abort_IT+0x3e0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d02c      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a25      	ldr	r2, [pc, #148]	@ (8002838 <HAL_DMA_Abort_IT+0x3e4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d027      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a24      	ldr	r2, [pc, #144]	@ (800283c <HAL_DMA_Abort_IT+0x3e8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d022      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a22      	ldr	r2, [pc, #136]	@ (8002840 <HAL_DMA_Abort_IT+0x3ec>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d01d      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a21      	ldr	r2, [pc, #132]	@ (8002844 <HAL_DMA_Abort_IT+0x3f0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d018      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002848 <HAL_DMA_Abort_IT+0x3f4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d013      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1e      	ldr	r2, [pc, #120]	@ (800284c <HAL_DMA_Abort_IT+0x3f8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d00e      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002850 <HAL_DMA_Abort_IT+0x3fc>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d009      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002854 <HAL_DMA_Abort_IT+0x400>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d004      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x3a2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a19      	ldr	r2, [pc, #100]	@ (8002858 <HAL_DMA_Abort_IT+0x404>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d132      	bne.n	800285c <HAL_DMA_Abort_IT+0x408>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e031      	b.n	800285e <HAL_DMA_Abort_IT+0x40a>
 80027fa:	bf00      	nop
 80027fc:	40020010 	.word	0x40020010
 8002800:	40020028 	.word	0x40020028
 8002804:	40020040 	.word	0x40020040
 8002808:	40020058 	.word	0x40020058
 800280c:	40020070 	.word	0x40020070
 8002810:	40020088 	.word	0x40020088
 8002814:	400200a0 	.word	0x400200a0
 8002818:	400200b8 	.word	0x400200b8
 800281c:	40020410 	.word	0x40020410
 8002820:	40020428 	.word	0x40020428
 8002824:	40020440 	.word	0x40020440
 8002828:	40020458 	.word	0x40020458
 800282c:	40020470 	.word	0x40020470
 8002830:	40020488 	.word	0x40020488
 8002834:	400204a0 	.word	0x400204a0
 8002838:	400204b8 	.word	0x400204b8
 800283c:	58025408 	.word	0x58025408
 8002840:	5802541c 	.word	0x5802541c
 8002844:	58025430 	.word	0x58025430
 8002848:	58025444 	.word	0x58025444
 800284c:	58025458 	.word	0x58025458
 8002850:	5802546c 	.word	0x5802546c
 8002854:	58025480 	.word	0x58025480
 8002858:	58025494 	.word	0x58025494
 800285c:	2300      	movs	r3, #0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d028      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002870:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002876:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	2201      	movs	r2, #1
 8002882:	409a      	lsls	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002890:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00c      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80028b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop

080028e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	@ 0x28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028ec:	4b67      	ldr	r3, [pc, #412]	@ (8002a8c <HAL_DMA_IRQHandler+0x1ac>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a67      	ldr	r2, [pc, #412]	@ (8002a90 <HAL_DMA_IRQHandler+0x1b0>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0a9b      	lsrs	r3, r3, #10
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002904:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a5f      	ldr	r2, [pc, #380]	@ (8002a94 <HAL_DMA_IRQHandler+0x1b4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d04a      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd2>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a5d      	ldr	r2, [pc, #372]	@ (8002a98 <HAL_DMA_IRQHandler+0x1b8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d045      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a5c      	ldr	r2, [pc, #368]	@ (8002a9c <HAL_DMA_IRQHandler+0x1bc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d040      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd2>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a5a      	ldr	r2, [pc, #360]	@ (8002aa0 <HAL_DMA_IRQHandler+0x1c0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d03b      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a59      	ldr	r2, [pc, #356]	@ (8002aa4 <HAL_DMA_IRQHandler+0x1c4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d036      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd2>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a57      	ldr	r2, [pc, #348]	@ (8002aa8 <HAL_DMA_IRQHandler+0x1c8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d031      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a56      	ldr	r2, [pc, #344]	@ (8002aac <HAL_DMA_IRQHandler+0x1cc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d02c      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd2>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a54      	ldr	r2, [pc, #336]	@ (8002ab0 <HAL_DMA_IRQHandler+0x1d0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d027      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a53      	ldr	r2, [pc, #332]	@ (8002ab4 <HAL_DMA_IRQHandler+0x1d4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d022      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd2>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a51      	ldr	r2, [pc, #324]	@ (8002ab8 <HAL_DMA_IRQHandler+0x1d8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01d      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a50      	ldr	r2, [pc, #320]	@ (8002abc <HAL_DMA_IRQHandler+0x1dc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d018      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd2>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a4e      	ldr	r2, [pc, #312]	@ (8002ac0 <HAL_DMA_IRQHandler+0x1e0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a4d      	ldr	r2, [pc, #308]	@ (8002ac4 <HAL_DMA_IRQHandler+0x1e4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00e      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd2>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a4b      	ldr	r2, [pc, #300]	@ (8002ac8 <HAL_DMA_IRQHandler+0x1e8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d009      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a4a      	ldr	r2, [pc, #296]	@ (8002acc <HAL_DMA_IRQHandler+0x1ec>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d004      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xd2>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a48      	ldr	r2, [pc, #288]	@ (8002ad0 <HAL_DMA_IRQHandler+0x1f0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d101      	bne.n	80029b6 <HAL_DMA_IRQHandler+0xd6>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_DMA_IRQHandler+0xd8>
 80029b6:	2300      	movs	r3, #0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 842b 	beq.w	8003214 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	2208      	movs	r2, #8
 80029c8:	409a      	lsls	r2, r3
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80a2 	beq.w	8002b18 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002a94 <HAL_DMA_IRQHandler+0x1b4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d04a      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x194>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002a98 <HAL_DMA_IRQHandler+0x1b8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d045      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x194>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a2b      	ldr	r2, [pc, #172]	@ (8002a9c <HAL_DMA_IRQHandler+0x1bc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d040      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x194>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a2a      	ldr	r2, [pc, #168]	@ (8002aa0 <HAL_DMA_IRQHandler+0x1c0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d03b      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x194>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a28      	ldr	r2, [pc, #160]	@ (8002aa4 <HAL_DMA_IRQHandler+0x1c4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d036      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x194>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a27      	ldr	r2, [pc, #156]	@ (8002aa8 <HAL_DMA_IRQHandler+0x1c8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d031      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x194>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a25      	ldr	r2, [pc, #148]	@ (8002aac <HAL_DMA_IRQHandler+0x1cc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d02c      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x194>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a24      	ldr	r2, [pc, #144]	@ (8002ab0 <HAL_DMA_IRQHandler+0x1d0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d027      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x194>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a22      	ldr	r2, [pc, #136]	@ (8002ab4 <HAL_DMA_IRQHandler+0x1d4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d022      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x194>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a21      	ldr	r2, [pc, #132]	@ (8002ab8 <HAL_DMA_IRQHandler+0x1d8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d01d      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x194>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002abc <HAL_DMA_IRQHandler+0x1dc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d018      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x194>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1e      	ldr	r2, [pc, #120]	@ (8002ac0 <HAL_DMA_IRQHandler+0x1e0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d013      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x194>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1c      	ldr	r2, [pc, #112]	@ (8002ac4 <HAL_DMA_IRQHandler+0x1e4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00e      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x194>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac8 <HAL_DMA_IRQHandler+0x1e8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d009      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x194>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a19      	ldr	r2, [pc, #100]	@ (8002acc <HAL_DMA_IRQHandler+0x1ec>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d004      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x194>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a18      	ldr	r2, [pc, #96]	@ (8002ad0 <HAL_DMA_IRQHandler+0x1f0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d12f      	bne.n	8002ad4 <HAL_DMA_IRQHandler+0x1f4>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bf14      	ite	ne
 8002a82:	2301      	movne	r3, #1
 8002a84:	2300      	moveq	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	e02e      	b.n	8002ae8 <HAL_DMA_IRQHandler+0x208>
 8002a8a:	bf00      	nop
 8002a8c:	24000040 	.word	0x24000040
 8002a90:	1b4e81b5 	.word	0x1b4e81b5
 8002a94:	40020010 	.word	0x40020010
 8002a98:	40020028 	.word	0x40020028
 8002a9c:	40020040 	.word	0x40020040
 8002aa0:	40020058 	.word	0x40020058
 8002aa4:	40020070 	.word	0x40020070
 8002aa8:	40020088 	.word	0x40020088
 8002aac:	400200a0 	.word	0x400200a0
 8002ab0:	400200b8 	.word	0x400200b8
 8002ab4:	40020410 	.word	0x40020410
 8002ab8:	40020428 	.word	0x40020428
 8002abc:	40020440 	.word	0x40020440
 8002ac0:	40020458 	.word	0x40020458
 8002ac4:	40020470 	.word	0x40020470
 8002ac8:	40020488 	.word	0x40020488
 8002acc:	400204a0 	.word	0x400204a0
 8002ad0:	400204b8 	.word	0x400204b8
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	bf14      	ite	ne
 8002ae2:	2301      	movne	r3, #1
 8002ae4:	2300      	moveq	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d015      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0204 	bic.w	r2, r2, #4
 8002afa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	2208      	movs	r2, #8
 8002b06:	409a      	lsls	r2, r3
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b10:	f043 0201 	orr.w	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d06e      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a69      	ldr	r2, [pc, #420]	@ (8002cd8 <HAL_DMA_IRQHandler+0x3f8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d04a      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2ee>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a67      	ldr	r2, [pc, #412]	@ (8002cdc <HAL_DMA_IRQHandler+0x3fc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d045      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2ee>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a66      	ldr	r2, [pc, #408]	@ (8002ce0 <HAL_DMA_IRQHandler+0x400>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d040      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2ee>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a64      	ldr	r2, [pc, #400]	@ (8002ce4 <HAL_DMA_IRQHandler+0x404>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d03b      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2ee>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a63      	ldr	r2, [pc, #396]	@ (8002ce8 <HAL_DMA_IRQHandler+0x408>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d036      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2ee>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a61      	ldr	r2, [pc, #388]	@ (8002cec <HAL_DMA_IRQHandler+0x40c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d031      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2ee>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a60      	ldr	r2, [pc, #384]	@ (8002cf0 <HAL_DMA_IRQHandler+0x410>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d02c      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2ee>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a5e      	ldr	r2, [pc, #376]	@ (8002cf4 <HAL_DMA_IRQHandler+0x414>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d027      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2ee>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a5d      	ldr	r2, [pc, #372]	@ (8002cf8 <HAL_DMA_IRQHandler+0x418>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d022      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2ee>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a5b      	ldr	r2, [pc, #364]	@ (8002cfc <HAL_DMA_IRQHandler+0x41c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d01d      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2ee>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a5a      	ldr	r2, [pc, #360]	@ (8002d00 <HAL_DMA_IRQHandler+0x420>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d018      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2ee>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a58      	ldr	r2, [pc, #352]	@ (8002d04 <HAL_DMA_IRQHandler+0x424>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d013      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2ee>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a57      	ldr	r2, [pc, #348]	@ (8002d08 <HAL_DMA_IRQHandler+0x428>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00e      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2ee>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a55      	ldr	r2, [pc, #340]	@ (8002d0c <HAL_DMA_IRQHandler+0x42c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d009      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2ee>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a54      	ldr	r2, [pc, #336]	@ (8002d10 <HAL_DMA_IRQHandler+0x430>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d004      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2ee>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a52      	ldr	r2, [pc, #328]	@ (8002d14 <HAL_DMA_IRQHandler+0x434>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d10a      	bne.n	8002be4 <HAL_DMA_IRQHandler+0x304>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf14      	ite	ne
 8002bdc:	2301      	movne	r3, #1
 8002bde:	2300      	moveq	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	e003      	b.n	8002bec <HAL_DMA_IRQHandler+0x30c>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2300      	movs	r3, #0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00d      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c04:	f043 0202 	orr.w	r2, r3, #2
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	2204      	movs	r2, #4
 8002c16:	409a      	lsls	r2, r3
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 808f 	beq.w	8002d40 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a2c      	ldr	r2, [pc, #176]	@ (8002cd8 <HAL_DMA_IRQHandler+0x3f8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d04a      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x3e2>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a2a      	ldr	r2, [pc, #168]	@ (8002cdc <HAL_DMA_IRQHandler+0x3fc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d045      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x3e2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a29      	ldr	r2, [pc, #164]	@ (8002ce0 <HAL_DMA_IRQHandler+0x400>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d040      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x3e2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a27      	ldr	r2, [pc, #156]	@ (8002ce4 <HAL_DMA_IRQHandler+0x404>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d03b      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x3e2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a26      	ldr	r2, [pc, #152]	@ (8002ce8 <HAL_DMA_IRQHandler+0x408>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d036      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x3e2>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a24      	ldr	r2, [pc, #144]	@ (8002cec <HAL_DMA_IRQHandler+0x40c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d031      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x3e2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a23      	ldr	r2, [pc, #140]	@ (8002cf0 <HAL_DMA_IRQHandler+0x410>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d02c      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x3e2>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a21      	ldr	r2, [pc, #132]	@ (8002cf4 <HAL_DMA_IRQHandler+0x414>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d027      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x3e2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a20      	ldr	r2, [pc, #128]	@ (8002cf8 <HAL_DMA_IRQHandler+0x418>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d022      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x3e2>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1e      	ldr	r2, [pc, #120]	@ (8002cfc <HAL_DMA_IRQHandler+0x41c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d01d      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x3e2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d00 <HAL_DMA_IRQHandler+0x420>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d018      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x3e2>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a1b      	ldr	r2, [pc, #108]	@ (8002d04 <HAL_DMA_IRQHandler+0x424>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d013      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x3e2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8002d08 <HAL_DMA_IRQHandler+0x428>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00e      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x3e2>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a18      	ldr	r2, [pc, #96]	@ (8002d0c <HAL_DMA_IRQHandler+0x42c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d009      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x3e2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a17      	ldr	r2, [pc, #92]	@ (8002d10 <HAL_DMA_IRQHandler+0x430>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d004      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x3e2>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a15      	ldr	r2, [pc, #84]	@ (8002d14 <HAL_DMA_IRQHandler+0x434>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d12a      	bne.n	8002d18 <HAL_DMA_IRQHandler+0x438>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf14      	ite	ne
 8002cd0:	2301      	movne	r3, #1
 8002cd2:	2300      	moveq	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	e023      	b.n	8002d20 <HAL_DMA_IRQHandler+0x440>
 8002cd8:	40020010 	.word	0x40020010
 8002cdc:	40020028 	.word	0x40020028
 8002ce0:	40020040 	.word	0x40020040
 8002ce4:	40020058 	.word	0x40020058
 8002ce8:	40020070 	.word	0x40020070
 8002cec:	40020088 	.word	0x40020088
 8002cf0:	400200a0 	.word	0x400200a0
 8002cf4:	400200b8 	.word	0x400200b8
 8002cf8:	40020410 	.word	0x40020410
 8002cfc:	40020428 	.word	0x40020428
 8002d00:	40020440 	.word	0x40020440
 8002d04:	40020458 	.word	0x40020458
 8002d08:	40020470 	.word	0x40020470
 8002d0c:	40020488 	.word	0x40020488
 8002d10:	400204a0 	.word	0x400204a0
 8002d14:	400204b8 	.word	0x400204b8
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00d      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d38:	f043 0204 	orr.w	r2, r3, #4
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	2210      	movs	r2, #16
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80a6 	beq.w	8002ea2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a85      	ldr	r2, [pc, #532]	@ (8002f70 <HAL_DMA_IRQHandler+0x690>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d04a      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x516>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a83      	ldr	r2, [pc, #524]	@ (8002f74 <HAL_DMA_IRQHandler+0x694>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d045      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x516>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a82      	ldr	r2, [pc, #520]	@ (8002f78 <HAL_DMA_IRQHandler+0x698>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d040      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x516>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a80      	ldr	r2, [pc, #512]	@ (8002f7c <HAL_DMA_IRQHandler+0x69c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d03b      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x516>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a7f      	ldr	r2, [pc, #508]	@ (8002f80 <HAL_DMA_IRQHandler+0x6a0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d036      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x516>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a7d      	ldr	r2, [pc, #500]	@ (8002f84 <HAL_DMA_IRQHandler+0x6a4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d031      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x516>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7c      	ldr	r2, [pc, #496]	@ (8002f88 <HAL_DMA_IRQHandler+0x6a8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d02c      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x516>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a7a      	ldr	r2, [pc, #488]	@ (8002f8c <HAL_DMA_IRQHandler+0x6ac>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d027      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x516>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a79      	ldr	r2, [pc, #484]	@ (8002f90 <HAL_DMA_IRQHandler+0x6b0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d022      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x516>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a77      	ldr	r2, [pc, #476]	@ (8002f94 <HAL_DMA_IRQHandler+0x6b4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d01d      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x516>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a76      	ldr	r2, [pc, #472]	@ (8002f98 <HAL_DMA_IRQHandler+0x6b8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d018      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x516>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a74      	ldr	r2, [pc, #464]	@ (8002f9c <HAL_DMA_IRQHandler+0x6bc>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d013      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x516>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a73      	ldr	r2, [pc, #460]	@ (8002fa0 <HAL_DMA_IRQHandler+0x6c0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00e      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x516>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a71      	ldr	r2, [pc, #452]	@ (8002fa4 <HAL_DMA_IRQHandler+0x6c4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d009      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x516>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a70      	ldr	r2, [pc, #448]	@ (8002fa8 <HAL_DMA_IRQHandler+0x6c8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d004      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x516>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a6e      	ldr	r2, [pc, #440]	@ (8002fac <HAL_DMA_IRQHandler+0x6cc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d10a      	bne.n	8002e0c <HAL_DMA_IRQHandler+0x52c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e009      	b.n	8002e20 <HAL_DMA_IRQHandler+0x540>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	bf14      	ite	ne
 8002e1a:	2301      	movne	r3, #1
 8002e1c:	2300      	moveq	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d03e      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d018      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d108      	bne.n	8002e62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d024      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4798      	blx	r3
 8002e60:	e01f      	b.n	8002ea2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01b      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
 8002e72:	e016      	b.n	8002ea2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d107      	bne.n	8002e92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0208 	bic.w	r2, r2, #8
 8002e90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2220      	movs	r2, #32
 8002eac:	409a      	lsls	r2, r3
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8110 	beq.w	80030d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a2c      	ldr	r2, [pc, #176]	@ (8002f70 <HAL_DMA_IRQHandler+0x690>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d04a      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x678>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a2b      	ldr	r2, [pc, #172]	@ (8002f74 <HAL_DMA_IRQHandler+0x694>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d045      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x678>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a29      	ldr	r2, [pc, #164]	@ (8002f78 <HAL_DMA_IRQHandler+0x698>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d040      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x678>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a28      	ldr	r2, [pc, #160]	@ (8002f7c <HAL_DMA_IRQHandler+0x69c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d03b      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x678>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a26      	ldr	r2, [pc, #152]	@ (8002f80 <HAL_DMA_IRQHandler+0x6a0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d036      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x678>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a25      	ldr	r2, [pc, #148]	@ (8002f84 <HAL_DMA_IRQHandler+0x6a4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d031      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x678>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a23      	ldr	r2, [pc, #140]	@ (8002f88 <HAL_DMA_IRQHandler+0x6a8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d02c      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x678>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a22      	ldr	r2, [pc, #136]	@ (8002f8c <HAL_DMA_IRQHandler+0x6ac>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d027      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x678>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a20      	ldr	r2, [pc, #128]	@ (8002f90 <HAL_DMA_IRQHandler+0x6b0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d022      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x678>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1f      	ldr	r2, [pc, #124]	@ (8002f94 <HAL_DMA_IRQHandler+0x6b4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d01d      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x678>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1d      	ldr	r2, [pc, #116]	@ (8002f98 <HAL_DMA_IRQHandler+0x6b8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d018      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x678>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8002f9c <HAL_DMA_IRQHandler+0x6bc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d013      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x678>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1a      	ldr	r2, [pc, #104]	@ (8002fa0 <HAL_DMA_IRQHandler+0x6c0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00e      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x678>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a19      	ldr	r2, [pc, #100]	@ (8002fa4 <HAL_DMA_IRQHandler+0x6c4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d009      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x678>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a17      	ldr	r2, [pc, #92]	@ (8002fa8 <HAL_DMA_IRQHandler+0x6c8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d004      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x678>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a16      	ldr	r2, [pc, #88]	@ (8002fac <HAL_DMA_IRQHandler+0x6cc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d12b      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x6d0>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf14      	ite	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	2300      	moveq	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	e02a      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x6e4>
 8002f6e:	bf00      	nop
 8002f70:	40020010 	.word	0x40020010
 8002f74:	40020028 	.word	0x40020028
 8002f78:	40020040 	.word	0x40020040
 8002f7c:	40020058 	.word	0x40020058
 8002f80:	40020070 	.word	0x40020070
 8002f84:	40020088 	.word	0x40020088
 8002f88:	400200a0 	.word	0x400200a0
 8002f8c:	400200b8 	.word	0x400200b8
 8002f90:	40020410 	.word	0x40020410
 8002f94:	40020428 	.word	0x40020428
 8002f98:	40020440 	.word	0x40020440
 8002f9c:	40020458 	.word	0x40020458
 8002fa0:	40020470 	.word	0x40020470
 8002fa4:	40020488 	.word	0x40020488
 8002fa8:	400204a0 	.word	0x400204a0
 8002fac:	400204b8 	.word	0x400204b8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf14      	ite	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	2300      	moveq	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8087 	beq.w	80030d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fce:	f003 031f 	and.w	r3, r3, #31
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d139      	bne.n	800305a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0216 	bic.w	r2, r2, #22
 8002ff4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003004:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <HAL_DMA_IRQHandler+0x736>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0208 	bic.w	r2, r2, #8
 8003024:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	223f      	movs	r2, #63	@ 0x3f
 8003030:	409a      	lsls	r2, r3
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 834a 	beq.w	80036e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
          }
          return;
 8003058:	e344      	b.n	80036e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d018      	beq.n	800309a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d108      	bne.n	8003088 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307a:	2b00      	cmp	r3, #0
 800307c:	d02c      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	4798      	blx	r3
 8003086:	e027      	b.n	80030d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308c:	2b00      	cmp	r3, #0
 800308e:	d023      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4798      	blx	r3
 8003098:	e01e      	b.n	80030d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10f      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0210 	bic.w	r2, r2, #16
 80030b6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8306 	beq.w	80036ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 8088 	beq.w	8003200 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2204      	movs	r2, #4
 80030f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a7a      	ldr	r2, [pc, #488]	@ (80032e8 <HAL_DMA_IRQHandler+0xa08>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d04a      	beq.n	8003198 <HAL_DMA_IRQHandler+0x8b8>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a79      	ldr	r2, [pc, #484]	@ (80032ec <HAL_DMA_IRQHandler+0xa0c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d045      	beq.n	8003198 <HAL_DMA_IRQHandler+0x8b8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a77      	ldr	r2, [pc, #476]	@ (80032f0 <HAL_DMA_IRQHandler+0xa10>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d040      	beq.n	8003198 <HAL_DMA_IRQHandler+0x8b8>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a76      	ldr	r2, [pc, #472]	@ (80032f4 <HAL_DMA_IRQHandler+0xa14>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d03b      	beq.n	8003198 <HAL_DMA_IRQHandler+0x8b8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a74      	ldr	r2, [pc, #464]	@ (80032f8 <HAL_DMA_IRQHandler+0xa18>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d036      	beq.n	8003198 <HAL_DMA_IRQHandler+0x8b8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a73      	ldr	r2, [pc, #460]	@ (80032fc <HAL_DMA_IRQHandler+0xa1c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d031      	beq.n	8003198 <HAL_DMA_IRQHandler+0x8b8>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a71      	ldr	r2, [pc, #452]	@ (8003300 <HAL_DMA_IRQHandler+0xa20>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d02c      	beq.n	8003198 <HAL_DMA_IRQHandler+0x8b8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a70      	ldr	r2, [pc, #448]	@ (8003304 <HAL_DMA_IRQHandler+0xa24>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d027      	beq.n	8003198 <HAL_DMA_IRQHandler+0x8b8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a6e      	ldr	r2, [pc, #440]	@ (8003308 <HAL_DMA_IRQHandler+0xa28>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d022      	beq.n	8003198 <HAL_DMA_IRQHandler+0x8b8>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a6d      	ldr	r2, [pc, #436]	@ (800330c <HAL_DMA_IRQHandler+0xa2c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d01d      	beq.n	8003198 <HAL_DMA_IRQHandler+0x8b8>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a6b      	ldr	r2, [pc, #428]	@ (8003310 <HAL_DMA_IRQHandler+0xa30>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d018      	beq.n	8003198 <HAL_DMA_IRQHandler+0x8b8>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a6a      	ldr	r2, [pc, #424]	@ (8003314 <HAL_DMA_IRQHandler+0xa34>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d013      	beq.n	8003198 <HAL_DMA_IRQHandler+0x8b8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a68      	ldr	r2, [pc, #416]	@ (8003318 <HAL_DMA_IRQHandler+0xa38>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00e      	beq.n	8003198 <HAL_DMA_IRQHandler+0x8b8>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a67      	ldr	r2, [pc, #412]	@ (800331c <HAL_DMA_IRQHandler+0xa3c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d009      	beq.n	8003198 <HAL_DMA_IRQHandler+0x8b8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a65      	ldr	r2, [pc, #404]	@ (8003320 <HAL_DMA_IRQHandler+0xa40>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <HAL_DMA_IRQHandler+0x8b8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a64      	ldr	r2, [pc, #400]	@ (8003324 <HAL_DMA_IRQHandler+0xa44>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d108      	bne.n	80031aa <HAL_DMA_IRQHandler+0x8ca>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0201 	bic.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	e007      	b.n	80031ba <HAL_DMA_IRQHandler+0x8da>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0201 	bic.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3301      	adds	r3, #1
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d307      	bcc.n	80031d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f2      	bne.n	80031ba <HAL_DMA_IRQHandler+0x8da>
 80031d4:	e000      	b.n	80031d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80031d6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2203      	movs	r2, #3
 80031ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80031ee:	e003      	b.n	80031f8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8272 	beq.w	80036ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
 8003212:	e26c      	b.n	80036ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a43      	ldr	r2, [pc, #268]	@ (8003328 <HAL_DMA_IRQHandler+0xa48>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d022      	beq.n	8003264 <HAL_DMA_IRQHandler+0x984>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a42      	ldr	r2, [pc, #264]	@ (800332c <HAL_DMA_IRQHandler+0xa4c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d01d      	beq.n	8003264 <HAL_DMA_IRQHandler+0x984>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a40      	ldr	r2, [pc, #256]	@ (8003330 <HAL_DMA_IRQHandler+0xa50>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d018      	beq.n	8003264 <HAL_DMA_IRQHandler+0x984>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a3f      	ldr	r2, [pc, #252]	@ (8003334 <HAL_DMA_IRQHandler+0xa54>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d013      	beq.n	8003264 <HAL_DMA_IRQHandler+0x984>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a3d      	ldr	r2, [pc, #244]	@ (8003338 <HAL_DMA_IRQHandler+0xa58>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00e      	beq.n	8003264 <HAL_DMA_IRQHandler+0x984>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a3c      	ldr	r2, [pc, #240]	@ (800333c <HAL_DMA_IRQHandler+0xa5c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_DMA_IRQHandler+0x984>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a3a      	ldr	r2, [pc, #232]	@ (8003340 <HAL_DMA_IRQHandler+0xa60>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d004      	beq.n	8003264 <HAL_DMA_IRQHandler+0x984>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a39      	ldr	r2, [pc, #228]	@ (8003344 <HAL_DMA_IRQHandler+0xa64>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d101      	bne.n	8003268 <HAL_DMA_IRQHandler+0x988>
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <HAL_DMA_IRQHandler+0x98a>
 8003268:	2300      	movs	r3, #0
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 823f 	beq.w	80036ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	2204      	movs	r2, #4
 8003282:	409a      	lsls	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80cd 	beq.w	8003428 <HAL_DMA_IRQHandler+0xb48>
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80c7 	beq.w	8003428 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	2204      	movs	r2, #4
 80032a4:	409a      	lsls	r2, r3
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d049      	beq.n	8003348 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 8210 	beq.w	80036e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032d0:	e20a      	b.n	80036e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 8206 	beq.w	80036e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032e4:	e200      	b.n	80036e8 <HAL_DMA_IRQHandler+0xe08>
 80032e6:	bf00      	nop
 80032e8:	40020010 	.word	0x40020010
 80032ec:	40020028 	.word	0x40020028
 80032f0:	40020040 	.word	0x40020040
 80032f4:	40020058 	.word	0x40020058
 80032f8:	40020070 	.word	0x40020070
 80032fc:	40020088 	.word	0x40020088
 8003300:	400200a0 	.word	0x400200a0
 8003304:	400200b8 	.word	0x400200b8
 8003308:	40020410 	.word	0x40020410
 800330c:	40020428 	.word	0x40020428
 8003310:	40020440 	.word	0x40020440
 8003314:	40020458 	.word	0x40020458
 8003318:	40020470 	.word	0x40020470
 800331c:	40020488 	.word	0x40020488
 8003320:	400204a0 	.word	0x400204a0
 8003324:	400204b8 	.word	0x400204b8
 8003328:	58025408 	.word	0x58025408
 800332c:	5802541c 	.word	0x5802541c
 8003330:	58025430 	.word	0x58025430
 8003334:	58025444 	.word	0x58025444
 8003338:	58025458 	.word	0x58025458
 800333c:	5802546c 	.word	0x5802546c
 8003340:	58025480 	.word	0x58025480
 8003344:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d160      	bne.n	8003414 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a7f      	ldr	r2, [pc, #508]	@ (8003554 <HAL_DMA_IRQHandler+0xc74>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d04a      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xb12>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a7d      	ldr	r2, [pc, #500]	@ (8003558 <HAL_DMA_IRQHandler+0xc78>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d045      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xb12>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a7c      	ldr	r2, [pc, #496]	@ (800355c <HAL_DMA_IRQHandler+0xc7c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d040      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xb12>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a7a      	ldr	r2, [pc, #488]	@ (8003560 <HAL_DMA_IRQHandler+0xc80>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d03b      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xb12>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a79      	ldr	r2, [pc, #484]	@ (8003564 <HAL_DMA_IRQHandler+0xc84>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d036      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xb12>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a77      	ldr	r2, [pc, #476]	@ (8003568 <HAL_DMA_IRQHandler+0xc88>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d031      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xb12>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a76      	ldr	r2, [pc, #472]	@ (800356c <HAL_DMA_IRQHandler+0xc8c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d02c      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xb12>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a74      	ldr	r2, [pc, #464]	@ (8003570 <HAL_DMA_IRQHandler+0xc90>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d027      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xb12>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a73      	ldr	r2, [pc, #460]	@ (8003574 <HAL_DMA_IRQHandler+0xc94>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d022      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xb12>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a71      	ldr	r2, [pc, #452]	@ (8003578 <HAL_DMA_IRQHandler+0xc98>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d01d      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xb12>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a70      	ldr	r2, [pc, #448]	@ (800357c <HAL_DMA_IRQHandler+0xc9c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d018      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xb12>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003580 <HAL_DMA_IRQHandler+0xca0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d013      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xb12>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a6d      	ldr	r2, [pc, #436]	@ (8003584 <HAL_DMA_IRQHandler+0xca4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00e      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xb12>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a6b      	ldr	r2, [pc, #428]	@ (8003588 <HAL_DMA_IRQHandler+0xca8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d009      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xb12>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6a      	ldr	r2, [pc, #424]	@ (800358c <HAL_DMA_IRQHandler+0xcac>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d004      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xb12>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a68      	ldr	r2, [pc, #416]	@ (8003590 <HAL_DMA_IRQHandler+0xcb0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d108      	bne.n	8003404 <HAL_DMA_IRQHandler+0xb24>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0208 	bic.w	r2, r2, #8
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	e007      	b.n	8003414 <HAL_DMA_IRQHandler+0xb34>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0204 	bic.w	r2, r2, #4
 8003412:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8165 	beq.w	80036e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003426:	e15f      	b.n	80036e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	2202      	movs	r2, #2
 8003432:	409a      	lsls	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80c5 	beq.w	80035c8 <HAL_DMA_IRQHandler+0xce8>
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80bf 	beq.w	80035c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	2202      	movs	r2, #2
 8003454:	409a      	lsls	r2, r3
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d018      	beq.n	8003496 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 813a 	beq.w	80036ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003480:	e134      	b.n	80036ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 8130 	beq.w	80036ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003494:	e12a      	b.n	80036ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	f040 8089 	bne.w	80035b4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003554 <HAL_DMA_IRQHandler+0xc74>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d04a      	beq.n	8003542 <HAL_DMA_IRQHandler+0xc62>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a29      	ldr	r2, [pc, #164]	@ (8003558 <HAL_DMA_IRQHandler+0xc78>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d045      	beq.n	8003542 <HAL_DMA_IRQHandler+0xc62>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a28      	ldr	r2, [pc, #160]	@ (800355c <HAL_DMA_IRQHandler+0xc7c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d040      	beq.n	8003542 <HAL_DMA_IRQHandler+0xc62>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a26      	ldr	r2, [pc, #152]	@ (8003560 <HAL_DMA_IRQHandler+0xc80>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d03b      	beq.n	8003542 <HAL_DMA_IRQHandler+0xc62>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a25      	ldr	r2, [pc, #148]	@ (8003564 <HAL_DMA_IRQHandler+0xc84>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d036      	beq.n	8003542 <HAL_DMA_IRQHandler+0xc62>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a23      	ldr	r2, [pc, #140]	@ (8003568 <HAL_DMA_IRQHandler+0xc88>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d031      	beq.n	8003542 <HAL_DMA_IRQHandler+0xc62>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a22      	ldr	r2, [pc, #136]	@ (800356c <HAL_DMA_IRQHandler+0xc8c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d02c      	beq.n	8003542 <HAL_DMA_IRQHandler+0xc62>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a20      	ldr	r2, [pc, #128]	@ (8003570 <HAL_DMA_IRQHandler+0xc90>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d027      	beq.n	8003542 <HAL_DMA_IRQHandler+0xc62>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003574 <HAL_DMA_IRQHandler+0xc94>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d022      	beq.n	8003542 <HAL_DMA_IRQHandler+0xc62>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1d      	ldr	r2, [pc, #116]	@ (8003578 <HAL_DMA_IRQHandler+0xc98>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d01d      	beq.n	8003542 <HAL_DMA_IRQHandler+0xc62>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1c      	ldr	r2, [pc, #112]	@ (800357c <HAL_DMA_IRQHandler+0xc9c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d018      	beq.n	8003542 <HAL_DMA_IRQHandler+0xc62>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1a      	ldr	r2, [pc, #104]	@ (8003580 <HAL_DMA_IRQHandler+0xca0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_DMA_IRQHandler+0xc62>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a19      	ldr	r2, [pc, #100]	@ (8003584 <HAL_DMA_IRQHandler+0xca4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00e      	beq.n	8003542 <HAL_DMA_IRQHandler+0xc62>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a17      	ldr	r2, [pc, #92]	@ (8003588 <HAL_DMA_IRQHandler+0xca8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d009      	beq.n	8003542 <HAL_DMA_IRQHandler+0xc62>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a16      	ldr	r2, [pc, #88]	@ (800358c <HAL_DMA_IRQHandler+0xcac>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_DMA_IRQHandler+0xc62>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a14      	ldr	r2, [pc, #80]	@ (8003590 <HAL_DMA_IRQHandler+0xcb0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d128      	bne.n	8003594 <HAL_DMA_IRQHandler+0xcb4>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0214 	bic.w	r2, r2, #20
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e027      	b.n	80035a4 <HAL_DMA_IRQHandler+0xcc4>
 8003554:	40020010 	.word	0x40020010
 8003558:	40020028 	.word	0x40020028
 800355c:	40020040 	.word	0x40020040
 8003560:	40020058 	.word	0x40020058
 8003564:	40020070 	.word	0x40020070
 8003568:	40020088 	.word	0x40020088
 800356c:	400200a0 	.word	0x400200a0
 8003570:	400200b8 	.word	0x400200b8
 8003574:	40020410 	.word	0x40020410
 8003578:	40020428 	.word	0x40020428
 800357c:	40020440 	.word	0x40020440
 8003580:	40020458 	.word	0x40020458
 8003584:	40020470 	.word	0x40020470
 8003588:	40020488 	.word	0x40020488
 800358c:	400204a0 	.word	0x400204a0
 8003590:	400204b8 	.word	0x400204b8
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 020a 	bic.w	r2, r2, #10
 80035a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8097 	beq.w	80036ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035c6:	e091      	b.n	80036ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	2208      	movs	r2, #8
 80035d2:	409a      	lsls	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8088 	beq.w	80036ee <HAL_DMA_IRQHandler+0xe0e>
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8082 	beq.w	80036ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a41      	ldr	r2, [pc, #260]	@ (80036f4 <HAL_DMA_IRQHandler+0xe14>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d04a      	beq.n	800368a <HAL_DMA_IRQHandler+0xdaa>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a3f      	ldr	r2, [pc, #252]	@ (80036f8 <HAL_DMA_IRQHandler+0xe18>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d045      	beq.n	800368a <HAL_DMA_IRQHandler+0xdaa>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a3e      	ldr	r2, [pc, #248]	@ (80036fc <HAL_DMA_IRQHandler+0xe1c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d040      	beq.n	800368a <HAL_DMA_IRQHandler+0xdaa>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a3c      	ldr	r2, [pc, #240]	@ (8003700 <HAL_DMA_IRQHandler+0xe20>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d03b      	beq.n	800368a <HAL_DMA_IRQHandler+0xdaa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a3b      	ldr	r2, [pc, #236]	@ (8003704 <HAL_DMA_IRQHandler+0xe24>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d036      	beq.n	800368a <HAL_DMA_IRQHandler+0xdaa>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a39      	ldr	r2, [pc, #228]	@ (8003708 <HAL_DMA_IRQHandler+0xe28>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d031      	beq.n	800368a <HAL_DMA_IRQHandler+0xdaa>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a38      	ldr	r2, [pc, #224]	@ (800370c <HAL_DMA_IRQHandler+0xe2c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d02c      	beq.n	800368a <HAL_DMA_IRQHandler+0xdaa>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a36      	ldr	r2, [pc, #216]	@ (8003710 <HAL_DMA_IRQHandler+0xe30>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d027      	beq.n	800368a <HAL_DMA_IRQHandler+0xdaa>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a35      	ldr	r2, [pc, #212]	@ (8003714 <HAL_DMA_IRQHandler+0xe34>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d022      	beq.n	800368a <HAL_DMA_IRQHandler+0xdaa>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a33      	ldr	r2, [pc, #204]	@ (8003718 <HAL_DMA_IRQHandler+0xe38>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d01d      	beq.n	800368a <HAL_DMA_IRQHandler+0xdaa>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a32      	ldr	r2, [pc, #200]	@ (800371c <HAL_DMA_IRQHandler+0xe3c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d018      	beq.n	800368a <HAL_DMA_IRQHandler+0xdaa>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a30      	ldr	r2, [pc, #192]	@ (8003720 <HAL_DMA_IRQHandler+0xe40>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d013      	beq.n	800368a <HAL_DMA_IRQHandler+0xdaa>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a2f      	ldr	r2, [pc, #188]	@ (8003724 <HAL_DMA_IRQHandler+0xe44>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00e      	beq.n	800368a <HAL_DMA_IRQHandler+0xdaa>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a2d      	ldr	r2, [pc, #180]	@ (8003728 <HAL_DMA_IRQHandler+0xe48>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d009      	beq.n	800368a <HAL_DMA_IRQHandler+0xdaa>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a2c      	ldr	r2, [pc, #176]	@ (800372c <HAL_DMA_IRQHandler+0xe4c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d004      	beq.n	800368a <HAL_DMA_IRQHandler+0xdaa>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a2a      	ldr	r2, [pc, #168]	@ (8003730 <HAL_DMA_IRQHandler+0xe50>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d108      	bne.n	800369c <HAL_DMA_IRQHandler+0xdbc>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 021c 	bic.w	r2, r2, #28
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	e007      	b.n	80036ac <HAL_DMA_IRQHandler+0xdcc>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 020e 	bic.w	r2, r2, #14
 80036aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	2201      	movs	r2, #1
 80036b6:	409a      	lsls	r2, r3
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d009      	beq.n	80036ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	4798      	blx	r3
 80036e2:	e004      	b.n	80036ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80036e4:	bf00      	nop
 80036e6:	e002      	b.n	80036ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036e8:	bf00      	nop
 80036ea:	e000      	b.n	80036ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80036ee:	3728      	adds	r7, #40	@ 0x28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40020010 	.word	0x40020010
 80036f8:	40020028 	.word	0x40020028
 80036fc:	40020040 	.word	0x40020040
 8003700:	40020058 	.word	0x40020058
 8003704:	40020070 	.word	0x40020070
 8003708:	40020088 	.word	0x40020088
 800370c:	400200a0 	.word	0x400200a0
 8003710:	400200b8 	.word	0x400200b8
 8003714:	40020410 	.word	0x40020410
 8003718:	40020428 	.word	0x40020428
 800371c:	40020440 	.word	0x40020440
 8003720:	40020458 	.word	0x40020458
 8003724:	40020470 	.word	0x40020470
 8003728:	40020488 	.word	0x40020488
 800372c:	400204a0 	.word	0x400204a0
 8003730:	400204b8 	.word	0x400204b8

08003734 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003746:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a7f      	ldr	r2, [pc, #508]	@ (8003950 <DMA_SetConfig+0x21c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d072      	beq.n	800383e <DMA_SetConfig+0x10a>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a7d      	ldr	r2, [pc, #500]	@ (8003954 <DMA_SetConfig+0x220>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d06d      	beq.n	800383e <DMA_SetConfig+0x10a>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a7c      	ldr	r2, [pc, #496]	@ (8003958 <DMA_SetConfig+0x224>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d068      	beq.n	800383e <DMA_SetConfig+0x10a>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a7a      	ldr	r2, [pc, #488]	@ (800395c <DMA_SetConfig+0x228>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d063      	beq.n	800383e <DMA_SetConfig+0x10a>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a79      	ldr	r2, [pc, #484]	@ (8003960 <DMA_SetConfig+0x22c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d05e      	beq.n	800383e <DMA_SetConfig+0x10a>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a77      	ldr	r2, [pc, #476]	@ (8003964 <DMA_SetConfig+0x230>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d059      	beq.n	800383e <DMA_SetConfig+0x10a>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a76      	ldr	r2, [pc, #472]	@ (8003968 <DMA_SetConfig+0x234>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d054      	beq.n	800383e <DMA_SetConfig+0x10a>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a74      	ldr	r2, [pc, #464]	@ (800396c <DMA_SetConfig+0x238>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d04f      	beq.n	800383e <DMA_SetConfig+0x10a>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a73      	ldr	r2, [pc, #460]	@ (8003970 <DMA_SetConfig+0x23c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d04a      	beq.n	800383e <DMA_SetConfig+0x10a>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a71      	ldr	r2, [pc, #452]	@ (8003974 <DMA_SetConfig+0x240>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d045      	beq.n	800383e <DMA_SetConfig+0x10a>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a70      	ldr	r2, [pc, #448]	@ (8003978 <DMA_SetConfig+0x244>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d040      	beq.n	800383e <DMA_SetConfig+0x10a>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a6e      	ldr	r2, [pc, #440]	@ (800397c <DMA_SetConfig+0x248>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d03b      	beq.n	800383e <DMA_SetConfig+0x10a>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a6d      	ldr	r2, [pc, #436]	@ (8003980 <DMA_SetConfig+0x24c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d036      	beq.n	800383e <DMA_SetConfig+0x10a>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a6b      	ldr	r2, [pc, #428]	@ (8003984 <DMA_SetConfig+0x250>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d031      	beq.n	800383e <DMA_SetConfig+0x10a>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a6a      	ldr	r2, [pc, #424]	@ (8003988 <DMA_SetConfig+0x254>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d02c      	beq.n	800383e <DMA_SetConfig+0x10a>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a68      	ldr	r2, [pc, #416]	@ (800398c <DMA_SetConfig+0x258>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d027      	beq.n	800383e <DMA_SetConfig+0x10a>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a67      	ldr	r2, [pc, #412]	@ (8003990 <DMA_SetConfig+0x25c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d022      	beq.n	800383e <DMA_SetConfig+0x10a>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a65      	ldr	r2, [pc, #404]	@ (8003994 <DMA_SetConfig+0x260>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d01d      	beq.n	800383e <DMA_SetConfig+0x10a>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a64      	ldr	r2, [pc, #400]	@ (8003998 <DMA_SetConfig+0x264>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d018      	beq.n	800383e <DMA_SetConfig+0x10a>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a62      	ldr	r2, [pc, #392]	@ (800399c <DMA_SetConfig+0x268>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d013      	beq.n	800383e <DMA_SetConfig+0x10a>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a61      	ldr	r2, [pc, #388]	@ (80039a0 <DMA_SetConfig+0x26c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00e      	beq.n	800383e <DMA_SetConfig+0x10a>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a5f      	ldr	r2, [pc, #380]	@ (80039a4 <DMA_SetConfig+0x270>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d009      	beq.n	800383e <DMA_SetConfig+0x10a>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a5e      	ldr	r2, [pc, #376]	@ (80039a8 <DMA_SetConfig+0x274>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d004      	beq.n	800383e <DMA_SetConfig+0x10a>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a5c      	ldr	r2, [pc, #368]	@ (80039ac <DMA_SetConfig+0x278>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <DMA_SetConfig+0x10e>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <DMA_SetConfig+0x110>
 8003842:	2300      	movs	r3, #0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00d      	beq.n	8003864 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003850:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003862:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a39      	ldr	r2, [pc, #228]	@ (8003950 <DMA_SetConfig+0x21c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d04a      	beq.n	8003904 <DMA_SetConfig+0x1d0>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a38      	ldr	r2, [pc, #224]	@ (8003954 <DMA_SetConfig+0x220>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d045      	beq.n	8003904 <DMA_SetConfig+0x1d0>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a36      	ldr	r2, [pc, #216]	@ (8003958 <DMA_SetConfig+0x224>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d040      	beq.n	8003904 <DMA_SetConfig+0x1d0>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a35      	ldr	r2, [pc, #212]	@ (800395c <DMA_SetConfig+0x228>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d03b      	beq.n	8003904 <DMA_SetConfig+0x1d0>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a33      	ldr	r2, [pc, #204]	@ (8003960 <DMA_SetConfig+0x22c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d036      	beq.n	8003904 <DMA_SetConfig+0x1d0>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a32      	ldr	r2, [pc, #200]	@ (8003964 <DMA_SetConfig+0x230>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d031      	beq.n	8003904 <DMA_SetConfig+0x1d0>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a30      	ldr	r2, [pc, #192]	@ (8003968 <DMA_SetConfig+0x234>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d02c      	beq.n	8003904 <DMA_SetConfig+0x1d0>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a2f      	ldr	r2, [pc, #188]	@ (800396c <DMA_SetConfig+0x238>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d027      	beq.n	8003904 <DMA_SetConfig+0x1d0>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003970 <DMA_SetConfig+0x23c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d022      	beq.n	8003904 <DMA_SetConfig+0x1d0>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003974 <DMA_SetConfig+0x240>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d01d      	beq.n	8003904 <DMA_SetConfig+0x1d0>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003978 <DMA_SetConfig+0x244>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d018      	beq.n	8003904 <DMA_SetConfig+0x1d0>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a29      	ldr	r2, [pc, #164]	@ (800397c <DMA_SetConfig+0x248>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d013      	beq.n	8003904 <DMA_SetConfig+0x1d0>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a27      	ldr	r2, [pc, #156]	@ (8003980 <DMA_SetConfig+0x24c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00e      	beq.n	8003904 <DMA_SetConfig+0x1d0>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a26      	ldr	r2, [pc, #152]	@ (8003984 <DMA_SetConfig+0x250>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d009      	beq.n	8003904 <DMA_SetConfig+0x1d0>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a24      	ldr	r2, [pc, #144]	@ (8003988 <DMA_SetConfig+0x254>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d004      	beq.n	8003904 <DMA_SetConfig+0x1d0>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a23      	ldr	r2, [pc, #140]	@ (800398c <DMA_SetConfig+0x258>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d101      	bne.n	8003908 <DMA_SetConfig+0x1d4>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <DMA_SetConfig+0x1d6>
 8003908:	2300      	movs	r3, #0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d059      	beq.n	80039c2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	223f      	movs	r2, #63	@ 0x3f
 8003918:	409a      	lsls	r2, r3
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800392c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b40      	cmp	r3, #64	@ 0x40
 800393c:	d138      	bne.n	80039b0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800394e:	e086      	b.n	8003a5e <DMA_SetConfig+0x32a>
 8003950:	40020010 	.word	0x40020010
 8003954:	40020028 	.word	0x40020028
 8003958:	40020040 	.word	0x40020040
 800395c:	40020058 	.word	0x40020058
 8003960:	40020070 	.word	0x40020070
 8003964:	40020088 	.word	0x40020088
 8003968:	400200a0 	.word	0x400200a0
 800396c:	400200b8 	.word	0x400200b8
 8003970:	40020410 	.word	0x40020410
 8003974:	40020428 	.word	0x40020428
 8003978:	40020440 	.word	0x40020440
 800397c:	40020458 	.word	0x40020458
 8003980:	40020470 	.word	0x40020470
 8003984:	40020488 	.word	0x40020488
 8003988:	400204a0 	.word	0x400204a0
 800398c:	400204b8 	.word	0x400204b8
 8003990:	58025408 	.word	0x58025408
 8003994:	5802541c 	.word	0x5802541c
 8003998:	58025430 	.word	0x58025430
 800399c:	58025444 	.word	0x58025444
 80039a0:	58025458 	.word	0x58025458
 80039a4:	5802546c 	.word	0x5802546c
 80039a8:	58025480 	.word	0x58025480
 80039ac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	60da      	str	r2, [r3, #12]
}
 80039c0:	e04d      	b.n	8003a5e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a29      	ldr	r2, [pc, #164]	@ (8003a6c <DMA_SetConfig+0x338>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d022      	beq.n	8003a12 <DMA_SetConfig+0x2de>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a27      	ldr	r2, [pc, #156]	@ (8003a70 <DMA_SetConfig+0x33c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d01d      	beq.n	8003a12 <DMA_SetConfig+0x2de>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a26      	ldr	r2, [pc, #152]	@ (8003a74 <DMA_SetConfig+0x340>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d018      	beq.n	8003a12 <DMA_SetConfig+0x2de>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a24      	ldr	r2, [pc, #144]	@ (8003a78 <DMA_SetConfig+0x344>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <DMA_SetConfig+0x2de>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a23      	ldr	r2, [pc, #140]	@ (8003a7c <DMA_SetConfig+0x348>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00e      	beq.n	8003a12 <DMA_SetConfig+0x2de>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a21      	ldr	r2, [pc, #132]	@ (8003a80 <DMA_SetConfig+0x34c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d009      	beq.n	8003a12 <DMA_SetConfig+0x2de>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a20      	ldr	r2, [pc, #128]	@ (8003a84 <DMA_SetConfig+0x350>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d004      	beq.n	8003a12 <DMA_SetConfig+0x2de>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8003a88 <DMA_SetConfig+0x354>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d101      	bne.n	8003a16 <DMA_SetConfig+0x2e2>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <DMA_SetConfig+0x2e4>
 8003a16:	2300      	movs	r3, #0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d020      	beq.n	8003a5e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	2201      	movs	r2, #1
 8003a26:	409a      	lsls	r2, r3
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b40      	cmp	r3, #64	@ 0x40
 8003a3a:	d108      	bne.n	8003a4e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	60da      	str	r2, [r3, #12]
}
 8003a4c:	e007      	b.n	8003a5e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	60da      	str	r2, [r3, #12]
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	58025408 	.word	0x58025408
 8003a70:	5802541c 	.word	0x5802541c
 8003a74:	58025430 	.word	0x58025430
 8003a78:	58025444 	.word	0x58025444
 8003a7c:	58025458 	.word	0x58025458
 8003a80:	5802546c 	.word	0x5802546c
 8003a84:	58025480 	.word	0x58025480
 8003a88:	58025494 	.word	0x58025494

08003a8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a42      	ldr	r2, [pc, #264]	@ (8003ba4 <DMA_CalcBaseAndBitshift+0x118>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d04a      	beq.n	8003b34 <DMA_CalcBaseAndBitshift+0xa8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a41      	ldr	r2, [pc, #260]	@ (8003ba8 <DMA_CalcBaseAndBitshift+0x11c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d045      	beq.n	8003b34 <DMA_CalcBaseAndBitshift+0xa8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a3f      	ldr	r2, [pc, #252]	@ (8003bac <DMA_CalcBaseAndBitshift+0x120>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d040      	beq.n	8003b34 <DMA_CalcBaseAndBitshift+0xa8>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a3e      	ldr	r2, [pc, #248]	@ (8003bb0 <DMA_CalcBaseAndBitshift+0x124>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d03b      	beq.n	8003b34 <DMA_CalcBaseAndBitshift+0xa8>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a3c      	ldr	r2, [pc, #240]	@ (8003bb4 <DMA_CalcBaseAndBitshift+0x128>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d036      	beq.n	8003b34 <DMA_CalcBaseAndBitshift+0xa8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a3b      	ldr	r2, [pc, #236]	@ (8003bb8 <DMA_CalcBaseAndBitshift+0x12c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d031      	beq.n	8003b34 <DMA_CalcBaseAndBitshift+0xa8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a39      	ldr	r2, [pc, #228]	@ (8003bbc <DMA_CalcBaseAndBitshift+0x130>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d02c      	beq.n	8003b34 <DMA_CalcBaseAndBitshift+0xa8>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a38      	ldr	r2, [pc, #224]	@ (8003bc0 <DMA_CalcBaseAndBitshift+0x134>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d027      	beq.n	8003b34 <DMA_CalcBaseAndBitshift+0xa8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a36      	ldr	r2, [pc, #216]	@ (8003bc4 <DMA_CalcBaseAndBitshift+0x138>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d022      	beq.n	8003b34 <DMA_CalcBaseAndBitshift+0xa8>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a35      	ldr	r2, [pc, #212]	@ (8003bc8 <DMA_CalcBaseAndBitshift+0x13c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d01d      	beq.n	8003b34 <DMA_CalcBaseAndBitshift+0xa8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a33      	ldr	r2, [pc, #204]	@ (8003bcc <DMA_CalcBaseAndBitshift+0x140>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d018      	beq.n	8003b34 <DMA_CalcBaseAndBitshift+0xa8>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a32      	ldr	r2, [pc, #200]	@ (8003bd0 <DMA_CalcBaseAndBitshift+0x144>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d013      	beq.n	8003b34 <DMA_CalcBaseAndBitshift+0xa8>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a30      	ldr	r2, [pc, #192]	@ (8003bd4 <DMA_CalcBaseAndBitshift+0x148>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00e      	beq.n	8003b34 <DMA_CalcBaseAndBitshift+0xa8>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8003bd8 <DMA_CalcBaseAndBitshift+0x14c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d009      	beq.n	8003b34 <DMA_CalcBaseAndBitshift+0xa8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2d      	ldr	r2, [pc, #180]	@ (8003bdc <DMA_CalcBaseAndBitshift+0x150>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d004      	beq.n	8003b34 <DMA_CalcBaseAndBitshift+0xa8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8003be0 <DMA_CalcBaseAndBitshift+0x154>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d101      	bne.n	8003b38 <DMA_CalcBaseAndBitshift+0xac>
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <DMA_CalcBaseAndBitshift+0xae>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d024      	beq.n	8003b88 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	3b10      	subs	r3, #16
 8003b46:	4a27      	ldr	r2, [pc, #156]	@ (8003be4 <DMA_CalcBaseAndBitshift+0x158>)
 8003b48:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	4a24      	ldr	r2, [pc, #144]	@ (8003be8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003b58:	5cd3      	ldrb	r3, [r2, r3]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d908      	bls.n	8003b78 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bec <DMA_CalcBaseAndBitshift+0x160>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	1d1a      	adds	r2, r3, #4
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b76:	e00d      	b.n	8003b94 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bec <DMA_CalcBaseAndBitshift+0x160>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b86:	e005      	b.n	8003b94 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	40020010 	.word	0x40020010
 8003ba8:	40020028 	.word	0x40020028
 8003bac:	40020040 	.word	0x40020040
 8003bb0:	40020058 	.word	0x40020058
 8003bb4:	40020070 	.word	0x40020070
 8003bb8:	40020088 	.word	0x40020088
 8003bbc:	400200a0 	.word	0x400200a0
 8003bc0:	400200b8 	.word	0x400200b8
 8003bc4:	40020410 	.word	0x40020410
 8003bc8:	40020428 	.word	0x40020428
 8003bcc:	40020440 	.word	0x40020440
 8003bd0:	40020458 	.word	0x40020458
 8003bd4:	40020470 	.word	0x40020470
 8003bd8:	40020488 	.word	0x40020488
 8003bdc:	400204a0 	.word	0x400204a0
 8003be0:	400204b8 	.word	0x400204b8
 8003be4:	aaaaaaab 	.word	0xaaaaaaab
 8003be8:	08008fe0 	.word	0x08008fe0
 8003bec:	fffffc00 	.word	0xfffffc00

08003bf0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d120      	bne.n	8003c46 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d858      	bhi.n	8003cbe <DMA_CheckFifoParam+0xce>
 8003c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c14 <DMA_CheckFifoParam+0x24>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c25 	.word	0x08003c25
 8003c18:	08003c37 	.word	0x08003c37
 8003c1c:	08003c25 	.word	0x08003c25
 8003c20:	08003cbf 	.word	0x08003cbf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d048      	beq.n	8003cc2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c34:	e045      	b.n	8003cc2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c3e:	d142      	bne.n	8003cc6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c44:	e03f      	b.n	8003cc6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c4e:	d123      	bne.n	8003c98 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d838      	bhi.n	8003cca <DMA_CheckFifoParam+0xda>
 8003c58:	a201      	add	r2, pc, #4	@ (adr r2, 8003c60 <DMA_CheckFifoParam+0x70>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c71 	.word	0x08003c71
 8003c64:	08003c77 	.word	0x08003c77
 8003c68:	08003c71 	.word	0x08003c71
 8003c6c:	08003c89 	.word	0x08003c89
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
        break;
 8003c74:	e030      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d025      	beq.n	8003cce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c86:	e022      	b.n	8003cce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c90:	d11f      	bne.n	8003cd2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c96:	e01c      	b.n	8003cd2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d902      	bls.n	8003ca6 <DMA_CheckFifoParam+0xb6>
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d003      	beq.n	8003cac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003ca4:	e018      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
        break;
 8003caa:	e015      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00e      	beq.n	8003cd6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
    break;
 8003cbc:	e00b      	b.n	8003cd6 <DMA_CheckFifoParam+0xe6>
        break;
 8003cbe:	bf00      	nop
 8003cc0:	e00a      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
        break;
 8003cc2:	bf00      	nop
 8003cc4:	e008      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
        break;
 8003cc6:	bf00      	nop
 8003cc8:	e006      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
        break;
 8003cca:	bf00      	nop
 8003ccc:	e004      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
        break;
 8003cce:	bf00      	nop
 8003cd0:	e002      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
        break;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <DMA_CheckFifoParam+0xe8>
    break;
 8003cd6:	bf00      	nop
    }
  }

  return status;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop

08003ce8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a38      	ldr	r2, [pc, #224]	@ (8003ddc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d022      	beq.n	8003d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a36      	ldr	r2, [pc, #216]	@ (8003de0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d01d      	beq.n	8003d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a35      	ldr	r2, [pc, #212]	@ (8003de4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d018      	beq.n	8003d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a33      	ldr	r2, [pc, #204]	@ (8003de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a32      	ldr	r2, [pc, #200]	@ (8003dec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00e      	beq.n	8003d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a30      	ldr	r2, [pc, #192]	@ (8003df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d009      	beq.n	8003d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a2f      	ldr	r2, [pc, #188]	@ (8003df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2d      	ldr	r2, [pc, #180]	@ (8003df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01a      	beq.n	8003d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	3b08      	subs	r3, #8
 8003d58:	4a28      	ldr	r2, [pc, #160]	@ (8003dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	091b      	lsrs	r3, r3, #4
 8003d60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4b26      	ldr	r3, [pc, #152]	@ (8003e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a24      	ldr	r2, [pc, #144]	@ (8003e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003d74:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003d84:	e024      	b.n	8003dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	3b10      	subs	r3, #16
 8003d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d806      	bhi.n	8003dae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d902      	bls.n	8003dae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3308      	adds	r3, #8
 8003dac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4b18      	ldr	r3, [pc, #96]	@ (8003e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	461a      	mov	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a16      	ldr	r2, [pc, #88]	@ (8003e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003dc0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	2201      	movs	r2, #1
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	58025408 	.word	0x58025408
 8003de0:	5802541c 	.word	0x5802541c
 8003de4:	58025430 	.word	0x58025430
 8003de8:	58025444 	.word	0x58025444
 8003dec:	58025458 	.word	0x58025458
 8003df0:	5802546c 	.word	0x5802546c
 8003df4:	58025480 	.word	0x58025480
 8003df8:	58025494 	.word	0x58025494
 8003dfc:	cccccccd 	.word	0xcccccccd
 8003e00:	16009600 	.word	0x16009600
 8003e04:	58025880 	.word	0x58025880
 8003e08:	aaaaaaab 	.word	0xaaaaaaab
 8003e0c:	400204b8 	.word	0x400204b8
 8003e10:	4002040f 	.word	0x4002040f
 8003e14:	10008200 	.word	0x10008200
 8003e18:	40020880 	.word	0x40020880

08003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d04a      	beq.n	8003ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d847      	bhi.n	8003ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a25      	ldr	r2, [pc, #148]	@ (8003ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d022      	beq.n	8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a24      	ldr	r2, [pc, #144]	@ (8003ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d01d      	beq.n	8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a22      	ldr	r2, [pc, #136]	@ (8003edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d018      	beq.n	8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a21      	ldr	r2, [pc, #132]	@ (8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d013      	beq.n	8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1f      	ldr	r2, [pc, #124]	@ (8003ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00e      	beq.n	8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d009      	beq.n	8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1c      	ldr	r2, [pc, #112]	@ (8003eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d101      	bne.n	8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4b17      	ldr	r3, [pc, #92]	@ (8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a15      	ldr	r2, [pc, #84]	@ (8003ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003ea4:	671a      	str	r2, [r3, #112]	@ 0x70
 8003ea6:	e009      	b.n	8003ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4b14      	ldr	r3, [pc, #80]	@ (8003efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a11      	ldr	r2, [pc, #68]	@ (8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003eba:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	58025408 	.word	0x58025408
 8003ed8:	5802541c 	.word	0x5802541c
 8003edc:	58025430 	.word	0x58025430
 8003ee0:	58025444 	.word	0x58025444
 8003ee4:	58025458 	.word	0x58025458
 8003ee8:	5802546c 	.word	0x5802546c
 8003eec:	58025480 	.word	0x58025480
 8003ef0:	58025494 	.word	0x58025494
 8003ef4:	1600963f 	.word	0x1600963f
 8003ef8:	58025940 	.word	0x58025940
 8003efc:	1000823f 	.word	0x1000823f
 8003f00:	40020940 	.word	0x40020940

08003f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b089      	sub	sp, #36	@ 0x24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f12:	4b86      	ldr	r3, [pc, #536]	@ (800412c <HAL_GPIO_Init+0x228>)
 8003f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f16:	e18c      	b.n	8004232 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	fa01 f303 	lsl.w	r3, r1, r3
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 817e 	beq.w	800422c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d005      	beq.n	8003f48 <HAL_GPIO_Init+0x44>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d130      	bne.n	8003faa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	2203      	movs	r2, #3
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f7e:	2201      	movs	r2, #1
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	f003 0201 	and.w	r2, r3, #1
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d017      	beq.n	8003fe6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d123      	bne.n	800403a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	08da      	lsrs	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3208      	adds	r2, #8
 8003ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	220f      	movs	r2, #15
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	08da      	lsrs	r2, r3, #3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3208      	adds	r2, #8
 8004034:	69b9      	ldr	r1, [r7, #24]
 8004036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	2203      	movs	r2, #3
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 0203 	and.w	r2, r3, #3
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4313      	orrs	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80d8 	beq.w	800422c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800407c:	4b2c      	ldr	r3, [pc, #176]	@ (8004130 <HAL_GPIO_Init+0x22c>)
 800407e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004082:	4a2b      	ldr	r2, [pc, #172]	@ (8004130 <HAL_GPIO_Init+0x22c>)
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800408c:	4b28      	ldr	r3, [pc, #160]	@ (8004130 <HAL_GPIO_Init+0x22c>)
 800408e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800409a:	4a26      	ldr	r2, [pc, #152]	@ (8004134 <HAL_GPIO_Init+0x230>)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	089b      	lsrs	r3, r3, #2
 80040a0:	3302      	adds	r3, #2
 80040a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	220f      	movs	r2, #15
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43db      	mvns	r3, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4013      	ands	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004138 <HAL_GPIO_Init+0x234>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d04a      	beq.n	800415c <HAL_GPIO_Init+0x258>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a1c      	ldr	r2, [pc, #112]	@ (800413c <HAL_GPIO_Init+0x238>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d02b      	beq.n	8004126 <HAL_GPIO_Init+0x222>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004140 <HAL_GPIO_Init+0x23c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d025      	beq.n	8004122 <HAL_GPIO_Init+0x21e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004144 <HAL_GPIO_Init+0x240>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01f      	beq.n	800411e <HAL_GPIO_Init+0x21a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a19      	ldr	r2, [pc, #100]	@ (8004148 <HAL_GPIO_Init+0x244>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d019      	beq.n	800411a <HAL_GPIO_Init+0x216>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a18      	ldr	r2, [pc, #96]	@ (800414c <HAL_GPIO_Init+0x248>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <HAL_GPIO_Init+0x212>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a17      	ldr	r2, [pc, #92]	@ (8004150 <HAL_GPIO_Init+0x24c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00d      	beq.n	8004112 <HAL_GPIO_Init+0x20e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a16      	ldr	r2, [pc, #88]	@ (8004154 <HAL_GPIO_Init+0x250>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d007      	beq.n	800410e <HAL_GPIO_Init+0x20a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a15      	ldr	r2, [pc, #84]	@ (8004158 <HAL_GPIO_Init+0x254>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <HAL_GPIO_Init+0x206>
 8004106:	2309      	movs	r3, #9
 8004108:	e029      	b.n	800415e <HAL_GPIO_Init+0x25a>
 800410a:	230a      	movs	r3, #10
 800410c:	e027      	b.n	800415e <HAL_GPIO_Init+0x25a>
 800410e:	2307      	movs	r3, #7
 8004110:	e025      	b.n	800415e <HAL_GPIO_Init+0x25a>
 8004112:	2306      	movs	r3, #6
 8004114:	e023      	b.n	800415e <HAL_GPIO_Init+0x25a>
 8004116:	2305      	movs	r3, #5
 8004118:	e021      	b.n	800415e <HAL_GPIO_Init+0x25a>
 800411a:	2304      	movs	r3, #4
 800411c:	e01f      	b.n	800415e <HAL_GPIO_Init+0x25a>
 800411e:	2303      	movs	r3, #3
 8004120:	e01d      	b.n	800415e <HAL_GPIO_Init+0x25a>
 8004122:	2302      	movs	r3, #2
 8004124:	e01b      	b.n	800415e <HAL_GPIO_Init+0x25a>
 8004126:	2301      	movs	r3, #1
 8004128:	e019      	b.n	800415e <HAL_GPIO_Init+0x25a>
 800412a:	bf00      	nop
 800412c:	58000080 	.word	0x58000080
 8004130:	58024400 	.word	0x58024400
 8004134:	58000400 	.word	0x58000400
 8004138:	58020000 	.word	0x58020000
 800413c:	58020400 	.word	0x58020400
 8004140:	58020800 	.word	0x58020800
 8004144:	58020c00 	.word	0x58020c00
 8004148:	58021000 	.word	0x58021000
 800414c:	58021400 	.word	0x58021400
 8004150:	58021800 	.word	0x58021800
 8004154:	58021c00 	.word	0x58021c00
 8004158:	58022400 	.word	0x58022400
 800415c:	2300      	movs	r3, #0
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	f002 0203 	and.w	r2, r2, #3
 8004164:	0092      	lsls	r2, r2, #2
 8004166:	4093      	lsls	r3, r2
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800416e:	4938      	ldr	r1, [pc, #224]	@ (8004250 <HAL_GPIO_Init+0x34c>)
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	3302      	adds	r3, #2
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800417c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	43db      	mvns	r3, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4013      	ands	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80041a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80041aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4013      	ands	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80041d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	43db      	mvns	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	3301      	adds	r3, #1
 8004230:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	fa22 f303 	lsr.w	r3, r2, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	f47f ae6b 	bne.w	8003f18 <HAL_GPIO_Init+0x14>
  }
}
 8004242:	bf00      	nop
 8004244:	bf00      	nop
 8004246:	3724      	adds	r7, #36	@ 0x24
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	58000400 	.word	0x58000400

08004254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	807b      	strh	r3, [r7, #2]
 8004260:	4613      	mov	r3, r2
 8004262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004264:	787b      	ldrb	r3, [r7, #1]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800426a:	887a      	ldrh	r2, [r7, #2]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004270:	e003      	b.n	800427a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004272:	887b      	ldrh	r3, [r7, #2]
 8004274:	041a      	lsls	r2, r3, #16
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	619a      	str	r2, [r3, #24]
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004298:	887a      	ldrh	r2, [r7, #2]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4013      	ands	r3, r2
 800429e:	041a      	lsls	r2, r3, #16
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	43d9      	mvns	r1, r3
 80042a4:	887b      	ldrh	r3, [r7, #2]
 80042a6:	400b      	ands	r3, r1
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	619a      	str	r2, [r3, #24]
}
 80042ae:	bf00      	nop
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80042c4:	4b19      	ldr	r3, [pc, #100]	@ (800432c <HAL_PWREx_ConfigSupply+0x70>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d00a      	beq.n	80042e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80042d0:	4b16      	ldr	r3, [pc, #88]	@ (800432c <HAL_PWREx_ConfigSupply+0x70>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d001      	beq.n	80042e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e01f      	b.n	8004322 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e01d      	b.n	8004322 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80042e6:	4b11      	ldr	r3, [pc, #68]	@ (800432c <HAL_PWREx_ConfigSupply+0x70>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f023 0207 	bic.w	r2, r3, #7
 80042ee:	490f      	ldr	r1, [pc, #60]	@ (800432c <HAL_PWREx_ConfigSupply+0x70>)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80042f6:	f7fc fe8d 	bl	8001014 <HAL_GetTick>
 80042fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042fc:	e009      	b.n	8004312 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042fe:	f7fc fe89 	bl	8001014 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800430c:	d901      	bls.n	8004312 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e007      	b.n	8004322 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004312:	4b06      	ldr	r3, [pc, #24]	@ (800432c <HAL_PWREx_ConfigSupply+0x70>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800431e:	d1ee      	bne.n	80042fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	58024800 	.word	0x58024800

08004330 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08c      	sub	sp, #48	@ 0x30
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e3c8      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 8087 	beq.w	800445e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004350:	4b88      	ldr	r3, [pc, #544]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004358:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800435a:	4b86      	ldr	r3, [pc, #536]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 800435c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004362:	2b10      	cmp	r3, #16
 8004364:	d007      	beq.n	8004376 <HAL_RCC_OscConfig+0x46>
 8004366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004368:	2b18      	cmp	r3, #24
 800436a:	d110      	bne.n	800438e <HAL_RCC_OscConfig+0x5e>
 800436c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d10b      	bne.n	800438e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004376:	4b7f      	ldr	r3, [pc, #508]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d06c      	beq.n	800445c <HAL_RCC_OscConfig+0x12c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d168      	bne.n	800445c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e3a2      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004396:	d106      	bne.n	80043a6 <HAL_RCC_OscConfig+0x76>
 8004398:	4b76      	ldr	r3, [pc, #472]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a75      	ldr	r2, [pc, #468]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 800439e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	e02e      	b.n	8004404 <HAL_RCC_OscConfig+0xd4>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x98>
 80043ae:	4b71      	ldr	r3, [pc, #452]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a70      	ldr	r2, [pc, #448]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80043b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	4b6e      	ldr	r3, [pc, #440]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a6d      	ldr	r2, [pc, #436]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80043c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	e01d      	b.n	8004404 <HAL_RCC_OscConfig+0xd4>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043d0:	d10c      	bne.n	80043ec <HAL_RCC_OscConfig+0xbc>
 80043d2:	4b68      	ldr	r3, [pc, #416]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a67      	ldr	r2, [pc, #412]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80043d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	4b65      	ldr	r3, [pc, #404]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a64      	ldr	r2, [pc, #400]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80043e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e00b      	b.n	8004404 <HAL_RCC_OscConfig+0xd4>
 80043ec:	4b61      	ldr	r3, [pc, #388]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a60      	ldr	r2, [pc, #384]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80043f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80043fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d013      	beq.n	8004434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fc fe02 	bl	8001014 <HAL_GetTick>
 8004410:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004414:	f7fc fdfe 	bl	8001014 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	@ 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e356      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004426:	4b53      	ldr	r3, [pc, #332]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0f0      	beq.n	8004414 <HAL_RCC_OscConfig+0xe4>
 8004432:	e014      	b.n	800445e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fc fdee 	bl	8001014 <HAL_GetTick>
 8004438:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800443c:	f7fc fdea 	bl	8001014 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b64      	cmp	r3, #100	@ 0x64
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e342      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800444e:	4b49      	ldr	r3, [pc, #292]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x10c>
 800445a:	e000      	b.n	800445e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 808c 	beq.w	8004584 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800446c:	4b41      	ldr	r3, [pc, #260]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004474:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004476:	4b3f      	ldr	r3, [pc, #252]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 8004478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d007      	beq.n	8004492 <HAL_RCC_OscConfig+0x162>
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	2b18      	cmp	r3, #24
 8004486:	d137      	bne.n	80044f8 <HAL_RCC_OscConfig+0x1c8>
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d132      	bne.n	80044f8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004492:	4b38      	ldr	r3, [pc, #224]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <HAL_RCC_OscConfig+0x17a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e314      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044aa:	4b32      	ldr	r3, [pc, #200]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 0219 	bic.w	r2, r3, #25
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	492f      	ldr	r1, [pc, #188]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7fc fdaa 	bl	8001014 <HAL_GetTick>
 80044c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c4:	f7fc fda6 	bl	8001014 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e2fe      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044d6:	4b27      	ldr	r3, [pc, #156]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e2:	4b24      	ldr	r3, [pc, #144]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	061b      	lsls	r3, r3, #24
 80044f0:	4920      	ldr	r1, [pc, #128]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044f6:	e045      	b.n	8004584 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d026      	beq.n	800454e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004500:	4b1c      	ldr	r3, [pc, #112]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f023 0219 	bic.w	r2, r3, #25
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4919      	ldr	r1, [pc, #100]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 800450e:	4313      	orrs	r3, r2
 8004510:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004512:	f7fc fd7f 	bl	8001014 <HAL_GetTick>
 8004516:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451a:	f7fc fd7b 	bl	8001014 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e2d3      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800452c:	4b11      	ldr	r3, [pc, #68]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004538:	4b0e      	ldr	r3, [pc, #56]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	061b      	lsls	r3, r3, #24
 8004546:	490b      	ldr	r1, [pc, #44]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 8004548:	4313      	orrs	r3, r2
 800454a:	604b      	str	r3, [r1, #4]
 800454c:	e01a      	b.n	8004584 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454e:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a08      	ldr	r2, [pc, #32]	@ (8004574 <HAL_RCC_OscConfig+0x244>)
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fc fd5b 	bl	8001014 <HAL_GetTick>
 800455e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004560:	e00a      	b.n	8004578 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004562:	f7fc fd57 	bl	8001014 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d903      	bls.n	8004578 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e2af      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
 8004574:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004578:	4b96      	ldr	r3, [pc, #600]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ee      	bne.n	8004562 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b00      	cmp	r3, #0
 800458e:	d06a      	beq.n	8004666 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004590:	4b90      	ldr	r3, [pc, #576]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004598:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800459a:	4b8e      	ldr	r3, [pc, #568]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800459c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d007      	beq.n	80045b6 <HAL_RCC_OscConfig+0x286>
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b18      	cmp	r3, #24
 80045aa:	d11b      	bne.n	80045e4 <HAL_RCC_OscConfig+0x2b4>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d116      	bne.n	80045e4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045b6:	4b87      	ldr	r3, [pc, #540]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_RCC_OscConfig+0x29e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	2b80      	cmp	r3, #128	@ 0x80
 80045c8:	d001      	beq.n	80045ce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e282      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045ce:	4b81      	ldr	r3, [pc, #516]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	061b      	lsls	r3, r3, #24
 80045dc:	497d      	ldr	r1, [pc, #500]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045e2:	e040      	b.n	8004666 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d023      	beq.n	8004634 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80045ec:	4b79      	ldr	r3, [pc, #484]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a78      	ldr	r2, [pc, #480]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80045f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fc fd0c 	bl	8001014 <HAL_GetTick>
 80045fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004600:	f7fc fd08 	bl	8001014 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e260      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004612:	4b70      	ldr	r3, [pc, #448]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800461e:	4b6d      	ldr	r3, [pc, #436]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	061b      	lsls	r3, r3, #24
 800462c:	4969      	ldr	r1, [pc, #420]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800462e:	4313      	orrs	r3, r2
 8004630:	60cb      	str	r3, [r1, #12]
 8004632:	e018      	b.n	8004666 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004634:	4b67      	ldr	r3, [pc, #412]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a66      	ldr	r2, [pc, #408]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800463a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800463e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fc fce8 	bl	8001014 <HAL_GetTick>
 8004644:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004648:	f7fc fce4 	bl	8001014 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e23c      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800465a:	4b5e      	ldr	r3, [pc, #376]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d036      	beq.n	80046e0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d019      	beq.n	80046ae <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800467a:	4b56      	ldr	r3, [pc, #344]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800467c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800467e:	4a55      	ldr	r2, [pc, #340]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004686:	f7fc fcc5 	bl	8001014 <HAL_GetTick>
 800468a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468e:	f7fc fcc1 	bl	8001014 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e219      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046a0:	4b4c      	ldr	r3, [pc, #304]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80046a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCC_OscConfig+0x35e>
 80046ac:	e018      	b.n	80046e0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ae:	4b49      	ldr	r3, [pc, #292]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80046b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b2:	4a48      	ldr	r2, [pc, #288]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80046b4:	f023 0301 	bic.w	r3, r3, #1
 80046b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ba:	f7fc fcab 	bl	8001014 <HAL_GetTick>
 80046be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c2:	f7fc fca7 	bl	8001014 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e1ff      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046d4:	4b3f      	ldr	r3, [pc, #252]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80046d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f0      	bne.n	80046c2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d036      	beq.n	800475a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d019      	beq.n	8004728 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046f4:	4b37      	ldr	r3, [pc, #220]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a36      	ldr	r2, [pc, #216]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80046fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004700:	f7fc fc88 	bl	8001014 <HAL_GetTick>
 8004704:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004708:	f7fc fc84 	bl	8001014 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e1dc      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800471a:	4b2e      	ldr	r3, [pc, #184]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x3d8>
 8004726:	e018      	b.n	800475a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004728:	4b2a      	ldr	r3, [pc, #168]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a29      	ldr	r2, [pc, #164]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800472e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004732:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004734:	f7fc fc6e 	bl	8001014 <HAL_GetTick>
 8004738:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800473c:	f7fc fc6a 	bl	8001014 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e1c2      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800474e:	4b21      	ldr	r3, [pc, #132]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8086 	beq.w	8004874 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004768:	4b1b      	ldr	r3, [pc, #108]	@ (80047d8 <HAL_RCC_OscConfig+0x4a8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1a      	ldr	r2, [pc, #104]	@ (80047d8 <HAL_RCC_OscConfig+0x4a8>)
 800476e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004772:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004774:	f7fc fc4e 	bl	8001014 <HAL_GetTick>
 8004778:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800477c:	f7fc fc4a 	bl	8001014 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b64      	cmp	r3, #100	@ 0x64
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e1a2      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800478e:	4b12      	ldr	r3, [pc, #72]	@ (80047d8 <HAL_RCC_OscConfig+0x4a8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f0      	beq.n	800477c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d106      	bne.n	80047b0 <HAL_RCC_OscConfig+0x480>
 80047a2:	4b0c      	ldr	r3, [pc, #48]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a6:	4a0b      	ldr	r2, [pc, #44]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ae:	e032      	b.n	8004816 <HAL_RCC_OscConfig+0x4e6>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d111      	bne.n	80047dc <HAL_RCC_OscConfig+0x4ac>
 80047b8:	4b06      	ldr	r3, [pc, #24]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047bc:	4a05      	ldr	r2, [pc, #20]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80047be:	f023 0301 	bic.w	r3, r3, #1
 80047c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c4:	4b03      	ldr	r3, [pc, #12]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80047c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c8:	4a02      	ldr	r2, [pc, #8]	@ (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80047ca:	f023 0304 	bic.w	r3, r3, #4
 80047ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80047d0:	e021      	b.n	8004816 <HAL_RCC_OscConfig+0x4e6>
 80047d2:	bf00      	nop
 80047d4:	58024400 	.word	0x58024400
 80047d8:	58024800 	.word	0x58024800
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b05      	cmp	r3, #5
 80047e2:	d10c      	bne.n	80047fe <HAL_RCC_OscConfig+0x4ce>
 80047e4:	4b83      	ldr	r3, [pc, #524]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80047e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e8:	4a82      	ldr	r2, [pc, #520]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80047ea:	f043 0304 	orr.w	r3, r3, #4
 80047ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f0:	4b80      	ldr	r3, [pc, #512]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f4:	4a7f      	ldr	r2, [pc, #508]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80047fc:	e00b      	b.n	8004816 <HAL_RCC_OscConfig+0x4e6>
 80047fe:	4b7d      	ldr	r3, [pc, #500]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004802:	4a7c      	ldr	r2, [pc, #496]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004804:	f023 0301 	bic.w	r3, r3, #1
 8004808:	6713      	str	r3, [r2, #112]	@ 0x70
 800480a:	4b7a      	ldr	r3, [pc, #488]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480e:	4a79      	ldr	r2, [pc, #484]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004810:	f023 0304 	bic.w	r3, r3, #4
 8004814:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d015      	beq.n	800484a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481e:	f7fc fbf9 	bl	8001014 <HAL_GetTick>
 8004822:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004824:	e00a      	b.n	800483c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004826:	f7fc fbf5 	bl	8001014 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004834:	4293      	cmp	r3, r2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e14b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800483c:	4b6d      	ldr	r3, [pc, #436]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0ee      	beq.n	8004826 <HAL_RCC_OscConfig+0x4f6>
 8004848:	e014      	b.n	8004874 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484a:	f7fc fbe3 	bl	8001014 <HAL_GetTick>
 800484e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004850:	e00a      	b.n	8004868 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004852:	f7fc fbdf 	bl	8001014 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e135      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004868:	4b62      	ldr	r3, [pc, #392]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ee      	bne.n	8004852 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 812a 	beq.w	8004ad2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800487e:	4b5d      	ldr	r3, [pc, #372]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004886:	2b18      	cmp	r3, #24
 8004888:	f000 80ba 	beq.w	8004a00 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	2b02      	cmp	r3, #2
 8004892:	f040 8095 	bne.w	80049c0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004896:	4b57      	ldr	r3, [pc, #348]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a56      	ldr	r2, [pc, #344]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800489c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fc fbb7 	bl	8001014 <HAL_GetTick>
 80048a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048aa:	f7fc fbb3 	bl	8001014 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e10b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048bc:	4b4d      	ldr	r3, [pc, #308]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f0      	bne.n	80048aa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048c8:	4b4a      	ldr	r3, [pc, #296]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80048ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048cc:	4b4a      	ldr	r3, [pc, #296]	@ (80049f8 <HAL_RCC_OscConfig+0x6c8>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80048d8:	0112      	lsls	r2, r2, #4
 80048da:	430a      	orrs	r2, r1
 80048dc:	4945      	ldr	r1, [pc, #276]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	628b      	str	r3, [r1, #40]	@ 0x28
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e6:	3b01      	subs	r3, #1
 80048e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f0:	3b01      	subs	r3, #1
 80048f2:	025b      	lsls	r3, r3, #9
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fc:	3b01      	subs	r3, #1
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490a:	3b01      	subs	r3, #1
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004912:	4938      	ldr	r1, [pc, #224]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004914:	4313      	orrs	r3, r2
 8004916:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004918:	4b36      	ldr	r3, [pc, #216]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800491a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491c:	4a35      	ldr	r2, [pc, #212]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800491e:	f023 0301 	bic.w	r3, r3, #1
 8004922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004924:	4b33      	ldr	r3, [pc, #204]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004928:	4b34      	ldr	r3, [pc, #208]	@ (80049fc <HAL_RCC_OscConfig+0x6cc>)
 800492a:	4013      	ands	r3, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004930:	00d2      	lsls	r2, r2, #3
 8004932:	4930      	ldr	r1, [pc, #192]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004934:	4313      	orrs	r3, r2
 8004936:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004938:	4b2e      	ldr	r3, [pc, #184]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	f023 020c 	bic.w	r2, r3, #12
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	492b      	ldr	r1, [pc, #172]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800494a:	4b2a      	ldr	r3, [pc, #168]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800494c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494e:	f023 0202 	bic.w	r2, r3, #2
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	4927      	ldr	r1, [pc, #156]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004958:	4313      	orrs	r3, r2
 800495a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800495c:	4b25      	ldr	r3, [pc, #148]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800495e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004960:	4a24      	ldr	r2, [pc, #144]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004962:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004966:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004968:	4b22      	ldr	r3, [pc, #136]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	4a21      	ldr	r2, [pc, #132]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800496e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004974:	4b1f      	ldr	r3, [pc, #124]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004978:	4a1e      	ldr	r2, [pc, #120]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800497a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800497e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004980:	4b1c      	ldr	r3, [pc, #112]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004984:	4a1b      	ldr	r2, [pc, #108]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800498c:	4b19      	ldr	r3, [pc, #100]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a18      	ldr	r2, [pc, #96]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004992:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004998:	f7fc fb3c 	bl	8001014 <HAL_GetTick>
 800499c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a0:	f7fc fb38 	bl	8001014 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e090      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049b2:	4b10      	ldr	r3, [pc, #64]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0f0      	beq.n	80049a0 <HAL_RCC_OscConfig+0x670>
 80049be:	e088      	b.n	8004ad2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c0:	4b0c      	ldr	r3, [pc, #48]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a0b      	ldr	r2, [pc, #44]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80049c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049cc:	f7fc fb22 	bl	8001014 <HAL_GetTick>
 80049d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d4:	f7fc fb1e 	bl	8001014 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e076      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049e6:	4b03      	ldr	r3, [pc, #12]	@ (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0x6a4>
 80049f2:	e06e      	b.n	8004ad2 <HAL_RCC_OscConfig+0x7a2>
 80049f4:	58024400 	.word	0x58024400
 80049f8:	fffffc0c 	.word	0xfffffc0c
 80049fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a00:	4b36      	ldr	r3, [pc, #216]	@ (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a06:	4b35      	ldr	r3, [pc, #212]	@ (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d031      	beq.n	8004a78 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f003 0203 	and.w	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d12a      	bne.n	8004a78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d122      	bne.n	8004a78 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d11a      	bne.n	8004a78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	0a5b      	lsrs	r3, r3, #9
 8004a46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d111      	bne.n	8004a78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	0c1b      	lsrs	r3, r3, #16
 8004a58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d108      	bne.n	8004a78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	0e1b      	lsrs	r3, r3, #24
 8004a6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d001      	beq.n	8004a7c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e02b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004a7c:	4b17      	ldr	r3, [pc, #92]	@ (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a80:	08db      	lsrs	r3, r3, #3
 8004a82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d01f      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004a92:	4b12      	ldr	r3, [pc, #72]	@ (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a96:	4a11      	ldr	r2, [pc, #68]	@ (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004a98:	f023 0301 	bic.w	r3, r3, #1
 8004a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a9e:	f7fc fab9 	bl	8001014 <HAL_GetTick>
 8004aa2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004aa4:	bf00      	nop
 8004aa6:	f7fc fab5 	bl	8001014 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d0f9      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae0 <HAL_RCC_OscConfig+0x7b0>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004abe:	00d2      	lsls	r2, r2, #3
 8004ac0:	4906      	ldr	r1, [pc, #24]	@ (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ac6:	4b05      	ldr	r3, [pc, #20]	@ (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aca:	4a04      	ldr	r2, [pc, #16]	@ (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3730      	adds	r7, #48	@ 0x30
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	ffff0007 	.word	0xffff0007

08004ae4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e19c      	b.n	8004e32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004af8:	4b8a      	ldr	r3, [pc, #552]	@ (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 030f 	and.w	r3, r3, #15
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d910      	bls.n	8004b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b06:	4b87      	ldr	r3, [pc, #540]	@ (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 020f 	bic.w	r2, r3, #15
 8004b0e:	4985      	ldr	r1, [pc, #532]	@ (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b83      	ldr	r3, [pc, #524]	@ (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e184      	b.n	8004e32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d010      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	4b7b      	ldr	r3, [pc, #492]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d908      	bls.n	8004b56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b44:	4b78      	ldr	r3, [pc, #480]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	4975      	ldr	r1, [pc, #468]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d010      	beq.n	8004b84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695a      	ldr	r2, [r3, #20]
 8004b66:	4b70      	ldr	r3, [pc, #448]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d908      	bls.n	8004b84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b72:	4b6d      	ldr	r3, [pc, #436]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	496a      	ldr	r1, [pc, #424]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d010      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699a      	ldr	r2, [r3, #24]
 8004b94:	4b64      	ldr	r3, [pc, #400]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d908      	bls.n	8004bb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ba0:	4b61      	ldr	r3, [pc, #388]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	495e      	ldr	r1, [pc, #376]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d010      	beq.n	8004be0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69da      	ldr	r2, [r3, #28]
 8004bc2:	4b59      	ldr	r3, [pc, #356]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d908      	bls.n	8004be0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004bce:	4b56      	ldr	r3, [pc, #344]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	4953      	ldr	r1, [pc, #332]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d010      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	4b4d      	ldr	r3, [pc, #308]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d908      	bls.n	8004c0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bfc:	4b4a      	ldr	r3, [pc, #296]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f023 020f 	bic.w	r2, r3, #15
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4947      	ldr	r1, [pc, #284]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d055      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c1a:	4b43      	ldr	r3, [pc, #268]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	4940      	ldr	r1, [pc, #256]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d107      	bne.n	8004c44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c34:	4b3c      	ldr	r3, [pc, #240]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d121      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0f6      	b.n	8004e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d107      	bne.n	8004c5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c4c:	4b36      	ldr	r3, [pc, #216]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d115      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0ea      	b.n	8004e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d107      	bne.n	8004c74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c64:	4b30      	ldr	r3, [pc, #192]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0de      	b.n	8004e32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c74:	4b2c      	ldr	r3, [pc, #176]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0d6      	b.n	8004e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c84:	4b28      	ldr	r3, [pc, #160]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f023 0207 	bic.w	r2, r3, #7
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4925      	ldr	r1, [pc, #148]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c96:	f7fc f9bd 	bl	8001014 <HAL_GetTick>
 8004c9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9c:	e00a      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c9e:	f7fc f9b9 	bl	8001014 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e0be      	b.n	8004e32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d1eb      	bne.n	8004c9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d010      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	4b14      	ldr	r3, [pc, #80]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d208      	bcs.n	8004cf4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce2:	4b11      	ldr	r3, [pc, #68]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f023 020f 	bic.w	r2, r3, #15
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	490e      	ldr	r1, [pc, #56]	@ (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d214      	bcs.n	8004d2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d02:	4b08      	ldr	r3, [pc, #32]	@ (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 020f 	bic.w	r2, r3, #15
 8004d0a:	4906      	ldr	r1, [pc, #24]	@ (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b04      	ldr	r3, [pc, #16]	@ (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d005      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e086      	b.n	8004e32 <HAL_RCC_ClockConfig+0x34e>
 8004d24:	52002000 	.word	0x52002000
 8004d28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d010      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d208      	bcs.n	8004d5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d48:	4b3c      	ldr	r3, [pc, #240]	@ (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	4939      	ldr	r1, [pc, #228]	@ (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d010      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695a      	ldr	r2, [r3, #20]
 8004d6a:	4b34      	ldr	r3, [pc, #208]	@ (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d208      	bcs.n	8004d88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d76:	4b31      	ldr	r3, [pc, #196]	@ (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	492e      	ldr	r1, [pc, #184]	@ (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d010      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	4b28      	ldr	r3, [pc, #160]	@ (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d208      	bcs.n	8004db6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004da4:	4b25      	ldr	r3, [pc, #148]	@ (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	4922      	ldr	r1, [pc, #136]	@ (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d010      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d208      	bcs.n	8004de4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	4917      	ldr	r1, [pc, #92]	@ (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004de4:	f000 f834 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 8004de8:	4602      	mov	r2, r0
 8004dea:	4b14      	ldr	r3, [pc, #80]	@ (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	0a1b      	lsrs	r3, r3, #8
 8004df0:	f003 030f 	and.w	r3, r3, #15
 8004df4:	4912      	ldr	r1, [pc, #72]	@ (8004e40 <HAL_RCC_ClockConfig+0x35c>)
 8004df6:	5ccb      	ldrb	r3, [r1, r3]
 8004df8:	f003 031f 	and.w	r3, r3, #31
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004e00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e02:	4b0e      	ldr	r3, [pc, #56]	@ (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	4a0d      	ldr	r2, [pc, #52]	@ (8004e40 <HAL_RCC_ClockConfig+0x35c>)
 8004e0c:	5cd3      	ldrb	r3, [r2, r3]
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
 8004e18:	4a0a      	ldr	r2, [pc, #40]	@ (8004e44 <HAL_RCC_ClockConfig+0x360>)
 8004e1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8004e48 <HAL_RCC_ClockConfig+0x364>)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e22:	4b0a      	ldr	r3, [pc, #40]	@ (8004e4c <HAL_RCC_ClockConfig+0x368>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fc f8aa 	bl	8000f80 <HAL_InitTick>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	58024400 	.word	0x58024400
 8004e40:	08008fd0 	.word	0x08008fd0
 8004e44:	24000044 	.word	0x24000044
 8004e48:	24000040 	.word	0x24000040
 8004e4c:	24000048 	.word	0x24000048

08004e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b089      	sub	sp, #36	@ 0x24
 8004e54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e56:	4bb3      	ldr	r3, [pc, #716]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e5e:	2b18      	cmp	r3, #24
 8004e60:	f200 8155 	bhi.w	800510e <HAL_RCC_GetSysClockFreq+0x2be>
 8004e64:	a201      	add	r2, pc, #4	@ (adr r2, 8004e6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004ed1 	.word	0x08004ed1
 8004e70:	0800510f 	.word	0x0800510f
 8004e74:	0800510f 	.word	0x0800510f
 8004e78:	0800510f 	.word	0x0800510f
 8004e7c:	0800510f 	.word	0x0800510f
 8004e80:	0800510f 	.word	0x0800510f
 8004e84:	0800510f 	.word	0x0800510f
 8004e88:	0800510f 	.word	0x0800510f
 8004e8c:	08004ef7 	.word	0x08004ef7
 8004e90:	0800510f 	.word	0x0800510f
 8004e94:	0800510f 	.word	0x0800510f
 8004e98:	0800510f 	.word	0x0800510f
 8004e9c:	0800510f 	.word	0x0800510f
 8004ea0:	0800510f 	.word	0x0800510f
 8004ea4:	0800510f 	.word	0x0800510f
 8004ea8:	0800510f 	.word	0x0800510f
 8004eac:	08004efd 	.word	0x08004efd
 8004eb0:	0800510f 	.word	0x0800510f
 8004eb4:	0800510f 	.word	0x0800510f
 8004eb8:	0800510f 	.word	0x0800510f
 8004ebc:	0800510f 	.word	0x0800510f
 8004ec0:	0800510f 	.word	0x0800510f
 8004ec4:	0800510f 	.word	0x0800510f
 8004ec8:	0800510f 	.word	0x0800510f
 8004ecc:	08004f03 	.word	0x08004f03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ed0:	4b94      	ldr	r3, [pc, #592]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d009      	beq.n	8004ef0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004edc:	4b91      	ldr	r3, [pc, #580]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	08db      	lsrs	r3, r3, #3
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	4a90      	ldr	r2, [pc, #576]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004eee:	e111      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ef0:	4b8d      	ldr	r3, [pc, #564]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ef2:	61bb      	str	r3, [r7, #24]
      break;
 8004ef4:	e10e      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004ef6:	4b8d      	ldr	r3, [pc, #564]	@ (800512c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ef8:	61bb      	str	r3, [r7, #24]
      break;
 8004efa:	e10b      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004efc:	4b8c      	ldr	r3, [pc, #560]	@ (8005130 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004efe:	61bb      	str	r3, [r7, #24]
      break;
 8004f00:	e108      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f02:	4b88      	ldr	r3, [pc, #544]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f0c:	4b85      	ldr	r3, [pc, #532]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f18:	4b82      	ldr	r3, [pc, #520]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f22:	4b80      	ldr	r3, [pc, #512]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f26:	08db      	lsrs	r3, r3, #3
 8004f28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 80e1 	beq.w	8005108 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	f000 8083 	beq.w	8005054 <HAL_RCC_GetSysClockFreq+0x204>
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	f200 80a1 	bhi.w	8005098 <HAL_RCC_GetSysClockFreq+0x248>
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_RCC_GetSysClockFreq+0x114>
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d056      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004f62:	e099      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f64:	4b6f      	ldr	r3, [pc, #444]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d02d      	beq.n	8004fcc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f70:	4b6c      	ldr	r3, [pc, #432]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	08db      	lsrs	r3, r3, #3
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	4a6b      	ldr	r2, [pc, #428]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	ee07 3a90 	vmov	s15, r3
 8004f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f9a:	4b62      	ldr	r3, [pc, #392]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005134 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004fca:	e087      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005138 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fde:	4b51      	ldr	r3, [pc, #324]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ff2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005134 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800500e:	e065      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800513c <HAL_RCC_GetSysClockFreq+0x2ec>
 800501e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005022:	4b40      	ldr	r3, [pc, #256]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005032:	ed97 6a02 	vldr	s12, [r7, #8]
 8005036:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005134 <HAL_RCC_GetSysClockFreq+0x2e4>
 800503a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800503e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800504a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005052:	e043      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005140 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005066:	4b2f      	ldr	r3, [pc, #188]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005076:	ed97 6a02 	vldr	s12, [r7, #8]
 800507a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005134 <HAL_RCC_GetSysClockFreq+0x2e4>
 800507e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800508a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005096:	e021      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800513c <HAL_RCC_GetSysClockFreq+0x2ec>
 80050a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80050be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005134 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80050dc:	4b11      	ldr	r3, [pc, #68]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e0:	0a5b      	lsrs	r3, r3, #9
 80050e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050e6:	3301      	adds	r3, #1
 80050e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	ee07 3a90 	vmov	s15, r3
 80050f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80050f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005100:	ee17 3a90 	vmov	r3, s15
 8005104:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005106:	e005      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	61bb      	str	r3, [r7, #24]
      break;
 800510c:	e002      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800510e:	4b07      	ldr	r3, [pc, #28]	@ (800512c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005110:	61bb      	str	r3, [r7, #24]
      break;
 8005112:	bf00      	nop
  }

  return sysclockfreq;
 8005114:	69bb      	ldr	r3, [r7, #24]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3724      	adds	r7, #36	@ 0x24
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	58024400 	.word	0x58024400
 8005128:	03d09000 	.word	0x03d09000
 800512c:	003d0900 	.word	0x003d0900
 8005130:	007a1200 	.word	0x007a1200
 8005134:	46000000 	.word	0x46000000
 8005138:	4c742400 	.word	0x4c742400
 800513c:	4a742400 	.word	0x4a742400
 8005140:	4af42400 	.word	0x4af42400

08005144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800514a:	f7ff fe81 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 800514e:	4602      	mov	r2, r0
 8005150:	4b10      	ldr	r3, [pc, #64]	@ (8005194 <HAL_RCC_GetHCLKFreq+0x50>)
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	0a1b      	lsrs	r3, r3, #8
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	490f      	ldr	r1, [pc, #60]	@ (8005198 <HAL_RCC_GetHCLKFreq+0x54>)
 800515c:	5ccb      	ldrb	r3, [r1, r3]
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	fa22 f303 	lsr.w	r3, r2, r3
 8005166:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005168:	4b0a      	ldr	r3, [pc, #40]	@ (8005194 <HAL_RCC_GetHCLKFreq+0x50>)
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	4a09      	ldr	r2, [pc, #36]	@ (8005198 <HAL_RCC_GetHCLKFreq+0x54>)
 8005172:	5cd3      	ldrb	r3, [r2, r3]
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	fa22 f303 	lsr.w	r3, r2, r3
 800517e:	4a07      	ldr	r2, [pc, #28]	@ (800519c <HAL_RCC_GetHCLKFreq+0x58>)
 8005180:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005182:	4a07      	ldr	r2, [pc, #28]	@ (80051a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005188:	4b04      	ldr	r3, [pc, #16]	@ (800519c <HAL_RCC_GetHCLKFreq+0x58>)
 800518a:	681b      	ldr	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	58024400 	.word	0x58024400
 8005198:	08008fd0 	.word	0x08008fd0
 800519c:	24000044 	.word	0x24000044
 80051a0:	24000040 	.word	0x24000040

080051a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80051a8:	f7ff ffcc 	bl	8005144 <HAL_RCC_GetHCLKFreq>
 80051ac:	4602      	mov	r2, r0
 80051ae:	4b06      	ldr	r3, [pc, #24]	@ (80051c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	091b      	lsrs	r3, r3, #4
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	4904      	ldr	r1, [pc, #16]	@ (80051cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80051ba:	5ccb      	ldrb	r3, [r1, r3]
 80051bc:	f003 031f 	and.w	r3, r3, #31
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	58024400 	.word	0x58024400
 80051cc:	08008fd0 	.word	0x08008fd0

080051d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80051d4:	f7ff ffb6 	bl	8005144 <HAL_RCC_GetHCLKFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b06      	ldr	r3, [pc, #24]	@ (80051f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	0a1b      	lsrs	r3, r3, #8
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	4904      	ldr	r1, [pc, #16]	@ (80051f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	58024400 	.word	0x58024400
 80051f8:	08008fd0 	.word	0x08008fd0

080051fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005200:	b0c6      	sub	sp, #280	@ 0x118
 8005202:	af00      	add	r7, sp, #0
 8005204:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005208:	2300      	movs	r3, #0
 800520a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800520e:	2300      	movs	r3, #0
 8005210:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005220:	2500      	movs	r5, #0
 8005222:	ea54 0305 	orrs.w	r3, r4, r5
 8005226:	d049      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800522e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005232:	d02f      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005234:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005238:	d828      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800523a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800523e:	d01a      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005240:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005244:	d822      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800524a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800524e:	d007      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005250:	e01c      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005252:	4bab      	ldr	r3, [pc, #684]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005256:	4aaa      	ldr	r2, [pc, #680]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800525c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800525e:	e01a      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005264:	3308      	adds	r3, #8
 8005266:	2102      	movs	r1, #2
 8005268:	4618      	mov	r0, r3
 800526a:	f001 fc25 	bl	8006ab8 <RCCEx_PLL2_Config>
 800526e:	4603      	mov	r3, r0
 8005270:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005274:	e00f      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800527a:	3328      	adds	r3, #40	@ 0x28
 800527c:	2102      	movs	r1, #2
 800527e:	4618      	mov	r0, r3
 8005280:	f001 fccc 	bl	8006c1c <RCCEx_PLL3_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800528a:	e004      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005292:	e000      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005296:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800529e:	4b98      	ldr	r3, [pc, #608]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80052a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052ac:	4a94      	ldr	r2, [pc, #592]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052ae:	430b      	orrs	r3, r1
 80052b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80052b2:	e003      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80052c8:	f04f 0900 	mov.w	r9, #0
 80052cc:	ea58 0309 	orrs.w	r3, r8, r9
 80052d0:	d047      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80052d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d8:	2b04      	cmp	r3, #4
 80052da:	d82a      	bhi.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80052dc:	a201      	add	r2, pc, #4	@ (adr r2, 80052e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	080052f9 	.word	0x080052f9
 80052e8:	08005307 	.word	0x08005307
 80052ec:	0800531d 	.word	0x0800531d
 80052f0:	0800533b 	.word	0x0800533b
 80052f4:	0800533b 	.word	0x0800533b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f8:	4b81      	ldr	r3, [pc, #516]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fc:	4a80      	ldr	r2, [pc, #512]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005302:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005304:	e01a      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530a:	3308      	adds	r3, #8
 800530c:	2100      	movs	r1, #0
 800530e:	4618      	mov	r0, r3
 8005310:	f001 fbd2 	bl	8006ab8 <RCCEx_PLL2_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800531a:	e00f      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800531c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005320:	3328      	adds	r3, #40	@ 0x28
 8005322:	2100      	movs	r1, #0
 8005324:	4618      	mov	r0, r3
 8005326:	f001 fc79 	bl	8006c1c <RCCEx_PLL3_Config>
 800532a:	4603      	mov	r3, r0
 800532c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005330:	e004      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005338:	e000      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800533a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800533c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005344:	4b6e      	ldr	r3, [pc, #440]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005348:	f023 0107 	bic.w	r1, r3, #7
 800534c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005352:	4a6b      	ldr	r2, [pc, #428]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005354:	430b      	orrs	r3, r1
 8005356:	6513      	str	r3, [r2, #80]	@ 0x50
 8005358:	e003      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800535e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800536e:	f04f 0b00 	mov.w	fp, #0
 8005372:	ea5a 030b 	orrs.w	r3, sl, fp
 8005376:	d05b      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800537c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005380:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005384:	d03b      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005386:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800538a:	d834      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800538c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005390:	d037      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005392:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005396:	d82e      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005398:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800539c:	d033      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800539e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80053a2:	d828      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80053a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053a8:	d01a      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80053aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053ae:	d822      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80053b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053b8:	d007      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80053ba:	e01c      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053bc:	4b50      	ldr	r3, [pc, #320]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c0:	4a4f      	ldr	r2, [pc, #316]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053c8:	e01e      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ce:	3308      	adds	r3, #8
 80053d0:	2100      	movs	r1, #0
 80053d2:	4618      	mov	r0, r3
 80053d4:	f001 fb70 	bl	8006ab8 <RCCEx_PLL2_Config>
 80053d8:	4603      	mov	r3, r0
 80053da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80053de:	e013      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e4:	3328      	adds	r3, #40	@ 0x28
 80053e6:	2100      	movs	r1, #0
 80053e8:	4618      	mov	r0, r3
 80053ea:	f001 fc17 	bl	8006c1c <RCCEx_PLL3_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053f4:	e008      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053fc:	e004      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80053fe:	bf00      	nop
 8005400:	e002      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005402:	bf00      	nop
 8005404:	e000      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10b      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005410:	4b3b      	ldr	r3, [pc, #236]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005414:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800541c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005420:	4a37      	ldr	r2, [pc, #220]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005422:	430b      	orrs	r3, r1
 8005424:	6593      	str	r3, [r2, #88]	@ 0x58
 8005426:	e003      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005428:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800542c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800543c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005440:	2300      	movs	r3, #0
 8005442:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005446:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800544a:	460b      	mov	r3, r1
 800544c:	4313      	orrs	r3, r2
 800544e:	d05d      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005454:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005458:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800545c:	d03b      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800545e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005462:	d834      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005464:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005468:	d037      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800546a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800546e:	d82e      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005470:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005474:	d033      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005476:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800547a:	d828      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800547c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005480:	d01a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005482:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005486:	d822      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800548c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005490:	d007      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005492:	e01c      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005494:	4b1a      	ldr	r3, [pc, #104]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005498:	4a19      	ldr	r2, [pc, #100]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800549a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800549e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054a0:	e01e      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a6:	3308      	adds	r3, #8
 80054a8:	2100      	movs	r1, #0
 80054aa:	4618      	mov	r0, r3
 80054ac:	f001 fb04 	bl	8006ab8 <RCCEx_PLL2_Config>
 80054b0:	4603      	mov	r3, r0
 80054b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054b6:	e013      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054bc:	3328      	adds	r3, #40	@ 0x28
 80054be:	2100      	movs	r1, #0
 80054c0:	4618      	mov	r0, r3
 80054c2:	f001 fbab 	bl	8006c1c <RCCEx_PLL3_Config>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054cc:	e008      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054d4:	e004      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80054d6:	bf00      	nop
 80054d8:	e002      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80054da:	bf00      	nop
 80054dc:	e000      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80054de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10d      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80054e8:	4b05      	ldr	r3, [pc, #20]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80054f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80054f8:	4a01      	ldr	r2, [pc, #4]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054fa:	430b      	orrs	r3, r1
 80054fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80054fe:	e005      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005500:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005508:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800550c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005518:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800551c:	2300      	movs	r3, #0
 800551e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005522:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005526:	460b      	mov	r3, r1
 8005528:	4313      	orrs	r3, r2
 800552a:	d03a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800552c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005532:	2b30      	cmp	r3, #48	@ 0x30
 8005534:	d01f      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005536:	2b30      	cmp	r3, #48	@ 0x30
 8005538:	d819      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800553a:	2b20      	cmp	r3, #32
 800553c:	d00c      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800553e:	2b20      	cmp	r3, #32
 8005540:	d815      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d019      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005546:	2b10      	cmp	r3, #16
 8005548:	d111      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800554a:	4baa      	ldr	r3, [pc, #680]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	4aa9      	ldr	r2, [pc, #676]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005554:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005556:	e011      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800555c:	3308      	adds	r3, #8
 800555e:	2102      	movs	r1, #2
 8005560:	4618      	mov	r0, r3
 8005562:	f001 faa9 	bl	8006ab8 <RCCEx_PLL2_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800556c:	e006      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005574:	e002      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005576:	bf00      	nop
 8005578:	e000      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800557a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800557c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005584:	4b9b      	ldr	r3, [pc, #620]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005588:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800558c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005592:	4a98      	ldr	r2, [pc, #608]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005594:	430b      	orrs	r3, r1
 8005596:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005598:	e003      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800559e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80055a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80055ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055b2:	2300      	movs	r3, #0
 80055b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80055b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80055bc:	460b      	mov	r3, r1
 80055be:	4313      	orrs	r3, r2
 80055c0:	d051      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80055c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055cc:	d035      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80055ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055d2:	d82e      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80055d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055d8:	d031      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80055da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055de:	d828      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80055e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055e4:	d01a      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80055e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055ea:	d822      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80055f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f4:	d007      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80055f6:	e01c      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f8:	4b7e      	ldr	r3, [pc, #504]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80055fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fc:	4a7d      	ldr	r2, [pc, #500]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80055fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005604:	e01c      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800560a:	3308      	adds	r3, #8
 800560c:	2100      	movs	r1, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f001 fa52 	bl	8006ab8 <RCCEx_PLL2_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800561a:	e011      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800561c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005620:	3328      	adds	r3, #40	@ 0x28
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f001 faf9 	bl	8006c1c <RCCEx_PLL3_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005630:	e006      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005638:	e002      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800563a:	bf00      	nop
 800563c:	e000      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800563e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005640:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005648:	4b6a      	ldr	r3, [pc, #424]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800564a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800564c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005656:	4a67      	ldr	r2, [pc, #412]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005658:	430b      	orrs	r3, r1
 800565a:	6513      	str	r3, [r2, #80]	@ 0x50
 800565c:	e003      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005662:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005672:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005676:	2300      	movs	r3, #0
 8005678:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800567c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005680:	460b      	mov	r3, r1
 8005682:	4313      	orrs	r3, r2
 8005684:	d053      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800568a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800568c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005690:	d033      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005692:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005696:	d82c      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005698:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800569c:	d02f      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x502>
 800569e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056a2:	d826      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80056a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056a8:	d02b      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80056aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056ae:	d820      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80056b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056b4:	d012      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80056b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056ba:	d81a      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d022      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056c4:	d115      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ca:	3308      	adds	r3, #8
 80056cc:	2101      	movs	r1, #1
 80056ce:	4618      	mov	r0, r3
 80056d0:	f001 f9f2 	bl	8006ab8 <RCCEx_PLL2_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056da:	e015      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e0:	3328      	adds	r3, #40	@ 0x28
 80056e2:	2101      	movs	r1, #1
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 fa99 	bl	8006c1c <RCCEx_PLL3_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056f0:	e00a      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056f8:	e006      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80056fa:	bf00      	nop
 80056fc:	e004      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80056fe:	bf00      	nop
 8005700:	e002      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005708:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005710:	4b38      	ldr	r3, [pc, #224]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005714:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800571c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800571e:	4a35      	ldr	r2, [pc, #212]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005720:	430b      	orrs	r3, r1
 8005722:	6513      	str	r3, [r2, #80]	@ 0x50
 8005724:	e003      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005726:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800572a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800572e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800573a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800573e:	2300      	movs	r3, #0
 8005740:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005744:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005748:	460b      	mov	r3, r1
 800574a:	4313      	orrs	r3, r2
 800574c:	d058      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800574e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005752:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005756:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800575a:	d033      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800575c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005760:	d82c      	bhi.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005766:	d02f      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800576c:	d826      	bhi.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800576e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005772:	d02b      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005774:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005778:	d820      	bhi.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800577a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800577e:	d012      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005780:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005784:	d81a      	bhi.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005786:	2b00      	cmp	r3, #0
 8005788:	d022      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800578a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800578e:	d115      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005794:	3308      	adds	r3, #8
 8005796:	2101      	movs	r1, #1
 8005798:	4618      	mov	r0, r3
 800579a:	f001 f98d 	bl	8006ab8 <RCCEx_PLL2_Config>
 800579e:	4603      	mov	r3, r0
 80057a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057a4:	e015      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057aa:	3328      	adds	r3, #40	@ 0x28
 80057ac:	2101      	movs	r1, #1
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 fa34 	bl	8006c1c <RCCEx_PLL3_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057ba:	e00a      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057c2:	e006      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057c4:	bf00      	nop
 80057c6:	e004      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057c8:	bf00      	nop
 80057ca:	e002      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057cc:	bf00      	nop
 80057ce:	e000      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10e      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80057da:	4b06      	ldr	r3, [pc, #24]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057de:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80057e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057ea:	4a02      	ldr	r2, [pc, #8]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057ec:	430b      	orrs	r3, r1
 80057ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80057f0:	e006      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80057f2:	bf00      	nop
 80057f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800580c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005810:	2300      	movs	r3, #0
 8005812:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005816:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800581a:	460b      	mov	r3, r1
 800581c:	4313      	orrs	r3, r2
 800581e:	d037      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005826:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800582a:	d00e      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800582c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005830:	d816      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d018      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800583a:	d111      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800583c:	4bc4      	ldr	r3, [pc, #784]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800583e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005840:	4ac3      	ldr	r2, [pc, #780]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005848:	e00f      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800584a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584e:	3308      	adds	r3, #8
 8005850:	2101      	movs	r1, #1
 8005852:	4618      	mov	r0, r3
 8005854:	f001 f930 	bl	8006ab8 <RCCEx_PLL2_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800585e:	e004      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005866:	e000      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10a      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005872:	4bb7      	ldr	r3, [pc, #732]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005876:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800587a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005880:	4ab3      	ldr	r2, [pc, #716]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005882:	430b      	orrs	r3, r1
 8005884:	6513      	str	r3, [r2, #80]	@ 0x50
 8005886:	e003      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005888:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800588c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800589c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058a0:	2300      	movs	r3, #0
 80058a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80058aa:	460b      	mov	r3, r1
 80058ac:	4313      	orrs	r3, r2
 80058ae:	d039      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80058b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d81c      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80058ba:	a201      	add	r2, pc, #4	@ (adr r2, 80058c0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80058bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c0:	080058fd 	.word	0x080058fd
 80058c4:	080058d1 	.word	0x080058d1
 80058c8:	080058df 	.word	0x080058df
 80058cc:	080058fd 	.word	0x080058fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d0:	4b9f      	ldr	r3, [pc, #636]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	4a9e      	ldr	r2, [pc, #632]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058dc:	e00f      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e2:	3308      	adds	r3, #8
 80058e4:	2102      	movs	r1, #2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f001 f8e6 	bl	8006ab8 <RCCEx_PLL2_Config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058f2:	e004      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058fa:	e000      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80058fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10a      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005906:	4b92      	ldr	r3, [pc, #584]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800590a:	f023 0103 	bic.w	r1, r3, #3
 800590e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005914:	4a8e      	ldr	r2, [pc, #568]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005916:	430b      	orrs	r3, r1
 8005918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800591a:	e003      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005920:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005930:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005934:	2300      	movs	r3, #0
 8005936:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800593a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800593e:	460b      	mov	r3, r1
 8005940:	4313      	orrs	r3, r2
 8005942:	f000 8099 	beq.w	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005946:	4b83      	ldr	r3, [pc, #524]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a82      	ldr	r2, [pc, #520]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800594c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005950:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005952:	f7fb fb5f 	bl	8001014 <HAL_GetTick>
 8005956:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800595a:	e00b      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800595c:	f7fb fb5a 	bl	8001014 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b64      	cmp	r3, #100	@ 0x64
 800596a:	d903      	bls.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005972:	e005      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005974:	4b77      	ldr	r3, [pc, #476]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0ed      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005980:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005984:	2b00      	cmp	r3, #0
 8005986:	d173      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005988:	4b71      	ldr	r3, [pc, #452]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800598a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800598c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005994:	4053      	eors	r3, r2
 8005996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800599a:	2b00      	cmp	r3, #0
 800599c:	d015      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800599e:	4b6c      	ldr	r3, [pc, #432]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059aa:	4b69      	ldr	r3, [pc, #420]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ae:	4a68      	ldr	r2, [pc, #416]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059b4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059b6:	4b66      	ldr	r3, [pc, #408]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ba:	4a65      	ldr	r2, [pc, #404]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059c0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80059c2:	4a63      	ldr	r2, [pc, #396]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059c8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80059ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80059d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059d6:	d118      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fb fb1c 	bl	8001014 <HAL_GetTick>
 80059dc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059e0:	e00d      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e2:	f7fb fb17 	bl	8001014 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80059ec:	1ad2      	subs	r2, r2, r3
 80059ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d903      	bls.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80059fc:	e005      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059fe:	4b54      	ldr	r3, [pc, #336]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0eb      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d129      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a22:	d10e      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005a24:	4b4a      	ldr	r3, [pc, #296]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a34:	091a      	lsrs	r2, r3, #4
 8005a36:	4b48      	ldr	r3, [pc, #288]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	4a45      	ldr	r2, [pc, #276]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a3c:	430b      	orrs	r3, r1
 8005a3e:	6113      	str	r3, [r2, #16]
 8005a40:	e005      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005a42:	4b43      	ldr	r3, [pc, #268]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	4a42      	ldr	r2, [pc, #264]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a4c:	6113      	str	r3, [r2, #16]
 8005a4e:	4b40      	ldr	r3, [pc, #256]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a50:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a5e:	4a3c      	ldr	r2, [pc, #240]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a60:	430b      	orrs	r3, r1
 8005a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a64:	e008      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005a6e:	e003      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	f002 0301 	and.w	r3, r2, #1
 8005a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005a8e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005a92:	460b      	mov	r3, r1
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f000 808f 	beq.w	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005aa0:	2b28      	cmp	r3, #40	@ 0x28
 8005aa2:	d871      	bhi.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8005aac <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005b91 	.word	0x08005b91
 8005ab0:	08005b89 	.word	0x08005b89
 8005ab4:	08005b89 	.word	0x08005b89
 8005ab8:	08005b89 	.word	0x08005b89
 8005abc:	08005b89 	.word	0x08005b89
 8005ac0:	08005b89 	.word	0x08005b89
 8005ac4:	08005b89 	.word	0x08005b89
 8005ac8:	08005b89 	.word	0x08005b89
 8005acc:	08005b5d 	.word	0x08005b5d
 8005ad0:	08005b89 	.word	0x08005b89
 8005ad4:	08005b89 	.word	0x08005b89
 8005ad8:	08005b89 	.word	0x08005b89
 8005adc:	08005b89 	.word	0x08005b89
 8005ae0:	08005b89 	.word	0x08005b89
 8005ae4:	08005b89 	.word	0x08005b89
 8005ae8:	08005b89 	.word	0x08005b89
 8005aec:	08005b73 	.word	0x08005b73
 8005af0:	08005b89 	.word	0x08005b89
 8005af4:	08005b89 	.word	0x08005b89
 8005af8:	08005b89 	.word	0x08005b89
 8005afc:	08005b89 	.word	0x08005b89
 8005b00:	08005b89 	.word	0x08005b89
 8005b04:	08005b89 	.word	0x08005b89
 8005b08:	08005b89 	.word	0x08005b89
 8005b0c:	08005b91 	.word	0x08005b91
 8005b10:	08005b89 	.word	0x08005b89
 8005b14:	08005b89 	.word	0x08005b89
 8005b18:	08005b89 	.word	0x08005b89
 8005b1c:	08005b89 	.word	0x08005b89
 8005b20:	08005b89 	.word	0x08005b89
 8005b24:	08005b89 	.word	0x08005b89
 8005b28:	08005b89 	.word	0x08005b89
 8005b2c:	08005b91 	.word	0x08005b91
 8005b30:	08005b89 	.word	0x08005b89
 8005b34:	08005b89 	.word	0x08005b89
 8005b38:	08005b89 	.word	0x08005b89
 8005b3c:	08005b89 	.word	0x08005b89
 8005b40:	08005b89 	.word	0x08005b89
 8005b44:	08005b89 	.word	0x08005b89
 8005b48:	08005b89 	.word	0x08005b89
 8005b4c:	08005b91 	.word	0x08005b91
 8005b50:	58024400 	.word	0x58024400
 8005b54:	58024800 	.word	0x58024800
 8005b58:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b60:	3308      	adds	r3, #8
 8005b62:	2101      	movs	r1, #1
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 ffa7 	bl	8006ab8 <RCCEx_PLL2_Config>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b70:	e00f      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b76:	3328      	adds	r3, #40	@ 0x28
 8005b78:	2101      	movs	r1, #1
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 f84e 	bl	8006c1c <RCCEx_PLL3_Config>
 8005b80:	4603      	mov	r3, r0
 8005b82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b86:	e004      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b8e:	e000      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10a      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b9a:	4bbf      	ldr	r3, [pc, #764]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b9e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ba8:	4abb      	ldr	r2, [pc, #748]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005baa:	430b      	orrs	r3, r1
 8005bac:	6553      	str	r3, [r2, #84]	@ 0x54
 8005bae:	e003      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	f002 0302 	and.w	r3, r2, #2
 8005bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	d041      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d824      	bhi.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005be2:	a201      	add	r2, pc, #4	@ (adr r2, 8005be8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c35 	.word	0x08005c35
 8005bec:	08005c01 	.word	0x08005c01
 8005bf0:	08005c17 	.word	0x08005c17
 8005bf4:	08005c35 	.word	0x08005c35
 8005bf8:	08005c35 	.word	0x08005c35
 8005bfc:	08005c35 	.word	0x08005c35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c04:	3308      	adds	r3, #8
 8005c06:	2101      	movs	r1, #1
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 ff55 	bl	8006ab8 <RCCEx_PLL2_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c14:	e00f      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c1a:	3328      	adds	r3, #40	@ 0x28
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fffc 	bl	8006c1c <RCCEx_PLL3_Config>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c2a:	e004      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c32:	e000      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c3e:	4b96      	ldr	r3, [pc, #600]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c42:	f023 0107 	bic.w	r1, r3, #7
 8005c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c4c:	4a92      	ldr	r2, [pc, #584]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c4e:	430b      	orrs	r3, r1
 8005c50:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c52:	e003      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f002 0304 	and.w	r3, r2, #4
 8005c68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c72:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c76:	460b      	mov	r3, r1
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	d044      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c84:	2b05      	cmp	r3, #5
 8005c86:	d825      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005c88:	a201      	add	r2, pc, #4	@ (adr r2, 8005c90 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8e:	bf00      	nop
 8005c90:	08005cdd 	.word	0x08005cdd
 8005c94:	08005ca9 	.word	0x08005ca9
 8005c98:	08005cbf 	.word	0x08005cbf
 8005c9c:	08005cdd 	.word	0x08005cdd
 8005ca0:	08005cdd 	.word	0x08005cdd
 8005ca4:	08005cdd 	.word	0x08005cdd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cac:	3308      	adds	r3, #8
 8005cae:	2101      	movs	r1, #1
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 ff01 	bl	8006ab8 <RCCEx_PLL2_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cbc:	e00f      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc2:	3328      	adds	r3, #40	@ 0x28
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 ffa8 	bl	8006c1c <RCCEx_PLL3_Config>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cd2:	e004      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cda:	e000      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ce6:	4b6c      	ldr	r3, [pc, #432]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cea:	f023 0107 	bic.w	r1, r3, #7
 8005cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf6:	4a68      	ldr	r2, [pc, #416]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cfc:	e003      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f002 0320 	and.w	r3, r2, #32
 8005d12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d16:	2300      	movs	r3, #0
 8005d18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005d1c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4313      	orrs	r3, r2
 8005d24:	d055      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d32:	d033      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d38:	d82c      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d3e:	d02f      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d44:	d826      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d4a:	d02b      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005d4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d50:	d820      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d56:	d012      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d5c:	d81a      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d022      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005d62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d66:	d115      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 fea1 	bl	8006ab8 <RCCEx_PLL2_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d7c:	e015      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d82:	3328      	adds	r3, #40	@ 0x28
 8005d84:	2102      	movs	r1, #2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 ff48 	bl	8006c1c <RCCEx_PLL3_Config>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d92:	e00a      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d9a:	e006      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005d9c:	bf00      	nop
 8005d9e:	e004      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005da0:	bf00      	nop
 8005da2:	e002      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005da4:	bf00      	nop
 8005da6:	e000      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005daa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10b      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005db2:	4b39      	ldr	r3, [pc, #228]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dc2:	4a35      	ldr	r2, [pc, #212]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005dc4:	430b      	orrs	r3, r1
 8005dc6:	6553      	str	r3, [r2, #84]	@ 0x54
 8005dc8:	e003      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005dde:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005de2:	2300      	movs	r3, #0
 8005de4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005de8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005dec:	460b      	mov	r3, r1
 8005dee:	4313      	orrs	r3, r2
 8005df0:	d058      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dfa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005dfe:	d033      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005e00:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005e04:	d82c      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e0a:	d02f      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e10:	d826      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005e12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e16:	d02b      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005e18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e1c:	d820      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005e1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e22:	d012      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005e24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e28:	d81a      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d022      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e32:	d115      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e38:	3308      	adds	r3, #8
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fe3b 	bl	8006ab8 <RCCEx_PLL2_Config>
 8005e42:	4603      	mov	r3, r0
 8005e44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e48:	e015      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e4e:	3328      	adds	r3, #40	@ 0x28
 8005e50:	2102      	movs	r1, #2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fee2 	bl	8006c1c <RCCEx_PLL3_Config>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e66:	e006      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005e68:	bf00      	nop
 8005e6a:	e004      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005e6c:	bf00      	nop
 8005e6e:	e002      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005e70:	bf00      	nop
 8005e72:	e000      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10e      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e7e:	4b06      	ldr	r3, [pc, #24]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e82:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e8e:	4a02      	ldr	r2, [pc, #8]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005e90:	430b      	orrs	r3, r1
 8005e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e94:	e006      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005e96:	bf00      	nop
 8005e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ea0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005eb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005eba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	d055      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ecc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005ed0:	d033      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005ed2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005ed6:	d82c      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005edc:	d02f      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ee2:	d826      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ee4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005ee8:	d02b      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005eea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005eee:	d820      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ef0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ef4:	d012      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005ef6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005efa:	d81a      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d022      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005f00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f04:	d115      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fdd2 	bl	8006ab8 <RCCEx_PLL2_Config>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f1a:	e015      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f20:	3328      	adds	r3, #40	@ 0x28
 8005f22:	2102      	movs	r1, #2
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 fe79 	bl	8006c1c <RCCEx_PLL3_Config>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f30:	e00a      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f38:	e006      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005f3a:	bf00      	nop
 8005f3c:	e004      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005f3e:	bf00      	nop
 8005f40:	e002      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005f42:	bf00      	nop
 8005f44:	e000      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10b      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f50:	4ba0      	ldr	r3, [pc, #640]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f54:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f60:	4a9c      	ldr	r2, [pc, #624]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f66:	e003      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f002 0308 	and.w	r3, r2, #8
 8005f7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f80:	2300      	movs	r3, #0
 8005f82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f86:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	d01e      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa2:	3328      	adds	r3, #40	@ 0x28
 8005fa4:	2102      	movs	r1, #2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fe38 	bl	8006c1c <RCCEx_PLL3_Config>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005fb8:	4b86      	ldr	r3, [pc, #536]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fbc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fc8:	4a82      	ldr	r2, [pc, #520]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f002 0310 	and.w	r3, r2, #16
 8005fda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fe4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4313      	orrs	r3, r2
 8005fec:	d01e      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ffa:	d10c      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006000:	3328      	adds	r3, #40	@ 0x28
 8006002:	2102      	movs	r1, #2
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fe09 	bl	8006c1c <RCCEx_PLL3_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006016:	4b6f      	ldr	r3, [pc, #444]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800601a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800601e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006026:	4a6b      	ldr	r2, [pc, #428]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006028:	430b      	orrs	r3, r1
 800602a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800602c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006038:	67bb      	str	r3, [r7, #120]	@ 0x78
 800603a:	2300      	movs	r3, #0
 800603c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800603e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006042:	460b      	mov	r3, r1
 8006044:	4313      	orrs	r3, r2
 8006046:	d03e      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800604c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006050:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006054:	d022      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006056:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800605a:	d81b      	bhi.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006064:	d00b      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006066:	e015      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606c:	3308      	adds	r3, #8
 800606e:	2100      	movs	r1, #0
 8006070:	4618      	mov	r0, r3
 8006072:	f000 fd21 	bl	8006ab8 <RCCEx_PLL2_Config>
 8006076:	4603      	mov	r3, r0
 8006078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800607c:	e00f      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800607e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006082:	3328      	adds	r3, #40	@ 0x28
 8006084:	2102      	movs	r1, #2
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fdc8 	bl	8006c1c <RCCEx_PLL3_Config>
 800608c:	4603      	mov	r3, r0
 800608e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006092:	e004      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800609a:	e000      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800609c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10b      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060a6:	4b4b      	ldr	r3, [pc, #300]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80060a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80060ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80060b6:	4a47      	ldr	r2, [pc, #284]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80060b8:	430b      	orrs	r3, r1
 80060ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80060bc:	e003      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80060d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80060d4:	2300      	movs	r3, #0
 80060d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80060d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80060dc:	460b      	mov	r3, r1
 80060de:	4313      	orrs	r3, r2
 80060e0:	d03b      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80060e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060ee:	d01f      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80060f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060f4:	d818      	bhi.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80060f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060fa:	d003      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80060fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006100:	d007      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006102:	e011      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006104:	4b33      	ldr	r3, [pc, #204]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006108:	4a32      	ldr	r2, [pc, #200]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800610a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800610e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006110:	e00f      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006116:	3328      	adds	r3, #40	@ 0x28
 8006118:	2101      	movs	r1, #1
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fd7e 	bl	8006c1c <RCCEx_PLL3_Config>
 8006120:	4603      	mov	r3, r0
 8006122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006126:	e004      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800612e:	e000      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006132:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10b      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800613a:	4b26      	ldr	r3, [pc, #152]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800613c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800613e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800614a:	4a22      	ldr	r2, [pc, #136]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800614c:	430b      	orrs	r3, r1
 800614e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006150:	e003      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006152:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006156:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800615a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006162:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006166:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006168:	2300      	movs	r3, #0
 800616a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800616c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006170:	460b      	mov	r3, r1
 8006172:	4313      	orrs	r3, r2
 8006174:	d034      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006184:	d007      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006186:	e011      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006188:	4b12      	ldr	r3, [pc, #72]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800618a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618c:	4a11      	ldr	r2, [pc, #68]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800618e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006194:	e00e      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800619a:	3308      	adds	r3, #8
 800619c:	2102      	movs	r1, #2
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fc8a 	bl	8006ab8 <RCCEx_PLL2_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80061aa:	e003      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10d      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80061bc:	4b05      	ldr	r3, [pc, #20]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ca:	4a02      	ldr	r2, [pc, #8]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061cc:	430b      	orrs	r3, r1
 80061ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061d0:	e006      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80061d2:	bf00      	nop
 80061d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80061ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80061ee:	2300      	movs	r3, #0
 80061f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80061f2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80061f6:	460b      	mov	r3, r1
 80061f8:	4313      	orrs	r3, r2
 80061fa:	d00c      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006200:	3328      	adds	r3, #40	@ 0x28
 8006202:	2102      	movs	r1, #2
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fd09 	bl	8006c1c <RCCEx_PLL3_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006222:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006224:	2300      	movs	r3, #0
 8006226:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006228:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800622c:	460b      	mov	r3, r1
 800622e:	4313      	orrs	r3, r2
 8006230:	d036      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006236:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006238:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800623c:	d018      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800623e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006242:	d811      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006248:	d014      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800624a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800624e:	d80b      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006250:	2b00      	cmp	r3, #0
 8006252:	d011      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006258:	d106      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800625a:	4bb7      	ldr	r3, [pc, #732]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800625c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625e:	4ab6      	ldr	r2, [pc, #728]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006264:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006266:	e008      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800626e:	e004      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006270:	bf00      	nop
 8006272:	e002      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006274:	bf00      	nop
 8006276:	e000      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800627a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10a      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006282:	4bad      	ldr	r3, [pc, #692]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006286:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800628a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006290:	4aa9      	ldr	r2, [pc, #676]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006292:	430b      	orrs	r3, r1
 8006294:	6553      	str	r3, [r2, #84]	@ 0x54
 8006296:	e003      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800629c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80062ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80062ae:	2300      	movs	r3, #0
 80062b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80062b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80062b6:	460b      	mov	r3, r1
 80062b8:	4313      	orrs	r3, r2
 80062ba:	d009      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062bc:	4b9e      	ldr	r3, [pc, #632]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80062c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ca:	4a9b      	ldr	r2, [pc, #620]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062cc:	430b      	orrs	r3, r1
 80062ce:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80062dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062de:	2300      	movs	r3, #0
 80062e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80062e6:	460b      	mov	r3, r1
 80062e8:	4313      	orrs	r3, r2
 80062ea:	d009      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062ec:	4b92      	ldr	r3, [pc, #584]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062f0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80062f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062fa:	4a8f      	ldr	r2, [pc, #572]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062fc:	430b      	orrs	r3, r1
 80062fe:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800630c:	643b      	str	r3, [r7, #64]	@ 0x40
 800630e:	2300      	movs	r3, #0
 8006310:	647b      	str	r3, [r7, #68]	@ 0x44
 8006312:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006316:	460b      	mov	r3, r1
 8006318:	4313      	orrs	r3, r2
 800631a:	d00e      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800631c:	4b86      	ldr	r3, [pc, #536]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	4a85      	ldr	r2, [pc, #532]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006322:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006326:	6113      	str	r3, [r2, #16]
 8006328:	4b83      	ldr	r3, [pc, #524]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800632a:	6919      	ldr	r1, [r3, #16]
 800632c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006334:	4a80      	ldr	r2, [pc, #512]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006336:	430b      	orrs	r3, r1
 8006338:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800633a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006346:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006348:	2300      	movs	r3, #0
 800634a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800634c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006350:	460b      	mov	r3, r1
 8006352:	4313      	orrs	r3, r2
 8006354:	d009      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006356:	4b78      	ldr	r3, [pc, #480]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800635a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800635e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006364:	4a74      	ldr	r2, [pc, #464]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006366:	430b      	orrs	r3, r1
 8006368:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800636a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006376:	633b      	str	r3, [r7, #48]	@ 0x30
 8006378:	2300      	movs	r3, #0
 800637a:	637b      	str	r3, [r7, #52]	@ 0x34
 800637c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006380:	460b      	mov	r3, r1
 8006382:	4313      	orrs	r3, r2
 8006384:	d00a      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006386:	4b6c      	ldr	r3, [pc, #432]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800638a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800638e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006396:	4a68      	ldr	r2, [pc, #416]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006398:	430b      	orrs	r3, r1
 800639a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800639c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	2100      	movs	r1, #0
 80063a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063ae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80063b2:	460b      	mov	r3, r1
 80063b4:	4313      	orrs	r3, r2
 80063b6:	d011      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063bc:	3308      	adds	r3, #8
 80063be:	2100      	movs	r1, #0
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fb79 	bl	8006ab8 <RCCEx_PLL2_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80063cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80063dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	2100      	movs	r1, #0
 80063e6:	6239      	str	r1, [r7, #32]
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80063f2:	460b      	mov	r3, r1
 80063f4:	4313      	orrs	r3, r2
 80063f6:	d011      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fc:	3308      	adds	r3, #8
 80063fe:	2101      	movs	r1, #1
 8006400:	4618      	mov	r0, r3
 8006402:	f000 fb59 	bl	8006ab8 <RCCEx_PLL2_Config>
 8006406:	4603      	mov	r3, r0
 8006408:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800640c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006418:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800641c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	2100      	movs	r1, #0
 8006426:	61b9      	str	r1, [r7, #24]
 8006428:	f003 0304 	and.w	r3, r3, #4
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006432:	460b      	mov	r3, r1
 8006434:	4313      	orrs	r3, r2
 8006436:	d011      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800643c:	3308      	adds	r3, #8
 800643e:	2102      	movs	r1, #2
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fb39 	bl	8006ab8 <RCCEx_PLL2_Config>
 8006446:	4603      	mov	r3, r0
 8006448:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800644c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006458:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800645c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006464:	2100      	movs	r1, #0
 8006466:	6139      	str	r1, [r7, #16]
 8006468:	f003 0308 	and.w	r3, r3, #8
 800646c:	617b      	str	r3, [r7, #20]
 800646e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006472:	460b      	mov	r3, r1
 8006474:	4313      	orrs	r3, r2
 8006476:	d011      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800647c:	3328      	adds	r3, #40	@ 0x28
 800647e:	2100      	movs	r1, #0
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fbcb 	bl	8006c1c <RCCEx_PLL3_Config>
 8006486:	4603      	mov	r3, r0
 8006488:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800648c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006494:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006498:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	2100      	movs	r1, #0
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	f003 0310 	and.w	r3, r3, #16
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064b2:	460b      	mov	r3, r1
 80064b4:	4313      	orrs	r3, r2
 80064b6:	d011      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064bc:	3328      	adds	r3, #40	@ 0x28
 80064be:	2101      	movs	r1, #1
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fbab 	bl	8006c1c <RCCEx_PLL3_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80064cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80064dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	2100      	movs	r1, #0
 80064e6:	6039      	str	r1, [r7, #0]
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	607b      	str	r3, [r7, #4]
 80064ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80064f2:	460b      	mov	r3, r1
 80064f4:	4313      	orrs	r3, r2
 80064f6:	d011      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fc:	3328      	adds	r3, #40	@ 0x28
 80064fe:	2102      	movs	r1, #2
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fb8b 	bl	8006c1c <RCCEx_PLL3_Config>
 8006506:	4603      	mov	r3, r0
 8006508:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800650c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006514:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006518:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800651c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	e000      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
}
 800652a:	4618      	mov	r0, r3
 800652c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006530:	46bd      	mov	sp, r7
 8006532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006536:	bf00      	nop
 8006538:	58024400 	.word	0x58024400

0800653c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006540:	f7fe fe00 	bl	8005144 <HAL_RCC_GetHCLKFreq>
 8006544:	4602      	mov	r2, r0
 8006546:	4b06      	ldr	r3, [pc, #24]	@ (8006560 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	091b      	lsrs	r3, r3, #4
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	4904      	ldr	r1, [pc, #16]	@ (8006564 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006552:	5ccb      	ldrb	r3, [r1, r3]
 8006554:	f003 031f 	and.w	r3, r3, #31
 8006558:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800655c:	4618      	mov	r0, r3
 800655e:	bd80      	pop	{r7, pc}
 8006560:	58024400 	.word	0x58024400
 8006564:	08008fd0 	.word	0x08008fd0

08006568 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006568:	b480      	push	{r7}
 800656a:	b089      	sub	sp, #36	@ 0x24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006570:	4ba1      	ldr	r3, [pc, #644]	@ (80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006574:	f003 0303 	and.w	r3, r3, #3
 8006578:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800657a:	4b9f      	ldr	r3, [pc, #636]	@ (80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800657c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657e:	0b1b      	lsrs	r3, r3, #12
 8006580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006584:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006586:	4b9c      	ldr	r3, [pc, #624]	@ (80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658a:	091b      	lsrs	r3, r3, #4
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006592:	4b99      	ldr	r3, [pc, #612]	@ (80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006596:	08db      	lsrs	r3, r3, #3
 8006598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	fb02 f303 	mul.w	r3, r2, r3
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 8111 	beq.w	80067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	f000 8083 	beq.w	80066c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	f200 80a1 	bhi.w	8006708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d056      	beq.n	8006680 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80065d2:	e099      	b.n	8006708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065d4:	4b88      	ldr	r3, [pc, #544]	@ (80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0320 	and.w	r3, r3, #32
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d02d      	beq.n	800663c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065e0:	4b85      	ldr	r3, [pc, #532]	@ (80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	08db      	lsrs	r3, r3, #3
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	4a84      	ldr	r2, [pc, #528]	@ (80067fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80065ec:	fa22 f303 	lsr.w	r3, r2, r3
 80065f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	ee07 3a90 	vmov	s15, r3
 80065f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	ee07 3a90 	vmov	s15, r3
 8006602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800660a:	4b7b      	ldr	r3, [pc, #492]	@ (80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800660c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006612:	ee07 3a90 	vmov	s15, r3
 8006616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800661a:	ed97 6a03 	vldr	s12, [r7, #12]
 800661e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800662a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800662e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006636:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800663a:	e087      	b.n	800674c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	ee07 3a90 	vmov	s15, r3
 8006642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006646:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006804 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800664a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800664e:	4b6a      	ldr	r3, [pc, #424]	@ (80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006656:	ee07 3a90 	vmov	s15, r3
 800665a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800665e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006662:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800666a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800666e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800667e:	e065      	b.n	800674c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	ee07 3a90 	vmov	s15, r3
 8006686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800668e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006692:	4b59      	ldr	r3, [pc, #356]	@ (80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80066a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066c2:	e043      	b.n	800674c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800680c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80066d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066d6:	4b48      	ldr	r3, [pc, #288]	@ (80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006706:	e021      	b.n	800674c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006712:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671a:	4b37      	ldr	r3, [pc, #220]	@ (80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800671c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672a:	ed97 6a03 	vldr	s12, [r7, #12]
 800672e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800673e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800674a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800674c:	4b2a      	ldr	r3, [pc, #168]	@ (80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800674e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006750:	0a5b      	lsrs	r3, r3, #9
 8006752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006766:	edd7 6a07 	vldr	s13, [r7, #28]
 800676a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800676e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006772:	ee17 2a90 	vmov	r2, s15
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800677a:	4b1f      	ldr	r3, [pc, #124]	@ (80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800677c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800677e:	0c1b      	lsrs	r3, r3, #16
 8006780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006794:	edd7 6a07 	vldr	s13, [r7, #28]
 8006798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800679c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067a0:	ee17 2a90 	vmov	r2, s15
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80067a8:	4b13      	ldr	r3, [pc, #76]	@ (80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ac:	0e1b      	lsrs	r3, r3, #24
 80067ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067b2:	ee07 3a90 	vmov	s15, r3
 80067b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ce:	ee17 2a90 	vmov	r2, s15
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80067d6:	e008      	b.n	80067ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	609a      	str	r2, [r3, #8]
}
 80067ea:	bf00      	nop
 80067ec:	3724      	adds	r7, #36	@ 0x24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	58024400 	.word	0x58024400
 80067fc:	03d09000 	.word	0x03d09000
 8006800:	46000000 	.word	0x46000000
 8006804:	4c742400 	.word	0x4c742400
 8006808:	4a742400 	.word	0x4a742400
 800680c:	4af42400 	.word	0x4af42400

08006810 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006810:	b480      	push	{r7}
 8006812:	b089      	sub	sp, #36	@ 0x24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006818:	4ba1      	ldr	r3, [pc, #644]	@ (8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800681a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800681c:	f003 0303 	and.w	r3, r3, #3
 8006820:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006822:	4b9f      	ldr	r3, [pc, #636]	@ (8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006826:	0d1b      	lsrs	r3, r3, #20
 8006828:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800682c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800682e:	4b9c      	ldr	r3, [pc, #624]	@ (8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006832:	0a1b      	lsrs	r3, r3, #8
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800683a:	4b99      	ldr	r3, [pc, #612]	@ (8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800683c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683e:	08db      	lsrs	r3, r3, #3
 8006840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	fb02 f303 	mul.w	r3, r2, r3
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006852:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 8111 	beq.w	8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	2b02      	cmp	r3, #2
 8006862:	f000 8083 	beq.w	800696c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	2b02      	cmp	r3, #2
 800686a:	f200 80a1 	bhi.w	80069b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d056      	beq.n	8006928 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800687a:	e099      	b.n	80069b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800687c:	4b88      	ldr	r3, [pc, #544]	@ (8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0320 	and.w	r3, r3, #32
 8006884:	2b00      	cmp	r3, #0
 8006886:	d02d      	beq.n	80068e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006888:	4b85      	ldr	r3, [pc, #532]	@ (8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	08db      	lsrs	r3, r3, #3
 800688e:	f003 0303 	and.w	r3, r3, #3
 8006892:	4a84      	ldr	r2, [pc, #528]	@ (8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006894:	fa22 f303 	lsr.w	r3, r2, r3
 8006898:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	ee07 3a90 	vmov	s15, r3
 80068a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	ee07 3a90 	vmov	s15, r3
 80068aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068b2:	4b7b      	ldr	r3, [pc, #492]	@ (8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ba:	ee07 3a90 	vmov	s15, r3
 80068be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80068e2:	e087      	b.n	80069f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	ee07 3a90 	vmov	s15, r3
 80068ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006aac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80068f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068f6:	4b6a      	ldr	r3, [pc, #424]	@ (8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068fe:	ee07 3a90 	vmov	s15, r3
 8006902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006906:	ed97 6a03 	vldr	s12, [r7, #12]
 800690a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800690e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800691a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800691e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006926:	e065      	b.n	80069f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	ee07 3a90 	vmov	s15, r3
 800692e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006932:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800693a:	4b59      	ldr	r3, [pc, #356]	@ (8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800693c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800694a:	ed97 6a03 	vldr	s12, [r7, #12]
 800694e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800695a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800695e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800696a:	e043      	b.n	80069f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	ee07 3a90 	vmov	s15, r3
 8006972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006976:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800697a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800697e:	4b48      	ldr	r3, [pc, #288]	@ (8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800698e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006992:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800699a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800699e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069ae:	e021      	b.n	80069f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	ee07 3a90 	vmov	s15, r3
 80069b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80069be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069c2:	4b37      	ldr	r3, [pc, #220]	@ (8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80069f4:	4b2a      	ldr	r3, [pc, #168]	@ (8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f8:	0a5b      	lsrs	r3, r3, #9
 80069fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a1a:	ee17 2a90 	vmov	r2, s15
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006a22:	4b1f      	ldr	r3, [pc, #124]	@ (8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a26:	0c1b      	lsrs	r3, r3, #16
 8006a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a2c:	ee07 3a90 	vmov	s15, r3
 8006a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a48:	ee17 2a90 	vmov	r2, s15
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006a50:	4b13      	ldr	r3, [pc, #76]	@ (8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a54:	0e1b      	lsrs	r3, r3, #24
 8006a56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a5a:	ee07 3a90 	vmov	s15, r3
 8006a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a76:	ee17 2a90 	vmov	r2, s15
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006a7e:	e008      	b.n	8006a92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	609a      	str	r2, [r3, #8]
}
 8006a92:	bf00      	nop
 8006a94:	3724      	adds	r7, #36	@ 0x24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	58024400 	.word	0x58024400
 8006aa4:	03d09000 	.word	0x03d09000
 8006aa8:	46000000 	.word	0x46000000
 8006aac:	4c742400 	.word	0x4c742400
 8006ab0:	4a742400 	.word	0x4a742400
 8006ab4:	4af42400 	.word	0x4af42400

08006ab8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ac6:	4b53      	ldr	r3, [pc, #332]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d101      	bne.n	8006ad6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e099      	b.n	8006c0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a4e      	ldr	r2, [pc, #312]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006adc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae2:	f7fa fa97 	bl	8001014 <HAL_GetTick>
 8006ae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ae8:	e008      	b.n	8006afc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006aea:	f7fa fa93 	bl	8001014 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e086      	b.n	8006c0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006afc:	4b45      	ldr	r3, [pc, #276]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1f0      	bne.n	8006aea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006b08:	4b42      	ldr	r3, [pc, #264]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	031b      	lsls	r3, r3, #12
 8006b16:	493f      	ldr	r1, [pc, #252]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	025b      	lsls	r3, r3, #9
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	431a      	orrs	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	041b      	lsls	r3, r3, #16
 8006b3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	061b      	lsls	r3, r3, #24
 8006b48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b4c:	4931      	ldr	r1, [pc, #196]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006b52:	4b30      	ldr	r3, [pc, #192]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	492d      	ldr	r1, [pc, #180]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006b64:	4b2b      	ldr	r3, [pc, #172]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b68:	f023 0220 	bic.w	r2, r3, #32
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	4928      	ldr	r1, [pc, #160]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006b76:	4b27      	ldr	r3, [pc, #156]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7a:	4a26      	ldr	r2, [pc, #152]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006b7c:	f023 0310 	bic.w	r3, r3, #16
 8006b80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006b82:	4b24      	ldr	r3, [pc, #144]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006b84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b86:	4b24      	ldr	r3, [pc, #144]	@ (8006c18 <RCCEx_PLL2_Config+0x160>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	69d2      	ldr	r2, [r2, #28]
 8006b8e:	00d2      	lsls	r2, r2, #3
 8006b90:	4920      	ldr	r1, [pc, #128]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006b96:	4b1f      	ldr	r3, [pc, #124]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006b9c:	f043 0310 	orr.w	r3, r3, #16
 8006ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d106      	bne.n	8006bb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bac:	4a19      	ldr	r2, [pc, #100]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006bae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006bb4:	e00f      	b.n	8006bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d106      	bne.n	8006bca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006bbc:	4b15      	ldr	r3, [pc, #84]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc0:	4a14      	ldr	r2, [pc, #80]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006bc8:	e005      	b.n	8006bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006bca:	4b12      	ldr	r3, [pc, #72]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bce:	4a11      	ldr	r2, [pc, #68]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006bd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a0e      	ldr	r2, [pc, #56]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006bdc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be2:	f7fa fa17 	bl	8001014 <HAL_GetTick>
 8006be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006be8:	e008      	b.n	8006bfc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006bea:	f7fa fa13 	bl	8001014 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d901      	bls.n	8006bfc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e006      	b.n	8006c0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006bfc:	4b05      	ldr	r3, [pc, #20]	@ (8006c14 <RCCEx_PLL2_Config+0x15c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d0f0      	beq.n	8006bea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	58024400 	.word	0x58024400
 8006c18:	ffff0007 	.word	0xffff0007

08006c1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c2a:	4b53      	ldr	r3, [pc, #332]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d101      	bne.n	8006c3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e099      	b.n	8006d6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a4e      	ldr	r2, [pc, #312]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c46:	f7fa f9e5 	bl	8001014 <HAL_GetTick>
 8006c4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c4c:	e008      	b.n	8006c60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c4e:	f7fa f9e1 	bl	8001014 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e086      	b.n	8006d6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c60:	4b45      	ldr	r3, [pc, #276]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1f0      	bne.n	8006c4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006c6c:	4b42      	ldr	r3, [pc, #264]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c70:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	051b      	lsls	r3, r3, #20
 8006c7a:	493f      	ldr	r1, [pc, #252]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	025b      	lsls	r3, r3, #9
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	431a      	orrs	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	041b      	lsls	r3, r3, #16
 8006c9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	061b      	lsls	r3, r3, #24
 8006cac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006cb0:	4931      	ldr	r1, [pc, #196]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006cb6:	4b30      	ldr	r3, [pc, #192]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	492d      	ldr	r1, [pc, #180]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ccc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	4928      	ldr	r1, [pc, #160]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006cda:	4b27      	ldr	r3, [pc, #156]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cde:	4a26      	ldr	r2, [pc, #152]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ce6:	4b24      	ldr	r3, [pc, #144]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006ce8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cea:	4b24      	ldr	r3, [pc, #144]	@ (8006d7c <RCCEx_PLL3_Config+0x160>)
 8006cec:	4013      	ands	r3, r2
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	69d2      	ldr	r2, [r2, #28]
 8006cf2:	00d2      	lsls	r2, r2, #3
 8006cf4:	4920      	ldr	r1, [pc, #128]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d106      	bne.n	8006d1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d10:	4a19      	ldr	r2, [pc, #100]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006d12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006d16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d18:	e00f      	b.n	8006d3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d106      	bne.n	8006d2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006d20:	4b15      	ldr	r3, [pc, #84]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d24:	4a14      	ldr	r2, [pc, #80]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006d26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d2c:	e005      	b.n	8006d3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006d2e:	4b12      	ldr	r3, [pc, #72]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d32:	4a11      	ldr	r2, [pc, #68]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006d34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d46:	f7fa f965 	bl	8001014 <HAL_GetTick>
 8006d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d4c:	e008      	b.n	8006d60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d4e:	f7fa f961 	bl	8001014 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e006      	b.n	8006d6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d60:	4b05      	ldr	r3, [pc, #20]	@ (8006d78 <RCCEx_PLL3_Config+0x15c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0f0      	beq.n	8006d4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	58024400 	.word	0x58024400
 8006d7c:	ffff0007 	.word	0xffff0007

08006d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e042      	b.n	8006e18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d106      	bne.n	8006daa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7f9 fed3 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2224      	movs	r2, #36	@ 0x24
 8006dae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0201 	bic.w	r2, r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fcf4 	bl	80077b0 <UART_SetConfig>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d101      	bne.n	8006dd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e022      	b.n	8006e18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 fb54 	bl	8008488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 fbdb 	bl	80085cc <UART_CheckIdleState>
 8006e16:	4603      	mov	r3, r0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b08a      	sub	sp, #40	@ 0x28
 8006e24:	af02      	add	r7, sp, #8
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	603b      	str	r3, [r7, #0]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d17b      	bne.n	8006f32 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <HAL_UART_Transmit+0x26>
 8006e40:	88fb      	ldrh	r3, [r7, #6]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e074      	b.n	8006f34 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2221      	movs	r2, #33	@ 0x21
 8006e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e5a:	f7fa f8db 	bl	8001014 <HAL_GetTick>
 8006e5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	88fa      	ldrh	r2, [r7, #6]
 8006e64:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	88fa      	ldrh	r2, [r7, #6]
 8006e6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e78:	d108      	bne.n	8006e8c <HAL_UART_Transmit+0x6c>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d104      	bne.n	8006e8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	e003      	b.n	8006e94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e94:	e030      	b.n	8006ef8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2180      	movs	r1, #128	@ 0x80
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f001 fc3d 	bl	8008720 <UART_WaitOnFlagUntilTimeout>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d005      	beq.n	8006eb8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e03d      	b.n	8006f34 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10b      	bne.n	8006ed6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ecc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	3302      	adds	r3, #2
 8006ed2:	61bb      	str	r3, [r7, #24]
 8006ed4:	e007      	b.n	8006ee6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1c8      	bne.n	8006e96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2140      	movs	r1, #64	@ 0x40
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f001 fc06 	bl	8008720 <UART_WaitOnFlagUntilTimeout>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d005      	beq.n	8006f26 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e006      	b.n	8006f34 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	e000      	b.n	8006f34 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006f32:	2302      	movs	r3, #2
  }
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3720      	adds	r7, #32
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08a      	sub	sp, #40	@ 0x28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f50:	2b20      	cmp	r3, #32
 8006f52:	d137      	bne.n	8006fc4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <HAL_UART_Receive_DMA+0x24>
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e030      	b.n	8006fc6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a18      	ldr	r2, [pc, #96]	@ (8006fd0 <HAL_UART_Receive_DMA+0x94>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d01f      	beq.n	8006fb4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d018      	beq.n	8006fb4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	623b      	str	r3, [r7, #32]
 8006fa2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	69f9      	ldr	r1, [r7, #28]
 8006fa6:	6a3a      	ldr	r2, [r7, #32]
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e6      	bne.n	8006f82 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006fb4:	88fb      	ldrh	r3, [r7, #6]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f001 fc18 	bl	80087f0 <UART_Start_Receive_DMA>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	e000      	b.n	8006fc6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006fc4:	2302      	movs	r3, #2
  }
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3728      	adds	r7, #40	@ 0x28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	58000c00 	.word	0x58000c00

08006fd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b0ba      	sub	sp, #232	@ 0xe8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ffa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006ffe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007002:	4013      	ands	r3, r2
 8007004:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800700c:	2b00      	cmp	r3, #0
 800700e:	d11b      	bne.n	8007048 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007014:	f003 0320 	and.w	r3, r3, #32
 8007018:	2b00      	cmp	r3, #0
 800701a:	d015      	beq.n	8007048 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800701c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d105      	bne.n	8007034 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800702c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d009      	beq.n	8007048 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 8377 	beq.w	800772c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	4798      	blx	r3
      }
      return;
 8007046:	e371      	b.n	800772c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 8123 	beq.w	8007298 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007052:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007056:	4b8d      	ldr	r3, [pc, #564]	@ (800728c <HAL_UART_IRQHandler+0x2b8>)
 8007058:	4013      	ands	r3, r2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800705e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007062:	4b8b      	ldr	r3, [pc, #556]	@ (8007290 <HAL_UART_IRQHandler+0x2bc>)
 8007064:	4013      	ands	r3, r2
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 8116 	beq.w	8007298 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800706c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d011      	beq.n	800709c <HAL_UART_IRQHandler+0xc8>
 8007078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800707c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00b      	beq.n	800709c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2201      	movs	r2, #1
 800708a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007092:	f043 0201 	orr.w	r2, r3, #1
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800709c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d011      	beq.n	80070cc <HAL_UART_IRQHandler+0xf8>
 80070a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00b      	beq.n	80070cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2202      	movs	r2, #2
 80070ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c2:	f043 0204 	orr.w	r2, r3, #4
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d011      	beq.n	80070fc <HAL_UART_IRQHandler+0x128>
 80070d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00b      	beq.n	80070fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2204      	movs	r2, #4
 80070ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f2:	f043 0202 	orr.w	r2, r3, #2
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80070fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007100:	f003 0308 	and.w	r3, r3, #8
 8007104:	2b00      	cmp	r3, #0
 8007106:	d017      	beq.n	8007138 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d105      	bne.n	8007120 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007114:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007118:	4b5c      	ldr	r3, [pc, #368]	@ (800728c <HAL_UART_IRQHandler+0x2b8>)
 800711a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00b      	beq.n	8007138 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2208      	movs	r2, #8
 8007126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800712e:	f043 0208 	orr.w	r2, r3, #8
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800713c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007140:	2b00      	cmp	r3, #0
 8007142:	d012      	beq.n	800716a <HAL_UART_IRQHandler+0x196>
 8007144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007148:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00c      	beq.n	800716a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007160:	f043 0220 	orr.w	r2, r3, #32
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 82dd 	beq.w	8007730 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800717a:	f003 0320 	and.w	r3, r3, #32
 800717e:	2b00      	cmp	r3, #0
 8007180:	d013      	beq.n	80071aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d105      	bne.n	800719a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800718e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d007      	beq.n	80071aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071be:	2b40      	cmp	r3, #64	@ 0x40
 80071c0:	d005      	beq.n	80071ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d054      	beq.n	8007278 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f001 fbf6 	bl	80089c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071de:	2b40      	cmp	r3, #64	@ 0x40
 80071e0:	d146      	bne.n	8007270 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80071f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007200:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3308      	adds	r3, #8
 800720a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800720e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007212:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800721a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800721e:	e841 2300 	strex	r3, r2, [r1]
 8007222:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1d9      	bne.n	80071e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007234:	2b00      	cmp	r3, #0
 8007236:	d017      	beq.n	8007268 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800723e:	4a15      	ldr	r2, [pc, #84]	@ (8007294 <HAL_UART_IRQHandler+0x2c0>)
 8007240:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007248:	4618      	mov	r0, r3
 800724a:	f7fb f903 	bl	8002454 <HAL_DMA_Abort_IT>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d019      	beq.n	8007288 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800725a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007262:	4610      	mov	r0, r2
 8007264:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007266:	e00f      	b.n	8007288 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fa8b 	bl	8007784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800726e:	e00b      	b.n	8007288 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fa87 	bl	8007784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007276:	e007      	b.n	8007288 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fa83 	bl	8007784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007286:	e253      	b.n	8007730 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007288:	bf00      	nop
    return;
 800728a:	e251      	b.n	8007730 <HAL_UART_IRQHandler+0x75c>
 800728c:	10000001 	.word	0x10000001
 8007290:	04000120 	.word	0x04000120
 8007294:	08008c73 	.word	0x08008c73

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800729c:	2b01      	cmp	r3, #1
 800729e:	f040 81e7 	bne.w	8007670 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072a6:	f003 0310 	and.w	r3, r3, #16
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 81e0 	beq.w	8007670 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072b4:	f003 0310 	and.w	r3, r3, #16
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 81d9 	beq.w	8007670 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2210      	movs	r2, #16
 80072c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d0:	2b40      	cmp	r3, #64	@ 0x40
 80072d2:	f040 8151 	bne.w	8007578 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a96      	ldr	r2, [pc, #600]	@ (8007538 <HAL_UART_IRQHandler+0x564>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d068      	beq.n	80073b6 <HAL_UART_IRQHandler+0x3e2>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a93      	ldr	r2, [pc, #588]	@ (800753c <HAL_UART_IRQHandler+0x568>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d061      	beq.n	80073b6 <HAL_UART_IRQHandler+0x3e2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a91      	ldr	r2, [pc, #580]	@ (8007540 <HAL_UART_IRQHandler+0x56c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d05a      	beq.n	80073b6 <HAL_UART_IRQHandler+0x3e2>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a8e      	ldr	r2, [pc, #568]	@ (8007544 <HAL_UART_IRQHandler+0x570>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d053      	beq.n	80073b6 <HAL_UART_IRQHandler+0x3e2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a8c      	ldr	r2, [pc, #560]	@ (8007548 <HAL_UART_IRQHandler+0x574>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d04c      	beq.n	80073b6 <HAL_UART_IRQHandler+0x3e2>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a89      	ldr	r2, [pc, #548]	@ (800754c <HAL_UART_IRQHandler+0x578>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d045      	beq.n	80073b6 <HAL_UART_IRQHandler+0x3e2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a87      	ldr	r2, [pc, #540]	@ (8007550 <HAL_UART_IRQHandler+0x57c>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d03e      	beq.n	80073b6 <HAL_UART_IRQHandler+0x3e2>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a84      	ldr	r2, [pc, #528]	@ (8007554 <HAL_UART_IRQHandler+0x580>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d037      	beq.n	80073b6 <HAL_UART_IRQHandler+0x3e2>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a82      	ldr	r2, [pc, #520]	@ (8007558 <HAL_UART_IRQHandler+0x584>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d030      	beq.n	80073b6 <HAL_UART_IRQHandler+0x3e2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a7f      	ldr	r2, [pc, #508]	@ (800755c <HAL_UART_IRQHandler+0x588>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d029      	beq.n	80073b6 <HAL_UART_IRQHandler+0x3e2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a7d      	ldr	r2, [pc, #500]	@ (8007560 <HAL_UART_IRQHandler+0x58c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d022      	beq.n	80073b6 <HAL_UART_IRQHandler+0x3e2>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a7a      	ldr	r2, [pc, #488]	@ (8007564 <HAL_UART_IRQHandler+0x590>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d01b      	beq.n	80073b6 <HAL_UART_IRQHandler+0x3e2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a78      	ldr	r2, [pc, #480]	@ (8007568 <HAL_UART_IRQHandler+0x594>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d014      	beq.n	80073b6 <HAL_UART_IRQHandler+0x3e2>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a75      	ldr	r2, [pc, #468]	@ (800756c <HAL_UART_IRQHandler+0x598>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d00d      	beq.n	80073b6 <HAL_UART_IRQHandler+0x3e2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a73      	ldr	r2, [pc, #460]	@ (8007570 <HAL_UART_IRQHandler+0x59c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d006      	beq.n	80073b6 <HAL_UART_IRQHandler+0x3e2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a70      	ldr	r2, [pc, #448]	@ (8007574 <HAL_UART_IRQHandler+0x5a0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d106      	bne.n	80073c4 <HAL_UART_IRQHandler+0x3f0>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	e005      	b.n	80073d0 <HAL_UART_IRQHandler+0x3fc>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 81ab 	beq.w	8007734 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073e8:	429a      	cmp	r2, r3
 80073ea:	f080 81a3 	bcs.w	8007734 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007404:	f000 8087 	beq.w	8007516 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800741c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007424:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	461a      	mov	r2, r3
 800742e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007432:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007436:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800743e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800744a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1da      	bne.n	8007408 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3308      	adds	r3, #8
 8007458:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007462:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007464:	f023 0301 	bic.w	r3, r3, #1
 8007468:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3308      	adds	r3, #8
 8007472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007476:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800747a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800747e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007488:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e1      	bne.n	8007452 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3308      	adds	r3, #8
 8007494:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800749e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3308      	adds	r3, #8
 80074ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80074b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80074b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80074b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80074ba:	e841 2300 	strex	r3, r2, [r1]
 80074be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80074c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1e3      	bne.n	800748e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074e4:	f023 0310 	bic.w	r3, r3, #16
 80074e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	461a      	mov	r2, r3
 80074f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e4      	bne.n	80074d4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007510:	4618      	mov	r0, r3
 8007512:	f7fa fc81 	bl	8001e18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2202      	movs	r2, #2
 800751a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007528:	b29b      	uxth	r3, r3
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	b29b      	uxth	r3, r3
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f931 	bl	8007798 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007536:	e0fd      	b.n	8007734 <HAL_UART_IRQHandler+0x760>
 8007538:	40020010 	.word	0x40020010
 800753c:	40020028 	.word	0x40020028
 8007540:	40020040 	.word	0x40020040
 8007544:	40020058 	.word	0x40020058
 8007548:	40020070 	.word	0x40020070
 800754c:	40020088 	.word	0x40020088
 8007550:	400200a0 	.word	0x400200a0
 8007554:	400200b8 	.word	0x400200b8
 8007558:	40020410 	.word	0x40020410
 800755c:	40020428 	.word	0x40020428
 8007560:	40020440 	.word	0x40020440
 8007564:	40020458 	.word	0x40020458
 8007568:	40020470 	.word	0x40020470
 800756c:	40020488 	.word	0x40020488
 8007570:	400204a0 	.word	0x400204a0
 8007574:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007584:	b29b      	uxth	r3, r3
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007592:	b29b      	uxth	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 80cf 	beq.w	8007738 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800759a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 80ca 	beq.w	8007738 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	461a      	mov	r2, r3
 80075c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80075c8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e4      	bne.n	80075a4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3308      	adds	r3, #8
 80075e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	623b      	str	r3, [r7, #32]
   return(result);
 80075ea:	6a3a      	ldr	r2, [r7, #32]
 80075ec:	4b55      	ldr	r3, [pc, #340]	@ (8007744 <HAL_UART_IRQHandler+0x770>)
 80075ee:	4013      	ands	r3, r2
 80075f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3308      	adds	r3, #8
 80075fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80075fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007600:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800760c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e3      	bne.n	80075da <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2220      	movs	r2, #32
 8007616:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	e853 3f00 	ldrex	r3, [r3]
 8007632:	60fb      	str	r3, [r7, #12]
   return(result);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0310 	bic.w	r3, r3, #16
 800763a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	461a      	mov	r2, r3
 8007644:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	69b9      	ldr	r1, [r7, #24]
 800764e:	69fa      	ldr	r2, [r7, #28]
 8007650:	e841 2300 	strex	r3, r2, [r1]
 8007654:	617b      	str	r3, [r7, #20]
   return(result);
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e4      	bne.n	8007626 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2202      	movs	r2, #2
 8007660:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007662:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f895 	bl	8007798 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800766e:	e063      	b.n	8007738 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007674:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00e      	beq.n	800769a <HAL_UART_IRQHandler+0x6c6>
 800767c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d008      	beq.n	800769a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007690:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 fb2e 	bl	8008cf4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007698:	e051      	b.n	800773e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800769a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800769e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d014      	beq.n	80076d0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80076a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d105      	bne.n	80076be <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80076b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d008      	beq.n	80076d0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d03a      	beq.n	800773c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	4798      	blx	r3
    }
    return;
 80076ce:	e035      	b.n	800773c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80076d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d009      	beq.n	80076f0 <HAL_UART_IRQHandler+0x71c>
 80076dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 fad8 	bl	8008c9e <UART_EndTransmit_IT>
    return;
 80076ee:	e026      	b.n	800773e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80076f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d009      	beq.n	8007710 <HAL_UART_IRQHandler+0x73c>
 80076fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007700:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d003      	beq.n	8007710 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 fb07 	bl	8008d1c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800770e:	e016      	b.n	800773e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007714:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d010      	beq.n	800773e <HAL_UART_IRQHandler+0x76a>
 800771c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007720:	2b00      	cmp	r3, #0
 8007722:	da0c      	bge.n	800773e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f001 faef 	bl	8008d08 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800772a:	e008      	b.n	800773e <HAL_UART_IRQHandler+0x76a>
      return;
 800772c:	bf00      	nop
 800772e:	e006      	b.n	800773e <HAL_UART_IRQHandler+0x76a>
    return;
 8007730:	bf00      	nop
 8007732:	e004      	b.n	800773e <HAL_UART_IRQHandler+0x76a>
      return;
 8007734:	bf00      	nop
 8007736:	e002      	b.n	800773e <HAL_UART_IRQHandler+0x76a>
      return;
 8007738:	bf00      	nop
 800773a:	e000      	b.n	800773e <HAL_UART_IRQHandler+0x76a>
    return;
 800773c:	bf00      	nop
  }
}
 800773e:	37e8      	adds	r7, #232	@ 0xe8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	effffffe 	.word	0xeffffffe

08007748 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	460b      	mov	r3, r1
 80077a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077b4:	b092      	sub	sp, #72	@ 0x48
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	689a      	ldr	r2, [r3, #8]
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	431a      	orrs	r2, r3
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	431a      	orrs	r2, r3
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	4bbe      	ldr	r3, [pc, #760]	@ (8007ad8 <UART_SetConfig+0x328>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	6812      	ldr	r2, [r2, #0]
 80077e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80077e8:	430b      	orrs	r3, r1
 80077ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4ab3      	ldr	r2, [pc, #716]	@ (8007adc <UART_SetConfig+0x32c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d004      	beq.n	800781c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007818:	4313      	orrs	r3, r2
 800781a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	4baf      	ldr	r3, [pc, #700]	@ (8007ae0 <UART_SetConfig+0x330>)
 8007824:	4013      	ands	r3, r2
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	6812      	ldr	r2, [r2, #0]
 800782a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800782c:	430b      	orrs	r3, r1
 800782e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007836:	f023 010f 	bic.w	r1, r3, #15
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4aa6      	ldr	r2, [pc, #664]	@ (8007ae4 <UART_SetConfig+0x334>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d177      	bne.n	8007940 <UART_SetConfig+0x190>
 8007850:	4ba5      	ldr	r3, [pc, #660]	@ (8007ae8 <UART_SetConfig+0x338>)
 8007852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007854:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007858:	2b28      	cmp	r3, #40	@ 0x28
 800785a:	d86d      	bhi.n	8007938 <UART_SetConfig+0x188>
 800785c:	a201      	add	r2, pc, #4	@ (adr r2, 8007864 <UART_SetConfig+0xb4>)
 800785e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007862:	bf00      	nop
 8007864:	08007909 	.word	0x08007909
 8007868:	08007939 	.word	0x08007939
 800786c:	08007939 	.word	0x08007939
 8007870:	08007939 	.word	0x08007939
 8007874:	08007939 	.word	0x08007939
 8007878:	08007939 	.word	0x08007939
 800787c:	08007939 	.word	0x08007939
 8007880:	08007939 	.word	0x08007939
 8007884:	08007911 	.word	0x08007911
 8007888:	08007939 	.word	0x08007939
 800788c:	08007939 	.word	0x08007939
 8007890:	08007939 	.word	0x08007939
 8007894:	08007939 	.word	0x08007939
 8007898:	08007939 	.word	0x08007939
 800789c:	08007939 	.word	0x08007939
 80078a0:	08007939 	.word	0x08007939
 80078a4:	08007919 	.word	0x08007919
 80078a8:	08007939 	.word	0x08007939
 80078ac:	08007939 	.word	0x08007939
 80078b0:	08007939 	.word	0x08007939
 80078b4:	08007939 	.word	0x08007939
 80078b8:	08007939 	.word	0x08007939
 80078bc:	08007939 	.word	0x08007939
 80078c0:	08007939 	.word	0x08007939
 80078c4:	08007921 	.word	0x08007921
 80078c8:	08007939 	.word	0x08007939
 80078cc:	08007939 	.word	0x08007939
 80078d0:	08007939 	.word	0x08007939
 80078d4:	08007939 	.word	0x08007939
 80078d8:	08007939 	.word	0x08007939
 80078dc:	08007939 	.word	0x08007939
 80078e0:	08007939 	.word	0x08007939
 80078e4:	08007929 	.word	0x08007929
 80078e8:	08007939 	.word	0x08007939
 80078ec:	08007939 	.word	0x08007939
 80078f0:	08007939 	.word	0x08007939
 80078f4:	08007939 	.word	0x08007939
 80078f8:	08007939 	.word	0x08007939
 80078fc:	08007939 	.word	0x08007939
 8007900:	08007939 	.word	0x08007939
 8007904:	08007931 	.word	0x08007931
 8007908:	2301      	movs	r3, #1
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790e:	e326      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007910:	2304      	movs	r3, #4
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e322      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007918:	2308      	movs	r3, #8
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e31e      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007920:	2310      	movs	r3, #16
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007926:	e31a      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007928:	2320      	movs	r3, #32
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792e:	e316      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007930:	2340      	movs	r3, #64	@ 0x40
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007936:	e312      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007938:	2380      	movs	r3, #128	@ 0x80
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793e:	e30e      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a69      	ldr	r2, [pc, #420]	@ (8007aec <UART_SetConfig+0x33c>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d130      	bne.n	80079ac <UART_SetConfig+0x1fc>
 800794a:	4b67      	ldr	r3, [pc, #412]	@ (8007ae8 <UART_SetConfig+0x338>)
 800794c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	2b05      	cmp	r3, #5
 8007954:	d826      	bhi.n	80079a4 <UART_SetConfig+0x1f4>
 8007956:	a201      	add	r2, pc, #4	@ (adr r2, 800795c <UART_SetConfig+0x1ac>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	08007975 	.word	0x08007975
 8007960:	0800797d 	.word	0x0800797d
 8007964:	08007985 	.word	0x08007985
 8007968:	0800798d 	.word	0x0800798d
 800796c:	08007995 	.word	0x08007995
 8007970:	0800799d 	.word	0x0800799d
 8007974:	2300      	movs	r3, #0
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797a:	e2f0      	b.n	8007f5e <UART_SetConfig+0x7ae>
 800797c:	2304      	movs	r3, #4
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007982:	e2ec      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007984:	2308      	movs	r3, #8
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798a:	e2e8      	b.n	8007f5e <UART_SetConfig+0x7ae>
 800798c:	2310      	movs	r3, #16
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007992:	e2e4      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007994:	2320      	movs	r3, #32
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e2e0      	b.n	8007f5e <UART_SetConfig+0x7ae>
 800799c:	2340      	movs	r3, #64	@ 0x40
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e2dc      	b.n	8007f5e <UART_SetConfig+0x7ae>
 80079a4:	2380      	movs	r3, #128	@ 0x80
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e2d8      	b.n	8007f5e <UART_SetConfig+0x7ae>
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a4f      	ldr	r2, [pc, #316]	@ (8007af0 <UART_SetConfig+0x340>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d130      	bne.n	8007a18 <UART_SetConfig+0x268>
 80079b6:	4b4c      	ldr	r3, [pc, #304]	@ (8007ae8 <UART_SetConfig+0x338>)
 80079b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ba:	f003 0307 	and.w	r3, r3, #7
 80079be:	2b05      	cmp	r3, #5
 80079c0:	d826      	bhi.n	8007a10 <UART_SetConfig+0x260>
 80079c2:	a201      	add	r2, pc, #4	@ (adr r2, 80079c8 <UART_SetConfig+0x218>)
 80079c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c8:	080079e1 	.word	0x080079e1
 80079cc:	080079e9 	.word	0x080079e9
 80079d0:	080079f1 	.word	0x080079f1
 80079d4:	080079f9 	.word	0x080079f9
 80079d8:	08007a01 	.word	0x08007a01
 80079dc:	08007a09 	.word	0x08007a09
 80079e0:	2300      	movs	r3, #0
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e6:	e2ba      	b.n	8007f5e <UART_SetConfig+0x7ae>
 80079e8:	2304      	movs	r3, #4
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e2b6      	b.n	8007f5e <UART_SetConfig+0x7ae>
 80079f0:	2308      	movs	r3, #8
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f6:	e2b2      	b.n	8007f5e <UART_SetConfig+0x7ae>
 80079f8:	2310      	movs	r3, #16
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fe:	e2ae      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007a00:	2320      	movs	r3, #32
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a06:	e2aa      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007a08:	2340      	movs	r3, #64	@ 0x40
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a0e:	e2a6      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007a10:	2380      	movs	r3, #128	@ 0x80
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a16:	e2a2      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a35      	ldr	r2, [pc, #212]	@ (8007af4 <UART_SetConfig+0x344>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d130      	bne.n	8007a84 <UART_SetConfig+0x2d4>
 8007a22:	4b31      	ldr	r3, [pc, #196]	@ (8007ae8 <UART_SetConfig+0x338>)
 8007a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a26:	f003 0307 	and.w	r3, r3, #7
 8007a2a:	2b05      	cmp	r3, #5
 8007a2c:	d826      	bhi.n	8007a7c <UART_SetConfig+0x2cc>
 8007a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a34 <UART_SetConfig+0x284>)
 8007a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a34:	08007a4d 	.word	0x08007a4d
 8007a38:	08007a55 	.word	0x08007a55
 8007a3c:	08007a5d 	.word	0x08007a5d
 8007a40:	08007a65 	.word	0x08007a65
 8007a44:	08007a6d 	.word	0x08007a6d
 8007a48:	08007a75 	.word	0x08007a75
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a52:	e284      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007a54:	2304      	movs	r3, #4
 8007a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a5a:	e280      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007a5c:	2308      	movs	r3, #8
 8007a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a62:	e27c      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007a64:	2310      	movs	r3, #16
 8007a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6a:	e278      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007a6c:	2320      	movs	r3, #32
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a72:	e274      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007a74:	2340      	movs	r3, #64	@ 0x40
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7a:	e270      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007a7c:	2380      	movs	r3, #128	@ 0x80
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a82:	e26c      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a1b      	ldr	r2, [pc, #108]	@ (8007af8 <UART_SetConfig+0x348>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d142      	bne.n	8007b14 <UART_SetConfig+0x364>
 8007a8e:	4b16      	ldr	r3, [pc, #88]	@ (8007ae8 <UART_SetConfig+0x338>)
 8007a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	2b05      	cmp	r3, #5
 8007a98:	d838      	bhi.n	8007b0c <UART_SetConfig+0x35c>
 8007a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa0 <UART_SetConfig+0x2f0>)
 8007a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa0:	08007ab9 	.word	0x08007ab9
 8007aa4:	08007ac1 	.word	0x08007ac1
 8007aa8:	08007ac9 	.word	0x08007ac9
 8007aac:	08007ad1 	.word	0x08007ad1
 8007ab0:	08007afd 	.word	0x08007afd
 8007ab4:	08007b05 	.word	0x08007b05
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007abe:	e24e      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007ac0:	2304      	movs	r3, #4
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac6:	e24a      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007ac8:	2308      	movs	r3, #8
 8007aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ace:	e246      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007ad0:	2310      	movs	r3, #16
 8007ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad6:	e242      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007ad8:	cfff69f3 	.word	0xcfff69f3
 8007adc:	58000c00 	.word	0x58000c00
 8007ae0:	11fff4ff 	.word	0x11fff4ff
 8007ae4:	40011000 	.word	0x40011000
 8007ae8:	58024400 	.word	0x58024400
 8007aec:	40004400 	.word	0x40004400
 8007af0:	40004800 	.word	0x40004800
 8007af4:	40004c00 	.word	0x40004c00
 8007af8:	40005000 	.word	0x40005000
 8007afc:	2320      	movs	r3, #32
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b02:	e22c      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007b04:	2340      	movs	r3, #64	@ 0x40
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0a:	e228      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007b0c:	2380      	movs	r3, #128	@ 0x80
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b12:	e224      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4ab1      	ldr	r2, [pc, #708]	@ (8007de0 <UART_SetConfig+0x630>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d176      	bne.n	8007c0c <UART_SetConfig+0x45c>
 8007b1e:	4bb1      	ldr	r3, [pc, #708]	@ (8007de4 <UART_SetConfig+0x634>)
 8007b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b26:	2b28      	cmp	r3, #40	@ 0x28
 8007b28:	d86c      	bhi.n	8007c04 <UART_SetConfig+0x454>
 8007b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b30 <UART_SetConfig+0x380>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007bd5 	.word	0x08007bd5
 8007b34:	08007c05 	.word	0x08007c05
 8007b38:	08007c05 	.word	0x08007c05
 8007b3c:	08007c05 	.word	0x08007c05
 8007b40:	08007c05 	.word	0x08007c05
 8007b44:	08007c05 	.word	0x08007c05
 8007b48:	08007c05 	.word	0x08007c05
 8007b4c:	08007c05 	.word	0x08007c05
 8007b50:	08007bdd 	.word	0x08007bdd
 8007b54:	08007c05 	.word	0x08007c05
 8007b58:	08007c05 	.word	0x08007c05
 8007b5c:	08007c05 	.word	0x08007c05
 8007b60:	08007c05 	.word	0x08007c05
 8007b64:	08007c05 	.word	0x08007c05
 8007b68:	08007c05 	.word	0x08007c05
 8007b6c:	08007c05 	.word	0x08007c05
 8007b70:	08007be5 	.word	0x08007be5
 8007b74:	08007c05 	.word	0x08007c05
 8007b78:	08007c05 	.word	0x08007c05
 8007b7c:	08007c05 	.word	0x08007c05
 8007b80:	08007c05 	.word	0x08007c05
 8007b84:	08007c05 	.word	0x08007c05
 8007b88:	08007c05 	.word	0x08007c05
 8007b8c:	08007c05 	.word	0x08007c05
 8007b90:	08007bed 	.word	0x08007bed
 8007b94:	08007c05 	.word	0x08007c05
 8007b98:	08007c05 	.word	0x08007c05
 8007b9c:	08007c05 	.word	0x08007c05
 8007ba0:	08007c05 	.word	0x08007c05
 8007ba4:	08007c05 	.word	0x08007c05
 8007ba8:	08007c05 	.word	0x08007c05
 8007bac:	08007c05 	.word	0x08007c05
 8007bb0:	08007bf5 	.word	0x08007bf5
 8007bb4:	08007c05 	.word	0x08007c05
 8007bb8:	08007c05 	.word	0x08007c05
 8007bbc:	08007c05 	.word	0x08007c05
 8007bc0:	08007c05 	.word	0x08007c05
 8007bc4:	08007c05 	.word	0x08007c05
 8007bc8:	08007c05 	.word	0x08007c05
 8007bcc:	08007c05 	.word	0x08007c05
 8007bd0:	08007bfd 	.word	0x08007bfd
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bda:	e1c0      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007bdc:	2304      	movs	r3, #4
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be2:	e1bc      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007be4:	2308      	movs	r3, #8
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bea:	e1b8      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007bec:	2310      	movs	r3, #16
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bf2:	e1b4      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007bf4:	2320      	movs	r3, #32
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bfa:	e1b0      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007bfc:	2340      	movs	r3, #64	@ 0x40
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c02:	e1ac      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007c04:	2380      	movs	r3, #128	@ 0x80
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c0a:	e1a8      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a75      	ldr	r2, [pc, #468]	@ (8007de8 <UART_SetConfig+0x638>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d130      	bne.n	8007c78 <UART_SetConfig+0x4c8>
 8007c16:	4b73      	ldr	r3, [pc, #460]	@ (8007de4 <UART_SetConfig+0x634>)
 8007c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c1a:	f003 0307 	and.w	r3, r3, #7
 8007c1e:	2b05      	cmp	r3, #5
 8007c20:	d826      	bhi.n	8007c70 <UART_SetConfig+0x4c0>
 8007c22:	a201      	add	r2, pc, #4	@ (adr r2, 8007c28 <UART_SetConfig+0x478>)
 8007c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c28:	08007c41 	.word	0x08007c41
 8007c2c:	08007c49 	.word	0x08007c49
 8007c30:	08007c51 	.word	0x08007c51
 8007c34:	08007c59 	.word	0x08007c59
 8007c38:	08007c61 	.word	0x08007c61
 8007c3c:	08007c69 	.word	0x08007c69
 8007c40:	2300      	movs	r3, #0
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c46:	e18a      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007c48:	2304      	movs	r3, #4
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4e:	e186      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007c50:	2308      	movs	r3, #8
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c56:	e182      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5e:	e17e      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007c60:	2320      	movs	r3, #32
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c66:	e17a      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007c68:	2340      	movs	r3, #64	@ 0x40
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6e:	e176      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007c70:	2380      	movs	r3, #128	@ 0x80
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c76:	e172      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a5b      	ldr	r2, [pc, #364]	@ (8007dec <UART_SetConfig+0x63c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d130      	bne.n	8007ce4 <UART_SetConfig+0x534>
 8007c82:	4b58      	ldr	r3, [pc, #352]	@ (8007de4 <UART_SetConfig+0x634>)
 8007c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c86:	f003 0307 	and.w	r3, r3, #7
 8007c8a:	2b05      	cmp	r3, #5
 8007c8c:	d826      	bhi.n	8007cdc <UART_SetConfig+0x52c>
 8007c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c94 <UART_SetConfig+0x4e4>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007cad 	.word	0x08007cad
 8007c98:	08007cb5 	.word	0x08007cb5
 8007c9c:	08007cbd 	.word	0x08007cbd
 8007ca0:	08007cc5 	.word	0x08007cc5
 8007ca4:	08007ccd 	.word	0x08007ccd
 8007ca8:	08007cd5 	.word	0x08007cd5
 8007cac:	2300      	movs	r3, #0
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb2:	e154      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cba:	e150      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007cbc:	2308      	movs	r3, #8
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc2:	e14c      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007cc4:	2310      	movs	r3, #16
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cca:	e148      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007ccc:	2320      	movs	r3, #32
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd2:	e144      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007cd4:	2340      	movs	r3, #64	@ 0x40
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cda:	e140      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007cdc:	2380      	movs	r3, #128	@ 0x80
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce2:	e13c      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a41      	ldr	r2, [pc, #260]	@ (8007df0 <UART_SetConfig+0x640>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	f040 8082 	bne.w	8007df4 <UART_SetConfig+0x644>
 8007cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8007de4 <UART_SetConfig+0x634>)
 8007cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cf8:	2b28      	cmp	r3, #40	@ 0x28
 8007cfa:	d86d      	bhi.n	8007dd8 <UART_SetConfig+0x628>
 8007cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8007d04 <UART_SetConfig+0x554>)
 8007cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d02:	bf00      	nop
 8007d04:	08007da9 	.word	0x08007da9
 8007d08:	08007dd9 	.word	0x08007dd9
 8007d0c:	08007dd9 	.word	0x08007dd9
 8007d10:	08007dd9 	.word	0x08007dd9
 8007d14:	08007dd9 	.word	0x08007dd9
 8007d18:	08007dd9 	.word	0x08007dd9
 8007d1c:	08007dd9 	.word	0x08007dd9
 8007d20:	08007dd9 	.word	0x08007dd9
 8007d24:	08007db1 	.word	0x08007db1
 8007d28:	08007dd9 	.word	0x08007dd9
 8007d2c:	08007dd9 	.word	0x08007dd9
 8007d30:	08007dd9 	.word	0x08007dd9
 8007d34:	08007dd9 	.word	0x08007dd9
 8007d38:	08007dd9 	.word	0x08007dd9
 8007d3c:	08007dd9 	.word	0x08007dd9
 8007d40:	08007dd9 	.word	0x08007dd9
 8007d44:	08007db9 	.word	0x08007db9
 8007d48:	08007dd9 	.word	0x08007dd9
 8007d4c:	08007dd9 	.word	0x08007dd9
 8007d50:	08007dd9 	.word	0x08007dd9
 8007d54:	08007dd9 	.word	0x08007dd9
 8007d58:	08007dd9 	.word	0x08007dd9
 8007d5c:	08007dd9 	.word	0x08007dd9
 8007d60:	08007dd9 	.word	0x08007dd9
 8007d64:	08007dc1 	.word	0x08007dc1
 8007d68:	08007dd9 	.word	0x08007dd9
 8007d6c:	08007dd9 	.word	0x08007dd9
 8007d70:	08007dd9 	.word	0x08007dd9
 8007d74:	08007dd9 	.word	0x08007dd9
 8007d78:	08007dd9 	.word	0x08007dd9
 8007d7c:	08007dd9 	.word	0x08007dd9
 8007d80:	08007dd9 	.word	0x08007dd9
 8007d84:	08007dc9 	.word	0x08007dc9
 8007d88:	08007dd9 	.word	0x08007dd9
 8007d8c:	08007dd9 	.word	0x08007dd9
 8007d90:	08007dd9 	.word	0x08007dd9
 8007d94:	08007dd9 	.word	0x08007dd9
 8007d98:	08007dd9 	.word	0x08007dd9
 8007d9c:	08007dd9 	.word	0x08007dd9
 8007da0:	08007dd9 	.word	0x08007dd9
 8007da4:	08007dd1 	.word	0x08007dd1
 8007da8:	2301      	movs	r3, #1
 8007daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dae:	e0d6      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007db0:	2304      	movs	r3, #4
 8007db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db6:	e0d2      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007db8:	2308      	movs	r3, #8
 8007dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dbe:	e0ce      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc6:	e0ca      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007dc8:	2320      	movs	r3, #32
 8007dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dce:	e0c6      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007dd0:	2340      	movs	r3, #64	@ 0x40
 8007dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd6:	e0c2      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007dd8:	2380      	movs	r3, #128	@ 0x80
 8007dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dde:	e0be      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007de0:	40011400 	.word	0x40011400
 8007de4:	58024400 	.word	0x58024400
 8007de8:	40007800 	.word	0x40007800
 8007dec:	40007c00 	.word	0x40007c00
 8007df0:	40011800 	.word	0x40011800
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4aad      	ldr	r2, [pc, #692]	@ (80080b0 <UART_SetConfig+0x900>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d176      	bne.n	8007eec <UART_SetConfig+0x73c>
 8007dfe:	4bad      	ldr	r3, [pc, #692]	@ (80080b4 <UART_SetConfig+0x904>)
 8007e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e06:	2b28      	cmp	r3, #40	@ 0x28
 8007e08:	d86c      	bhi.n	8007ee4 <UART_SetConfig+0x734>
 8007e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e10 <UART_SetConfig+0x660>)
 8007e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e10:	08007eb5 	.word	0x08007eb5
 8007e14:	08007ee5 	.word	0x08007ee5
 8007e18:	08007ee5 	.word	0x08007ee5
 8007e1c:	08007ee5 	.word	0x08007ee5
 8007e20:	08007ee5 	.word	0x08007ee5
 8007e24:	08007ee5 	.word	0x08007ee5
 8007e28:	08007ee5 	.word	0x08007ee5
 8007e2c:	08007ee5 	.word	0x08007ee5
 8007e30:	08007ebd 	.word	0x08007ebd
 8007e34:	08007ee5 	.word	0x08007ee5
 8007e38:	08007ee5 	.word	0x08007ee5
 8007e3c:	08007ee5 	.word	0x08007ee5
 8007e40:	08007ee5 	.word	0x08007ee5
 8007e44:	08007ee5 	.word	0x08007ee5
 8007e48:	08007ee5 	.word	0x08007ee5
 8007e4c:	08007ee5 	.word	0x08007ee5
 8007e50:	08007ec5 	.word	0x08007ec5
 8007e54:	08007ee5 	.word	0x08007ee5
 8007e58:	08007ee5 	.word	0x08007ee5
 8007e5c:	08007ee5 	.word	0x08007ee5
 8007e60:	08007ee5 	.word	0x08007ee5
 8007e64:	08007ee5 	.word	0x08007ee5
 8007e68:	08007ee5 	.word	0x08007ee5
 8007e6c:	08007ee5 	.word	0x08007ee5
 8007e70:	08007ecd 	.word	0x08007ecd
 8007e74:	08007ee5 	.word	0x08007ee5
 8007e78:	08007ee5 	.word	0x08007ee5
 8007e7c:	08007ee5 	.word	0x08007ee5
 8007e80:	08007ee5 	.word	0x08007ee5
 8007e84:	08007ee5 	.word	0x08007ee5
 8007e88:	08007ee5 	.word	0x08007ee5
 8007e8c:	08007ee5 	.word	0x08007ee5
 8007e90:	08007ed5 	.word	0x08007ed5
 8007e94:	08007ee5 	.word	0x08007ee5
 8007e98:	08007ee5 	.word	0x08007ee5
 8007e9c:	08007ee5 	.word	0x08007ee5
 8007ea0:	08007ee5 	.word	0x08007ee5
 8007ea4:	08007ee5 	.word	0x08007ee5
 8007ea8:	08007ee5 	.word	0x08007ee5
 8007eac:	08007ee5 	.word	0x08007ee5
 8007eb0:	08007edd 	.word	0x08007edd
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eba:	e050      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007ebc:	2304      	movs	r3, #4
 8007ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ec2:	e04c      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007ec4:	2308      	movs	r3, #8
 8007ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eca:	e048      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007ecc:	2310      	movs	r3, #16
 8007ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ed2:	e044      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007ed4:	2320      	movs	r3, #32
 8007ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eda:	e040      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007edc:	2340      	movs	r3, #64	@ 0x40
 8007ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ee2:	e03c      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007ee4:	2380      	movs	r3, #128	@ 0x80
 8007ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eea:	e038      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a71      	ldr	r2, [pc, #452]	@ (80080b8 <UART_SetConfig+0x908>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d130      	bne.n	8007f58 <UART_SetConfig+0x7a8>
 8007ef6:	4b6f      	ldr	r3, [pc, #444]	@ (80080b4 <UART_SetConfig+0x904>)
 8007ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007efa:	f003 0307 	and.w	r3, r3, #7
 8007efe:	2b05      	cmp	r3, #5
 8007f00:	d826      	bhi.n	8007f50 <UART_SetConfig+0x7a0>
 8007f02:	a201      	add	r2, pc, #4	@ (adr r2, 8007f08 <UART_SetConfig+0x758>)
 8007f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f08:	08007f21 	.word	0x08007f21
 8007f0c:	08007f29 	.word	0x08007f29
 8007f10:	08007f31 	.word	0x08007f31
 8007f14:	08007f39 	.word	0x08007f39
 8007f18:	08007f41 	.word	0x08007f41
 8007f1c:	08007f49 	.word	0x08007f49
 8007f20:	2302      	movs	r3, #2
 8007f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f26:	e01a      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007f28:	2304      	movs	r3, #4
 8007f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2e:	e016      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007f30:	2308      	movs	r3, #8
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f36:	e012      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007f38:	2310      	movs	r3, #16
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3e:	e00e      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007f40:	2320      	movs	r3, #32
 8007f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f46:	e00a      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007f48:	2340      	movs	r3, #64	@ 0x40
 8007f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f4e:	e006      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007f50:	2380      	movs	r3, #128	@ 0x80
 8007f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f56:	e002      	b.n	8007f5e <UART_SetConfig+0x7ae>
 8007f58:	2380      	movs	r3, #128	@ 0x80
 8007f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a55      	ldr	r2, [pc, #340]	@ (80080b8 <UART_SetConfig+0x908>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	f040 80f8 	bne.w	800815a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f6e:	2b20      	cmp	r3, #32
 8007f70:	dc46      	bgt.n	8008000 <UART_SetConfig+0x850>
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	db75      	blt.n	8008062 <UART_SetConfig+0x8b2>
 8007f76:	3b02      	subs	r3, #2
 8007f78:	2b1e      	cmp	r3, #30
 8007f7a:	d872      	bhi.n	8008062 <UART_SetConfig+0x8b2>
 8007f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f84 <UART_SetConfig+0x7d4>)
 8007f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f82:	bf00      	nop
 8007f84:	08008007 	.word	0x08008007
 8007f88:	08008063 	.word	0x08008063
 8007f8c:	0800800f 	.word	0x0800800f
 8007f90:	08008063 	.word	0x08008063
 8007f94:	08008063 	.word	0x08008063
 8007f98:	08008063 	.word	0x08008063
 8007f9c:	0800801f 	.word	0x0800801f
 8007fa0:	08008063 	.word	0x08008063
 8007fa4:	08008063 	.word	0x08008063
 8007fa8:	08008063 	.word	0x08008063
 8007fac:	08008063 	.word	0x08008063
 8007fb0:	08008063 	.word	0x08008063
 8007fb4:	08008063 	.word	0x08008063
 8007fb8:	08008063 	.word	0x08008063
 8007fbc:	0800802f 	.word	0x0800802f
 8007fc0:	08008063 	.word	0x08008063
 8007fc4:	08008063 	.word	0x08008063
 8007fc8:	08008063 	.word	0x08008063
 8007fcc:	08008063 	.word	0x08008063
 8007fd0:	08008063 	.word	0x08008063
 8007fd4:	08008063 	.word	0x08008063
 8007fd8:	08008063 	.word	0x08008063
 8007fdc:	08008063 	.word	0x08008063
 8007fe0:	08008063 	.word	0x08008063
 8007fe4:	08008063 	.word	0x08008063
 8007fe8:	08008063 	.word	0x08008063
 8007fec:	08008063 	.word	0x08008063
 8007ff0:	08008063 	.word	0x08008063
 8007ff4:	08008063 	.word	0x08008063
 8007ff8:	08008063 	.word	0x08008063
 8007ffc:	08008055 	.word	0x08008055
 8008000:	2b40      	cmp	r3, #64	@ 0x40
 8008002:	d02a      	beq.n	800805a <UART_SetConfig+0x8aa>
 8008004:	e02d      	b.n	8008062 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008006:	f7fe fa99 	bl	800653c <HAL_RCCEx_GetD3PCLK1Freq>
 800800a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800800c:	e02f      	b.n	800806e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800800e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe faa8 	bl	8006568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800801c:	e027      	b.n	800806e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800801e:	f107 0318 	add.w	r3, r7, #24
 8008022:	4618      	mov	r0, r3
 8008024:	f7fe fbf4 	bl	8006810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800802c:	e01f      	b.n	800806e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800802e:	4b21      	ldr	r3, [pc, #132]	@ (80080b4 <UART_SetConfig+0x904>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0320 	and.w	r3, r3, #32
 8008036:	2b00      	cmp	r3, #0
 8008038:	d009      	beq.n	800804e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800803a:	4b1e      	ldr	r3, [pc, #120]	@ (80080b4 <UART_SetConfig+0x904>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	08db      	lsrs	r3, r3, #3
 8008040:	f003 0303 	and.w	r3, r3, #3
 8008044:	4a1d      	ldr	r2, [pc, #116]	@ (80080bc <UART_SetConfig+0x90c>)
 8008046:	fa22 f303 	lsr.w	r3, r2, r3
 800804a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800804c:	e00f      	b.n	800806e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800804e:	4b1b      	ldr	r3, [pc, #108]	@ (80080bc <UART_SetConfig+0x90c>)
 8008050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008052:	e00c      	b.n	800806e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008054:	4b1a      	ldr	r3, [pc, #104]	@ (80080c0 <UART_SetConfig+0x910>)
 8008056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008058:	e009      	b.n	800806e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800805a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800805e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008060:	e005      	b.n	800806e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800806c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800806e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 81ee 	beq.w	8008452 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800807a:	4a12      	ldr	r2, [pc, #72]	@ (80080c4 <UART_SetConfig+0x914>)
 800807c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008080:	461a      	mov	r2, r3
 8008082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008084:	fbb3 f3f2 	udiv	r3, r3, r2
 8008088:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	4613      	mov	r3, r2
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	4413      	add	r3, r2
 8008094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008096:	429a      	cmp	r2, r3
 8008098:	d305      	bcc.n	80080a6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d910      	bls.n	80080c8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80080ac:	e1d1      	b.n	8008452 <UART_SetConfig+0xca2>
 80080ae:	bf00      	nop
 80080b0:	40011c00 	.word	0x40011c00
 80080b4:	58024400 	.word	0x58024400
 80080b8:	58000c00 	.word	0x58000c00
 80080bc:	03d09000 	.word	0x03d09000
 80080c0:	003d0900 	.word	0x003d0900
 80080c4:	08008fe8 	.word	0x08008fe8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ca:	2200      	movs	r2, #0
 80080cc:	60bb      	str	r3, [r7, #8]
 80080ce:	60fa      	str	r2, [r7, #12]
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d4:	4ac0      	ldr	r2, [pc, #768]	@ (80083d8 <UART_SetConfig+0xc28>)
 80080d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080da:	b29b      	uxth	r3, r3
 80080dc:	2200      	movs	r2, #0
 80080de:	603b      	str	r3, [r7, #0]
 80080e0:	607a      	str	r2, [r7, #4]
 80080e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080ea:	f7f8 f917 	bl	800031c <__aeabi_uldivmod>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	4610      	mov	r0, r2
 80080f4:	4619      	mov	r1, r3
 80080f6:	f04f 0200 	mov.w	r2, #0
 80080fa:	f04f 0300 	mov.w	r3, #0
 80080fe:	020b      	lsls	r3, r1, #8
 8008100:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008104:	0202      	lsls	r2, r0, #8
 8008106:	6979      	ldr	r1, [r7, #20]
 8008108:	6849      	ldr	r1, [r1, #4]
 800810a:	0849      	lsrs	r1, r1, #1
 800810c:	2000      	movs	r0, #0
 800810e:	460c      	mov	r4, r1
 8008110:	4605      	mov	r5, r0
 8008112:	eb12 0804 	adds.w	r8, r2, r4
 8008116:	eb43 0905 	adc.w	r9, r3, r5
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	469a      	mov	sl, r3
 8008122:	4693      	mov	fp, r2
 8008124:	4652      	mov	r2, sl
 8008126:	465b      	mov	r3, fp
 8008128:	4640      	mov	r0, r8
 800812a:	4649      	mov	r1, r9
 800812c:	f7f8 f8f6 	bl	800031c <__aeabi_uldivmod>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4613      	mov	r3, r2
 8008136:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800813e:	d308      	bcc.n	8008152 <UART_SetConfig+0x9a2>
 8008140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008142:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008146:	d204      	bcs.n	8008152 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800814e:	60da      	str	r2, [r3, #12]
 8008150:	e17f      	b.n	8008452 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008158:	e17b      	b.n	8008452 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008162:	f040 80bd 	bne.w	80082e0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008166:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800816a:	2b20      	cmp	r3, #32
 800816c:	dc48      	bgt.n	8008200 <UART_SetConfig+0xa50>
 800816e:	2b00      	cmp	r3, #0
 8008170:	db7b      	blt.n	800826a <UART_SetConfig+0xaba>
 8008172:	2b20      	cmp	r3, #32
 8008174:	d879      	bhi.n	800826a <UART_SetConfig+0xaba>
 8008176:	a201      	add	r2, pc, #4	@ (adr r2, 800817c <UART_SetConfig+0x9cc>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	08008207 	.word	0x08008207
 8008180:	0800820f 	.word	0x0800820f
 8008184:	0800826b 	.word	0x0800826b
 8008188:	0800826b 	.word	0x0800826b
 800818c:	08008217 	.word	0x08008217
 8008190:	0800826b 	.word	0x0800826b
 8008194:	0800826b 	.word	0x0800826b
 8008198:	0800826b 	.word	0x0800826b
 800819c:	08008227 	.word	0x08008227
 80081a0:	0800826b 	.word	0x0800826b
 80081a4:	0800826b 	.word	0x0800826b
 80081a8:	0800826b 	.word	0x0800826b
 80081ac:	0800826b 	.word	0x0800826b
 80081b0:	0800826b 	.word	0x0800826b
 80081b4:	0800826b 	.word	0x0800826b
 80081b8:	0800826b 	.word	0x0800826b
 80081bc:	08008237 	.word	0x08008237
 80081c0:	0800826b 	.word	0x0800826b
 80081c4:	0800826b 	.word	0x0800826b
 80081c8:	0800826b 	.word	0x0800826b
 80081cc:	0800826b 	.word	0x0800826b
 80081d0:	0800826b 	.word	0x0800826b
 80081d4:	0800826b 	.word	0x0800826b
 80081d8:	0800826b 	.word	0x0800826b
 80081dc:	0800826b 	.word	0x0800826b
 80081e0:	0800826b 	.word	0x0800826b
 80081e4:	0800826b 	.word	0x0800826b
 80081e8:	0800826b 	.word	0x0800826b
 80081ec:	0800826b 	.word	0x0800826b
 80081f0:	0800826b 	.word	0x0800826b
 80081f4:	0800826b 	.word	0x0800826b
 80081f8:	0800826b 	.word	0x0800826b
 80081fc:	0800825d 	.word	0x0800825d
 8008200:	2b40      	cmp	r3, #64	@ 0x40
 8008202:	d02e      	beq.n	8008262 <UART_SetConfig+0xab2>
 8008204:	e031      	b.n	800826a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008206:	f7fc ffcd 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 800820a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800820c:	e033      	b.n	8008276 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800820e:	f7fc ffdf 	bl	80051d0 <HAL_RCC_GetPCLK2Freq>
 8008212:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008214:	e02f      	b.n	8008276 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008216:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800821a:	4618      	mov	r0, r3
 800821c:	f7fe f9a4 	bl	8006568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008224:	e027      	b.n	8008276 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008226:	f107 0318 	add.w	r3, r7, #24
 800822a:	4618      	mov	r0, r3
 800822c:	f7fe faf0 	bl	8006810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008234:	e01f      	b.n	8008276 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008236:	4b69      	ldr	r3, [pc, #420]	@ (80083dc <UART_SetConfig+0xc2c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0320 	and.w	r3, r3, #32
 800823e:	2b00      	cmp	r3, #0
 8008240:	d009      	beq.n	8008256 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008242:	4b66      	ldr	r3, [pc, #408]	@ (80083dc <UART_SetConfig+0xc2c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	08db      	lsrs	r3, r3, #3
 8008248:	f003 0303 	and.w	r3, r3, #3
 800824c:	4a64      	ldr	r2, [pc, #400]	@ (80083e0 <UART_SetConfig+0xc30>)
 800824e:	fa22 f303 	lsr.w	r3, r2, r3
 8008252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008254:	e00f      	b.n	8008276 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008256:	4b62      	ldr	r3, [pc, #392]	@ (80083e0 <UART_SetConfig+0xc30>)
 8008258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800825a:	e00c      	b.n	8008276 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800825c:	4b61      	ldr	r3, [pc, #388]	@ (80083e4 <UART_SetConfig+0xc34>)
 800825e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008260:	e009      	b.n	8008276 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008268:	e005      	b.n	8008276 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008274:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 80ea 	beq.w	8008452 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008282:	4a55      	ldr	r2, [pc, #340]	@ (80083d8 <UART_SetConfig+0xc28>)
 8008284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008288:	461a      	mov	r2, r3
 800828a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800828c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008290:	005a      	lsls	r2, r3, #1
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	085b      	lsrs	r3, r3, #1
 8008298:	441a      	add	r2, r3
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a6:	2b0f      	cmp	r3, #15
 80082a8:	d916      	bls.n	80082d8 <UART_SetConfig+0xb28>
 80082aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082b0:	d212      	bcs.n	80082d8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	f023 030f 	bic.w	r3, r3, #15
 80082ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082be:	085b      	lsrs	r3, r3, #1
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80082ca:	4313      	orrs	r3, r2
 80082cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80082d4:	60da      	str	r2, [r3, #12]
 80082d6:	e0bc      	b.n	8008452 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80082de:	e0b8      	b.n	8008452 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80082e4:	2b20      	cmp	r3, #32
 80082e6:	dc4b      	bgt.n	8008380 <UART_SetConfig+0xbd0>
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f2c0 8087 	blt.w	80083fc <UART_SetConfig+0xc4c>
 80082ee:	2b20      	cmp	r3, #32
 80082f0:	f200 8084 	bhi.w	80083fc <UART_SetConfig+0xc4c>
 80082f4:	a201      	add	r2, pc, #4	@ (adr r2, 80082fc <UART_SetConfig+0xb4c>)
 80082f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fa:	bf00      	nop
 80082fc:	08008387 	.word	0x08008387
 8008300:	0800838f 	.word	0x0800838f
 8008304:	080083fd 	.word	0x080083fd
 8008308:	080083fd 	.word	0x080083fd
 800830c:	08008397 	.word	0x08008397
 8008310:	080083fd 	.word	0x080083fd
 8008314:	080083fd 	.word	0x080083fd
 8008318:	080083fd 	.word	0x080083fd
 800831c:	080083a7 	.word	0x080083a7
 8008320:	080083fd 	.word	0x080083fd
 8008324:	080083fd 	.word	0x080083fd
 8008328:	080083fd 	.word	0x080083fd
 800832c:	080083fd 	.word	0x080083fd
 8008330:	080083fd 	.word	0x080083fd
 8008334:	080083fd 	.word	0x080083fd
 8008338:	080083fd 	.word	0x080083fd
 800833c:	080083b7 	.word	0x080083b7
 8008340:	080083fd 	.word	0x080083fd
 8008344:	080083fd 	.word	0x080083fd
 8008348:	080083fd 	.word	0x080083fd
 800834c:	080083fd 	.word	0x080083fd
 8008350:	080083fd 	.word	0x080083fd
 8008354:	080083fd 	.word	0x080083fd
 8008358:	080083fd 	.word	0x080083fd
 800835c:	080083fd 	.word	0x080083fd
 8008360:	080083fd 	.word	0x080083fd
 8008364:	080083fd 	.word	0x080083fd
 8008368:	080083fd 	.word	0x080083fd
 800836c:	080083fd 	.word	0x080083fd
 8008370:	080083fd 	.word	0x080083fd
 8008374:	080083fd 	.word	0x080083fd
 8008378:	080083fd 	.word	0x080083fd
 800837c:	080083ef 	.word	0x080083ef
 8008380:	2b40      	cmp	r3, #64	@ 0x40
 8008382:	d037      	beq.n	80083f4 <UART_SetConfig+0xc44>
 8008384:	e03a      	b.n	80083fc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008386:	f7fc ff0d 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 800838a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800838c:	e03c      	b.n	8008408 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800838e:	f7fc ff1f 	bl	80051d0 <HAL_RCC_GetPCLK2Freq>
 8008392:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008394:	e038      	b.n	8008408 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008396:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe f8e4 	bl	8006568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083a4:	e030      	b.n	8008408 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083a6:	f107 0318 	add.w	r3, r7, #24
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fa30 	bl	8006810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083b4:	e028      	b.n	8008408 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083b6:	4b09      	ldr	r3, [pc, #36]	@ (80083dc <UART_SetConfig+0xc2c>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0320 	and.w	r3, r3, #32
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d012      	beq.n	80083e8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083c2:	4b06      	ldr	r3, [pc, #24]	@ (80083dc <UART_SetConfig+0xc2c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	08db      	lsrs	r3, r3, #3
 80083c8:	f003 0303 	and.w	r3, r3, #3
 80083cc:	4a04      	ldr	r2, [pc, #16]	@ (80083e0 <UART_SetConfig+0xc30>)
 80083ce:	fa22 f303 	lsr.w	r3, r2, r3
 80083d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083d4:	e018      	b.n	8008408 <UART_SetConfig+0xc58>
 80083d6:	bf00      	nop
 80083d8:	08008fe8 	.word	0x08008fe8
 80083dc:	58024400 	.word	0x58024400
 80083e0:	03d09000 	.word	0x03d09000
 80083e4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80083e8:	4b24      	ldr	r3, [pc, #144]	@ (800847c <UART_SetConfig+0xccc>)
 80083ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ec:	e00c      	b.n	8008408 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083ee:	4b24      	ldr	r3, [pc, #144]	@ (8008480 <UART_SetConfig+0xcd0>)
 80083f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083f2:	e009      	b.n	8008408 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083fa:	e005      	b.n	8008408 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008406:	bf00      	nop
    }

    if (pclk != 0U)
 8008408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800840a:	2b00      	cmp	r3, #0
 800840c:	d021      	beq.n	8008452 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008412:	4a1c      	ldr	r2, [pc, #112]	@ (8008484 <UART_SetConfig+0xcd4>)
 8008414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008418:	461a      	mov	r2, r3
 800841a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800841c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	085b      	lsrs	r3, r3, #1
 8008426:	441a      	add	r2, r3
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008430:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008434:	2b0f      	cmp	r3, #15
 8008436:	d909      	bls.n	800844c <UART_SetConfig+0xc9c>
 8008438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800843e:	d205      	bcs.n	800844c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008442:	b29a      	uxth	r2, r3
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	60da      	str	r2, [r3, #12]
 800844a:	e002      	b.n	8008452 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2201      	movs	r2, #1
 8008456:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2201      	movs	r2, #1
 800845e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	2200      	movs	r2, #0
 8008466:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2200      	movs	r2, #0
 800846c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800846e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008472:	4618      	mov	r0, r3
 8008474:	3748      	adds	r7, #72	@ 0x48
 8008476:	46bd      	mov	sp, r7
 8008478:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800847c:	03d09000 	.word	0x03d09000
 8008480:	003d0900 	.word	0x003d0900
 8008484:	08008fe8 	.word	0x08008fe8

08008488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00a      	beq.n	80084b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b6:	f003 0302 	and.w	r3, r3, #2
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00a      	beq.n	80084f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084fa:	f003 0308 	and.w	r3, r3, #8
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00a      	beq.n	8008518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	430a      	orrs	r2, r1
 8008516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800851c:	f003 0310 	and.w	r3, r3, #16
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00a      	beq.n	800853a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00a      	beq.n	800855c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008564:	2b00      	cmp	r3, #0
 8008566:	d01a      	beq.n	800859e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	430a      	orrs	r2, r1
 800857c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008586:	d10a      	bne.n	800859e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	430a      	orrs	r2, r1
 800859c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00a      	beq.n	80085c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	430a      	orrs	r2, r1
 80085be:	605a      	str	r2, [r3, #4]
  }
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b098      	sub	sp, #96	@ 0x60
 80085d0:	af02      	add	r7, sp, #8
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085dc:	f7f8 fd1a 	bl	8001014 <HAL_GetTick>
 80085e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0308 	and.w	r3, r3, #8
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d12f      	bne.n	8008650 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085f8:	2200      	movs	r2, #0
 80085fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f88e 	bl	8008720 <UART_WaitOnFlagUntilTimeout>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d022      	beq.n	8008650 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800861a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800861e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	461a      	mov	r2, r3
 8008626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008628:	647b      	str	r3, [r7, #68]	@ 0x44
 800862a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800862e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e6      	bne.n	800860a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2220      	movs	r2, #32
 8008640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e063      	b.n	8008718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0304 	and.w	r3, r3, #4
 800865a:	2b04      	cmp	r3, #4
 800865c:	d149      	bne.n	80086f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800865e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008666:	2200      	movs	r2, #0
 8008668:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f857 	bl	8008720 <UART_WaitOnFlagUntilTimeout>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d03c      	beq.n	80086f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008680:	e853 3f00 	ldrex	r3, [r3]
 8008684:	623b      	str	r3, [r7, #32]
   return(result);
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800868c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008696:	633b      	str	r3, [r7, #48]	@ 0x30
 8008698:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800869c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800869e:	e841 2300 	strex	r3, r2, [r1]
 80086a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1e6      	bne.n	8008678 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3308      	adds	r3, #8
 80086b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f023 0301 	bic.w	r3, r3, #1
 80086c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3308      	adds	r3, #8
 80086c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086ca:	61fa      	str	r2, [r7, #28]
 80086cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ce:	69b9      	ldr	r1, [r7, #24]
 80086d0:	69fa      	ldr	r2, [r7, #28]
 80086d2:	e841 2300 	strex	r3, r2, [r1]
 80086d6:	617b      	str	r3, [r7, #20]
   return(result);
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1e5      	bne.n	80086aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2220      	movs	r2, #32
 80086e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e012      	b.n	8008718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2220      	movs	r2, #32
 80086f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3758      	adds	r7, #88	@ 0x58
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	603b      	str	r3, [r7, #0]
 800872c:	4613      	mov	r3, r2
 800872e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008730:	e049      	b.n	80087c6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008738:	d045      	beq.n	80087c6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800873a:	f7f8 fc6b 	bl	8001014 <HAL_GetTick>
 800873e:	4602      	mov	r2, r0
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	429a      	cmp	r2, r3
 8008748:	d302      	bcc.n	8008750 <UART_WaitOnFlagUntilTimeout+0x30>
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e048      	b.n	80087e6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0304 	and.w	r3, r3, #4
 800875e:	2b00      	cmp	r3, #0
 8008760:	d031      	beq.n	80087c6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	f003 0308 	and.w	r3, r3, #8
 800876c:	2b08      	cmp	r3, #8
 800876e:	d110      	bne.n	8008792 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2208      	movs	r2, #8
 8008776:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 f921 	bl	80089c0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2208      	movs	r2, #8
 8008782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e029      	b.n	80087e6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800879c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087a0:	d111      	bne.n	80087c6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 f907 	bl	80089c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2220      	movs	r2, #32
 80087b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e00f      	b.n	80087e6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69da      	ldr	r2, [r3, #28]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	4013      	ands	r3, r2
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	bf0c      	ite	eq
 80087d6:	2301      	moveq	r3, #1
 80087d8:	2300      	movne	r3, #0
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	461a      	mov	r2, r3
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d0a6      	beq.n	8008732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b096      	sub	sp, #88	@ 0x58
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	88fa      	ldrh	r2, [r7, #6]
 8008808:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2222      	movs	r2, #34	@ 0x22
 8008818:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008822:	2b00      	cmp	r3, #0
 8008824:	d02d      	beq.n	8008882 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800882c:	4a40      	ldr	r2, [pc, #256]	@ (8008930 <UART_Start_Receive_DMA+0x140>)
 800882e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008836:	4a3f      	ldr	r2, [pc, #252]	@ (8008934 <UART_Start_Receive_DMA+0x144>)
 8008838:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008840:	4a3d      	ldr	r2, [pc, #244]	@ (8008938 <UART_Start_Receive_DMA+0x148>)
 8008842:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800884a:	2200      	movs	r2, #0
 800884c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3324      	adds	r3, #36	@ 0x24
 800885a:	4619      	mov	r1, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008860:	461a      	mov	r2, r3
 8008862:	88fb      	ldrh	r3, [r7, #6]
 8008864:	f7f9 f86e 	bl	8001944 <HAL_DMA_Start_IT>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d009      	beq.n	8008882 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2210      	movs	r2, #16
 8008872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2220      	movs	r2, #32
 800887a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e051      	b.n	8008926 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d018      	beq.n	80088bc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800889e:	657b      	str	r3, [r7, #84]	@ 0x54
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	461a      	mov	r2, r3
 80088a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088aa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80088ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088b0:	e841 2300 	strex	r3, r2, [r1]
 80088b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80088b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e6      	bne.n	800888a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3308      	adds	r3, #8
 80088c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ce:	f043 0301 	orr.w	r3, r3, #1
 80088d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3308      	adds	r3, #8
 80088da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80088dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80088de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80088ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e5      	bne.n	80088bc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3308      	adds	r3, #8
 80088f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	e853 3f00 	ldrex	r3, [r3]
 80088fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3308      	adds	r3, #8
 800890e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008910:	623a      	str	r2, [r7, #32]
 8008912:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	69f9      	ldr	r1, [r7, #28]
 8008916:	6a3a      	ldr	r2, [r7, #32]
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	61bb      	str	r3, [r7, #24]
   return(result);
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e5      	bne.n	80088f0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3758      	adds	r7, #88	@ 0x58
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	08008a8d 	.word	0x08008a8d
 8008934:	08008bb5 	.word	0x08008bb5
 8008938:	08008bf3 	.word	0x08008bf3

0800893c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800893c:	b480      	push	{r7}
 800893e:	b08f      	sub	sp, #60	@ 0x3c
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	61fb      	str	r3, [r7, #28]
   return(result);
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008958:	637b      	str	r3, [r7, #52]	@ 0x34
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	461a      	mov	r2, r3
 8008960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008962:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008964:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008968:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e6      	bne.n	8008944 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3308      	adds	r3, #8
 800897c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	e853 3f00 	ldrex	r3, [r3]
 8008984:	60bb      	str	r3, [r7, #8]
   return(result);
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800898c:	633b      	str	r3, [r7, #48]	@ 0x30
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3308      	adds	r3, #8
 8008994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008996:	61ba      	str	r2, [r7, #24]
 8008998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899a:	6979      	ldr	r1, [r7, #20]
 800899c:	69ba      	ldr	r2, [r7, #24]
 800899e:	e841 2300 	strex	r3, r2, [r1]
 80089a2:	613b      	str	r3, [r7, #16]
   return(result);
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1e5      	bne.n	8008976 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2220      	movs	r2, #32
 80089ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80089b2:	bf00      	nop
 80089b4:	373c      	adds	r7, #60	@ 0x3c
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
	...

080089c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b095      	sub	sp, #84	@ 0x54
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d0:	e853 3f00 	ldrex	r3, [r3]
 80089d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80089e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089ee:	e841 2300 	strex	r3, r2, [r1]
 80089f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1e6      	bne.n	80089c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	3308      	adds	r3, #8
 8008a00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a02:	6a3b      	ldr	r3, [r7, #32]
 8008a04:	e853 3f00 	ldrex	r3, [r3]
 8008a08:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a0a:	69fa      	ldr	r2, [r7, #28]
 8008a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8008a88 <UART_EndRxTransfer+0xc8>)
 8008a0e:	4013      	ands	r3, r2
 8008a10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3308      	adds	r3, #8
 8008a18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e5      	bne.n	80089fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d118      	bne.n	8008a68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	e853 3f00 	ldrex	r3, [r3]
 8008a42:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	f023 0310 	bic.w	r3, r3, #16
 8008a4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	461a      	mov	r2, r3
 8008a52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a54:	61bb      	str	r3, [r7, #24]
 8008a56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a58:	6979      	ldr	r1, [r7, #20]
 8008a5a:	69ba      	ldr	r2, [r7, #24]
 8008a5c:	e841 2300 	strex	r3, r2, [r1]
 8008a60:	613b      	str	r3, [r7, #16]
   return(result);
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e6      	bne.n	8008a36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008a7c:	bf00      	nop
 8008a7e:	3754      	adds	r7, #84	@ 0x54
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	effffffe 	.word	0xeffffffe

08008a8c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b09c      	sub	sp, #112	@ 0x70
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a98:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008aa2:	d071      	beq.n	8008b88 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008aa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008aca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008acc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ad0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e6      	bne.n	8008aac <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae8:	e853 3f00 	ldrex	r3, [r3]
 8008aec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af0:	f023 0301 	bic.w	r3, r3, #1
 8008af4:	667b      	str	r3, [r7, #100]	@ 0x64
 8008af6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3308      	adds	r3, #8
 8008afc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008afe:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b06:	e841 2300 	strex	r3, r2, [r1]
 8008b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1e5      	bne.n	8008ade <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3308      	adds	r3, #8
 8008b18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1c:	e853 3f00 	ldrex	r3, [r3]
 8008b20:	623b      	str	r3, [r7, #32]
   return(result);
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b28:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3308      	adds	r3, #8
 8008b30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008b32:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b3a:	e841 2300 	strex	r3, r2, [r1]
 8008b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1e5      	bne.n	8008b12 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b48:	2220      	movs	r2, #32
 8008b4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d118      	bne.n	8008b88 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	e853 3f00 	ldrex	r3, [r3]
 8008b62:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f023 0310 	bic.w	r3, r3, #16
 8008b6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	461a      	mov	r2, r3
 8008b72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b74:	61fb      	str	r3, [r7, #28]
 8008b76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b78:	69b9      	ldr	r1, [r7, #24]
 8008b7a:	69fa      	ldr	r2, [r7, #28]
 8008b7c:	e841 2300 	strex	r3, r2, [r1]
 8008b80:	617b      	str	r3, [r7, #20]
   return(result);
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1e6      	bne.n	8008b56 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d107      	bne.n	8008ba6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008ba0:	f7fe fdfa 	bl	8007798 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ba4:	e002      	b.n	8008bac <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008ba6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008ba8:	f7fe fdd8 	bl	800775c <HAL_UART_RxCpltCallback>
}
 8008bac:	bf00      	nop
 8008bae:	3770      	adds	r7, #112	@ 0x70
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d109      	bne.n	8008be4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008bd6:	085b      	lsrs	r3, r3, #1
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	4619      	mov	r1, r3
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f7fe fddb 	bl	8007798 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008be2:	e002      	b.n	8008bea <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f7fe fdc3 	bl	8007770 <HAL_UART_RxHalfCpltCallback>
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b086      	sub	sp, #24
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bfe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c06:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c1a:	2b80      	cmp	r3, #128	@ 0x80
 8008c1c:	d109      	bne.n	8008c32 <UART_DMAError+0x40>
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	2b21      	cmp	r3, #33	@ 0x21
 8008c22:	d106      	bne.n	8008c32 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008c2c:	6978      	ldr	r0, [r7, #20]
 8008c2e:	f7ff fe85 	bl	800893c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c3c:	2b40      	cmp	r3, #64	@ 0x40
 8008c3e:	d109      	bne.n	8008c54 <UART_DMAError+0x62>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b22      	cmp	r3, #34	@ 0x22
 8008c44:	d106      	bne.n	8008c54 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008c4e:	6978      	ldr	r0, [r7, #20]
 8008c50:	f7ff feb6 	bl	80089c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c5a:	f043 0210 	orr.w	r2, r3, #16
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c64:	6978      	ldr	r0, [r7, #20]
 8008c66:	f7fe fd8d 	bl	8007784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c6a:	bf00      	nop
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b084      	sub	sp, #16
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f7fe fd77 	bl	8007784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b088      	sub	sp, #32
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	e853 3f00 	ldrex	r3, [r3]
 8008cb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cba:	61fb      	str	r3, [r7, #28]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	61bb      	str	r3, [r7, #24]
 8008cc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc8:	6979      	ldr	r1, [r7, #20]
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	e841 2300 	strex	r3, r2, [r1]
 8008cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1e6      	bne.n	8008ca6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2220      	movs	r2, #32
 8008cdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7fe fd2e 	bl	8007748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cec:	bf00      	nop
 8008cee:	3720      	adds	r7, #32
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d101      	bne.n	8008d46 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d42:	2302      	movs	r3, #2
 8008d44:	e027      	b.n	8008d96 <HAL_UARTEx_DisableFifoMode+0x66>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2224      	movs	r2, #36	@ 0x24
 8008d52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f022 0201 	bic.w	r2, r2, #1
 8008d6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008d74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2220      	movs	r2, #32
 8008d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d101      	bne.n	8008dba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008db6:	2302      	movs	r3, #2
 8008db8:	e02d      	b.n	8008e16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2224      	movs	r2, #36	@ 0x24
 8008dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 0201 	bic.w	r2, r2, #1
 8008de0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	683a      	ldr	r2, [r7, #0]
 8008df2:	430a      	orrs	r2, r1
 8008df4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f850 	bl	8008e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2220      	movs	r2, #32
 8008e08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d101      	bne.n	8008e36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e32:	2302      	movs	r3, #2
 8008e34:	e02d      	b.n	8008e92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2224      	movs	r2, #36	@ 0x24
 8008e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f022 0201 	bic.w	r2, r2, #1
 8008e5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f812 	bl	8008e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2220      	movs	r2, #32
 8008e84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
	...

08008e9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d108      	bne.n	8008ebe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ebc:	e031      	b.n	8008f22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ebe:	2310      	movs	r3, #16
 8008ec0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ec2:	2310      	movs	r3, #16
 8008ec4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	0e5b      	lsrs	r3, r3, #25
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	f003 0307 	and.w	r3, r3, #7
 8008ed4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	0f5b      	lsrs	r3, r3, #29
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	f003 0307 	and.w	r3, r3, #7
 8008ee4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
 8008ee8:	7b3a      	ldrb	r2, [r7, #12]
 8008eea:	4911      	ldr	r1, [pc, #68]	@ (8008f30 <UARTEx_SetNbDataToProcess+0x94>)
 8008eec:	5c8a      	ldrb	r2, [r1, r2]
 8008eee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ef2:	7b3a      	ldrb	r2, [r7, #12]
 8008ef4:	490f      	ldr	r1, [pc, #60]	@ (8008f34 <UARTEx_SetNbDataToProcess+0x98>)
 8008ef6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	7b7a      	ldrb	r2, [r7, #13]
 8008f08:	4909      	ldr	r1, [pc, #36]	@ (8008f30 <UARTEx_SetNbDataToProcess+0x94>)
 8008f0a:	5c8a      	ldrb	r2, [r1, r2]
 8008f0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f10:	7b7a      	ldrb	r2, [r7, #13]
 8008f12:	4908      	ldr	r1, [pc, #32]	@ (8008f34 <UARTEx_SetNbDataToProcess+0x98>)
 8008f14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f16:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008f22:	bf00      	nop
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	08009000 	.word	0x08009000
 8008f34:	08009008 	.word	0x08009008

08008f38 <memset>:
 8008f38:	4402      	add	r2, r0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d100      	bne.n	8008f42 <memset+0xa>
 8008f40:	4770      	bx	lr
 8008f42:	f803 1b01 	strb.w	r1, [r3], #1
 8008f46:	e7f9      	b.n	8008f3c <memset+0x4>

08008f48 <strcat>:
 8008f48:	b510      	push	{r4, lr}
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	7814      	ldrb	r4, [r2, #0]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	3201      	adds	r2, #1
 8008f52:	2c00      	cmp	r4, #0
 8008f54:	d1fa      	bne.n	8008f4c <strcat+0x4>
 8008f56:	3b01      	subs	r3, #1
 8008f58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f60:	2a00      	cmp	r2, #0
 8008f62:	d1f9      	bne.n	8008f58 <strcat+0x10>
 8008f64:	bd10      	pop	{r4, pc}
	...

08008f68 <__libc_init_array>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8008fa0 <__libc_init_array+0x38>)
 8008f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8008fa4 <__libc_init_array+0x3c>)
 8008f6e:	1b64      	subs	r4, r4, r5
 8008f70:	10a4      	asrs	r4, r4, #2
 8008f72:	2600      	movs	r6, #0
 8008f74:	42a6      	cmp	r6, r4
 8008f76:	d109      	bne.n	8008f8c <__libc_init_array+0x24>
 8008f78:	4d0b      	ldr	r5, [pc, #44]	@ (8008fa8 <__libc_init_array+0x40>)
 8008f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8008fac <__libc_init_array+0x44>)
 8008f7c:	f000 f818 	bl	8008fb0 <_init>
 8008f80:	1b64      	subs	r4, r4, r5
 8008f82:	10a4      	asrs	r4, r4, #2
 8008f84:	2600      	movs	r6, #0
 8008f86:	42a6      	cmp	r6, r4
 8008f88:	d105      	bne.n	8008f96 <__libc_init_array+0x2e>
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
 8008f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f90:	4798      	blx	r3
 8008f92:	3601      	adds	r6, #1
 8008f94:	e7ee      	b.n	8008f74 <__libc_init_array+0xc>
 8008f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f9a:	4798      	blx	r3
 8008f9c:	3601      	adds	r6, #1
 8008f9e:	e7f2      	b.n	8008f86 <__libc_init_array+0x1e>
 8008fa0:	08009018 	.word	0x08009018
 8008fa4:	08009018 	.word	0x08009018
 8008fa8:	08009018 	.word	0x08009018
 8008fac:	0800901c 	.word	0x0800901c

08008fb0 <_init>:
 8008fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb2:	bf00      	nop
 8008fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb6:	bc08      	pop	{r3}
 8008fb8:	469e      	mov	lr, r3
 8008fba:	4770      	bx	lr

08008fbc <_fini>:
 8008fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fbe:	bf00      	nop
 8008fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc2:	bc08      	pop	{r3}
 8008fc4:	469e      	mov	lr, r3
 8008fc6:	4770      	bx	lr
